
rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc40  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800fe28  0800fe28  0001fe28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103e0  080103e0  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080103e0  080103e0  000203e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103e8  080103e8  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103e8  080103e8  000203e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103ec  080103ec  000203ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080103f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043e4  200001e8  080105d4  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200045cc  080105d4  000345cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015faa  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a9  00000000  00000000  000461fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  000494a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001089  00000000  00000000  0004a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2bd  00000000  00000000  0004ba21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198ce  00000000  00000000  00068cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a52f7  00000000  00000000  000825ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070c4  00000000  00000000  001278a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800fe10 	.word	0x0800fe10

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800fe10 	.word	0x0800fe10

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2uiz>:
 80011e8:	0042      	lsls	r2, r0, #1
 80011ea:	d20e      	bcs.n	800120a <__aeabi_f2uiz+0x22>
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30b      	bcc.n	800120a <__aeabi_f2uiz+0x22>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d409      	bmi.n	8001210 <__aeabi_f2uiz+0x28>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2uiz+0x32>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d102      	bne.n	8001220 <__aeabi_f2uiz+0x38>
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	4770      	bx	lr
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <__aeabi_uldivmod>:
 8001228:	b953      	cbnz	r3, 8001240 <__aeabi_uldivmod+0x18>
 800122a:	b94a      	cbnz	r2, 8001240 <__aeabi_uldivmod+0x18>
 800122c:	2900      	cmp	r1, #0
 800122e:	bf08      	it	eq
 8001230:	2800      	cmpeq	r0, #0
 8001232:	bf1c      	itt	ne
 8001234:	f04f 31ff 	movne.w	r1, #4294967295
 8001238:	f04f 30ff 	movne.w	r0, #4294967295
 800123c:	f000 b9ca 	b.w	80015d4 <__aeabi_idiv0>
 8001240:	f1ad 0c08 	sub.w	ip, sp, #8
 8001244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001248:	f000 f85e 	bl	8001308 <__udivmoddi4>
 800124c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001254:	b004      	add	sp, #16
 8001256:	4770      	bx	lr

08001258 <__aeabi_d2lz>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4605      	mov	r5, r0
 800125c:	460c      	mov	r4, r1
 800125e:	2200      	movs	r2, #0
 8001260:	2300      	movs	r3, #0
 8001262:	4628      	mov	r0, r5
 8001264:	4621      	mov	r1, r4
 8001266:	f7ff fc15 	bl	8000a94 <__aeabi_dcmplt>
 800126a:	b928      	cbnz	r0, 8001278 <__aeabi_d2lz+0x20>
 800126c:	4628      	mov	r0, r5
 800126e:	4621      	mov	r1, r4
 8001270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001274:	f000 b82a 	b.w	80012cc <__aeabi_d2ulz>
 8001278:	4628      	mov	r0, r5
 800127a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800127e:	f000 f825 	bl	80012cc <__aeabi_d2ulz>
 8001282:	4240      	negs	r0, r0
 8001284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001288:	bd38      	pop	{r3, r4, r5, pc}
 800128a:	bf00      	nop

0800128c <__aeabi_f2ulz>:
 800128c:	b5d0      	push	{r4, r6, r7, lr}
 800128e:	f7ff f937 	bl	8000500 <__aeabi_f2d>
 8001292:	2200      	movs	r2, #0
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <__aeabi_f2ulz+0x38>)
 8001296:	4606      	mov	r6, r0
 8001298:	460f      	mov	r7, r1
 800129a:	f7ff f989 	bl	80005b0 <__aeabi_dmul>
 800129e:	f7ff fc5f 	bl	8000b60 <__aeabi_d2uiz>
 80012a2:	4604      	mov	r4, r0
 80012a4:	f7ff f90a 	bl	80004bc <__aeabi_ui2d>
 80012a8:	2200      	movs	r2, #0
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <__aeabi_f2ulz+0x3c>)
 80012ac:	f7ff f980 	bl	80005b0 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4630      	mov	r0, r6
 80012b6:	4639      	mov	r1, r7
 80012b8:	f7fe ffc2 	bl	8000240 <__aeabi_dsub>
 80012bc:	f7ff fc50 	bl	8000b60 <__aeabi_d2uiz>
 80012c0:	4621      	mov	r1, r4
 80012c2:	bdd0      	pop	{r4, r6, r7, pc}
 80012c4:	3df00000 	.word	0x3df00000
 80012c8:	41f00000 	.word	0x41f00000

080012cc <__aeabi_d2ulz>:
 80012cc:	b5d0      	push	{r4, r6, r7, lr}
 80012ce:	2200      	movs	r2, #0
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <__aeabi_d2ulz+0x34>)
 80012d2:	4606      	mov	r6, r0
 80012d4:	460f      	mov	r7, r1
 80012d6:	f7ff f96b 	bl	80005b0 <__aeabi_dmul>
 80012da:	f7ff fc41 	bl	8000b60 <__aeabi_d2uiz>
 80012de:	4604      	mov	r4, r0
 80012e0:	f7ff f8ec 	bl	80004bc <__aeabi_ui2d>
 80012e4:	2200      	movs	r2, #0
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <__aeabi_d2ulz+0x38>)
 80012e8:	f7ff f962 	bl	80005b0 <__aeabi_dmul>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4630      	mov	r0, r6
 80012f2:	4639      	mov	r1, r7
 80012f4:	f7fe ffa4 	bl	8000240 <__aeabi_dsub>
 80012f8:	f7ff fc32 	bl	8000b60 <__aeabi_d2uiz>
 80012fc:	4621      	mov	r1, r4
 80012fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001300:	3df00000 	.word	0x3df00000
 8001304:	41f00000 	.word	0x41f00000

08001308 <__udivmoddi4>:
 8001308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800130c:	9e08      	ldr	r6, [sp, #32]
 800130e:	460d      	mov	r5, r1
 8001310:	4604      	mov	r4, r0
 8001312:	468e      	mov	lr, r1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d14c      	bne.n	80013b2 <__udivmoddi4+0xaa>
 8001318:	428a      	cmp	r2, r1
 800131a:	4694      	mov	ip, r2
 800131c:	d967      	bls.n	80013ee <__udivmoddi4+0xe6>
 800131e:	fab2 f382 	clz	r3, r2
 8001322:	b153      	cbz	r3, 800133a <__udivmoddi4+0x32>
 8001324:	fa02 fc03 	lsl.w	ip, r2, r3
 8001328:	f1c3 0220 	rsb	r2, r3, #32
 800132c:	fa01 fe03 	lsl.w	lr, r1, r3
 8001330:	fa20 f202 	lsr.w	r2, r0, r2
 8001334:	ea42 0e0e 	orr.w	lr, r2, lr
 8001338:	409c      	lsls	r4, r3
 800133a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800133e:	fbbe f1f7 	udiv	r1, lr, r7
 8001342:	fa1f f58c 	uxth.w	r5, ip
 8001346:	fb07 ee11 	mls	lr, r7, r1, lr
 800134a:	fb01 f005 	mul.w	r0, r1, r5
 800134e:	0c22      	lsrs	r2, r4, #16
 8001350:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001354:	4290      	cmp	r0, r2
 8001356:	d90a      	bls.n	800136e <__udivmoddi4+0x66>
 8001358:	eb1c 0202 	adds.w	r2, ip, r2
 800135c:	f101 3eff 	add.w	lr, r1, #4294967295
 8001360:	f080 8119 	bcs.w	8001596 <__udivmoddi4+0x28e>
 8001364:	4290      	cmp	r0, r2
 8001366:	f240 8116 	bls.w	8001596 <__udivmoddi4+0x28e>
 800136a:	3902      	subs	r1, #2
 800136c:	4462      	add	r2, ip
 800136e:	1a12      	subs	r2, r2, r0
 8001370:	fbb2 f0f7 	udiv	r0, r2, r7
 8001374:	fb07 2210 	mls	r2, r7, r0, r2
 8001378:	fb00 f505 	mul.w	r5, r0, r5
 800137c:	b2a4      	uxth	r4, r4
 800137e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001382:	42a5      	cmp	r5, r4
 8001384:	d90a      	bls.n	800139c <__udivmoddi4+0x94>
 8001386:	eb1c 0404 	adds.w	r4, ip, r4
 800138a:	f100 32ff 	add.w	r2, r0, #4294967295
 800138e:	f080 8104 	bcs.w	800159a <__udivmoddi4+0x292>
 8001392:	42a5      	cmp	r5, r4
 8001394:	f240 8101 	bls.w	800159a <__udivmoddi4+0x292>
 8001398:	4464      	add	r4, ip
 800139a:	3802      	subs	r0, #2
 800139c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80013a0:	2100      	movs	r1, #0
 80013a2:	1b64      	subs	r4, r4, r5
 80013a4:	b11e      	cbz	r6, 80013ae <__udivmoddi4+0xa6>
 80013a6:	40dc      	lsrs	r4, r3
 80013a8:	2300      	movs	r3, #0
 80013aa:	e9c6 4300 	strd	r4, r3, [r6]
 80013ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b2:	428b      	cmp	r3, r1
 80013b4:	d908      	bls.n	80013c8 <__udivmoddi4+0xc0>
 80013b6:	2e00      	cmp	r6, #0
 80013b8:	f000 80ea 	beq.w	8001590 <__udivmoddi4+0x288>
 80013bc:	2100      	movs	r1, #0
 80013be:	e9c6 0500 	strd	r0, r5, [r6]
 80013c2:	4608      	mov	r0, r1
 80013c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c8:	fab3 f183 	clz	r1, r3
 80013cc:	2900      	cmp	r1, #0
 80013ce:	d148      	bne.n	8001462 <__udivmoddi4+0x15a>
 80013d0:	42ab      	cmp	r3, r5
 80013d2:	d302      	bcc.n	80013da <__udivmoddi4+0xd2>
 80013d4:	4282      	cmp	r2, r0
 80013d6:	f200 80f8 	bhi.w	80015ca <__udivmoddi4+0x2c2>
 80013da:	1a84      	subs	r4, r0, r2
 80013dc:	eb65 0203 	sbc.w	r2, r5, r3
 80013e0:	2001      	movs	r0, #1
 80013e2:	4696      	mov	lr, r2
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	d0e2      	beq.n	80013ae <__udivmoddi4+0xa6>
 80013e8:	e9c6 4e00 	strd	r4, lr, [r6]
 80013ec:	e7df      	b.n	80013ae <__udivmoddi4+0xa6>
 80013ee:	b902      	cbnz	r2, 80013f2 <__udivmoddi4+0xea>
 80013f0:	deff      	udf	#255	; 0xff
 80013f2:	fab2 f382 	clz	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 808e 	bne.w	8001518 <__udivmoddi4+0x210>
 80013fc:	1a88      	subs	r0, r1, r2
 80013fe:	2101      	movs	r1, #1
 8001400:	0c17      	lsrs	r7, r2, #16
 8001402:	fa1f fe82 	uxth.w	lr, r2
 8001406:	fbb0 f5f7 	udiv	r5, r0, r7
 800140a:	fb07 0015 	mls	r0, r7, r5, r0
 800140e:	0c22      	lsrs	r2, r4, #16
 8001410:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001414:	fb0e f005 	mul.w	r0, lr, r5
 8001418:	4290      	cmp	r0, r2
 800141a:	d908      	bls.n	800142e <__udivmoddi4+0x126>
 800141c:	eb1c 0202 	adds.w	r2, ip, r2
 8001420:	f105 38ff 	add.w	r8, r5, #4294967295
 8001424:	d202      	bcs.n	800142c <__udivmoddi4+0x124>
 8001426:	4290      	cmp	r0, r2
 8001428:	f200 80cc 	bhi.w	80015c4 <__udivmoddi4+0x2bc>
 800142c:	4645      	mov	r5, r8
 800142e:	1a12      	subs	r2, r2, r0
 8001430:	fbb2 f0f7 	udiv	r0, r2, r7
 8001434:	fb07 2210 	mls	r2, r7, r0, r2
 8001438:	fb0e fe00 	mul.w	lr, lr, r0
 800143c:	b2a4      	uxth	r4, r4
 800143e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001442:	45a6      	cmp	lr, r4
 8001444:	d908      	bls.n	8001458 <__udivmoddi4+0x150>
 8001446:	eb1c 0404 	adds.w	r4, ip, r4
 800144a:	f100 32ff 	add.w	r2, r0, #4294967295
 800144e:	d202      	bcs.n	8001456 <__udivmoddi4+0x14e>
 8001450:	45a6      	cmp	lr, r4
 8001452:	f200 80b4 	bhi.w	80015be <__udivmoddi4+0x2b6>
 8001456:	4610      	mov	r0, r2
 8001458:	eba4 040e 	sub.w	r4, r4, lr
 800145c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001460:	e7a0      	b.n	80013a4 <__udivmoddi4+0x9c>
 8001462:	f1c1 0720 	rsb	r7, r1, #32
 8001466:	408b      	lsls	r3, r1
 8001468:	fa22 fc07 	lsr.w	ip, r2, r7
 800146c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001470:	fa25 fa07 	lsr.w	sl, r5, r7
 8001474:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001478:	fbba f8f9 	udiv	r8, sl, r9
 800147c:	408d      	lsls	r5, r1
 800147e:	fa20 f307 	lsr.w	r3, r0, r7
 8001482:	fb09 aa18 	mls	sl, r9, r8, sl
 8001486:	fa1f fe8c 	uxth.w	lr, ip
 800148a:	432b      	orrs	r3, r5
 800148c:	fa00 f501 	lsl.w	r5, r0, r1
 8001490:	fb08 f00e 	mul.w	r0, r8, lr
 8001494:	0c1c      	lsrs	r4, r3, #16
 8001496:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800149a:	42a0      	cmp	r0, r4
 800149c:	fa02 f201 	lsl.w	r2, r2, r1
 80014a0:	d90b      	bls.n	80014ba <__udivmoddi4+0x1b2>
 80014a2:	eb1c 0404 	adds.w	r4, ip, r4
 80014a6:	f108 3aff 	add.w	sl, r8, #4294967295
 80014aa:	f080 8086 	bcs.w	80015ba <__udivmoddi4+0x2b2>
 80014ae:	42a0      	cmp	r0, r4
 80014b0:	f240 8083 	bls.w	80015ba <__udivmoddi4+0x2b2>
 80014b4:	f1a8 0802 	sub.w	r8, r8, #2
 80014b8:	4464      	add	r4, ip
 80014ba:	1a24      	subs	r4, r4, r0
 80014bc:	b298      	uxth	r0, r3
 80014be:	fbb4 f3f9 	udiv	r3, r4, r9
 80014c2:	fb09 4413 	mls	r4, r9, r3, r4
 80014c6:	fb03 fe0e 	mul.w	lr, r3, lr
 80014ca:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80014ce:	45a6      	cmp	lr, r4
 80014d0:	d908      	bls.n	80014e4 <__udivmoddi4+0x1dc>
 80014d2:	eb1c 0404 	adds.w	r4, ip, r4
 80014d6:	f103 30ff 	add.w	r0, r3, #4294967295
 80014da:	d26a      	bcs.n	80015b2 <__udivmoddi4+0x2aa>
 80014dc:	45a6      	cmp	lr, r4
 80014de:	d968      	bls.n	80015b2 <__udivmoddi4+0x2aa>
 80014e0:	3b02      	subs	r3, #2
 80014e2:	4464      	add	r4, ip
 80014e4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80014e8:	fba0 9302 	umull	r9, r3, r0, r2
 80014ec:	eba4 040e 	sub.w	r4, r4, lr
 80014f0:	429c      	cmp	r4, r3
 80014f2:	46c8      	mov	r8, r9
 80014f4:	469e      	mov	lr, r3
 80014f6:	d354      	bcc.n	80015a2 <__udivmoddi4+0x29a>
 80014f8:	d051      	beq.n	800159e <__udivmoddi4+0x296>
 80014fa:	2e00      	cmp	r6, #0
 80014fc:	d067      	beq.n	80015ce <__udivmoddi4+0x2c6>
 80014fe:	ebb5 0308 	subs.w	r3, r5, r8
 8001502:	eb64 040e 	sbc.w	r4, r4, lr
 8001506:	40cb      	lsrs	r3, r1
 8001508:	fa04 f707 	lsl.w	r7, r4, r7
 800150c:	431f      	orrs	r7, r3
 800150e:	40cc      	lsrs	r4, r1
 8001510:	e9c6 7400 	strd	r7, r4, [r6]
 8001514:	2100      	movs	r1, #0
 8001516:	e74a      	b.n	80013ae <__udivmoddi4+0xa6>
 8001518:	fa02 fc03 	lsl.w	ip, r2, r3
 800151c:	f1c3 0020 	rsb	r0, r3, #32
 8001520:	40c1      	lsrs	r1, r0
 8001522:	409d      	lsls	r5, r3
 8001524:	fa24 f000 	lsr.w	r0, r4, r0
 8001528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800152c:	4328      	orrs	r0, r5
 800152e:	fbb1 f5f7 	udiv	r5, r1, r7
 8001532:	fb07 1115 	mls	r1, r7, r5, r1
 8001536:	fa1f fe8c 	uxth.w	lr, ip
 800153a:	0c02      	lsrs	r2, r0, #16
 800153c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001540:	fb05 f10e 	mul.w	r1, r5, lr
 8001544:	4291      	cmp	r1, r2
 8001546:	fa04 f403 	lsl.w	r4, r4, r3
 800154a:	d908      	bls.n	800155e <__udivmoddi4+0x256>
 800154c:	eb1c 0202 	adds.w	r2, ip, r2
 8001550:	f105 38ff 	add.w	r8, r5, #4294967295
 8001554:	d22f      	bcs.n	80015b6 <__udivmoddi4+0x2ae>
 8001556:	4291      	cmp	r1, r2
 8001558:	d92d      	bls.n	80015b6 <__udivmoddi4+0x2ae>
 800155a:	3d02      	subs	r5, #2
 800155c:	4462      	add	r2, ip
 800155e:	1a52      	subs	r2, r2, r1
 8001560:	fbb2 f1f7 	udiv	r1, r2, r7
 8001564:	fb07 2211 	mls	r2, r7, r1, r2
 8001568:	b280      	uxth	r0, r0
 800156a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800156e:	fb01 f20e 	mul.w	r2, r1, lr
 8001572:	4282      	cmp	r2, r0
 8001574:	d908      	bls.n	8001588 <__udivmoddi4+0x280>
 8001576:	eb1c 0000 	adds.w	r0, ip, r0
 800157a:	f101 38ff 	add.w	r8, r1, #4294967295
 800157e:	d216      	bcs.n	80015ae <__udivmoddi4+0x2a6>
 8001580:	4282      	cmp	r2, r0
 8001582:	d914      	bls.n	80015ae <__udivmoddi4+0x2a6>
 8001584:	3902      	subs	r1, #2
 8001586:	4460      	add	r0, ip
 8001588:	1a80      	subs	r0, r0, r2
 800158a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800158e:	e73a      	b.n	8001406 <__udivmoddi4+0xfe>
 8001590:	4631      	mov	r1, r6
 8001592:	4630      	mov	r0, r6
 8001594:	e70b      	b.n	80013ae <__udivmoddi4+0xa6>
 8001596:	4671      	mov	r1, lr
 8001598:	e6e9      	b.n	800136e <__udivmoddi4+0x66>
 800159a:	4610      	mov	r0, r2
 800159c:	e6fe      	b.n	800139c <__udivmoddi4+0x94>
 800159e:	454d      	cmp	r5, r9
 80015a0:	d2ab      	bcs.n	80014fa <__udivmoddi4+0x1f2>
 80015a2:	ebb9 0802 	subs.w	r8, r9, r2
 80015a6:	eb63 0e0c 	sbc.w	lr, r3, ip
 80015aa:	3801      	subs	r0, #1
 80015ac:	e7a5      	b.n	80014fa <__udivmoddi4+0x1f2>
 80015ae:	4641      	mov	r1, r8
 80015b0:	e7ea      	b.n	8001588 <__udivmoddi4+0x280>
 80015b2:	4603      	mov	r3, r0
 80015b4:	e796      	b.n	80014e4 <__udivmoddi4+0x1dc>
 80015b6:	4645      	mov	r5, r8
 80015b8:	e7d1      	b.n	800155e <__udivmoddi4+0x256>
 80015ba:	46d0      	mov	r8, sl
 80015bc:	e77d      	b.n	80014ba <__udivmoddi4+0x1b2>
 80015be:	4464      	add	r4, ip
 80015c0:	3802      	subs	r0, #2
 80015c2:	e749      	b.n	8001458 <__udivmoddi4+0x150>
 80015c4:	3d02      	subs	r5, #2
 80015c6:	4462      	add	r2, ip
 80015c8:	e731      	b.n	800142e <__udivmoddi4+0x126>
 80015ca:	4608      	mov	r0, r1
 80015cc:	e70a      	b.n	80013e4 <__udivmoddi4+0xdc>
 80015ce:	4631      	mov	r1, r6
 80015d0:	e6ed      	b.n	80013ae <__udivmoddi4+0xa6>
 80015d2:	bf00      	nop

080015d4 <__aeabi_idiv0>:
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <timer_Right>:
float current_distance;
double initial;

uint16_t mean = 1260;
float mean_float = 1260;
void timer_Right(uint8_t timer){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2110      	movs	r1, #16
 80015e6:	4819      	ldr	r0, [pc, #100]	; (800164c <timer_Right+0x74>)
 80015e8:	f006 fd3f 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <timer_Right+0x74>)
 80015f4:	f006 fd39 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2110      	movs	r1, #16
 80015fc:	4814      	ldr	r0, [pc, #80]	; (8001650 <timer_Right+0x78>)
 80015fe:	f006 fd34 	bl	800806a <HAL_GPIO_WritePin>
	timerRight += timer;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <timer_Right+0x7c>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <timer_Right+0x7c>)
 8001610:	801a      	strh	r2, [r3, #0]
    if (timerRight > MAX_TIMER_RIGHT_VALUE) {
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <timer_Right+0x7c>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	f241 029a 	movw	r2, #4250	; 0x109a
 800161a:	4293      	cmp	r3, r2
 800161c:	d903      	bls.n	8001626 <timer_Right+0x4e>
    	timerRight = MAX_TIMER_RIGHT_VALUE;
 800161e:	f241 029a 	movw	r2, #4250	; 0x109a
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <timer_Right+0x7c>)
 8001624:	801a      	strh	r2, [r3, #0]
    }
    if (timerLeft > MIN_TIMER_LEFT_VALUE) {
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <timer_Right+0x80>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	f640 723c 	movw	r2, #3900	; 0xf3c
 800162e:	4293      	cmp	r3, r2
 8001630:	d907      	bls.n	8001642 <timer_Right+0x6a>
    	timerLeft -= timer;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <timer_Right+0x80>)
 8001634:	881a      	ldrh	r2, [r3, #0]
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	b29b      	uxth	r3, r3
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <timer_Right+0x80>)
 8001640:	801a      	strh	r2, [r3, #0]
    }
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010c00 	.word	0x40010c00
 8001650:	40010800 	.word	0x40010800
 8001654:	20000002 	.word	0x20000002
 8001658:	20000000 	.word	0x20000000

0800165c <timer_Left>:
void timer_Left(uint8_t timer){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, SET);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <timer_Left+0x74>)
 800166e:	f006 fcfc 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2110      	movs	r1, #16
 8001676:	4816      	ldr	r0, [pc, #88]	; (80016d0 <timer_Left+0x74>)
 8001678:	f006 fcf7 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2110      	movs	r1, #16
 8001680:	4814      	ldr	r0, [pc, #80]	; (80016d4 <timer_Left+0x78>)
 8001682:	f006 fcf2 	bl	800806a <HAL_GPIO_WritePin>
	timerLeft += timer;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <timer_Left+0x7c>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <timer_Left+0x7c>)
 8001694:	801a      	strh	r2, [r3, #0]
    if (timerLeft > MAX_TIMER_LEFT_VALUE) {
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <timer_Left+0x7c>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	f241 0204 	movw	r2, #4100	; 0x1004
 800169e:	4293      	cmp	r3, r2
 80016a0:	d903      	bls.n	80016aa <timer_Left+0x4e>
    	timerLeft = MAX_TIMER_LEFT_VALUE;
 80016a2:	f241 0204 	movw	r2, #4100	; 0x1004
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <timer_Left+0x7c>)
 80016a8:	801a      	strh	r2, [r3, #0]
    }
    if (timerRight > MIN_TIMER_RIGHT_VALUE) {
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <timer_Left+0x80>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	f640 72d2 	movw	r2, #4050	; 0xfd2
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d907      	bls.n	80016c6 <timer_Left+0x6a>
    	timerRight -= timer;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <timer_Left+0x80>)
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <timer_Left+0x80>)
 80016c4:	801a      	strh	r2, [r3, #0]
    }
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40010c00 	.word	0x40010c00
 80016d4:	40010800 	.word	0x40010800
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000002 	.word	0x20000002

080016e0 <forwardGPIO>:

void forwardGPIO(){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2120      	movs	r1, #32
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <forwardGPIO+0x40>)
 80016ea:	f006 fcbe 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2101      	movs	r1, #1
 80016f2:	480c      	ldr	r0, [pc, #48]	; (8001724 <forwardGPIO+0x44>)
 80016f4:	f006 fcb9 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2102      	movs	r1, #2
 80016fc:	4809      	ldr	r0, [pc, #36]	; (8001724 <forwardGPIO+0x44>)
 80016fe:	f006 fcb4 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <forwardGPIO+0x44>)
 800170a:	f006 fcae 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <forwardGPIO+0x44>)
 8001716:	f006 fca8 	bl	800806a <HAL_GPIO_WritePin>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40010800 	.word	0x40010800
 8001724:	40010c00 	.word	0x40010c00

08001728 <API_moveForward>:
        sum += encoder_values[i];
    }
    return sum / BLOCK_COUNT;
}

void API_moveForward(){
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b08a      	sub	sp, #40	; 0x28
 800172e:	af00      	add	r7, sp, #0
	forwardGPIO();
 8001730:	f7ff ffd6 	bl	80016e0 <forwardGPIO>
	bno055_euler_t lastYaw = CurrentYaw();
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fd59 	bl	80041f0 <CurrentYaw>
	bno055_euler_t currentYaw;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeft); //left
 800173e:	4bac      	ldr	r3, [pc, #688]	; (80019f0 <API_moveForward+0x2c8>)
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	4bac      	ldr	r3, [pc, #688]	; (80019f4 <API_moveForward+0x2cc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRight); // right
 8001748:	4bab      	ldr	r3, [pc, #684]	; (80019f8 <API_moveForward+0x2d0>)
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	4bab      	ldr	r3, [pc, #684]	; (80019fc <API_moveForward+0x2d4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40

	rightWheel = 0;
 8001752:	4bab      	ldr	r3, [pc, #684]	; (8001a00 <API_moveForward+0x2d8>)
 8001754:	2200      	movs	r2, #0
 8001756:	801a      	strh	r2, [r3, #0]
	leftWheel = 0;
 8001758:	4baa      	ldr	r3, [pc, #680]	; (8001a04 <API_moveForward+0x2dc>)
 800175a:	2200      	movs	r2, #0
 800175c:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t flag_mean = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
//	counter = 1;
//	mean = countTim3;
	lastpositionLeft = countTim3;
 800176a:	4ba7      	ldr	r3, [pc, #668]	; (8001a08 <API_moveForward+0x2e0>)
 800176c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001770:	4ba6      	ldr	r3, [pc, #664]	; (8001a0c <API_moveForward+0x2e4>)
 8001772:	801a      	strh	r2, [r3, #0]
	lastpositionRight = countTim2;
 8001774:	4ba6      	ldr	r3, [pc, #664]	; (8001a10 <API_moveForward+0x2e8>)
 8001776:	f9b3 2000 	ldrsh.w	r2, [r3]
 800177a:	4ba6      	ldr	r3, [pc, #664]	; (8001a14 <API_moveForward+0x2ec>)
 800177c:	801a      	strh	r2, [r3, #0]
	initial = distanceStraight();
 800177e:	f002 fdc7 	bl	8004310 <distanceStraight>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	49a4      	ldr	r1, [pc, #656]	; (8001a18 <API_moveForward+0x2f0>)
 8001788:	e9c1 2300 	strd	r2, r3, [r1]
	if(initial > 20 && initial < 30){
 800178c:	4ba2      	ldr	r3, [pc, #648]	; (8001a18 <API_moveForward+0x2f0>)
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4ba1      	ldr	r3, [pc, #644]	; (8001a1c <API_moveForward+0x2f4>)
 8001798:	f7ff f99a 	bl	8000ad0 <__aeabi_dcmpgt>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <API_moveForward+0x96>
 80017a2:	4b9d      	ldr	r3, [pc, #628]	; (8001a18 <API_moveForward+0x2f0>)
 80017a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b9c      	ldr	r3, [pc, #624]	; (8001a20 <API_moveForward+0x2f8>)
 80017ae:	f7ff f971 	bl	8000a94 <__aeabi_dcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <API_moveForward+0x96>
		flag_mean = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	}
	while(1){
		left = distanceLeft();
 80017be:	f002 fd2f 	bl	8004220 <distanceLeft>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4997      	ldr	r1, [pc, #604]	; (8001a24 <API_moveForward+0x2fc>)
 80017c8:	e9c1 2300 	strd	r2, r3, [r1]
		right = distanceRight();
 80017cc:	f002 fe18 	bl	8004400 <distanceRight>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4994      	ldr	r1, [pc, #592]	; (8001a28 <API_moveForward+0x300>)
 80017d6:	e9c1 2300 	strd	r2, r3, [r1]
		straight = distanceStraight();
 80017da:	f002 fd99 	bl	8004310 <distanceStraight>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4992      	ldr	r1, [pc, #584]	; (8001a2c <API_moveForward+0x304>)
 80017e4:	e9c1 2300 	strd	r2, r3, [r1]

		if(straight < 5.5) {
 80017e8:	4b90      	ldr	r3, [pc, #576]	; (8001a2c <API_moveForward+0x304>)
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b8f      	ldr	r3, [pc, #572]	; (8001a30 <API_moveForward+0x308>)
 80017f4:	f7ff f94e 	bl	8000a94 <__aeabi_dcmplt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 81bf 	bne.w	8001b7e <API_moveForward+0x456>
			break;
		}

		else if(lastpositionRight - countTim2 > mean && lastpositionLeft - countTim3 > mean ){
 8001800:	4b84      	ldr	r3, [pc, #528]	; (8001a14 <API_moveForward+0x2ec>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	461a      	mov	r2, r3
 8001808:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <API_moveForward+0x2e8>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	4a88      	ldr	r2, [pc, #544]	; (8001a34 <API_moveForward+0x30c>)
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	4293      	cmp	r3, r2
 8001816:	dd23      	ble.n	8001860 <API_moveForward+0x138>
 8001818:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <API_moveForward+0x2e4>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	461a      	mov	r2, r3
 8001820:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <API_moveForward+0x2e0>)
 8001822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	4a82      	ldr	r2, [pc, #520]	; (8001a34 <API_moveForward+0x30c>)
 800182a:	8812      	ldrh	r2, [r2, #0]
 800182c:	4293      	cmp	r3, r2
 800182e:	dd17      	ble.n	8001860 <API_moveForward+0x138>
			if(straight < 5.5 || straight > 12){
 8001830:	4b7e      	ldr	r3, [pc, #504]	; (8001a2c <API_moveForward+0x304>)
 8001832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <API_moveForward+0x308>)
 800183c:	f7ff f92a 	bl	8000a94 <__aeabi_dcmplt>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 819c 	bne.w	8001b80 <API_moveForward+0x458>
 8001848:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <API_moveForward+0x304>)
 800184a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <API_moveForward+0x310>)
 8001854:	f7ff f93c 	bl	8000ad0 <__aeabi_dcmpgt>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8190 	bne.w	8001b80 <API_moveForward+0x458>
//				break;
//			}
//		}


		if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0){
 8001860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001864:	4875      	ldr	r0, [pc, #468]	; (8001a3c <API_moveForward+0x314>)
 8001866:	f006 fbe9 	bl	800803c <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d106      	bne.n	800187e <API_moveForward+0x156>
			timer_Left(30);
 8001870:	201e      	movs	r0, #30
 8001872:	f7ff fef3 	bl	800165c <timer_Left>
			flag = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800187c:	e16c      	b.n	8001b58 <API_moveForward+0x430>

		}
		else if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0){
 800187e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001882:	486e      	ldr	r0, [pc, #440]	; (8001a3c <API_moveForward+0x314>)
 8001884:	f006 fbda 	bl	800803c <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <API_moveForward+0x174>
			timer_Right(30);
 800188e:	201e      	movs	r0, #30
 8001890:	f7ff fea2 	bl	80015d8 <timer_Right>
			flag = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800189a:	e15d      	b.n	8001b58 <API_moveForward+0x430>
		}


		else if(left < 5){
 800189c:	4b61      	ldr	r3, [pc, #388]	; (8001a24 <API_moveForward+0x2fc>)
 800189e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <API_moveForward+0x318>)
 80018a8:	f7ff f8f4 	bl	8000a94 <__aeabi_dcmplt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <API_moveForward+0x198>
			timer_Left(10);
 80018b2:	200a      	movs	r0, #10
 80018b4:	f7ff fed2 	bl	800165c <timer_Left>
			flag = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018be:	e14b      	b.n	8001b58 <API_moveForward+0x430>
		}
		else if( right < 5){
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <API_moveForward+0x300>)
 80018c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <API_moveForward+0x318>)
 80018cc:	f7ff f8e2 	bl	8000a94 <__aeabi_dcmplt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <API_moveForward+0x1bc>
			timer_Right(10);
 80018d6:	200a      	movs	r0, #10
 80018d8:	f7ff fe7e 	bl	80015d8 <timer_Right>
			flag = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018e2:	e139      	b.n	8001b58 <API_moveForward+0x430>
		}
		else if(left >= 5 && left < 12 && right >= 5 && right < 12){
 80018e4:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <API_moveForward+0x2fc>)
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b54      	ldr	r3, [pc, #336]	; (8001a40 <API_moveForward+0x318>)
 80018f0:	f7ff f8e4 	bl	8000abc <__aeabi_dcmpge>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d039      	beq.n	800196e <API_moveForward+0x246>
 80018fa:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <API_moveForward+0x2fc>)
 80018fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <API_moveForward+0x310>)
 8001906:	f7ff f8c5 	bl	8000a94 <__aeabi_dcmplt>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02e      	beq.n	800196e <API_moveForward+0x246>
 8001910:	4b45      	ldr	r3, [pc, #276]	; (8001a28 <API_moveForward+0x300>)
 8001912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <API_moveForward+0x318>)
 800191c:	f7ff f8ce 	bl	8000abc <__aeabi_dcmpge>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <API_moveForward+0x246>
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <API_moveForward+0x300>)
 8001928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <API_moveForward+0x310>)
 8001932:	f7ff f8af 	bl	8000a94 <__aeabi_dcmplt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d018      	beq.n	800196e <API_moveForward+0x246>
			if(left < right){
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <API_moveForward+0x2fc>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <API_moveForward+0x300>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7ff f8a4 	bl	8000a94 <__aeabi_dcmplt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <API_moveForward+0x238>
				timer_Left(30);
 8001952:	201e      	movs	r0, #30
 8001954:	f7ff fe82 	bl	800165c <timer_Left>
				flag = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(left < right){
 800195e:	e0fb      	b.n	8001b58 <API_moveForward+0x430>
			}
			else {
				timer_Right(30);
 8001960:	201e      	movs	r0, #30
 8001962:	f7ff fe39 	bl	80015d8 <timer_Right>
				flag = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(left < right){
 800196c:	e0f4      	b.n	8001b58 <API_moveForward+0x430>
			}
		}

		else if(left >= 12){
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <API_moveForward+0x2fc>)
 8001970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <API_moveForward+0x310>)
 800197a:	f7ff f89f 	bl	8000abc <__aeabi_dcmpge>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d061      	beq.n	8001a48 <API_moveForward+0x320>
			if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0 ||( right > 5.5 && right < 12)){
 8001984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001988:	482c      	ldr	r0, [pc, #176]	; (8001a3c <API_moveForward+0x314>)
 800198a:	f006 fb57 	bl	800803c <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d017      	beq.n	80019c4 <API_moveForward+0x29c>
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <API_moveForward+0x300>)
 8001996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <API_moveForward+0x308>)
 80019a0:	f7ff f896 	bl	8000ad0 <__aeabi_dcmpgt>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80d6 	beq.w	8001b58 <API_moveForward+0x430>
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <API_moveForward+0x300>)
 80019ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <API_moveForward+0x310>)
 80019b8:	f7ff f86c 	bl	8000a94 <__aeabi_dcmplt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80ca 	beq.w	8001b58 <API_moveForward+0x430>
				if(right > 7) {
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <API_moveForward+0x300>)
 80019c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <API_moveForward+0x31c>)
 80019d0:	f7ff f87e 	bl	8000ad0 <__aeabi_dcmpgt>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <API_moveForward+0x2ba>
					timer_Left(30);
 80019da:	201e      	movs	r0, #30
 80019dc:	f7ff fe3e 	bl	800165c <timer_Left>
 80019e0:	e002      	b.n	80019e8 <API_moveForward+0x2c0>
				}
				else {
					timer_Left(10);
 80019e2:	200a      	movs	r0, #10
 80019e4:	f7ff fe3a 	bl	800165c <timer_Left>
				}
				flag = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019ee:	e0b3      	b.n	8001b58 <API_moveForward+0x430>
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000318 	.word	0x20000318
 80019f8:	20000002 	.word	0x20000002
 80019fc:	200003f0 	.word	0x200003f0
 8001a00:	20000220 	.word	0x20000220
 8001a04:	20000222 	.word	0x20000222
 8001a08:	200004a4 	.word	0x200004a4
 8001a0c:	20000230 	.word	0x20000230
 8001a10:	2000049c 	.word	0x2000049c
 8001a14:	20000232 	.word	0x20000232
 8001a18:	20000228 	.word	0x20000228
 8001a1c:	40340000 	.word	0x40340000
 8001a20:	403e0000 	.word	0x403e0000
 8001a24:	20000208 	.word	0x20000208
 8001a28:	20000210 	.word	0x20000210
 8001a2c:	20000218 	.word	0x20000218
 8001a30:	40160000 	.word	0x40160000
 8001a34:	20000008 	.word	0x20000008
 8001a38:	40280000 	.word	0x40280000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40140000 	.word	0x40140000
 8001a44:	401c0000 	.word	0x401c0000
			}

		}

		else if(right >= 12 ){
 8001a48:	4ba5      	ldr	r3, [pc, #660]	; (8001ce0 <API_moveForward+0x5b8>)
 8001a4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4ba4      	ldr	r3, [pc, #656]	; (8001ce4 <API_moveForward+0x5bc>)
 8001a54:	f7ff f832 	bl	8000abc <__aeabi_dcmpge>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d039      	beq.n	8001ad2 <API_moveForward+0x3aa>
			if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0 || ( left > 5.5 && left <12)){
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	48a1      	ldr	r0, [pc, #644]	; (8001ce8 <API_moveForward+0x5c0>)
 8001a64:	f006 faea 	bl	800803c <HAL_GPIO_ReadPin>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <API_moveForward+0x372>
 8001a6e:	4b9f      	ldr	r3, [pc, #636]	; (8001cec <API_moveForward+0x5c4>)
 8001a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b9d      	ldr	r3, [pc, #628]	; (8001cf0 <API_moveForward+0x5c8>)
 8001a7a:	f7ff f829 	bl	8000ad0 <__aeabi_dcmpgt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01f      	beq.n	8001ac4 <API_moveForward+0x39c>
 8001a84:	4b99      	ldr	r3, [pc, #612]	; (8001cec <API_moveForward+0x5c4>)
 8001a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <API_moveForward+0x5bc>)
 8001a90:	f7ff f800 	bl	8000a94 <__aeabi_dcmplt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d014      	beq.n	8001ac4 <API_moveForward+0x39c>
				if(left > 7) {
 8001a9a:	4b94      	ldr	r3, [pc, #592]	; (8001cec <API_moveForward+0x5c4>)
 8001a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b93      	ldr	r3, [pc, #588]	; (8001cf4 <API_moveForward+0x5cc>)
 8001aa6:	f7ff f813 	bl	8000ad0 <__aeabi_dcmpgt>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <API_moveForward+0x390>
					timer_Left(30);
 8001ab0:	201e      	movs	r0, #30
 8001ab2:	f7ff fdd3 	bl	800165c <timer_Left>
 8001ab6:	e002      	b.n	8001abe <API_moveForward+0x396>
				}
				else {
					timer_Left(10);
 8001ab8:	200a      	movs	r0, #10
 8001aba:	f7ff fdcf 	bl	800165c <timer_Left>
				}
				flag = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			timer_Right(10);
 8001ac4:	200a      	movs	r0, #10
 8001ac6:	f7ff fd87 	bl	80015d8 <timer_Right>
			flag = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ad0:	e042      	b.n	8001b58 <API_moveForward+0x430>
		}
		else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	4884      	ldr	r0, [pc, #528]	; (8001ce8 <API_moveForward+0x5c0>)
 8001ad8:	f006 fac7 	bl	800806a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2110      	movs	r1, #16
 8001ae0:	4885      	ldr	r0, [pc, #532]	; (8001cf8 <API_moveForward+0x5d0>)
 8001ae2:	f006 fac2 	bl	800806a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED5_Pin, RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aec:	4882      	ldr	r0, [pc, #520]	; (8001cf8 <API_moveForward+0x5d0>)
 8001aee:	f006 fabc 	bl	800806a <HAL_GPIO_WritePin>
			if(((lastTim2_Right - countTim2) -(lastTim3_Left - countTim3)) > 3){
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <API_moveForward+0x5d4>)
 8001af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <API_moveForward+0x5d8>)
 8001afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b00:	1ad2      	subs	r2, r2, r3
 8001b02:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <API_moveForward+0x5dc>)
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <API_moveForward+0x5e0>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	1acb      	subs	r3, r1, r3
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	dd06      	ble.n	8001b26 <API_moveForward+0x3fe>
				timer_Left(10);
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f7ff fd9f 	bl	800165c <timer_Left>
				flag = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b24:	e018      	b.n	8001b58 <API_moveForward+0x430>
			}
			else if(((lastTim3_Left - countTim3) -(lastTim2_Right - countTim2) ) > 3){
 8001b26:	4b77      	ldr	r3, [pc, #476]	; (8001d04 <API_moveForward+0x5dc>)
 8001b28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <API_moveForward+0x5e0>)
 8001b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b34:	1ad2      	subs	r2, r2, r3
 8001b36:	4b71      	ldr	r3, [pc, #452]	; (8001cfc <API_moveForward+0x5d4>)
 8001b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <API_moveForward+0x5d8>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	1acb      	subs	r3, r1, r3
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	dd05      	ble.n	8001b58 <API_moveForward+0x430>
				timer_Right(10);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f7ff fd43 	bl	80015d8 <timer_Right>
				flag = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		}
		if(flag == 0){
 8001b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f47f ae2e 	bne.w	80017be <API_moveForward+0x96>
			flag = 1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeft); //left
 8001b68:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <API_moveForward+0x5e4>)
 8001b6a:	881a      	ldrh	r2, [r3, #0]
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <API_moveForward+0x5e8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRight); // right
 8001b72:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <API_moveForward+0x5ec>)
 8001b74:	881a      	ldrh	r2, [r3, #0]
 8001b76:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <API_moveForward+0x5f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
		left = distanceLeft();
 8001b7c:	e61f      	b.n	80017be <API_moveForward+0x96>
			break;
 8001b7e:	bf00      	nop
		}
	}
	while (1) {
	    currentYaw = CurrentYaw();
 8001b80:	463b      	mov	r3, r7
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 fb34 	bl	80041f0 <CurrentYaw>

	    // Calculate the raw difference
	    float yawDifference = currentYaw.yaw - lastYaw.yaw;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f85a 	bl	8000c48 <__aeabi_fsub>
 8001b94:	4603      	mov	r3, r0
 8001b96:	623b      	str	r3, [r7, #32]

	    // Handle wrapping around the 360-degree mark
	    if (yawDifference > 180.0) {
 8001b98:	4960      	ldr	r1, [pc, #384]	; (8001d1c <API_moveForward+0x5f4>)
 8001b9a:	6a38      	ldr	r0, [r7, #32]
 8001b9c:	f7ff fb1a 	bl	80011d4 <__aeabi_fcmpgt>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <API_moveForward+0x48c>
	        yawDifference -= 360.0;
 8001ba6:	495e      	ldr	r1, [pc, #376]	; (8001d20 <API_moveForward+0x5f8>)
 8001ba8:	6a38      	ldr	r0, [r7, #32]
 8001baa:	f7ff f84d 	bl	8000c48 <__aeabi_fsub>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	e00c      	b.n	8001bce <API_moveForward+0x4a6>
	    } else if (yawDifference < -180.0) {
 8001bb4:	495b      	ldr	r1, [pc, #364]	; (8001d24 <API_moveForward+0x5fc>)
 8001bb6:	6a38      	ldr	r0, [r7, #32]
 8001bb8:	f7ff faee 	bl	8001198 <__aeabi_fcmplt>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <API_moveForward+0x4a6>
	        yawDifference += 360.0;
 8001bc2:	4957      	ldr	r1, [pc, #348]	; (8001d20 <API_moveForward+0x5f8>)
 8001bc4:	6a38      	ldr	r0, [r7, #32]
 8001bc6:	f7ff f841 	bl	8000c4c <__addsf3>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	623b      	str	r3, [r7, #32]
	    }

	    // Check if the yaw difference is greater than 5 degrees
	    if (yawDifference > 5.0) {
 8001bce:	4956      	ldr	r1, [pc, #344]	; (8001d28 <API_moveForward+0x600>)
 8001bd0:	6a38      	ldr	r0, [r7, #32]
 8001bd2:	f7ff faff 	bl	80011d4 <__aeabi_fcmpgt>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <API_moveForward+0x4c8>
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);     // left motor off
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <API_moveForward+0x5e8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 4150);  // right motor forward
 8001be4:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <API_moveForward+0x5f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f241 0236 	movw	r2, #4150	; 0x1036
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
 8001bee:	e7c7      	b.n	8001b80 <API_moveForward+0x458>
	    }
	    // Check if the yaw difference is less than -5 degrees
	    else if (yawDifference < -5.0) {
 8001bf0:	494e      	ldr	r1, [pc, #312]	; (8001d2c <API_moveForward+0x604>)
 8001bf2:	6a38      	ldr	r0, [r7, #32]
 8001bf4:	f7ff fad0 	bl	8001198 <__aeabi_fcmplt>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <API_moveForward+0x4ea>
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4000);  // left motor forward
 8001bfe:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <API_moveForward+0x5e8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);     // right motor off
 8001c08:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <API_moveForward+0x5f0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c10:	e7b6      	b.n	8001b80 <API_moveForward+0x458>
	    }
	    // Within the 5-degree tolerance
	    else {
	        stop();
 8001c12:	f000 fc5b 	bl	80024cc <stop>
	        if (flag_mean == 1) {
 8001c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d157      	bne.n	8001cce <API_moveForward+0x5a6>
	        	uint64_t total = mean_float* counter_mean;
 8001c1e:	4b44      	ldr	r3, [pc, #272]	; (8001d30 <API_moveForward+0x608>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f8c2 	bl	8000dac <__aeabi_ui2f>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <API_moveForward+0x60c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4610      	mov	r0, r2
 8001c32:	f7ff f913 	bl	8000e5c <__aeabi_fmul>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fb27 	bl	800128c <__aeabi_f2ulz>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 2306 	strd	r2, r3, [r7, #24]
	        	counter_mean ++;
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <API_moveForward+0x608>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <API_moveForward+0x608>)
 8001c4e:	6013      	str	r3, [r2, #0]
	        	total = total + ((lastpositionLeft - countTim3) + (lastpositionRight - countTim2))/2;
 8001c50:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <API_moveForward+0x610>)
 8001c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <API_moveForward+0x5e0>)
 8001c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5e:	1ad2      	subs	r2, r2, r3
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <API_moveForward+0x614>)
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <API_moveForward+0x5d8>)
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	1acb      	subs	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	0fda      	lsrs	r2, r3, #31
 8001c74:	4413      	add	r3, r2
 8001c76:	105b      	asrs	r3, r3, #1
 8001c78:	17da      	asrs	r2, r3, #31
 8001c7a:	461c      	mov	r4, r3
 8001c7c:	4615      	mov	r5, r2
 8001c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c82:	eb12 0804 	adds.w	r8, r2, r4
 8001c86:	eb43 0905 	adc.w	r9, r3, r5
 8001c8a:	e9c7 8906 	strd	r8, r9, [r7, #24]
	        	mean_float = total/counter_mean;
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <API_moveForward+0x608>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	469a      	mov	sl, r3
 8001c96:	4693      	mov	fp, r2
 8001c98:	4652      	mov	r2, sl
 8001c9a:	465b      	mov	r3, fp
 8001c9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca0:	f7ff fac2 	bl	8001228 <__aeabi_uldivmod>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7ff f890 	bl	8000dd0 <__aeabi_ul2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <API_moveForward+0x60c>)
 8001cb4:	6013      	str	r3, [r2, #0]
	        	mean = (uint16_t )mean_float;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <API_moveForward+0x60c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fa94 	bl	80011e8 <__aeabi_f2uiz>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <API_moveForward+0x618>)
 8001cc6:	801a      	strh	r2, [r3, #0]
	            flag_mean = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	        }
	        HAL_Delay(150);
 8001cce:	2096      	movs	r0, #150	; 0x96
 8001cd0:	f005 f884 	bl	8006ddc <HAL_Delay>
	        return;
 8001cd4:	bf00      	nop
	    }
	}
}
 8001cd6:	3728      	adds	r7, #40	; 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000210 	.word	0x20000210
 8001ce4:	40280000 	.word	0x40280000
 8001ce8:	40010800 	.word	0x40010800
 8001cec:	20000208 	.word	0x20000208
 8001cf0:	40160000 	.word	0x40160000
 8001cf4:	401c0000 	.word	0x401c0000
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	20000206 	.word	0x20000206
 8001d00:	2000049c 	.word	0x2000049c
 8001d04:	20000204 	.word	0x20000204
 8001d08:	200004a4 	.word	0x200004a4
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000318 	.word	0x20000318
 8001d14:	20000002 	.word	0x20000002
 8001d18:	200003f0 	.word	0x200003f0
 8001d1c:	43340000 	.word	0x43340000
 8001d20:	43b40000 	.word	0x43b40000
 8001d24:	c3340000 	.word	0xc3340000
 8001d28:	40a00000 	.word	0x40a00000
 8001d2c:	c0a00000 	.word	0xc0a00000
 8001d30:	20000004 	.word	0x20000004
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	20000230 	.word	0x20000230
 8001d3c:	20000232 	.word	0x20000232
 8001d40:	20000008 	.word	0x20000008

08001d44 <API_turnRight>:
	HAL_GPIO_WritePin(BI2_GPIO_Port, AI2_Pin,RESET);
	HAL_GPIO_WritePin(BI1_GPIO_Port, AI1_Pin,SET);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0); // right
}
void API_turnRight(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	4868      	ldr	r0, [pc, #416]	; (8001ef0 <API_turnRight+0x1ac>)
 8001d50:	f006 f98b 	bl	800806a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 8001d54:	2201      	movs	r2, #1
 8001d56:	2101      	movs	r1, #1
 8001d58:	4866      	ldr	r0, [pc, #408]	; (8001ef4 <API_turnRight+0x1b0>)
 8001d5a:	f006 f986 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2102      	movs	r1, #2
 8001d62:	4864      	ldr	r0, [pc, #400]	; (8001ef4 <API_turnRight+0x1b0>)
 8001d64:	f006 f981 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6e:	4861      	ldr	r0, [pc, #388]	; (8001ef4 <API_turnRight+0x1b0>)
 8001d70:	f006 f97b 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7a:	485e      	ldr	r0, [pc, #376]	; (8001ef4 <API_turnRight+0x1b0>)
 8001d7c:	f006 f975 	bl	800806a <HAL_GPIO_WritePin>

	bno055_euler_t lastYaw = CurrentYaw();
 8001d80:	f107 0310 	add.w	r3, r7, #16
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fa33 	bl	80041f0 <CurrentYaw>
	bno055_euler_t currentYaw;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 8001d8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <API_turnRight+0x1b4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <API_turnRight+0x1b8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f241 0236 	movw	r2, #4150	; 0x1036
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40

    float target_yaw = lastYaw.yaw + 90;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4957      	ldr	r1, [pc, #348]	; (8001f00 <API_turnRight+0x1bc>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe ff52 	bl	8000c4c <__addsf3>
 8001da8:	4603      	mov	r3, r0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 8001dac:	4955      	ldr	r1, [pc, #340]	; (8001f04 <API_turnRight+0x1c0>)
 8001dae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001db0:	f7ff fa06 	bl	80011c0 <__aeabi_fcmpge>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <API_turnRight+0x84>
        target_yaw -= 360.0;
 8001dba:	4952      	ldr	r1, [pc, #328]	; (8001f04 <API_turnRight+0x1c0>)
 8001dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dbe:	f7fe ff43 	bl	8000c48 <__aeabi_fsub>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	e00d      	b.n	8001de4 <API_turnRight+0xa0>
    } else if (target_yaw < 0.0) {
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dce:	f7ff f9e3 	bl	8001198 <__aeabi_fcmplt>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <API_turnRight+0xa0>
        target_yaw += 360.0;
 8001dd8:	494a      	ldr	r1, [pc, #296]	; (8001f04 <API_turnRight+0x1c0>)
 8001dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ddc:	f7fe ff36 	bl	8000c4c <__addsf3>
 8001de0:	4603      	mov	r3, r0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    float mean = 0;
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    while (1) {
        currentYaw = CurrentYaw();
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	4618      	mov	r0, r3
 8001dee:	f002 f9ff 	bl	80041f0 <CurrentYaw>

        // Calculate the yaw difference and handle wrapping
        float yawDifference = currentYaw.yaw - target_yaw;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe ff26 	bl	8000c48 <__aeabi_fsub>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 8001e00:	4941      	ldr	r1, [pc, #260]	; (8001f08 <API_turnRight+0x1c4>)
 8001e02:	6a38      	ldr	r0, [r7, #32]
 8001e04:	f7ff f9e6 	bl	80011d4 <__aeabi_fcmpgt>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <API_turnRight+0xd8>
            yawDifference -= 360.0;
 8001e0e:	493d      	ldr	r1, [pc, #244]	; (8001f04 <API_turnRight+0x1c0>)
 8001e10:	6a38      	ldr	r0, [r7, #32]
 8001e12:	f7fe ff19 	bl	8000c48 <__aeabi_fsub>
 8001e16:	4603      	mov	r3, r0
 8001e18:	623b      	str	r3, [r7, #32]
 8001e1a:	e00c      	b.n	8001e36 <API_turnRight+0xf2>
        } else if (yawDifference < -180.0) {
 8001e1c:	493b      	ldr	r1, [pc, #236]	; (8001f0c <API_turnRight+0x1c8>)
 8001e1e:	6a38      	ldr	r0, [r7, #32]
 8001e20:	f7ff f9ba 	bl	8001198 <__aeabi_fcmplt>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <API_turnRight+0xf2>
            yawDifference += 360.0;
 8001e2a:	4936      	ldr	r1, [pc, #216]	; (8001f04 <API_turnRight+0x1c0>)
 8001e2c:	6a38      	ldr	r0, [r7, #32]
 8001e2e:	f7fe ff0d 	bl	8000c4c <__addsf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e3c:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 8001e3e:	4934      	ldr	r1, [pc, #208]	; (8001f10 <API_turnRight+0x1cc>)
 8001e40:	69f8      	ldr	r0, [r7, #28]
 8001e42:	f7ff f9a9 	bl	8001198 <__aeabi_fcmplt>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d011      	beq.n	8001e70 <API_turnRight+0x12c>
 8001e4c:	4931      	ldr	r1, [pc, #196]	; (8001f14 <API_turnRight+0x1d0>)
 8001e4e:	69f8      	ldr	r0, [r7, #28]
 8001e50:	f7ff f9c0 	bl	80011d4 <__aeabi_fcmpgt>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <API_turnRight+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 8001e5a:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <API_turnRight+0x1b4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <API_turnRight+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e6e:	e031      	b.n	8001ed4 <API_turnRight+0x190>
        }
        else if (mean > 12 && mean < 30) {
 8001e70:	4929      	ldr	r1, [pc, #164]	; (8001f18 <API_turnRight+0x1d4>)
 8001e72:	69f8      	ldr	r0, [r7, #28]
 8001e74:	f7ff f9ae 	bl	80011d4 <__aeabi_fcmpgt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d011      	beq.n	8001ea2 <API_turnRight+0x15e>
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <API_turnRight+0x1d8>)
 8001e80:	69f8      	ldr	r0, [r7, #28]
 8001e82:	f7ff f989 	bl	8001198 <__aeabi_fcmplt>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <API_turnRight+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <API_turnRight+0x1b4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <API_turnRight+0x1b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea0:	e018      	b.n	8001ed4 <API_turnRight+0x190>
        }
        else if (mean > 2 && mean < 13) {
 8001ea2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ea6:	69f8      	ldr	r0, [r7, #28]
 8001ea8:	f7ff f994 	bl	80011d4 <__aeabi_fcmpgt>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d010      	beq.n	8001ed4 <API_turnRight+0x190>
 8001eb2:	491b      	ldr	r1, [pc, #108]	; (8001f20 <API_turnRight+0x1dc>)
 8001eb4:	69f8      	ldr	r0, [r7, #28]
 8001eb6:	f7ff f96f 	bl	8001198 <__aeabi_fcmplt>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <API_turnRight+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300); // left
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <API_turnRight+0x1b4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2450); // right
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <API_turnRight+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f640 1292 	movw	r2, #2450	; 0x992
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 3) {
 8001ed4:	4913      	ldr	r1, [pc, #76]	; (8001f24 <API_turnRight+0x1e0>)
 8001ed6:	69f8      	ldr	r0, [r7, #28]
 8001ed8:	f7ff f95e 	bl	8001198 <__aeabi_fcmplt>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <API_turnRight+0x1a4>
            stop();
 8001ee2:	f000 faf3 	bl	80024cc <stop>
            return;
 8001ee6:	e000      	b.n	8001eea <API_turnRight+0x1a6>
    while (1) {
 8001ee8:	e77f      	b.n	8001dea <API_turnRight+0xa6>
        }
    }
}
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40010c00 	.word	0x40010c00
 8001ef8:	20000318 	.word	0x20000318
 8001efc:	200003f0 	.word	0x200003f0
 8001f00:	42b40000 	.word	0x42b40000
 8001f04:	43b40000 	.word	0x43b40000
 8001f08:	43340000 	.word	0x43340000
 8001f0c:	c3340000 	.word	0xc3340000
 8001f10:	42480000 	.word	0x42480000
 8001f14:	41e80000 	.word	0x41e80000
 8001f18:	41400000 	.word	0x41400000
 8001f1c:	41f00000 	.word	0x41f00000
 8001f20:	41500000 	.word	0x41500000
 8001f24:	40400000 	.word	0x40400000

08001f28 <API_turnLeft>:
void API_turnLeft(){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2120      	movs	r1, #32
 8001f32:	4868      	ldr	r0, [pc, #416]	; (80020d4 <API_turnLeft+0x1ac>)
 8001f34:	f006 f899 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4866      	ldr	r0, [pc, #408]	; (80020d8 <API_turnLeft+0x1b0>)
 8001f3e:	f006 f894 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	2102      	movs	r1, #2
 8001f46:	4864      	ldr	r0, [pc, #400]	; (80020d8 <API_turnLeft+0x1b0>)
 8001f48:	f006 f88f 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f52:	4861      	ldr	r0, [pc, #388]	; (80020d8 <API_turnLeft+0x1b0>)
 8001f54:	f006 f889 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5e:	485e      	ldr	r0, [pc, #376]	; (80020d8 <API_turnLeft+0x1b0>)
 8001f60:	f006 f883 	bl	800806a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 8001f64:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <API_turnLeft+0x1b4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <API_turnLeft+0x1b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f241 0236 	movw	r2, #4150	; 0x1036
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
	bno055_euler_t lastYaw = CurrentYaw();
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 f937 	bl	80041f0 <CurrentYaw>
	bno055_euler_t currentYaw;
    float target_yaw = lastYaw.yaw - 90;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4957      	ldr	r1, [pc, #348]	; (80020e4 <API_turnLeft+0x1bc>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fe5e 	bl	8000c48 <__aeabi_fsub>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 8001f96:	4954      	ldr	r1, [pc, #336]	; (80020e8 <API_turnLeft+0x1c0>)
 8001f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f9a:	f7ff f911 	bl	80011c0 <__aeabi_fcmpge>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <API_turnLeft+0x8a>
        target_yaw -= 360.0;
 8001fa4:	4950      	ldr	r1, [pc, #320]	; (80020e8 <API_turnLeft+0x1c0>)
 8001fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fa8:	f7fe fe4e 	bl	8000c48 <__aeabi_fsub>
 8001fac:	4603      	mov	r3, r0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	e00d      	b.n	8001fce <API_turnLeft+0xa6>
    } else if (target_yaw < 0.0) {
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb8:	f7ff f8ee 	bl	8001198 <__aeabi_fcmplt>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <API_turnLeft+0xa6>
        target_yaw += 360.0;
 8001fc2:	4949      	ldr	r1, [pc, #292]	; (80020e8 <API_turnLeft+0x1c0>)
 8001fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fc6:	f7fe fe41 	bl	8000c4c <__addsf3>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while (1) {
        currentYaw = CurrentYaw();
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 f90d 	bl	80041f0 <CurrentYaw>

        float yawDifference = currentYaw.yaw - target_yaw;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fe34 	bl	8000c48 <__aeabi_fsub>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 8001fe4:	4941      	ldr	r1, [pc, #260]	; (80020ec <API_turnLeft+0x1c4>)
 8001fe6:	6a38      	ldr	r0, [r7, #32]
 8001fe8:	f7ff f8f4 	bl	80011d4 <__aeabi_fcmpgt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <API_turnLeft+0xd8>
            yawDifference -= 360.0;
 8001ff2:	493d      	ldr	r1, [pc, #244]	; (80020e8 <API_turnLeft+0x1c0>)
 8001ff4:	6a38      	ldr	r0, [r7, #32]
 8001ff6:	f7fe fe27 	bl	8000c48 <__aeabi_fsub>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	623b      	str	r3, [r7, #32]
 8001ffe:	e00c      	b.n	800201a <API_turnLeft+0xf2>
        } else if (yawDifference < -180.0) {
 8002000:	493b      	ldr	r1, [pc, #236]	; (80020f0 <API_turnLeft+0x1c8>)
 8002002:	6a38      	ldr	r0, [r7, #32]
 8002004:	f7ff f8c8 	bl	8001198 <__aeabi_fcmplt>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <API_turnLeft+0xf2>
            yawDifference += 360.0;
 800200e:	4936      	ldr	r1, [pc, #216]	; (80020e8 <API_turnLeft+0x1c0>)
 8002010:	6a38      	ldr	r0, [r7, #32]
 8002012:	f7fe fe1b 	bl	8000c4c <__addsf3>
 8002016:	4603      	mov	r3, r0
 8002018:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002020:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 8002022:	4934      	ldr	r1, [pc, #208]	; (80020f4 <API_turnLeft+0x1cc>)
 8002024:	69f8      	ldr	r0, [r7, #28]
 8002026:	f7ff f8b7 	bl	8001198 <__aeabi_fcmplt>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d011      	beq.n	8002054 <API_turnLeft+0x12c>
 8002030:	4931      	ldr	r1, [pc, #196]	; (80020f8 <API_turnLeft+0x1d0>)
 8002032:	69f8      	ldr	r0, [r7, #28]
 8002034:	f7ff f8ce 	bl	80011d4 <__aeabi_fcmpgt>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <API_turnLeft+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <API_turnLeft+0x1b4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <API_turnLeft+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f640 424e 	movw	r2, #3150	; 0xc4e
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
 8002052:	e031      	b.n	80020b8 <API_turnLeft+0x190>
        }
        else if (mean > 12 && mean < 30) {
 8002054:	4929      	ldr	r1, [pc, #164]	; (80020fc <API_turnLeft+0x1d4>)
 8002056:	69f8      	ldr	r0, [r7, #28]
 8002058:	f7ff f8bc 	bl	80011d4 <__aeabi_fcmpgt>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d011      	beq.n	8002086 <API_turnLeft+0x15e>
 8002062:	4927      	ldr	r1, [pc, #156]	; (8002100 <API_turnLeft+0x1d8>)
 8002064:	69f8      	ldr	r0, [r7, #28]
 8002066:	f7ff f897 	bl	8001198 <__aeabi_fcmplt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <API_turnLeft+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <API_turnLeft+0x1b4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <API_turnLeft+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f640 225a 	movw	r2, #2650	; 0xa5a
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
 8002084:	e018      	b.n	80020b8 <API_turnLeft+0x190>
        }
        else if (mean > 2 && mean < 13) {
 8002086:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800208a:	69f8      	ldr	r0, [r7, #28]
 800208c:	f7ff f8a2 	bl	80011d4 <__aeabi_fcmpgt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d010      	beq.n	80020b8 <API_turnLeft+0x190>
 8002096:	491b      	ldr	r1, [pc, #108]	; (8002104 <API_turnLeft+0x1dc>)
 8002098:	69f8      	ldr	r0, [r7, #28]
 800209a:	f7ff f87d 	bl	8001198 <__aeabi_fcmplt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <API_turnLeft+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2200); // left
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <API_turnLeft+0x1b4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f640 0298 	movw	r2, #2200	; 0x898
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2350); // right
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <API_turnLeft+0x1b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f640 122e 	movw	r2, #2350	; 0x92e
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 3) {
 80020b8:	4913      	ldr	r1, [pc, #76]	; (8002108 <API_turnLeft+0x1e0>)
 80020ba:	69f8      	ldr	r0, [r7, #28]
 80020bc:	f7ff f86c 	bl	8001198 <__aeabi_fcmplt>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <API_turnLeft+0x1a4>
            stop();
 80020c6:	f000 fa01 	bl	80024cc <stop>
            return;
 80020ca:	e000      	b.n	80020ce <API_turnLeft+0x1a6>
    while (1) {
 80020cc:	e77f      	b.n	8001fce <API_turnLeft+0xa6>
        }
    }
}
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	20000318 	.word	0x20000318
 80020e0:	200003f0 	.word	0x200003f0
 80020e4:	42b40000 	.word	0x42b40000
 80020e8:	43b40000 	.word	0x43b40000
 80020ec:	43340000 	.word	0x43340000
 80020f0:	c3340000 	.word	0xc3340000
 80020f4:	42480000 	.word	0x42480000
 80020f8:	41e80000 	.word	0x41e80000
 80020fc:	41400000 	.word	0x41400000
 8002100:	41f00000 	.word	0x41f00000
 8002104:	41500000 	.word	0x41500000
 8002108:	40400000 	.word	0x40400000

0800210c <API_turnRight180>:
void API_turnRight180(){
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8002112:	2201      	movs	r2, #1
 8002114:	2120      	movs	r1, #32
 8002116:	4868      	ldr	r0, [pc, #416]	; (80022b8 <API_turnRight180+0x1ac>)
 8002118:	f005 ffa7 	bl	800806a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 800211c:	2201      	movs	r2, #1
 800211e:	2101      	movs	r1, #1
 8002120:	4866      	ldr	r0, [pc, #408]	; (80022bc <API_turnRight180+0x1b0>)
 8002122:	f005 ffa2 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2102      	movs	r1, #2
 800212a:	4864      	ldr	r0, [pc, #400]	; (80022bc <API_turnRight180+0x1b0>)
 800212c:	f005 ff9d 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002136:	4861      	ldr	r0, [pc, #388]	; (80022bc <API_turnRight180+0x1b0>)
 8002138:	f005 ff97 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002142:	485e      	ldr	r0, [pc, #376]	; (80022bc <API_turnRight180+0x1b0>)
 8002144:	f005 ff91 	bl	800806a <HAL_GPIO_WritePin>

	bno055_euler_t lastYaw = CurrentYaw();
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4618      	mov	r0, r3
 800214e:	f002 f84f 	bl	80041f0 <CurrentYaw>
	bno055_euler_t currentYaw;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <API_turnRight180+0x1b4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 800215c:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <API_turnRight180+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f241 0236 	movw	r2, #4150	; 0x1036
 8002164:	641a      	str	r2, [r3, #64]	; 0x40

    float target_yaw = lastYaw.yaw + 180;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4957      	ldr	r1, [pc, #348]	; (80022c8 <API_turnRight180+0x1bc>)
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fd6e 	bl	8000c4c <__addsf3>
 8002170:	4603      	mov	r3, r0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 8002174:	4955      	ldr	r1, [pc, #340]	; (80022cc <API_turnRight180+0x1c0>)
 8002176:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002178:	f7ff f822 	bl	80011c0 <__aeabi_fcmpge>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <API_turnRight180+0x84>
        target_yaw -= 360.0;
 8002182:	4952      	ldr	r1, [pc, #328]	; (80022cc <API_turnRight180+0x1c0>)
 8002184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002186:	f7fe fd5f 	bl	8000c48 <__aeabi_fsub>
 800218a:	4603      	mov	r3, r0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
 800218e:	e00d      	b.n	80021ac <API_turnRight180+0xa0>
    } else if (target_yaw < 0.0) {
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002196:	f7fe ffff 	bl	8001198 <__aeabi_fcmplt>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <API_turnRight180+0xa0>
        target_yaw += 360.0;
 80021a0:	494a      	ldr	r1, [pc, #296]	; (80022cc <API_turnRight180+0x1c0>)
 80021a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021a4:	f7fe fd52 	bl	8000c4c <__addsf3>
 80021a8:	4603      	mov	r3, r0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    float mean = 0;
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    while (1) {
        currentYaw = CurrentYaw();
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 f81b 	bl	80041f0 <CurrentYaw>

        // Calculate the yaw difference and handle wrapping
        float yawDifference = currentYaw.yaw - target_yaw;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fd42 	bl	8000c48 <__aeabi_fsub>
 80021c4:	4603      	mov	r3, r0
 80021c6:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 80021c8:	493f      	ldr	r1, [pc, #252]	; (80022c8 <API_turnRight180+0x1bc>)
 80021ca:	6a38      	ldr	r0, [r7, #32]
 80021cc:	f7ff f802 	bl	80011d4 <__aeabi_fcmpgt>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <API_turnRight180+0xd8>
            yawDifference -= 360.0;
 80021d6:	493d      	ldr	r1, [pc, #244]	; (80022cc <API_turnRight180+0x1c0>)
 80021d8:	6a38      	ldr	r0, [r7, #32]
 80021da:	f7fe fd35 	bl	8000c48 <__aeabi_fsub>
 80021de:	4603      	mov	r3, r0
 80021e0:	623b      	str	r3, [r7, #32]
 80021e2:	e00c      	b.n	80021fe <API_turnRight180+0xf2>
        } else if (yawDifference < -180.0) {
 80021e4:	493a      	ldr	r1, [pc, #232]	; (80022d0 <API_turnRight180+0x1c4>)
 80021e6:	6a38      	ldr	r0, [r7, #32]
 80021e8:	f7fe ffd6 	bl	8001198 <__aeabi_fcmplt>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <API_turnRight180+0xf2>
            yawDifference += 360.0;
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <API_turnRight180+0x1c0>)
 80021f4:	6a38      	ldr	r0, [r7, #32]
 80021f6:	f7fe fd29 	bl	8000c4c <__addsf3>
 80021fa:	4603      	mov	r3, r0
 80021fc:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002204:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 8002206:	4933      	ldr	r1, [pc, #204]	; (80022d4 <API_turnRight180+0x1c8>)
 8002208:	69f8      	ldr	r0, [r7, #28]
 800220a:	f7fe ffc5 	bl	8001198 <__aeabi_fcmplt>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d011      	beq.n	8002238 <API_turnRight180+0x12c>
 8002214:	4930      	ldr	r1, [pc, #192]	; (80022d8 <API_turnRight180+0x1cc>)
 8002216:	69f8      	ldr	r0, [r7, #28]
 8002218:	f7fe ffdc 	bl	80011d4 <__aeabi_fcmpgt>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <API_turnRight180+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <API_turnRight180+0x1b4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <API_turnRight180+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f640 424e 	movw	r2, #3150	; 0xc4e
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
 8002236:	e031      	b.n	800229c <API_turnRight180+0x190>
        }
        else if (mean > 12 && mean < 30) {
 8002238:	4928      	ldr	r1, [pc, #160]	; (80022dc <API_turnRight180+0x1d0>)
 800223a:	69f8      	ldr	r0, [r7, #28]
 800223c:	f7fe ffca 	bl	80011d4 <__aeabi_fcmpgt>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d011      	beq.n	800226a <API_turnRight180+0x15e>
 8002246:	4926      	ldr	r1, [pc, #152]	; (80022e0 <API_turnRight180+0x1d4>)
 8002248:	69f8      	ldr	r0, [r7, #28]
 800224a:	f7fe ffa5 	bl	8001198 <__aeabi_fcmplt>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <API_turnRight180+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <API_turnRight180+0x1b4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <API_turnRight180+0x1b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f640 225a 	movw	r2, #2650	; 0xa5a
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
 8002268:	e018      	b.n	800229c <API_turnRight180+0x190>
        }
        else if (mean > 2 && mean < 13) {
 800226a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800226e:	69f8      	ldr	r0, [r7, #28]
 8002270:	f7fe ffb0 	bl	80011d4 <__aeabi_fcmpgt>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <API_turnRight180+0x190>
 800227a:	491a      	ldr	r1, [pc, #104]	; (80022e4 <API_turnRight180+0x1d8>)
 800227c:	69f8      	ldr	r0, [r7, #28]
 800227e:	f7fe ff8b 	bl	8001198 <__aeabi_fcmplt>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d009      	beq.n	800229c <API_turnRight180+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300); // left
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <API_turnRight180+0x1b4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2450); // right
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <API_turnRight180+0x1b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f640 1292 	movw	r2, #2450	; 0x992
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 3) {
 800229c:	4912      	ldr	r1, [pc, #72]	; (80022e8 <API_turnRight180+0x1dc>)
 800229e:	69f8      	ldr	r0, [r7, #28]
 80022a0:	f7fe ff7a 	bl	8001198 <__aeabi_fcmplt>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <API_turnRight180+0x1a4>
            stop();
 80022aa:	f000 f90f 	bl	80024cc <stop>
            return;
 80022ae:	e000      	b.n	80022b2 <API_turnRight180+0x1a6>
    while (1) {
 80022b0:	e77f      	b.n	80021b2 <API_turnRight180+0xa6>
        }
    }
}
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010800 	.word	0x40010800
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	20000318 	.word	0x20000318
 80022c4:	200003f0 	.word	0x200003f0
 80022c8:	43340000 	.word	0x43340000
 80022cc:	43b40000 	.word	0x43b40000
 80022d0:	c3340000 	.word	0xc3340000
 80022d4:	42480000 	.word	0x42480000
 80022d8:	41e80000 	.word	0x41e80000
 80022dc:	41400000 	.word	0x41400000
 80022e0:	41f00000 	.word	0x41f00000
 80022e4:	41500000 	.word	0x41500000
 80022e8:	40400000 	.word	0x40400000

080022ec <API_turnLeft180>:
void API_turnLeft180(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	2120      	movs	r1, #32
 80022f6:	4869      	ldr	r0, [pc, #420]	; (800249c <API_turnLeft180+0x1b0>)
 80022f8:	f005 feb7 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2101      	movs	r1, #1
 8002300:	4867      	ldr	r0, [pc, #412]	; (80024a0 <API_turnLeft180+0x1b4>)
 8002302:	f005 feb2 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
 8002306:	2201      	movs	r2, #1
 8002308:	2102      	movs	r1, #2
 800230a:	4865      	ldr	r0, [pc, #404]	; (80024a0 <API_turnLeft180+0x1b4>)
 800230c:	f005 fead 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002316:	4862      	ldr	r0, [pc, #392]	; (80024a0 <API_turnLeft180+0x1b4>)
 8002318:	f005 fea7 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002322:	485f      	ldr	r0, [pc, #380]	; (80024a0 <API_turnLeft180+0x1b4>)
 8002324:	f005 fea1 	bl	800806a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 8002328:	4b5e      	ldr	r3, [pc, #376]	; (80024a4 <API_turnLeft180+0x1b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 8002332:	4b5d      	ldr	r3, [pc, #372]	; (80024a8 <API_turnLeft180+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f241 0236 	movw	r2, #4150	; 0x1036
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
	bno055_euler_t lastYaw = CurrentYaw();
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4618      	mov	r0, r3
 8002342:	f001 ff55 	bl	80041f0 <CurrentYaw>
	bno055_euler_t currentYaw;
    float target_yaw = lastYaw.yaw - 180;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4958      	ldr	r1, [pc, #352]	; (80024ac <API_turnLeft180+0x1c0>)
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fc7c 	bl	8000c48 <__aeabi_fsub>
 8002350:	4603      	mov	r3, r0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 8002354:	4956      	ldr	r1, [pc, #344]	; (80024b0 <API_turnLeft180+0x1c4>)
 8002356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002358:	f7fe ff32 	bl	80011c0 <__aeabi_fcmpge>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <API_turnLeft180+0x84>
        target_yaw -= 360.0;
 8002362:	4953      	ldr	r1, [pc, #332]	; (80024b0 <API_turnLeft180+0x1c4>)
 8002364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002366:	f7fe fc6f 	bl	8000c48 <__aeabi_fsub>
 800236a:	4603      	mov	r3, r0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	e00d      	b.n	800238c <API_turnLeft180+0xa0>
    } else if (target_yaw < 0.0) {
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002376:	f7fe ff0f 	bl	8001198 <__aeabi_fcmplt>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <API_turnLeft180+0xa0>
        target_yaw += 360.0;
 8002380:	494b      	ldr	r1, [pc, #300]	; (80024b0 <API_turnLeft180+0x1c4>)
 8002382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002384:	f7fe fc62 	bl	8000c4c <__addsf3>
 8002388:	4603      	mov	r3, r0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    float mean = 0;
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    while (1) {
        currentYaw = CurrentYaw();
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	4618      	mov	r0, r3
 8002396:	f001 ff2b 	bl	80041f0 <CurrentYaw>

        // Calculate the yaw difference and handle wrapping
        float yawDifference = currentYaw.yaw - target_yaw;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fc52 	bl	8000c48 <__aeabi_fsub>
 80023a4:	4603      	mov	r3, r0
 80023a6:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 80023a8:	4940      	ldr	r1, [pc, #256]	; (80024ac <API_turnLeft180+0x1c0>)
 80023aa:	6a38      	ldr	r0, [r7, #32]
 80023ac:	f7fe ff12 	bl	80011d4 <__aeabi_fcmpgt>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <API_turnLeft180+0xd8>
            yawDifference -= 360.0;
 80023b6:	493e      	ldr	r1, [pc, #248]	; (80024b0 <API_turnLeft180+0x1c4>)
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	f7fe fc45 	bl	8000c48 <__aeabi_fsub>
 80023be:	4603      	mov	r3, r0
 80023c0:	623b      	str	r3, [r7, #32]
 80023c2:	e00c      	b.n	80023de <API_turnLeft180+0xf2>
        } else if (yawDifference < -180.0) {
 80023c4:	493b      	ldr	r1, [pc, #236]	; (80024b4 <API_turnLeft180+0x1c8>)
 80023c6:	6a38      	ldr	r0, [r7, #32]
 80023c8:	f7fe fee6 	bl	8001198 <__aeabi_fcmplt>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <API_turnLeft180+0xf2>
            yawDifference += 360.0;
 80023d2:	4937      	ldr	r1, [pc, #220]	; (80024b0 <API_turnLeft180+0x1c4>)
 80023d4:	6a38      	ldr	r0, [r7, #32]
 80023d6:	f7fe fc39 	bl	8000c4c <__addsf3>
 80023da:	4603      	mov	r3, r0
 80023dc:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 80023e6:	4934      	ldr	r1, [pc, #208]	; (80024b8 <API_turnLeft180+0x1cc>)
 80023e8:	69f8      	ldr	r0, [r7, #28]
 80023ea:	f7fe fed5 	bl	8001198 <__aeabi_fcmplt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <API_turnLeft180+0x12c>
 80023f4:	4931      	ldr	r1, [pc, #196]	; (80024bc <API_turnLeft180+0x1d0>)
 80023f6:	69f8      	ldr	r0, [r7, #28]
 80023f8:	f7fe feec 	bl	80011d4 <__aeabi_fcmpgt>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <API_turnLeft180+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <API_turnLeft180+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <API_turnLeft180+0x1bc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f640 424e 	movw	r2, #3150	; 0xc4e
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
 8002416:	e031      	b.n	800247c <API_turnLeft180+0x190>
        }
        else if (mean > 12 && mean < 30) {
 8002418:	4929      	ldr	r1, [pc, #164]	; (80024c0 <API_turnLeft180+0x1d4>)
 800241a:	69f8      	ldr	r0, [r7, #28]
 800241c:	f7fe feda 	bl	80011d4 <__aeabi_fcmpgt>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <API_turnLeft180+0x15e>
 8002426:	4927      	ldr	r1, [pc, #156]	; (80024c4 <API_turnLeft180+0x1d8>)
 8002428:	69f8      	ldr	r0, [r7, #28]
 800242a:	f7fe feb5 	bl	8001198 <__aeabi_fcmplt>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <API_turnLeft180+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <API_turnLeft180+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <API_turnLeft180+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f640 225a 	movw	r2, #2650	; 0xa5a
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
 8002448:	e018      	b.n	800247c <API_turnLeft180+0x190>
        }
        else if (mean > 1 && mean < 13) {
 800244a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800244e:	69f8      	ldr	r0, [r7, #28]
 8002450:	f7fe fec0 	bl	80011d4 <__aeabi_fcmpgt>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <API_turnLeft180+0x190>
 800245a:	491b      	ldr	r1, [pc, #108]	; (80024c8 <API_turnLeft180+0x1dc>)
 800245c:	69f8      	ldr	r0, [r7, #28]
 800245e:	f7fe fe9b 	bl	8001198 <__aeabi_fcmplt>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <API_turnLeft180+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300); // left
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <API_turnLeft180+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2450); // right
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <API_turnLeft180+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f640 1292 	movw	r2, #2450	; 0x992
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 2) {
 800247c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002480:	69f8      	ldr	r0, [r7, #28]
 8002482:	f7fe fe89 	bl	8001198 <__aeabi_fcmplt>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <API_turnLeft180+0x1a6>
            stop();
 800248c:	f000 f81e 	bl	80024cc <stop>
            return;
 8002490:	e000      	b.n	8002494 <API_turnLeft180+0x1a8>
    while (1) {
 8002492:	e77e      	b.n	8002392 <API_turnLeft180+0xa6>
        }
    }
}
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40010800 	.word	0x40010800
 80024a0:	40010c00 	.word	0x40010c00
 80024a4:	20000318 	.word	0x20000318
 80024a8:	200003f0 	.word	0x200003f0
 80024ac:	43340000 	.word	0x43340000
 80024b0:	43b40000 	.word	0x43b40000
 80024b4:	c3340000 	.word	0xc3340000
 80024b8:	42480000 	.word	0x42480000
 80024bc:	41e80000 	.word	0x41e80000
 80024c0:	41400000 	.word	0x41400000
 80024c4:	41f00000 	.word	0x41f00000
 80024c8:	41500000 	.word	0x41500000

080024cc <stop>:
void stop(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0); //left
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <stop+0x50>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0);
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <stop+0x54>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80024e0:	2201      	movs	r2, #1
 80024e2:	2120      	movs	r1, #32
 80024e4:	480f      	ldr	r0, [pc, #60]	; (8002524 <stop+0x58>)
 80024e6:	f005 fdc0 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2101      	movs	r1, #1
 80024ee:	480e      	ldr	r0, [pc, #56]	; (8002528 <stop+0x5c>)
 80024f0:	f005 fdbb 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2102      	movs	r1, #2
 80024f8:	480b      	ldr	r0, [pc, #44]	; (8002528 <stop+0x5c>)
 80024fa:	f005 fdb6 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002504:	4808      	ldr	r0, [pc, #32]	; (8002528 <stop+0x5c>)
 8002506:	f005 fdb0 	bl	800806a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <stop+0x5c>)
 8002512:	f005 fdaa 	bl	800806a <HAL_GPIO_WritePin>
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000318 	.word	0x20000318
 8002520:	200003f0 	.word	0x200003f0
 8002524:	40010800 	.word	0x40010800
 8002528:	40010c00 	.word	0x40010c00

0800252c <FEE_Write>:

#include "FEE.h"
#include "string.h"

HAL_StatusTypeDef FEE_Write(uint32_t address, uint16_t *data, uint32_t dataSize)
{
 800252c:	b5b0      	push	{r4, r5, r7, lr}
 800252e:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002532:	af00      	add	r7, sp, #0
 8002534:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002538:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800253c:	6018      	str	r0, [r3, #0]
 800253e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002542:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8002546:	6019      	str	r1, [r3, #0]
 8002548:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800254c:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002550:	601a      	str	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
    uint32_t pageAddress = address & ~(FLASH_PAGE_SIZE - 1); // Get the start address of the page
 8002558:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800255c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002566:	f023 0307 	bic.w	r3, r3, #7
 800256a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    uint16_t buffer[FEE_BUFFER_LEN]; // Create a buffer to hold the entire page
    HAL_FLASH_Unlock();
 800256e:	f005 fa41 	bl	80079f4 <HAL_FLASH_Unlock>
    // Read the entire page into the buffer
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8002578:	e014      	b.n	80025a4 <FEE_Write+0x78>
        buffer[i] = *(__IO uint16_t*)(pageAddress + i * 2);
 800257a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800257e:	005a      	lsls	r2, r3, #1
 8002580:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002584:	4413      	add	r3, r2
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b299      	uxth	r1, r3
 800258a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800258e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002592:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 8002596:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 800259a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800259e:	3301      	adds	r3, #1
 80025a0:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80025a4:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d3e5      	bcc.n	800257a <FEE_Write+0x4e>
    }
    // Modify the values at the desired address
    uint32_t offset = address - pageAddress;
 80025ae:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80025b2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    for (uint32_t i = 0; i < dataSize; i++) {
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80025c8:	e01a      	b.n	8002600 <FEE_Write+0xd4>
        buffer[offset / 2 + i] = data[i];
 80025ca:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80025d4:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80025e0:	0851      	lsrs	r1, r2, #1
 80025e2:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80025e6:	440a      	add	r2, r1
 80025e8:	8819      	ldrh	r1, [r3, #0]
 80025ea:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80025ee:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80025f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint32_t i = 0; i < dataSize; i++) {
 80025f6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80025fa:	3301      	adds	r3, #1
 80025fc:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8002600:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002604:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002608:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3db      	bcc.n	80025ca <FEE_Write+0x9e>
    }
    // Erase the page
    FLASH_EraseInitTypeDef eraseInitStruct;
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002612:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002616:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    eraseInitStruct.PageAddress = pageAddress;
 800261e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002622:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002626:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 800262a:	609a      	str	r2, [r3, #8]
    eraseInitStruct.NbPages = 1;
 800262c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002630:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002634:	2201      	movs	r2, #1
 8002636:	60da      	str	r2, [r3, #12]
    uint32_t pageError;
    status = HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 8002638:	f107 0214 	add.w	r2, r7, #20
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f005 fabe 	bl	8007bc4 <HAL_FLASHEx_Erase>
 8002648:	4603      	mov	r3, r0
 800264a:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
    if (status != HAL_OK) {
 800264e:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <FEE_Write+0x134>
        HAL_FLASH_Lock();
 8002656:	f005 f9f3 	bl	8007a40 <HAL_FLASH_Lock>
        return status;
 800265a:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 800265e:	e031      	b.n	80026c4 <FEE_Write+0x198>
    }
    // Write the modified buffer back to the page
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8002666:	e022      	b.n	80026ae <FEE_Write+0x182>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, pageAddress + i * 2, buffer[i]);
 8002668:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800266c:	005a      	lsls	r2, r3, #1
 800266e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8002672:	18d1      	adds	r1, r2, r3
 8002674:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002678:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800267c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 8002680:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002684:	b29b      	uxth	r3, r3
 8002686:	2200      	movs	r2, #0
 8002688:	461c      	mov	r4, r3
 800268a:	4615      	mov	r5, r2
 800268c:	4622      	mov	r2, r4
 800268e:	462b      	mov	r3, r5
 8002690:	2001      	movs	r0, #1
 8002692:	f005 f93f 	bl	8007914 <HAL_FLASH_Program>
 8002696:	4603      	mov	r3, r0
 8002698:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
        if (status != HAL_OK) {
 800269c:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <FEE_Write+0x18e>
    for (uint32_t i = 0; i < FEE_BUFFER_LEN; i++) {
 80026a4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80026a8:	3301      	adds	r3, #1
 80026aa:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80026ae:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80026b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b6:	d3d7      	bcc.n	8002668 <FEE_Write+0x13c>
 80026b8:	e000      	b.n	80026bc <FEE_Write+0x190>
            break;
 80026ba:	bf00      	nop
        }
    }
    HAL_FLASH_Lock();
 80026bc:	f005 f9c0 	bl	8007a40 <HAL_FLASH_Lock>
    return status;
 80026c0:	f897 343f 	ldrb.w	r3, [r7, #1087]	; 0x43f
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bdb0      	pop	{r4, r5, r7, pc}

080026ce <FEE_Read>:

void FEE_Read(uint32_t address, uint16_t *data, uint32_t dataSize)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b087      	sub	sp, #28
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < dataSize; i++) {
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e00d      	b.n	80026fc <FEE_Read+0x2e>
        data[i] = *(__IO uint16_t*)address;
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	68b9      	ldr	r1, [r7, #8]
 80026e8:	440b      	add	r3, r1
 80026ea:	8812      	ldrh	r2, [r2, #0]
 80026ec:	b292      	uxth	r2, r2
 80026ee:	801a      	strh	r2, [r3, #0]
        address += 2;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3302      	adds	r3, #2
 80026f4:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < dataSize; i++) {
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3ed      	bcc.n	80026e0 <FEE_Read+0x12>
    }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <FEE_WriteData>:

// Generic APIs For Any Data Type
void FEE_WriteData(uint32_t address, void *data, size_t dataSize)
{
 8002710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002714:	b087      	sub	sp, #28
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	466b      	mov	r3, sp
 8002720:	461e      	mov	r6, r3
    uint16_t bytes[dataSize / 2];
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0859      	lsrs	r1, r3, #1
 8002726:	460b      	mov	r3, r1
 8002728:	3b01      	subs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	2300      	movs	r3, #0
 800272e:	4688      	mov	r8, r1
 8002730:	4699      	mov	r9, r3
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800273e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8002742:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8002746:	2300      	movs	r3, #0
 8002748:	460c      	mov	r4, r1
 800274a:	461d      	mov	r5, r3
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	012b      	lsls	r3, r5, #4
 8002756:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800275a:	0122      	lsls	r2, r4, #4
 800275c:	004b      	lsls	r3, r1, #1
 800275e:	3307      	adds	r3, #7
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	ebad 0d03 	sub.w	sp, sp, r3
 8002768:	466b      	mov	r3, sp
 800276a:	3301      	adds	r3, #1
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	613b      	str	r3, [r7, #16]
    memcpy(bytes, data, dataSize);
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6938      	ldr	r0, [r7, #16]
 8002778:	f00a f848 	bl	800c80c <memcpy>
    FEE_Write(address, bytes, dataSize);
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6939      	ldr	r1, [r7, #16]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff fed3 	bl	800252c <FEE_Write>
 8002786:	46b5      	mov	sp, r6
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002792 <FEE_ReadData>:

void FEE_ReadData(uint32_t address, void *data, size_t dataSize)
{
 8002792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	466b      	mov	r3, sp
 80027a2:	461e      	mov	r6, r3
    uint16_t bytes[dataSize / 2];
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	0859      	lsrs	r1, r3, #1
 80027a8:	460b      	mov	r3, r1
 80027aa:	3b01      	subs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	2300      	movs	r3, #0
 80027b0:	4688      	mov	r8, r1
 80027b2:	4699      	mov	r9, r3
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80027c0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80027c4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80027c8:	2300      	movs	r3, #0
 80027ca:	460c      	mov	r4, r1
 80027cc:	461d      	mov	r5, r3
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	012b      	lsls	r3, r5, #4
 80027d8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80027dc:	0122      	lsls	r2, r4, #4
 80027de:	004b      	lsls	r3, r1, #1
 80027e0:	3307      	adds	r3, #7
 80027e2:	08db      	lsrs	r3, r3, #3
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	ebad 0d03 	sub.w	sp, sp, r3
 80027ea:	466b      	mov	r3, sp
 80027ec:	3301      	adds	r3, #1
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	613b      	str	r3, [r7, #16]
    FEE_Read(address, bytes, dataSize);
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6939      	ldr	r1, [r7, #16]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff ff68 	bl	80026ce <FEE_Read>
    memcpy(data, bytes, dataSize);
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6939      	ldr	r1, [r7, #16]
 8002802:	68b8      	ldr	r0, [r7, #8]
 8002804:	f00a f802 	bl	800c80c <memcpy>
 8002808:	46b5      	mov	sp, r6
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002814 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b0af      	sub	sp, #188	; 0xbc
 8002818:	af2a      	add	r7, sp, #168	; 0xa8
 800281a:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	799b      	ldrb	r3, [r3, #6]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 800282c:	687c      	ldr	r4, [r7, #4]
 800282e:	2301      	movs	r3, #1
 8002830:	9329      	str	r3, [sp, #164]	; 0xa4
 8002832:	f107 030e 	add.w	r3, r7, #14
 8002836:	9328      	str	r3, [sp, #160]	; 0xa0
 8002838:	2300      	movs	r3, #0
 800283a:	9327      	str	r3, [sp, #156]	; 0x9c
 800283c:	4668      	mov	r0, sp
 800283e:	f104 0310 	add.w	r3, r4, #16
 8002842:	229c      	movs	r2, #156	; 0x9c
 8002844:	4619      	mov	r1, r3
 8002846:	f009 ffe1 	bl	800c80c <memcpy>
 800284a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800284e:	f001 fbe4 	bl	800401a <bno055_read_regs>
 8002852:	4603      	mov	r3, r0
 8002854:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <bno055_init+0x4c>
        return err;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	e0b6      	b.n	80029ce <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	2ba0      	cmp	r3, #160	; 0xa0
 8002864:	d001      	beq.n	800286a <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8002866:	2306      	movs	r3, #6
 8002868:	e0b1      	b.n	80029ce <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800286a:	2100      	movs	r1, #0
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f001 faa2 	bl	8003db6 <bno055_set_opmode>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <bno055_init+0x6c>
        return err;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	e0a6      	b.n	80029ce <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 8002880:	2002      	movs	r0, #2
 8002882:	f004 faab 	bl	8006ddc <HAL_Delay>
    bno055_reset(imu);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f001 fb81 	bl	8003f8e <bno055_reset>
    HAL_Delay(5000);
 800288c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002890:	f004 faa4 	bl	8006ddc <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8002894:	2100      	movs	r1, #0
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f001 fb1c 	bl	8003ed4 <bno055_set_pwr_mode>
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <bno055_init+0x96>
        return err;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	e091      	b.n	80029ce <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 80028aa:	200a      	movs	r0, #10
 80028ac:	f004 fa96 	bl	8006ddc <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80028b0:	2100      	movs	r1, #0
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 fc14 	bl	80040e0 <bno055_set_page>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <bno055_init+0xb2>
        return err;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	e083      	b.n	80029ce <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80028c6:	200c      	movs	r0, #12
 80028c8:	f004 fa88 	bl	8006ddc <HAL_Delay>
    bno055_on(imu);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f001 fb81 	bl	8003fd4 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	791b      	ldrb	r3, [r3, #4]
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f001 fa6c 	bl	8003db6 <bno055_set_opmode>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <bno055_init+0xd8>
        return err;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	e070      	b.n	80029ce <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80028ec:	2018      	movs	r0, #24
 80028ee:	f004 fa75 	bl	8006ddc <HAL_Delay>

    imu->temperature = &bno055_temperature;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a38      	ldr	r2, [pc, #224]	; (80029d8 <bno055_init+0x1c4>)
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a38      	ldr	r2, [pc, #224]	; (80029dc <bno055_init+0x1c8>)
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <bno055_init+0x1cc>)
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a37      	ldr	r2, [pc, #220]	; (80029e4 <bno055_init+0x1d0>)
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a36      	ldr	r2, [pc, #216]	; (80029e8 <bno055_init+0x1d4>)
 800290e:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a36      	ldr	r2, [pc, #216]	; (80029ec <bno055_init+0x1d8>)
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a35      	ldr	r2, [pc, #212]	; (80029f0 <bno055_init+0x1dc>)
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <bno055_init+0x1e0>)
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a34      	ldr	r2, [pc, #208]	; (80029f8 <bno055_init+0x1e4>)
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a34      	ldr	r2, [pc, #208]	; (80029fc <bno055_init+0x1e8>)
 800292c:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a33      	ldr	r2, [pc, #204]	; (8002a00 <bno055_init+0x1ec>)
 8002932:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <bno055_init+0x1f0>)
 8002938:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <bno055_init+0x1f4>)
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a32      	ldr	r2, [pc, #200]	; (8002a0c <bno055_init+0x1f8>)
 8002944:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <bno055_init+0x1fc>)
 800294a:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a31      	ldr	r2, [pc, #196]	; (8002a14 <bno055_init+0x200>)
 8002950:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <bno055_init+0x204>)
 8002956:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a30      	ldr	r2, [pc, #192]	; (8002a1c <bno055_init+0x208>)
 800295c:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a2f      	ldr	r2, [pc, #188]	; (8002a20 <bno055_init+0x20c>)
 8002962:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <bno055_init+0x210>)
 8002968:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a2e      	ldr	r2, [pc, #184]	; (8002a28 <bno055_init+0x214>)
 800296e:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <bno055_init+0x218>)
 8002974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a2d      	ldr	r2, [pc, #180]	; (8002a30 <bno055_init+0x21c>)
 800297c:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a2c      	ldr	r2, [pc, #176]	; (8002a34 <bno055_init+0x220>)
 8002982:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <bno055_init+0x224>)
 8002988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <bno055_init+0x228>)
 8002990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <bno055_init+0x22c>)
 8002998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <bno055_init+0x230>)
 80029a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a28      	ldr	r2, [pc, #160]	; (8002a48 <bno055_init+0x234>)
 80029a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <bno055_init+0x238>)
 80029b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <bno055_init+0x23c>)
 80029b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <bno055_init+0x240>)
 80029c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <bno055_init+0x244>)
 80029c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	08002a5d 	.word	0x08002a5d
 80029dc:	08002ac5 	.word	0x08002ac5
 80029e0:	08002b49 	.word	0x08002b49
 80029e4:	08002bcd 	.word	0x08002bcd
 80029e8:	08002c51 	.word	0x08002c51
 80029ec:	08002d21 	.word	0x08002d21
 80029f0:	08002da5 	.word	0x08002da5
 80029f4:	08002e29 	.word	0x08002e29
 80029f8:	08002ead 	.word	0x08002ead
 80029fc:	08002f7d 	.word	0x08002f7d
 8002a00:	08003001 	.word	0x08003001
 8002a04:	08003085 	.word	0x08003085
 8002a08:	08003109 	.word	0x08003109
 8002a0c:	080031d9 	.word	0x080031d9
 8002a10:	08003249 	.word	0x08003249
 8002a14:	080032b9 	.word	0x080032b9
 8002a18:	08003329 	.word	0x08003329
 8002a1c:	080033e9 	.word	0x080033e9
 8002a20:	0800346d 	.word	0x0800346d
 8002a24:	080034f1 	.word	0x080034f1
 8002a28:	08003575 	.word	0x08003575
 8002a2c:	08003645 	.word	0x08003645
 8002a30:	080036c9 	.word	0x080036c9
 8002a34:	0800374d 	.word	0x0800374d
 8002a38:	080037d1 	.word	0x080037d1
 8002a3c:	080038a1 	.word	0x080038a1
 8002a40:	08003911 	.word	0x08003911
 8002a44:	08003981 	.word	0x08003981
 8002a48:	080039f1 	.word	0x080039f1
 8002a4c:	08003a61 	.word	0x08003a61
 8002a50:	08003b49 	.word	0x08003b49
 8002a54:	08003c19 	.word	0x08003c19
 8002a58:	08003ce7 	.word	0x08003ce7

08002a5c <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b0af      	sub	sp, #188	; 0xbc
 8002a60:	af2a      	add	r7, sp, #168	; 0xa8
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8002a6a:	687c      	ldr	r4, [r7, #4]
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002a70:	f107 030e 	add.w	r3, r7, #14
 8002a74:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a76:	2334      	movs	r3, #52	; 0x34
 8002a78:	9327      	str	r3, [sp, #156]	; 0x9c
 8002a7a:	4668      	mov	r0, sp
 8002a7c:	f104 0310 	add.w	r3, r4, #16
 8002a80:	229c      	movs	r2, #156	; 0x9c
 8002a82:	4619      	mov	r1, r3
 8002a84:	f009 fec2 	bl	800c80c <memcpy>
 8002a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a8c:	f001 fac5 	bl	800401a <bno055_read_regs>
 8002a90:	4603      	mov	r3, r0
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <bno055_temperature+0x42>
        return err;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	e00d      	b.n	8002aba <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7bdb      	ldrb	r3, [r3, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <bno055_temperature+0x54>
 8002aa6:	7bbb      	ldrb	r3, [r7, #14]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	e001      	b.n	8002ab4 <bno055_temperature+0x58>
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	b25b      	sxtb	r3, r3
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}
	...

08002ac4 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b0af      	sub	sp, #188	; 0xbc
 8002ac8:	af2a      	add	r7, sp, #168	; 0xa8
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002ace:	687c      	ldr	r4, [r7, #4]
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	9329      	str	r3, [sp, #164]	; 0xa4
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ada:	2308      	movs	r3, #8
 8002adc:	9327      	str	r3, [sp, #156]	; 0x9c
 8002ade:	4668      	mov	r0, sp
 8002ae0:	f104 0310 	add.w	r3, r4, #16
 8002ae4:	229c      	movs	r2, #156	; 0x9c
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f009 fe90 	bl	800c80c <memcpy>
 8002aec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002af0:	f001 fa93 	bl	800401a <bno055_read_regs>
 8002af4:	4603      	mov	r3, r0
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <bno055_acc_x+0x3e>
        return err;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	e01b      	b.n	8002b3a <bno055_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002b02:	7b7b      	ldrb	r3, [r7, #13]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b21a      	sxth	r2, r3
 8002b08:	7b3b      	ldrb	r3, [r7, #12]
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe f94f 	bl	8000db4 <__aeabi_i2f>
 8002b16:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <bno055_acc_x+0x60>
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <bno055_acc_x+0x80>)
 8002b22:	e001      	b.n	8002b28 <bno055_acc_x+0x64>
 8002b24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f7fe fa4a 	bl	8000fc4 <__aeabi_fdiv>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002b38:	2300      	movs	r3, #0
};
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	42c80000 	.word	0x42c80000

08002b48 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b0af      	sub	sp, #188	; 0xbc
 8002b4c:	af2a      	add	r7, sp, #168	; 0xa8
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002b52:	687c      	ldr	r4, [r7, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9329      	str	r3, [sp, #164]	; 0xa4
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002b5e:	230a      	movs	r3, #10
 8002b60:	9327      	str	r3, [sp, #156]	; 0x9c
 8002b62:	4668      	mov	r0, sp
 8002b64:	f104 0310 	add.w	r3, r4, #16
 8002b68:	229c      	movs	r2, #156	; 0x9c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f009 fe4e 	bl	800c80c <memcpy>
 8002b70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b74:	f001 fa51 	bl	800401a <bno055_read_regs>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <bno055_acc_y+0x3e>
        return err;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	e01b      	b.n	8002bbe <bno055_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002b86:	7b7b      	ldrb	r3, [r7, #13]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	7b3b      	ldrb	r3, [r7, #12]
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f90d 	bl	8000db4 <__aeabi_i2f>
 8002b9a:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <bno055_acc_y+0x60>
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <bno055_acc_y+0x80>)
 8002ba6:	e001      	b.n	8002bac <bno055_acc_y+0x64>
 8002ba8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f7fe fa08 	bl	8000fc4 <__aeabi_fdiv>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002bbc:	2300      	movs	r3, #0
};
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd90      	pop	{r4, r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	42c80000 	.word	0x42c80000

08002bcc <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b0af      	sub	sp, #188	; 0xbc
 8002bd0:	af2a      	add	r7, sp, #168	; 0xa8
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002bd6:	687c      	ldr	r4, [r7, #4]
 8002bd8:	2302      	movs	r3, #2
 8002bda:	9329      	str	r3, [sp, #164]	; 0xa4
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	9328      	str	r3, [sp, #160]	; 0xa0
 8002be2:	230c      	movs	r3, #12
 8002be4:	9327      	str	r3, [sp, #156]	; 0x9c
 8002be6:	4668      	mov	r0, sp
 8002be8:	f104 0310 	add.w	r3, r4, #16
 8002bec:	229c      	movs	r2, #156	; 0x9c
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f009 fe0c 	bl	800c80c <memcpy>
 8002bf4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002bf8:	f001 fa0f 	bl	800401a <bno055_read_regs>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <bno055_acc_z+0x3e>
        return err;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	e01b      	b.n	8002c42 <bno055_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002c0a:	7b7b      	ldrb	r3, [r7, #13]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	7b3b      	ldrb	r3, [r7, #12]
 8002c12:	b21b      	sxth	r3, r3
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f8cb 	bl	8000db4 <__aeabi_i2f>
 8002c1e:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <bno055_acc_z+0x60>
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <bno055_acc_z+0x80>)
 8002c2a:	e001      	b.n	8002c30 <bno055_acc_z+0x64>
 8002c2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f7fe f9c6 	bl	8000fc4 <__aeabi_fdiv>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002c40:	2300      	movs	r3, #0
};
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	42c80000 	.word	0x42c80000

08002c50 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b0b1      	sub	sp, #196	; 0xc4
 8002c54:	af2a      	add	r7, sp, #168	; 0xa8
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002c5a:	687c      	ldr	r4, [r7, #4]
 8002c5c:	2306      	movs	r3, #6
 8002c5e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002c60:	f107 0308 	add.w	r3, r7, #8
 8002c64:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c66:	2308      	movs	r3, #8
 8002c68:	9327      	str	r3, [sp, #156]	; 0x9c
 8002c6a:	4668      	mov	r0, sp
 8002c6c:	f104 0310 	add.w	r3, r4, #16
 8002c70:	229c      	movs	r2, #156	; 0x9c
 8002c72:	4619      	mov	r1, r3
 8002c74:	f009 fdca 	bl	800c80c <memcpy>
 8002c78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c7c:	f001 f9cd 	bl	800401a <bno055_read_regs>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <bno055_acc+0x3e>
        return err;
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	e042      	b.n	8002d14 <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <bno055_acc+0x4a>
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <bno055_acc+0xcc>)
 8002c98:	e001      	b.n	8002c9e <bno055_acc+0x4e>
 8002c9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002c9e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002ca0:	7a7b      	ldrb	r3, [r7, #9]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	b21a      	sxth	r2, r3
 8002ca6:	7a3b      	ldrb	r3, [r7, #8]
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe f880 	bl	8000db4 <__aeabi_i2f>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	6939      	ldr	r1, [r7, #16]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe f983 	bl	8000fc4 <__aeabi_fdiv>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	7abb      	ldrb	r3, [r7, #10]
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe f86d 	bl	8000db4 <__aeabi_i2f>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6939      	ldr	r1, [r7, #16]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f970 	bl	8000fc4 <__aeabi_fdiv>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8002cec:	7b7b      	ldrb	r3, [r7, #13]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	7b3b      	ldrb	r3, [r7, #12]
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b21b      	sxth	r3, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f85a 	bl	8000db4 <__aeabi_i2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	6939      	ldr	r1, [r7, #16]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe f95d 	bl	8000fc4 <__aeabi_fdiv>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8002d12:	2300      	movs	r3, #0
};
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}
 8002d1c:	42c80000 	.word	0x42c80000

08002d20 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b0af      	sub	sp, #188	; 0xbc
 8002d24:	af2a      	add	r7, sp, #168	; 0xa8
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002d2a:	687c      	ldr	r4, [r7, #4]
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d36:	2328      	movs	r3, #40	; 0x28
 8002d38:	9327      	str	r3, [sp, #156]	; 0x9c
 8002d3a:	4668      	mov	r0, sp
 8002d3c:	f104 0310 	add.w	r3, r4, #16
 8002d40:	229c      	movs	r2, #156	; 0x9c
 8002d42:	4619      	mov	r1, r3
 8002d44:	f009 fd62 	bl	800c80c <memcpy>
 8002d48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d4c:	f001 f965 	bl	800401a <bno055_read_regs>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <bno055_linear_acc_x+0x3e>
        return err;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	e01b      	b.n	8002d96 <bno055_linear_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002d5e:	7b7b      	ldrb	r3, [r7, #13]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	7b3b      	ldrb	r3, [r7, #12]
 8002d66:	b21b      	sxth	r3, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b21b      	sxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe f821 	bl	8000db4 <__aeabi_i2f>
 8002d72:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <bno055_linear_acc_x+0x60>
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <bno055_linear_acc_x+0x80>)
 8002d7e:	e001      	b.n	8002d84 <bno055_linear_acc_x+0x64>
 8002d80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f7fe f91c 	bl	8000fc4 <__aeabi_fdiv>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002d94:	2300      	movs	r3, #0
};
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	42c80000 	.word	0x42c80000

08002da4 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b0af      	sub	sp, #188	; 0xbc
 8002da8:	af2a      	add	r7, sp, #168	; 0xa8
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002dae:	687c      	ldr	r4, [r7, #4]
 8002db0:	2302      	movs	r3, #2
 8002db2:	9329      	str	r3, [sp, #164]	; 0xa4
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	9328      	str	r3, [sp, #160]	; 0xa0
 8002dba:	232a      	movs	r3, #42	; 0x2a
 8002dbc:	9327      	str	r3, [sp, #156]	; 0x9c
 8002dbe:	4668      	mov	r0, sp
 8002dc0:	f104 0310 	add.w	r3, r4, #16
 8002dc4:	229c      	movs	r2, #156	; 0x9c
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f009 fd20 	bl	800c80c <memcpy>
 8002dcc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dd0:	f001 f923 	bl	800401a <bno055_read_regs>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <bno055_linear_acc_y+0x3e>
        return err;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	e01b      	b.n	8002e1a <bno055_linear_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002de2:	7b7b      	ldrb	r3, [r7, #13]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	7b3b      	ldrb	r3, [r7, #12]
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd ffdf 	bl	8000db4 <__aeabi_i2f>
 8002df6:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <bno055_linear_acc_y+0x60>
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <bno055_linear_acc_y+0x80>)
 8002e02:	e001      	b.n	8002e08 <bno055_linear_acc_y+0x64>
 8002e04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fe f8da 	bl	8000fc4 <__aeabi_fdiv>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002e18:	2300      	movs	r3, #0
};
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	42c80000 	.word	0x42c80000

08002e28 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b0af      	sub	sp, #188	; 0xbc
 8002e2c:	af2a      	add	r7, sp, #168	; 0xa8
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002e32:	687c      	ldr	r4, [r7, #4]
 8002e34:	2302      	movs	r3, #2
 8002e36:	9329      	str	r3, [sp, #164]	; 0xa4
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e3e:	232c      	movs	r3, #44	; 0x2c
 8002e40:	9327      	str	r3, [sp, #156]	; 0x9c
 8002e42:	4668      	mov	r0, sp
 8002e44:	f104 0310 	add.w	r3, r4, #16
 8002e48:	229c      	movs	r2, #156	; 0x9c
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f009 fcde 	bl	800c80c <memcpy>
 8002e50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e54:	f001 f8e1 	bl	800401a <bno055_read_regs>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <bno055_linear_acc_z+0x3e>
        return err;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	e01b      	b.n	8002e9e <bno055_linear_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002e66:	7b7b      	ldrb	r3, [r7, #13]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	b21a      	sxth	r2, r3
 8002e6c:	7b3b      	ldrb	r3, [r7, #12]
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd ff9d 	bl	8000db4 <__aeabi_i2f>
 8002e7a:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <bno055_linear_acc_z+0x60>
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <bno055_linear_acc_z+0x80>)
 8002e86:	e001      	b.n	8002e8c <bno055_linear_acc_z+0x64>
 8002e88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fe f898 	bl	8000fc4 <__aeabi_fdiv>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002e9c:	2300      	movs	r3, #0
};
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	42c80000 	.word	0x42c80000

08002eac <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b0b1      	sub	sp, #196	; 0xc4
 8002eb0:	af2a      	add	r7, sp, #168	; 0xa8
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002eb6:	687c      	ldr	r4, [r7, #4]
 8002eb8:	2306      	movs	r3, #6
 8002eba:	9329      	str	r3, [sp, #164]	; 0xa4
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ec2:	2328      	movs	r3, #40	; 0x28
 8002ec4:	9327      	str	r3, [sp, #156]	; 0x9c
 8002ec6:	4668      	mov	r0, sp
 8002ec8:	f104 0310 	add.w	r3, r4, #16
 8002ecc:	229c      	movs	r2, #156	; 0x9c
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f009 fc9c 	bl	800c80c <memcpy>
 8002ed4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ed8:	f001 f89f 	bl	800401a <bno055_read_regs>
 8002edc:	4603      	mov	r3, r0
 8002ede:	75fb      	strb	r3, [r7, #23]
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <bno055_linear_acc+0x3e>
        return err;
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	e042      	b.n	8002f70 <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <bno055_linear_acc+0x4a>
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <bno055_linear_acc+0xcc>)
 8002ef4:	e001      	b.n	8002efa <bno055_linear_acc+0x4e>
 8002ef6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002efa:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002efc:	7a7b      	ldrb	r3, [r7, #9]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	b21a      	sxth	r2, r3
 8002f02:	7a3b      	ldrb	r3, [r7, #8]
 8002f04:	b21b      	sxth	r3, r3
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd ff52 	bl	8000db4 <__aeabi_i2f>
 8002f10:	4603      	mov	r3, r0
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe f855 	bl	8000fc4 <__aeabi_fdiv>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002f22:	7afb      	ldrb	r3, [r7, #11]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	7abb      	ldrb	r3, [r7, #10]
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd ff3f 	bl	8000db4 <__aeabi_i2f>
 8002f36:	4603      	mov	r3, r0
 8002f38:	6939      	ldr	r1, [r7, #16]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe f842 	bl	8000fc4 <__aeabi_fdiv>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8002f48:	7b7b      	ldrb	r3, [r7, #13]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	b21a      	sxth	r2, r3
 8002f4e:	7b3b      	ldrb	r3, [r7, #12]
 8002f50:	b21b      	sxth	r3, r3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd ff2c 	bl	8000db4 <__aeabi_i2f>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	6939      	ldr	r1, [r7, #16]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe f82f 	bl	8000fc4 <__aeabi_fdiv>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8002f6e:	2300      	movs	r3, #0
};
 8002f70:	4618      	mov	r0, r3
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd90      	pop	{r4, r7, pc}
 8002f78:	42c80000 	.word	0x42c80000

08002f7c <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b0af      	sub	sp, #188	; 0xbc
 8002f80:	af2a      	add	r7, sp, #168	; 0xa8
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002f86:	687c      	ldr	r4, [r7, #4]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	9329      	str	r3, [sp, #164]	; 0xa4
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f92:	2314      	movs	r3, #20
 8002f94:	9327      	str	r3, [sp, #156]	; 0x9c
 8002f96:	4668      	mov	r0, sp
 8002f98:	f104 0310 	add.w	r3, r4, #16
 8002f9c:	229c      	movs	r2, #156	; 0x9c
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f009 fc34 	bl	800c80c <memcpy>
 8002fa4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fa8:	f001 f837 	bl	800401a <bno055_read_regs>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <bno055_gyro_x+0x3e>
        return err;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	e01b      	b.n	8002ff2 <bno055_gyro_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002fba:	7b7b      	ldrb	r3, [r7, #13]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	b21a      	sxth	r2, r3
 8002fc0:	7b3b      	ldrb	r3, [r7, #12]
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fd fef3 	bl	8000db4 <__aeabi_i2f>
 8002fce:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <bno055_gyro_x+0x62>
 8002fd8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002fdc:	e000      	b.n	8002fe0 <bno055_gyro_x+0x64>
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <bno055_gyro_x+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f7fd ffee 	bl	8000fc4 <__aeabi_fdiv>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002ff0:	2300      	movs	r3, #0
};
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	44610000 	.word	0x44610000

08003000 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b0af      	sub	sp, #188	; 0xbc
 8003004:	af2a      	add	r7, sp, #168	; 0xa8
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800300a:	687c      	ldr	r4, [r7, #4]
 800300c:	2302      	movs	r3, #2
 800300e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	9328      	str	r3, [sp, #160]	; 0xa0
 8003016:	2316      	movs	r3, #22
 8003018:	9327      	str	r3, [sp, #156]	; 0x9c
 800301a:	4668      	mov	r0, sp
 800301c:	f104 0310 	add.w	r3, r4, #16
 8003020:	229c      	movs	r2, #156	; 0x9c
 8003022:	4619      	mov	r1, r3
 8003024:	f009 fbf2 	bl	800c80c <memcpy>
 8003028:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800302c:	f000 fff5 	bl	800401a <bno055_read_regs>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <bno055_gyro_y+0x3e>
        return err;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	e01b      	b.n	8003076 <bno055_gyro_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800303e:	7b7b      	ldrb	r3, [r7, #13]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	b21a      	sxth	r2, r3
 8003044:	7b3b      	ldrb	r3, [r7, #12]
 8003046:	b21b      	sxth	r3, r3
 8003048:	4313      	orrs	r3, r2
 800304a:	b21b      	sxth	r3, r3
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd feb1 	bl	8000db4 <__aeabi_i2f>
 8003052:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <bno055_gyro_y+0x62>
 800305c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003060:	e000      	b.n	8003064 <bno055_gyro_y+0x64>
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <bno055_gyro_y+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f7fd ffac 	bl	8000fc4 <__aeabi_fdiv>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8003074:	2300      	movs	r3, #0
};
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop
 8003080:	44610000 	.word	0x44610000

08003084 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b0af      	sub	sp, #188	; 0xbc
 8003088:	af2a      	add	r7, sp, #168	; 0xa8
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800308e:	687c      	ldr	r4, [r7, #4]
 8003090:	2302      	movs	r3, #2
 8003092:	9329      	str	r3, [sp, #164]	; 0xa4
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	9328      	str	r3, [sp, #160]	; 0xa0
 800309a:	2318      	movs	r3, #24
 800309c:	9327      	str	r3, [sp, #156]	; 0x9c
 800309e:	4668      	mov	r0, sp
 80030a0:	f104 0310 	add.w	r3, r4, #16
 80030a4:	229c      	movs	r2, #156	; 0x9c
 80030a6:	4619      	mov	r1, r3
 80030a8:	f009 fbb0 	bl	800c80c <memcpy>
 80030ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030b0:	f000 ffb3 	bl	800401a <bno055_read_regs>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <bno055_gyro_z+0x3e>
        return err;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	e01b      	b.n	80030fa <bno055_gyro_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80030c2:	7b7b      	ldrb	r3, [r7, #13]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	b21a      	sxth	r2, r3
 80030c8:	7b3b      	ldrb	r3, [r7, #12]
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	4313      	orrs	r3, r2
 80030ce:	b21b      	sxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fe6f 	bl	8000db4 <__aeabi_i2f>
 80030d6:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <bno055_gyro_z+0x62>
 80030e0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80030e4:	e000      	b.n	80030e8 <bno055_gyro_z+0x64>
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <bno055_gyro_z+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd ff6a 	bl	8000fc4 <__aeabi_fdiv>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80030f8:	2300      	movs	r3, #0
};
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}
 8003102:	bf00      	nop
 8003104:	44610000 	.word	0x44610000

08003108 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b0b1      	sub	sp, #196	; 0xc4
 800310c:	af2a      	add	r7, sp, #168	; 0xa8
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8003112:	687c      	ldr	r4, [r7, #4]
 8003114:	2306      	movs	r3, #6
 8003116:	9329      	str	r3, [sp, #164]	; 0xa4
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	9328      	str	r3, [sp, #160]	; 0xa0
 800311e:	2314      	movs	r3, #20
 8003120:	9327      	str	r3, [sp, #156]	; 0x9c
 8003122:	4668      	mov	r0, sp
 8003124:	f104 0310 	add.w	r3, r4, #16
 8003128:	229c      	movs	r2, #156	; 0x9c
 800312a:	4619      	mov	r1, r3
 800312c:	f009 fb6e 	bl	800c80c <memcpy>
 8003130:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003134:	f000 ff71 	bl	800401a <bno055_read_regs>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <bno055_gyro+0x3e>
        return err;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	e042      	b.n	80031cc <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <bno055_gyro+0x4c>
 800314e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003152:	e000      	b.n	8003156 <bno055_gyro+0x4e>
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8003156:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8003158:	7a7b      	ldrb	r3, [r7, #9]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	b21a      	sxth	r2, r3
 800315e:	7a3b      	ldrb	r3, [r7, #8]
 8003160:	b21b      	sxth	r3, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	b21b      	sxth	r3, r3
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fe24 	bl	8000db4 <__aeabi_i2f>
 800316c:	4603      	mov	r3, r0
 800316e:	6939      	ldr	r1, [r7, #16]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd ff27 	bl	8000fc4 <__aeabi_fdiv>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	b21a      	sxth	r2, r3
 8003184:	7abb      	ldrb	r3, [r7, #10]
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21b      	sxth	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd fe11 	bl	8000db4 <__aeabi_i2f>
 8003192:	4603      	mov	r3, r0
 8003194:	6939      	ldr	r1, [r7, #16]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd ff14 	bl	8000fc4 <__aeabi_fdiv>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80031a4:	7b7b      	ldrb	r3, [r7, #13]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	b21a      	sxth	r2, r3
 80031aa:	7b3b      	ldrb	r3, [r7, #12]
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b21b      	sxth	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fdfe 	bl	8000db4 <__aeabi_i2f>
 80031b8:	4603      	mov	r3, r0
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd ff01 	bl	8000fc4 <__aeabi_fdiv>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	44610000 	.word	0x44610000

080031d8 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b0af      	sub	sp, #188	; 0xbc
 80031dc:	af2a      	add	r7, sp, #168	; 0xa8
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 80031e2:	687c      	ldr	r4, [r7, #4]
 80031e4:	2302      	movs	r3, #2
 80031e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80031ee:	230e      	movs	r3, #14
 80031f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80031f2:	4668      	mov	r0, sp
 80031f4:	f104 0310 	add.w	r3, r4, #16
 80031f8:	229c      	movs	r2, #156	; 0x9c
 80031fa:	4619      	mov	r1, r3
 80031fc:	f009 fb06 	bl	800c80c <memcpy>
 8003200:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003204:	f000 ff09 	bl	800401a <bno055_read_regs>
 8003208:	4603      	mov	r3, r0
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <bno055_mag_x+0x3e>
        return err;
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	e014      	b.n	8003240 <bno055_mag_x+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8003216:	7b7b      	ldrb	r3, [r7, #13]
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	b21a      	sxth	r2, r3
 800321c:	7b3b      	ldrb	r3, [r7, #12]
 800321e:	b21b      	sxth	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	b21b      	sxth	r3, r3
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd fdc5 	bl	8000db4 <__aeabi_i2f>
 800322a:	4603      	mov	r3, r0
 800322c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fec7 	bl	8000fc4 <__aeabi_fdiv>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}

08003248 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b0af      	sub	sp, #188	; 0xbc
 800324c:	af2a      	add	r7, sp, #168	; 0xa8
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8003252:	687c      	ldr	r4, [r7, #4]
 8003254:	2302      	movs	r3, #2
 8003256:	9329      	str	r3, [sp, #164]	; 0xa4
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	9328      	str	r3, [sp, #160]	; 0xa0
 800325e:	2310      	movs	r3, #16
 8003260:	9327      	str	r3, [sp, #156]	; 0x9c
 8003262:	4668      	mov	r0, sp
 8003264:	f104 0310 	add.w	r3, r4, #16
 8003268:	229c      	movs	r2, #156	; 0x9c
 800326a:	4619      	mov	r1, r3
 800326c:	f009 face 	bl	800c80c <memcpy>
 8003270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003274:	f000 fed1 	bl	800401a <bno055_read_regs>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <bno055_mag_y+0x3e>
        return err;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	e014      	b.n	80032b0 <bno055_mag_y+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8003286:	7b7b      	ldrb	r3, [r7, #13]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	b21a      	sxth	r2, r3
 800328c:	7b3b      	ldrb	r3, [r7, #12]
 800328e:	b21b      	sxth	r3, r3
 8003290:	4313      	orrs	r3, r2
 8003292:	b21b      	sxth	r3, r3
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd fd8d 	bl	8000db4 <__aeabi_i2f>
 800329a:	4603      	mov	r3, r0
 800329c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fe8f 	bl	8000fc4 <__aeabi_fdiv>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}

080032b8 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b0af      	sub	sp, #188	; 0xbc
 80032bc:	af2a      	add	r7, sp, #168	; 0xa8
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80032c2:	687c      	ldr	r4, [r7, #4]
 80032c4:	2302      	movs	r3, #2
 80032c6:	9329      	str	r3, [sp, #164]	; 0xa4
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80032ce:	2312      	movs	r3, #18
 80032d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80032d2:	4668      	mov	r0, sp
 80032d4:	f104 0310 	add.w	r3, r4, #16
 80032d8:	229c      	movs	r2, #156	; 0x9c
 80032da:	4619      	mov	r1, r3
 80032dc:	f009 fa96 	bl	800c80c <memcpy>
 80032e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032e4:	f000 fe99 	bl	800401a <bno055_read_regs>
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <bno055_mag_z+0x3e>
        return err;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	e014      	b.n	8003320 <bno055_mag_z+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80032f6:	7b7b      	ldrb	r3, [r7, #13]
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	7b3b      	ldrb	r3, [r7, #12]
 80032fe:	b21b      	sxth	r3, r3
 8003300:	4313      	orrs	r3, r2
 8003302:	b21b      	sxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd fd55 	bl	8000db4 <__aeabi_i2f>
 800330a:	4603      	mov	r3, r0
 800330c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fe57 	bl	8000fc4 <__aeabi_fdiv>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}

08003328 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b0af      	sub	sp, #188	; 0xbc
 800332c:	af2a      	add	r7, sp, #168	; 0xa8
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8003332:	687c      	ldr	r4, [r7, #4]
 8003334:	2306      	movs	r3, #6
 8003336:	9329      	str	r3, [sp, #164]	; 0xa4
 8003338:	f107 0308 	add.w	r3, r7, #8
 800333c:	9328      	str	r3, [sp, #160]	; 0xa0
 800333e:	230e      	movs	r3, #14
 8003340:	9327      	str	r3, [sp, #156]	; 0x9c
 8003342:	4668      	mov	r0, sp
 8003344:	f104 0310 	add.w	r3, r4, #16
 8003348:	229c      	movs	r2, #156	; 0x9c
 800334a:	4619      	mov	r1, r3
 800334c:	f009 fa5e 	bl	800c80c <memcpy>
 8003350:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003354:	f000 fe61 	bl	800401a <bno055_read_regs>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <bno055_mag+0x3e>
        return err;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	e03c      	b.n	80033e0 <bno055_mag+0xb8>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8003366:	7a7b      	ldrb	r3, [r7, #9]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	b21a      	sxth	r2, r3
 800336c:	7a3b      	ldrb	r3, [r7, #8]
 800336e:	b21b      	sxth	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b21b      	sxth	r3, r3
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd fd1d 	bl	8000db4 <__aeabi_i2f>
 800337a:	4603      	mov	r3, r0
 800337c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fe1f 	bl	8000fc4 <__aeabi_fdiv>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	b21a      	sxth	r2, r3
 8003394:	7abb      	ldrb	r3, [r7, #10]
 8003396:	b21b      	sxth	r3, r3
 8003398:	4313      	orrs	r3, r2
 800339a:	b21b      	sxth	r3, r3
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd fd09 	bl	8000db4 <__aeabi_i2f>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fe0b 	bl	8000fc4 <__aeabi_fdiv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 80033b6:	7b7b      	ldrb	r3, [r7, #13]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	7b3b      	ldrb	r3, [r7, #12]
 80033be:	b21b      	sxth	r3, r3
 80033c0:	4313      	orrs	r3, r2
 80033c2:	b21b      	sxth	r3, r3
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd fcf5 	bl	8000db4 <__aeabi_i2f>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fdf7 	bl	8000fc4 <__aeabi_fdiv>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 80033de:	2300      	movs	r3, #0
};
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd90      	pop	{r4, r7, pc}

080033e8 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b0b1      	sub	sp, #196	; 0xc4
 80033ec:	af2a      	add	r7, sp, #168	; 0xa8
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 80033f2:	687c      	ldr	r4, [r7, #4]
 80033f4:	2302      	movs	r3, #2
 80033f6:	9329      	str	r3, [sp, #164]	; 0xa4
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80033fe:	232e      	movs	r3, #46	; 0x2e
 8003400:	9327      	str	r3, [sp, #156]	; 0x9c
 8003402:	4668      	mov	r0, sp
 8003404:	f104 0310 	add.w	r3, r4, #16
 8003408:	229c      	movs	r2, #156	; 0x9c
 800340a:	4619      	mov	r1, r3
 800340c:	f009 f9fe 	bl	800c80c <memcpy>
 8003410:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003414:	f000 fe01 	bl	800401a <bno055_read_regs>
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <bno055_gravity_x+0x3e>
        return err;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	e01c      	b.n	8003460 <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <bno055_gravity_x+0x4a>
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <bno055_gravity_x+0x80>)
 8003430:	e001      	b.n	8003436 <bno055_gravity_x+0x4e>
 8003432:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8003436:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003438:	7b7b      	ldrb	r3, [r7, #13]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	b21a      	sxth	r2, r3
 800343e:	7b3b      	ldrb	r3, [r7, #12]
 8003440:	b21b      	sxth	r3, r3
 8003442:	4313      	orrs	r3, r2
 8003444:	b21b      	sxth	r3, r3
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fcb4 	bl	8000db4 <__aeabi_i2f>
 800344c:	4603      	mov	r3, r0
 800344e:	6939      	ldr	r1, [r7, #16]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd fdb7 	bl	8000fc4 <__aeabi_fdiv>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bd90      	pop	{r4, r7, pc}
 8003468:	42c80000 	.word	0x42c80000

0800346c <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b0b1      	sub	sp, #196	; 0xc4
 8003470:	af2a      	add	r7, sp, #168	; 0xa8
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8003476:	687c      	ldr	r4, [r7, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9329      	str	r3, [sp, #164]	; 0xa4
 800347c:	f107 030c 	add.w	r3, r7, #12
 8003480:	9328      	str	r3, [sp, #160]	; 0xa0
 8003482:	2330      	movs	r3, #48	; 0x30
 8003484:	9327      	str	r3, [sp, #156]	; 0x9c
 8003486:	4668      	mov	r0, sp
 8003488:	f104 0310 	add.w	r3, r4, #16
 800348c:	229c      	movs	r2, #156	; 0x9c
 800348e:	4619      	mov	r1, r3
 8003490:	f009 f9bc 	bl	800c80c <memcpy>
 8003494:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003498:	f000 fdbf 	bl	800401a <bno055_read_regs>
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <bno055_gravity_y+0x3e>
        return err;
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	e01c      	b.n	80034e4 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <bno055_gravity_y+0x4a>
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <bno055_gravity_y+0x80>)
 80034b4:	e001      	b.n	80034ba <bno055_gravity_y+0x4e>
 80034b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80034ba:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80034bc:	7b7b      	ldrb	r3, [r7, #13]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	7b3b      	ldrb	r3, [r7, #12]
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b21b      	sxth	r3, r3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fc72 	bl	8000db4 <__aeabi_i2f>
 80034d0:	4603      	mov	r3, r0
 80034d2:	6939      	ldr	r1, [r7, #16]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd fd75 	bl	8000fc4 <__aeabi_fdiv>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd90      	pop	{r4, r7, pc}
 80034ec:	42c80000 	.word	0x42c80000

080034f0 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b0b1      	sub	sp, #196	; 0xc4
 80034f4:	af2a      	add	r7, sp, #168	; 0xa8
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80034fa:	687c      	ldr	r4, [r7, #4]
 80034fc:	2302      	movs	r3, #2
 80034fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	9328      	str	r3, [sp, #160]	; 0xa0
 8003506:	2332      	movs	r3, #50	; 0x32
 8003508:	9327      	str	r3, [sp, #156]	; 0x9c
 800350a:	4668      	mov	r0, sp
 800350c:	f104 0310 	add.w	r3, r4, #16
 8003510:	229c      	movs	r2, #156	; 0x9c
 8003512:	4619      	mov	r1, r3
 8003514:	f009 f97a 	bl	800c80c <memcpy>
 8003518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800351c:	f000 fd7d 	bl	800401a <bno055_read_regs>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <bno055_gravity_z+0x3e>
        return err;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	e01c      	b.n	8003568 <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <bno055_gravity_z+0x4a>
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <bno055_gravity_z+0x80>)
 8003538:	e001      	b.n	800353e <bno055_gravity_z+0x4e>
 800353a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800353e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003540:	7b7b      	ldrb	r3, [r7, #13]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	b21a      	sxth	r2, r3
 8003546:	7b3b      	ldrb	r3, [r7, #12]
 8003548:	b21b      	sxth	r3, r3
 800354a:	4313      	orrs	r3, r2
 800354c:	b21b      	sxth	r3, r3
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fc30 	bl	8000db4 <__aeabi_i2f>
 8003554:	4603      	mov	r3, r0
 8003556:	6939      	ldr	r1, [r7, #16]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fd fd33 	bl	8000fc4 <__aeabi_fdiv>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}
 8003570:	42c80000 	.word	0x42c80000

08003574 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b0b1      	sub	sp, #196	; 0xc4
 8003578:	af2a      	add	r7, sp, #168	; 0xa8
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 800357e:	687c      	ldr	r4, [r7, #4]
 8003580:	2306      	movs	r3, #6
 8003582:	9329      	str	r3, [sp, #164]	; 0xa4
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	9328      	str	r3, [sp, #160]	; 0xa0
 800358a:	232e      	movs	r3, #46	; 0x2e
 800358c:	9327      	str	r3, [sp, #156]	; 0x9c
 800358e:	4668      	mov	r0, sp
 8003590:	f104 0310 	add.w	r3, r4, #16
 8003594:	229c      	movs	r2, #156	; 0x9c
 8003596:	4619      	mov	r1, r3
 8003598:	f009 f938 	bl	800c80c <memcpy>
 800359c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035a0:	f000 fd3b 	bl	800401a <bno055_read_regs>
 80035a4:	4603      	mov	r3, r0
 80035a6:	75fb      	strb	r3, [r7, #23]
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <bno055_gravity+0x3e>
        return err;
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	e042      	b.n	8003638 <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <bno055_gravity+0x4a>
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <bno055_gravity+0xcc>)
 80035bc:	e001      	b.n	80035c2 <bno055_gravity+0x4e>
 80035be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80035c2:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 80035c4:	7a7b      	ldrb	r3, [r7, #9]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	b21a      	sxth	r2, r3
 80035ca:	7a3b      	ldrb	r3, [r7, #8]
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fbee 	bl	8000db4 <__aeabi_i2f>
 80035d8:	4603      	mov	r3, r0
 80035da:	6939      	ldr	r1, [r7, #16]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fcf1 	bl	8000fc4 <__aeabi_fdiv>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	b21a      	sxth	r2, r3
 80035f0:	7abb      	ldrb	r3, [r7, #10]
 80035f2:	b21b      	sxth	r3, r3
 80035f4:	4313      	orrs	r3, r2
 80035f6:	b21b      	sxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fbdb 	bl	8000db4 <__aeabi_i2f>
 80035fe:	4603      	mov	r3, r0
 8003600:	6939      	ldr	r1, [r7, #16]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fcde 	bl	8000fc4 <__aeabi_fdiv>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	605a      	str	r2, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8003610:	7b7b      	ldrb	r3, [r7, #13]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	b21a      	sxth	r2, r3
 8003616:	7b3b      	ldrb	r3, [r7, #12]
 8003618:	b21b      	sxth	r3, r3
 800361a:	4313      	orrs	r3, r2
 800361c:	b21b      	sxth	r3, r3
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd fbc8 	bl	8000db4 <__aeabi_i2f>
 8003624:	4603      	mov	r3, r0
 8003626:	6939      	ldr	r1, [r7, #16]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fccb 	bl	8000fc4 <__aeabi_fdiv>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}
 8003640:	42c80000 	.word	0x42c80000

08003644 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b0b1      	sub	sp, #196	; 0xc4
 8003648:	af2a      	add	r7, sp, #168	; 0xa8
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 800364e:	687c      	ldr	r4, [r7, #4]
 8003650:	2302      	movs	r3, #2
 8003652:	9329      	str	r3, [sp, #164]	; 0xa4
 8003654:	f107 030c 	add.w	r3, r7, #12
 8003658:	9328      	str	r3, [sp, #160]	; 0xa0
 800365a:	231a      	movs	r3, #26
 800365c:	9327      	str	r3, [sp, #156]	; 0x9c
 800365e:	4668      	mov	r0, sp
 8003660:	f104 0310 	add.w	r3, r4, #16
 8003664:	229c      	movs	r2, #156	; 0x9c
 8003666:	4619      	mov	r1, r3
 8003668:	f009 f8d0 	bl	800c80c <memcpy>
 800366c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003670:	f000 fcd3 	bl	800401a <bno055_read_regs>
 8003674:	4603      	mov	r3, r0
 8003676:	75fb      	strb	r3, [r7, #23]
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	e01c      	b.n	80036bc <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <bno055_euler_yaw+0x4c>
 800368a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800368e:	e000      	b.n	8003692 <bno055_euler_yaw+0x4e>
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003692:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003694:	7b7b      	ldrb	r3, [r7, #13]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	b21a      	sxth	r2, r3
 800369a:	7b3b      	ldrb	r3, [r7, #12]
 800369c:	b21b      	sxth	r3, r3
 800369e:	4313      	orrs	r3, r2
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd fb86 	bl	8000db4 <__aeabi_i2f>
 80036a8:	4603      	mov	r3, r0
 80036aa:	6939      	ldr	r1, [r7, #16]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fc89 	bl	8000fc4 <__aeabi_fdiv>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	44610000 	.word	0x44610000

080036c8 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b0b1      	sub	sp, #196	; 0xc4
 80036cc:	af2a      	add	r7, sp, #168	; 0xa8
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 80036d2:	687c      	ldr	r4, [r7, #4]
 80036d4:	2302      	movs	r3, #2
 80036d6:	9329      	str	r3, [sp, #164]	; 0xa4
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80036de:	231c      	movs	r3, #28
 80036e0:	9327      	str	r3, [sp, #156]	; 0x9c
 80036e2:	4668      	mov	r0, sp
 80036e4:	f104 0310 	add.w	r3, r4, #16
 80036e8:	229c      	movs	r2, #156	; 0x9c
 80036ea:	4619      	mov	r1, r3
 80036ec:	f009 f88e 	bl	800c80c <memcpy>
 80036f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036f4:	f000 fc91 	bl	800401a <bno055_read_regs>
 80036f8:	4603      	mov	r3, r0
 80036fa:	75fb      	strb	r3, [r7, #23]
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <bno055_euler_roll+0x3e>
        return err;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	e01c      	b.n	8003740 <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <bno055_euler_roll+0x4c>
 800370e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003712:	e000      	b.n	8003716 <bno055_euler_roll+0x4e>
 8003714:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003716:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003718:	7b7b      	ldrb	r3, [r7, #13]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	b21a      	sxth	r2, r3
 800371e:	7b3b      	ldrb	r3, [r7, #12]
 8003720:	b21b      	sxth	r3, r3
 8003722:	4313      	orrs	r3, r2
 8003724:	b21b      	sxth	r3, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fb44 	bl	8000db4 <__aeabi_i2f>
 800372c:	4603      	mov	r3, r0
 800372e:	6939      	ldr	r1, [r7, #16]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fc47 	bl	8000fc4 <__aeabi_fdiv>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}
 8003748:	44610000 	.word	0x44610000

0800374c <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b0b1      	sub	sp, #196	; 0xc4
 8003750:	af2a      	add	r7, sp, #168	; 0xa8
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8003756:	687c      	ldr	r4, [r7, #4]
 8003758:	2302      	movs	r3, #2
 800375a:	9329      	str	r3, [sp, #164]	; 0xa4
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	9328      	str	r3, [sp, #160]	; 0xa0
 8003762:	231e      	movs	r3, #30
 8003764:	9327      	str	r3, [sp, #156]	; 0x9c
 8003766:	4668      	mov	r0, sp
 8003768:	f104 0310 	add.w	r3, r4, #16
 800376c:	229c      	movs	r2, #156	; 0x9c
 800376e:	4619      	mov	r1, r3
 8003770:	f009 f84c 	bl	800c80c <memcpy>
 8003774:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003778:	f000 fc4f 	bl	800401a <bno055_read_regs>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <bno055_euler_pitch+0x3e>
        return err;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	e01c      	b.n	80037c4 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800378e:	2b00      	cmp	r3, #0
 8003790:	d102      	bne.n	8003798 <bno055_euler_pitch+0x4c>
 8003792:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003796:	e000      	b.n	800379a <bno055_euler_pitch+0x4e>
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800379a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800379c:	7b7b      	ldrb	r3, [r7, #13]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	7b3b      	ldrb	r3, [r7, #12]
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b21b      	sxth	r3, r3
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fb02 	bl	8000db4 <__aeabi_i2f>
 80037b0:	4603      	mov	r3, r0
 80037b2:	6939      	ldr	r1, [r7, #16]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd fc05 	bl	8000fc4 <__aeabi_fdiv>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	44610000 	.word	0x44610000

080037d0 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b0b1      	sub	sp, #196	; 0xc4
 80037d4:	af2a      	add	r7, sp, #168	; 0xa8
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 80037da:	687c      	ldr	r4, [r7, #4]
 80037dc:	2306      	movs	r3, #6
 80037de:	9329      	str	r3, [sp, #164]	; 0xa4
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80037e6:	231a      	movs	r3, #26
 80037e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80037ea:	4668      	mov	r0, sp
 80037ec:	f104 0310 	add.w	r3, r4, #16
 80037f0:	229c      	movs	r2, #156	; 0x9c
 80037f2:	4619      	mov	r1, r3
 80037f4:	f009 f80a 	bl	800c80c <memcpy>
 80037f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037fc:	f000 fc0d 	bl	800401a <bno055_read_regs>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	e042      	b.n	8003894 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <bno055_euler+0x4c>
 8003816:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800381a:	e000      	b.n	800381e <bno055_euler+0x4e>
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800381e:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8003820:	7a7b      	ldrb	r3, [r7, #9]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	b21a      	sxth	r2, r3
 8003826:	7a3b      	ldrb	r3, [r7, #8]
 8003828:	b21b      	sxth	r3, r3
 800382a:	4313      	orrs	r3, r2
 800382c:	b21b      	sxth	r3, r3
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fac0 	bl	8000db4 <__aeabi_i2f>
 8003834:	4603      	mov	r3, r0
 8003836:	6939      	ldr	r1, [r7, #16]
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fbc3 	bl	8000fc4 <__aeabi_fdiv>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	609a      	str	r2, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	b21a      	sxth	r2, r3
 800384c:	7abb      	ldrb	r3, [r7, #10]
 800384e:	b21b      	sxth	r3, r3
 8003850:	4313      	orrs	r3, r2
 8003852:	b21b      	sxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd faad 	bl	8000db4 <__aeabi_i2f>
 800385a:	4603      	mov	r3, r0
 800385c:	6939      	ldr	r1, [r7, #16]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fbb0 	bl	8000fc4 <__aeabi_fdiv>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	601a      	str	r2, [r3, #0]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 800386c:	7b7b      	ldrb	r3, [r7, #13]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	b21a      	sxth	r2, r3
 8003872:	7b3b      	ldrb	r3, [r7, #12]
 8003874:	b21b      	sxth	r3, r3
 8003876:	4313      	orrs	r3, r2
 8003878:	b21b      	sxth	r3, r3
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fa9a 	bl	8000db4 <__aeabi_i2f>
 8003880:	4603      	mov	r3, r0
 8003882:	6939      	ldr	r1, [r7, #16]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fb9d 	bl	8000fc4 <__aeabi_fdiv>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	605a      	str	r2, [r3, #4]
    return BNO_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	44610000 	.word	0x44610000

080038a0 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b0af      	sub	sp, #188	; 0xbc
 80038a4:	af2a      	add	r7, sp, #168	; 0xa8
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 80038aa:	687c      	ldr	r4, [r7, #4]
 80038ac:	2302      	movs	r3, #2
 80038ae:	9329      	str	r3, [sp, #164]	; 0xa4
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80038b6:	2320      	movs	r3, #32
 80038b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80038ba:	4668      	mov	r0, sp
 80038bc:	f104 0310 	add.w	r3, r4, #16
 80038c0:	229c      	movs	r2, #156	; 0x9c
 80038c2:	4619      	mov	r1, r3
 80038c4:	f008 ffa2 	bl	800c80c <memcpy>
 80038c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038cc:	f000 fba5 	bl	800401a <bno055_read_regs>
 80038d0:	4603      	mov	r3, r0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <bno055_quaternion_w+0x3e>
        return err;
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	e014      	b.n	8003908 <bno055_quaternion_w+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80038de:	7b7b      	ldrb	r3, [r7, #13]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	b21a      	sxth	r2, r3
 80038e4:	7b3b      	ldrb	r3, [r7, #12]
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b21b      	sxth	r3, r3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd fa61 	bl	8000db4 <__aeabi_i2f>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fb63 	bl	8000fc4 <__aeabi_fdiv>
 80038fe:	4603      	mov	r3, r0
 8003900:	461a      	mov	r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bd90      	pop	{r4, r7, pc}

08003910 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b0af      	sub	sp, #188	; 0xbc
 8003914:	af2a      	add	r7, sp, #168	; 0xa8
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800391a:	687c      	ldr	r4, [r7, #4]
 800391c:	2302      	movs	r3, #2
 800391e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	9328      	str	r3, [sp, #160]	; 0xa0
 8003926:	2322      	movs	r3, #34	; 0x22
 8003928:	9327      	str	r3, [sp, #156]	; 0x9c
 800392a:	4668      	mov	r0, sp
 800392c:	f104 0310 	add.w	r3, r4, #16
 8003930:	229c      	movs	r2, #156	; 0x9c
 8003932:	4619      	mov	r1, r3
 8003934:	f008 ff6a 	bl	800c80c <memcpy>
 8003938:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800393c:	f000 fb6d 	bl	800401a <bno055_read_regs>
 8003940:	4603      	mov	r3, r0
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <bno055_quaternion_x+0x3e>
        return err;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	e014      	b.n	8003978 <bno055_quaternion_x+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800394e:	7b7b      	ldrb	r3, [r7, #13]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	b21a      	sxth	r2, r3
 8003954:	7b3b      	ldrb	r3, [r7, #12]
 8003956:	b21b      	sxth	r3, r3
 8003958:	4313      	orrs	r3, r2
 800395a:	b21b      	sxth	r3, r3
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd fa29 	bl	8000db4 <__aeabi_i2f>
 8003962:	4603      	mov	r3, r0
 8003964:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fb2b 	bl	8000fc4 <__aeabi_fdiv>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b0af      	sub	sp, #188	; 0xbc
 8003984:	af2a      	add	r7, sp, #168	; 0xa8
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800398a:	687c      	ldr	r4, [r7, #4]
 800398c:	2302      	movs	r3, #2
 800398e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	9328      	str	r3, [sp, #160]	; 0xa0
 8003996:	2324      	movs	r3, #36	; 0x24
 8003998:	9327      	str	r3, [sp, #156]	; 0x9c
 800399a:	4668      	mov	r0, sp
 800399c:	f104 0310 	add.w	r3, r4, #16
 80039a0:	229c      	movs	r2, #156	; 0x9c
 80039a2:	4619      	mov	r1, r3
 80039a4:	f008 ff32 	bl	800c80c <memcpy>
 80039a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80039ac:	f000 fb35 	bl	800401a <bno055_read_regs>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <bno055_quaternion_y+0x3e>
        return err;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	e014      	b.n	80039e8 <bno055_quaternion_y+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80039be:	7b7b      	ldrb	r3, [r7, #13]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	b21a      	sxth	r2, r3
 80039c4:	7b3b      	ldrb	r3, [r7, #12]
 80039c6:	b21b      	sxth	r3, r3
 80039c8:	4313      	orrs	r3, r2
 80039ca:	b21b      	sxth	r3, r3
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd f9f1 	bl	8000db4 <__aeabi_i2f>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd faf3 	bl	8000fc4 <__aeabi_fdiv>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}

080039f0 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b0af      	sub	sp, #188	; 0xbc
 80039f4:	af2a      	add	r7, sp, #168	; 0xa8
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80039fa:	687c      	ldr	r4, [r7, #4]
 80039fc:	2302      	movs	r3, #2
 80039fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a06:	2326      	movs	r3, #38	; 0x26
 8003a08:	9327      	str	r3, [sp, #156]	; 0x9c
 8003a0a:	4668      	mov	r0, sp
 8003a0c:	f104 0310 	add.w	r3, r4, #16
 8003a10:	229c      	movs	r2, #156	; 0x9c
 8003a12:	4619      	mov	r1, r3
 8003a14:	f008 fefa 	bl	800c80c <memcpy>
 8003a18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a1c:	f000 fafd 	bl	800401a <bno055_read_regs>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <bno055_quaternion_z+0x3e>
        return err;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	e014      	b.n	8003a58 <bno055_quaternion_z+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003a2e:	7b7b      	ldrb	r3, [r7, #13]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	b21a      	sxth	r2, r3
 8003a34:	7b3b      	ldrb	r3, [r7, #12]
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fd f9b9 	bl	8000db4 <__aeabi_i2f>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd fabb 	bl	8000fc4 <__aeabi_fdiv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}

08003a60 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b0b1      	sub	sp, #196	; 0xc4
 8003a64:	af2a      	add	r7, sp, #168	; 0xa8
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8003a6a:	687c      	ldr	r4, [r7, #4]
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003a70:	f107 030c 	add.w	r3, r7, #12
 8003a74:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a76:	2320      	movs	r3, #32
 8003a78:	9327      	str	r3, [sp, #156]	; 0x9c
 8003a7a:	4668      	mov	r0, sp
 8003a7c:	f104 0310 	add.w	r3, r4, #16
 8003a80:	229c      	movs	r2, #156	; 0x9c
 8003a82:	4619      	mov	r1, r3
 8003a84:	f008 fec2 	bl	800c80c <memcpy>
 8003a88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a8c:	f000 fac5 	bl	800401a <bno055_read_regs>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <bno055_quaternion+0x3e>
        return err;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	e050      	b.n	8003b40 <bno055_quaternion+0xe0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003a9e:	7b7b      	ldrb	r3, [r7, #13]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	b21a      	sxth	r2, r3
 8003aa4:	7b3b      	ldrb	r3, [r7, #12]
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b21b      	sxth	r3, r3
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd f981 	bl	8000db4 <__aeabi_i2f>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fa83 	bl	8000fc4 <__aeabi_fdiv>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	60da      	str	r2, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	b21a      	sxth	r2, r3
 8003acc:	7bbb      	ldrb	r3, [r7, #14]
 8003ace:	b21b      	sxth	r3, r3
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd f96d 	bl	8000db4 <__aeabi_i2f>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd fa6f 	bl	8000fc4 <__aeabi_fdiv>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8003aee:	7c7b      	ldrb	r3, [r7, #17]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	b21a      	sxth	r2, r3
 8003af4:	7c3b      	ldrb	r3, [r7, #16]
 8003af6:	b21b      	sxth	r3, r3
 8003af8:	4313      	orrs	r3, r2
 8003afa:	b21b      	sxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd f959 	bl	8000db4 <__aeabi_i2f>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd fa5b 	bl	8000fc4 <__aeabi_fdiv>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	605a      	str	r2, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	b21a      	sxth	r2, r3
 8003b1c:	7cbb      	ldrb	r3, [r7, #18]
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd f945 	bl	8000db4 <__aeabi_i2f>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd fa47 	bl	8000fc4 <__aeabi_fdiv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	461a      	mov	r2, r3
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	609a      	str	r2, [r3, #8]
    return BNO_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd90      	pop	{r4, r7, pc}

08003b48 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b0af      	sub	sp, #188	; 0xbc
 8003b4c:	af2a      	add	r7, sp, #168	; 0xa8
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	70fb      	strb	r3, [r7, #3]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	70bb      	strb	r3, [r7, #2]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003b62:	2101      	movs	r1, #1
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fabb 	bl	80040e0 <bno055_set_page>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <bno055_acc_conf+0x30>
        return err;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	e04b      	b.n	8003c10 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003b78:	2100      	movs	r1, #0
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f91b 	bl	8003db6 <bno055_set_opmode>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <bno055_acc_conf+0x46>
        return err;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	e040      	b.n	8003c10 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8003b8e:	200c      	movs	r0, #12
 8003b90:	f003 f924 	bl	8006ddc <HAL_Delay>
    u8 config = range | bandwidth | mode;
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	78bb      	ldrb	r3, [r7, #2]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	787b      	ldrb	r3, [r7, #1]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8003ba4:	687c      	ldr	r4, [r7, #4]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	9329      	str	r3, [sp, #164]	; 0xa4
 8003baa:	f107 030e 	add.w	r3, r7, #14
 8003bae:	9328      	str	r3, [sp, #160]	; 0xa0
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	9327      	str	r3, [sp, #156]	; 0x9c
 8003bb4:	4668      	mov	r0, sp
 8003bb6:	f104 0310 	add.w	r3, r4, #16
 8003bba:	229c      	movs	r2, #156	; 0x9c
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f008 fe25 	bl	800c80c <memcpy>
 8003bc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003bc6:	f000 fa5e 	bl	8004086 <bno055_write_regs>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <bno055_acc_conf+0x90>
        return err;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	e01b      	b.n	8003c10 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	791b      	ldrb	r3, [r3, #4]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8e9 	bl	8003db6 <bno055_set_opmode>
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <bno055_acc_conf+0xaa>
        return err;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	e00e      	b.n	8003c10 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003bf2:	2018      	movs	r0, #24
 8003bf4:	f003 f8f2 	bl	8006ddc <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa70 	bl	80040e0 <bno055_set_page>
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <bno055_acc_conf+0xc6>
        return err;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	e000      	b.n	8003c10 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd90      	pop	{r4, r7, pc}

08003c18 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b0af      	sub	sp, #188	; 0xbc
 8003c1c:	af2a      	add	r7, sp, #168	; 0xa8
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	4608      	mov	r0, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	70fb      	strb	r3, [r7, #3]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70bb      	strb	r3, [r7, #2]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003c32:	2101      	movs	r1, #1
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fa53 	bl	80040e0 <bno055_set_page>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <bno055_gyr_conf+0x30>
        return err;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	e04a      	b.n	8003cde <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003c48:	2100      	movs	r1, #0
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f8b3 	bl	8003db6 <bno055_set_opmode>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <bno055_gyr_conf+0x46>
        return err;
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	e03f      	b.n	8003cde <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8003c5e:	200c      	movs	r0, #12
 8003c60:	f003 f8bc 	bl	8006ddc <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	78bb      	ldrb	r3, [r7, #2]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	733b      	strb	r3, [r7, #12]
 8003c6e:	787b      	ldrb	r3, [r7, #1]
 8003c70:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 8003c72:	687c      	ldr	r4, [r7, #4]
 8003c74:	2302      	movs	r3, #2
 8003c76:	9329      	str	r3, [sp, #164]	; 0xa4
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	9328      	str	r3, [sp, #160]	; 0xa0
 8003c7e:	230a      	movs	r3, #10
 8003c80:	9327      	str	r3, [sp, #156]	; 0x9c
 8003c82:	4668      	mov	r0, sp
 8003c84:	f104 0310 	add.w	r3, r4, #16
 8003c88:	229c      	movs	r2, #156	; 0x9c
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	f008 fdbe 	bl	800c80c <memcpy>
 8003c90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c94:	f000 f9f7 	bl	8004086 <bno055_write_regs>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	e01b      	b.n	8003cde <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	791b      	ldrb	r3, [r3, #4]
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f882 	bl	8003db6 <bno055_set_opmode>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <bno055_gyr_conf+0xa8>
        return err;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	e00e      	b.n	8003cde <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003cc0:	2018      	movs	r0, #24
 8003cc2:	f003 f88b 	bl	8006ddc <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa09 	bl	80040e0 <bno055_set_page>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <bno055_gyr_conf+0xc4>
        return err;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	e000      	b.n	8003cde <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd90      	pop	{r4, r7, pc}

08003ce6 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8003ce6:	b590      	push	{r4, r7, lr}
 8003ce8:	b0af      	sub	sp, #188	; 0xbc
 8003cea:	af2a      	add	r7, sp, #168	; 0xa8
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	4608      	mov	r0, r1
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	70fb      	strb	r3, [r7, #3]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70bb      	strb	r3, [r7, #2]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003d00:	2101      	movs	r1, #1
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f9ec 	bl	80040e0 <bno055_set_page>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <bno055_mag_conf+0x30>
        return err;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	e04b      	b.n	8003dae <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003d16:	2100      	movs	r1, #0
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f84c 	bl	8003db6 <bno055_set_opmode>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <bno055_mag_conf+0x46>
        return err;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	e040      	b.n	8003dae <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8003d2c:	200c      	movs	r0, #12
 8003d2e:	f003 f855 	bl	8006ddc <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	78bb      	ldrb	r3, [r7, #2]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	787b      	ldrb	r3, [r7, #1]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8003d42:	687c      	ldr	r4, [r7, #4]
 8003d44:	2301      	movs	r3, #1
 8003d46:	9329      	str	r3, [sp, #164]	; 0xa4
 8003d48:	f107 030e 	add.w	r3, r7, #14
 8003d4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8003d4e:	2309      	movs	r3, #9
 8003d50:	9327      	str	r3, [sp, #156]	; 0x9c
 8003d52:	4668      	mov	r0, sp
 8003d54:	f104 0310 	add.w	r3, r4, #16
 8003d58:	229c      	movs	r2, #156	; 0x9c
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f008 fd56 	bl	800c80c <memcpy>
 8003d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d64:	f000 f98f 	bl	8004086 <bno055_write_regs>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <bno055_mag_conf+0x90>
        return err;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	e01b      	b.n	8003dae <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	791b      	ldrb	r3, [r3, #4]
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f81a 	bl	8003db6 <bno055_set_opmode>
 8003d82:	4603      	mov	r3, r0
 8003d84:	73fb      	strb	r3, [r7, #15]
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <bno055_mag_conf+0xaa>
        return err;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	e00e      	b.n	8003dae <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003d90:	2018      	movs	r0, #24
 8003d92:	f003 f823 	bl	8006ddc <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003d96:	2100      	movs	r1, #0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f9a1 	bl	80040e0 <bno055_set_page>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <bno055_mag_conf+0xc6>
        return err;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	e000      	b.n	8003dae <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}

08003db6 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8003db6:	b590      	push	{r4, r7, lr}
 8003db8:	b0af      	sub	sp, #188	; 0xbc
 8003dba:	af2a      	add	r7, sp, #168	; 0xa8
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8003dc2:	687c      	ldr	r4, [r7, #4]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	9329      	str	r3, [sp, #164]	; 0xa4
 8003dc8:	1cfb      	adds	r3, r7, #3
 8003dca:	9328      	str	r3, [sp, #160]	; 0xa0
 8003dcc:	233d      	movs	r3, #61	; 0x3d
 8003dce:	9327      	str	r3, [sp, #156]	; 0x9c
 8003dd0:	4668      	mov	r0, sp
 8003dd2:	f104 0310 	add.w	r3, r4, #16
 8003dd6:	229c      	movs	r2, #156	; 0x9c
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f008 fd17 	bl	800c80c <memcpy>
 8003dde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003de2:	f000 f950 	bl	8004086 <bno055_write_regs>
 8003de6:	4603      	mov	r3, r0
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	e003      	b.n	8003dfc <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003df4:	2018      	movs	r0, #24
 8003df6:	f002 fff1 	bl	8006ddc <HAL_Delay>
    return BNO_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd90      	pop	{r4, r7, pc}

08003e04 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b0af      	sub	sp, #188	; 0xbc
 8003e08:	af2a      	add	r7, sp, #168	; 0xa8
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	70fb      	strb	r3, [r7, #3]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70bb      	strb	r3, [r7, #2]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ffc8 	bl	8003db6 <bno055_set_opmode>
 8003e26:	4603      	mov	r3, r0
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <bno055_set_unit+0x30>
        return err;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	e04b      	b.n	8003ecc <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003e34:	2100      	movs	r1, #0
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f952 	bl	80040e0 <bno055_set_page>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <bno055_set_unit+0x46>
        return err;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	e040      	b.n	8003ecc <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	78bb      	ldrb	r3, [r7, #2]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	787b      	ldrb	r3, [r7, #1]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 8003e62:	687c      	ldr	r4, [r7, #4]
 8003e64:	2301      	movs	r3, #1
 8003e66:	9329      	str	r3, [sp, #164]	; 0xa4
 8003e68:	f107 030e 	add.w	r3, r7, #14
 8003e6c:	9328      	str	r3, [sp, #160]	; 0xa0
 8003e6e:	233b      	movs	r3, #59	; 0x3b
 8003e70:	9327      	str	r3, [sp, #156]	; 0x9c
 8003e72:	4668      	mov	r0, sp
 8003e74:	f104 0310 	add.w	r3, r4, #16
 8003e78:	229c      	movs	r2, #156	; 0x9c
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f008 fcc6 	bl	800c80c <memcpy>
 8003e80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e84:	f000 f8ff 	bl	8004086 <bno055_write_regs>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <bno055_set_unit+0x92>
        return err;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	e01a      	b.n	8003ecc <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	78ba      	ldrb	r2, [r7, #2]
 8003e9a:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	787a      	ldrb	r2, [r7, #1]
 8003ea0:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003ea8:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	791b      	ldrb	r3, [r3, #4]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ff7d 	bl	8003db6 <bno055_set_opmode>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <bno055_set_unit+0xc6>
        return err;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	e000      	b.n	8003ecc <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd90      	pop	{r4, r7, pc}

08003ed4 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b0af      	sub	sp, #188	; 0xbc
 8003ed8:	af2a      	add	r7, sp, #168	; 0xa8
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	e04d      	b.n	8003f86 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8003eea:	2100      	movs	r1, #0
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff62 	bl	8003db6 <bno055_set_opmode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <bno055_set_pwr_mode+0x2c>
        return err;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	e042      	b.n	8003f86 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8003f00:	2100      	movs	r1, #0
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8ec 	bl	80040e0 <bno055_set_page>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <bno055_set_pwr_mode+0x42>
        return err;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	e037      	b.n	8003f86 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8003f16:	687c      	ldr	r4, [r7, #4]
 8003f18:	2301      	movs	r3, #1
 8003f1a:	9329      	str	r3, [sp, #164]	; 0xa4
 8003f1c:	1cfb      	adds	r3, r7, #3
 8003f1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003f20:	233e      	movs	r3, #62	; 0x3e
 8003f22:	9327      	str	r3, [sp, #156]	; 0x9c
 8003f24:	4668      	mov	r0, sp
 8003f26:	f104 0310 	add.w	r3, r4, #16
 8003f2a:	229c      	movs	r2, #156	; 0x9c
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f008 fc6d 	bl	800c80c <memcpy>
 8003f32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f36:	f000 f8a6 	bl	8004086 <bno055_write_regs>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	73fb      	strb	r3, [r7, #15]
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	e01e      	b.n	8003f86 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8003f4e:	2100      	movs	r1, #0
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8c5 	bl	80040e0 <bno055_set_page>
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <bno055_set_pwr_mode+0x90>
        return err;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	e010      	b.n	8003f86 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	791b      	ldrb	r3, [r3, #4]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ff23 	bl	8003db6 <bno055_set_opmode>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <bno055_set_pwr_mode+0xaa>
        return err;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	e003      	b.n	8003f86 <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f002 ff2c 	bl	8006ddc <HAL_Delay>
    return BNO_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd90      	pop	{r4, r7, pc}

08003f8e <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 8003f8e:	b590      	push	{r4, r7, lr}
 8003f90:	b0af      	sub	sp, #188	; 0xbc
 8003f92:	af2a      	add	r7, sp, #168	; 0xa8
 8003f94:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8003f9a:	687c      	ldr	r4, [r7, #4]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003fa0:	f107 030f 	add.w	r3, r7, #15
 8003fa4:	9328      	str	r3, [sp, #160]	; 0xa0
 8003fa6:	233f      	movs	r3, #63	; 0x3f
 8003fa8:	9327      	str	r3, [sp, #156]	; 0x9c
 8003faa:	4668      	mov	r0, sp
 8003fac:	f104 0310 	add.w	r3, r4, #16
 8003fb0:	229c      	movs	r2, #156	; 0x9c
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f008 fc2a 	bl	800c80c <memcpy>
 8003fb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fbc:	f000 f863 	bl	8004086 <bno055_write_regs>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <bno055_reset+0x3e>
    }
    return BNO_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd90      	pop	{r4, r7, pc}

08003fd4 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b0af      	sub	sp, #188	; 0xbc
 8003fd8:	af2a      	add	r7, sp, #168	; 0xa8
 8003fda:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8003fe0:	687c      	ldr	r4, [r7, #4]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	9329      	str	r3, [sp, #164]	; 0xa4
 8003fe6:	f107 030f 	add.w	r3, r7, #15
 8003fea:	9328      	str	r3, [sp, #160]	; 0xa0
 8003fec:	233f      	movs	r3, #63	; 0x3f
 8003fee:	9327      	str	r3, [sp, #156]	; 0x9c
 8003ff0:	4668      	mov	r0, sp
 8003ff2:	f104 0310 	add.w	r3, r4, #16
 8003ff6:	229c      	movs	r2, #156	; 0x9c
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f008 fc07 	bl	800c80c <memcpy>
 8003ffe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004002:	f000 f840 	bl	8004086 <bno055_write_regs>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <bno055_on+0x3e>
    }
    return BNO_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bd90      	pop	{r4, r7, pc}

0800401a <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 800401a:	b084      	sub	sp, #16
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af02      	add	r7, sp, #8
 8004022:	f107 0c10 	add.w	ip, r7, #16
 8004026:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 800402a:	6938      	ldr	r0, [r7, #16]
 800402c:	7dbb      	ldrb	r3, [r7, #22]
 800402e:	b299      	uxth	r1, r3
 8004030:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8004034:	f04f 33ff 	mov.w	r3, #4294967295
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2301      	movs	r3, #1
 800403c:	f004 f98a 	bl	8008354 <HAL_I2C_Master_Transmit>
 8004040:	4603      	mov	r3, r0
 8004042:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 800404a:	2301      	movs	r3, #1
 800404c:	e014      	b.n	8004078 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800404e:	6938      	ldr	r0, [r7, #16]
 8004050:	7dbb      	ldrb	r3, [r7, #22]
 8004052:	b299      	uxth	r1, r3
 8004054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004058:	b29b      	uxth	r3, r3
 800405a:	f04f 32ff 	mov.w	r2, #4294967295
 800405e:	9200      	str	r2, [sp, #0]
 8004060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004064:	f004 fa74 	bl	8008550 <HAL_I2C_Master_Receive>
 8004068:	4603      	mov	r3, r0
 800406a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004082:	b004      	add	sp, #16
 8004084:	4770      	bx	lr

08004086 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8004086:	b084      	sub	sp, #16
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af04      	add	r7, sp, #16
 800408e:	f107 0418 	add.w	r4, r7, #24
 8004092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 8004096:	69b8      	ldr	r0, [r7, #24]
 8004098:	7fbb      	ldrb	r3, [r7, #30]
 800409a:	b299      	uxth	r1, r3
 800409c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040a6:	b29c      	uxth	r4, r3
 80040a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	f04f 35ff 	mov.w	r5, #4294967295
 80040b2:	9502      	str	r5, [sp, #8]
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	4623      	mov	r3, r4
 80040be:	f004 fcb3 	bl	8008a28 <HAL_I2C_Mem_Write>
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80040dc:	b004      	add	sp, #16
 80040de:	4770      	bx	lr

080040e0 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b0af      	sub	sp, #188	; 0xbc
 80040e4:	af2a      	add	r7, sp, #168	; 0xa8
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7b5a      	ldrb	r2, [r3, #13]
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d001      	beq.n	80040fa <bno055_set_page+0x1a>
        return BNO_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e024      	b.n	8004144 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d901      	bls.n	8004104 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8004100:	2302      	movs	r3, #2
 8004102:	e01f      	b.n	8004144 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8004104:	687c      	ldr	r4, [r7, #4]
 8004106:	2301      	movs	r3, #1
 8004108:	9329      	str	r3, [sp, #164]	; 0xa4
 800410a:	1cfb      	adds	r3, r7, #3
 800410c:	9328      	str	r3, [sp, #160]	; 0xa0
 800410e:	2307      	movs	r3, #7
 8004110:	9327      	str	r3, [sp, #156]	; 0x9c
 8004112:	4668      	mov	r0, sp
 8004114:	f104 0310 	add.w	r3, r4, #16
 8004118:	229c      	movs	r2, #156	; 0x9c
 800411a:	4619      	mov	r1, r3
 800411c:	f008 fb76 	bl	800c80c <memcpy>
 8004120:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004124:	f7ff ffaf 	bl	8004086 <bno055_write_regs>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <bno055_set_page+0x56>
        return err;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	e006      	b.n	8004144 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 800413c:	2002      	movs	r0, #2
 800413e:	f002 fe4d 	bl	8006ddc <HAL_Delay>
    return BNO_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bd90      	pop	{r4, r7, pc}

0800414c <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d81f      	bhi.n	800419c <bno055_err_str+0x50>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <bno055_err_str+0x18>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004181 	.word	0x08004181
 8004168:	08004185 	.word	0x08004185
 800416c:	08004189 	.word	0x08004189
 8004170:	08004195 	.word	0x08004195
 8004174:	0800418d 	.word	0x0800418d
 8004178:	08004191 	.word	0x08004191
 800417c:	08004199 	.word	0x08004199
        case BNO_OK:
            return "[BNO] Ok!";
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <bno055_err_str+0x5c>)
 8004182:	e00c      	b.n	800419e <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <bno055_err_str+0x60>)
 8004186:	e00a      	b.n	800419e <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <bno055_err_str+0x64>)
 800418a:	e008      	b.n	800419e <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <bno055_err_str+0x68>)
 800418e:	e006      	b.n	800419e <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <bno055_err_str+0x6c>)
 8004192:	e004      	b.n	800419e <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <bno055_err_str+0x70>)
 8004196:	e002      	b.n	800419e <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <bno055_err_str+0x74>)
 800419a:	e000      	b.n	800419e <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 800419c:	4b02      	ldr	r3, [pc, #8]	; (80041a8 <bno055_err_str+0x5c>)
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	0800fe28 	.word	0x0800fe28
 80041ac:	0800fe34 	.word	0x0800fe34
 80041b0:	0800fe48 	.word	0x0800fe48
 80041b4:	0800fe64 	.word	0x0800fe64
 80041b8:	0800fe88 	.word	0x0800fe88
 80041bc:	0800fea0 	.word	0x0800fea0
 80041c0:	0800feac 	.word	0x0800feac

080041c4 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_ADC2_Init(void);
static void MX_ADC3_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4804      	ldr	r0, [pc, #16]	; (80041ec <_write+0x28>)
 80041dc:	f007 f833 	bl	800b246 <HAL_UART_Transmit>
    return len;
 80041e0:	687b      	ldr	r3, [r7, #4]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000438 	.word	0x20000438

080041f0 <CurrentYaw>:

bno055_euler_t CurrentYaw(){
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	 bno055_euler(&bno, &euler);
 80041f8:	4906      	ldr	r1, [pc, #24]	; (8004214 <CurrentYaw+0x24>)
 80041fa:	4807      	ldr	r0, [pc, #28]	; (8004218 <CurrentYaw+0x28>)
 80041fc:	f7ff fae8 	bl	80037d0 <bno055_euler>
	 return euler;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <CurrentYaw+0x24>)
 8004204:	ca07      	ldmia	r2, {r0, r1, r2}
 8004206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20004440 	.word	0x20004440
 8004218:	20004390 	.word	0x20004390
 800421c:	00000000 	.word	0x00000000

08004220 <distanceLeft>:
//				return;
//			}
//		}
//	}
}
double distanceLeft(){
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	double vol = 0;
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8004236:	2300      	movs	r3, #0
 8004238:	757b      	strb	r3, [r7, #21]
 800423a:	e016      	b.n	800426a <distanceLeft+0x4a>
  	  	HAL_ADC_Start(&hadc3);
 800423c:	4830      	ldr	r0, [pc, #192]	; (8004300 <distanceLeft+0xe0>)
 800423e:	f002 fedb 	bl	8006ff8 <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc3, 1000);
 8004242:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004246:	482e      	ldr	r0, [pc, #184]	; (8004300 <distanceLeft+0xe0>)
 8004248:	f002 ffb0 	bl	80071ac <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc3);
 800424c:	482c      	ldr	r0, [pc, #176]	; (8004300 <distanceLeft+0xe0>)
 800424e:	f003 f8b3 	bl	80073b8 <HAL_ADC_GetValue>
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  	  	HAL_ADC_Stop(&hadc3);
 8004256:	482a      	ldr	r0, [pc, #168]	; (8004300 <distanceLeft+0xe0>)
 8004258:	f002 ff7c 	bl	8007154 <HAL_ADC_Stop>
  	    total = total + ADC_VAL;
 800425c:	8afa      	ldrh	r2, [r7, #22]
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	4413      	add	r3, r2
 8004262:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8004264:	7d7b      	ldrb	r3, [r7, #21]
 8004266:	3301      	adds	r3, #1
 8004268:	757b      	strb	r3, [r7, #21]
 800426a:	7d7b      	ldrb	r3, [r7, #21]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d9e5      	bls.n	800423c <distanceLeft+0x1c>
  	}

  	vol = (total/5*3.3)/4095;
 8004270:	8afb      	ldrh	r3, [r7, #22]
 8004272:	4a24      	ldr	r2, [pc, #144]	; (8004304 <distanceLeft+0xe4>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	b29b      	uxth	r3, r3
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc f92d 	bl	80004dc <__aeabi_i2d>
 8004282:	a319      	add	r3, pc, #100	; (adr r3, 80042e8 <distanceLeft+0xc8>)
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f7fc f992 	bl	80005b0 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	a316      	add	r3, pc, #88	; (adr r3, 80042f0 <distanceLeft+0xd0>)
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f7fc fab3 	bl	8000804 <__aeabi_ddiv>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1) - 0.7;
 80042a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042aa:	f04f 0000 	mov.w	r0, #0
 80042ae:	4916      	ldr	r1, [pc, #88]	; (8004308 <distanceLeft+0xe8>)
 80042b0:	f7fc faa8 	bl	8000804 <__aeabi_ddiv>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4610      	mov	r0, r2
 80042ba:	4619      	mov	r1, r3
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <distanceLeft+0xec>)
 80042c2:	f7fc f975 	bl	80005b0 <__aeabi_dmul>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	a30a      	add	r3, pc, #40	; (adr r3, 80042f8 <distanceLeft+0xd8>)
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f7fb ffb4 	bl	8000240 <__aeabi_dsub>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
}
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	66666666 	.word	0x66666666
 80042ec:	400a6666 	.word	0x400a6666
 80042f0:	00000000 	.word	0x00000000
 80042f4:	40affe00 	.word	0x40affe00
 80042f8:	66666666 	.word	0x66666666
 80042fc:	3fe66666 	.word	0x3fe66666
 8004300:	20000294 	.word	0x20000294
 8004304:	cccccccd 	.word	0xcccccccd
 8004308:	3ff00000 	.word	0x3ff00000
 800430c:	402a0000 	.word	0x402a0000

08004310 <distanceStraight>:
double distanceStraight(){
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	double vol = 0;
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8004326:	2300      	movs	r3, #0
 8004328:	757b      	strb	r3, [r7, #21]
 800432a:	e016      	b.n	800435a <distanceStraight+0x4a>
  	  	HAL_ADC_Start(&hadc2);
 800432c:	4830      	ldr	r0, [pc, #192]	; (80043f0 <distanceStraight+0xe0>)
 800432e:	f002 fe63 	bl	8006ff8 <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc2, 1000);
 8004332:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004336:	482e      	ldr	r0, [pc, #184]	; (80043f0 <distanceStraight+0xe0>)
 8004338:	f002 ff38 	bl	80071ac <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 800433c:	482c      	ldr	r0, [pc, #176]	; (80043f0 <distanceStraight+0xe0>)
 800433e:	f003 f83b 	bl	80073b8 <HAL_ADC_GetValue>
 8004342:	4603      	mov	r3, r0
 8004344:	80fb      	strh	r3, [r7, #6]
  	  	HAL_ADC_Stop(&hadc2);
 8004346:	482a      	ldr	r0, [pc, #168]	; (80043f0 <distanceStraight+0xe0>)
 8004348:	f002 ff04 	bl	8007154 <HAL_ADC_Stop>
  	    total = total + ADC_VAL;
 800434c:	8afa      	ldrh	r2, [r7, #22]
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	4413      	add	r3, r2
 8004352:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8004354:	7d7b      	ldrb	r3, [r7, #21]
 8004356:	3301      	adds	r3, #1
 8004358:	757b      	strb	r3, [r7, #21]
 800435a:	7d7b      	ldrb	r3, [r7, #21]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d9e5      	bls.n	800432c <distanceStraight+0x1c>
  	}

  	vol = (total/5*3.3)/4095;
 8004360:	8afb      	ldrh	r3, [r7, #22]
 8004362:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <distanceStraight+0xe4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	b29b      	uxth	r3, r3
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc f8b5 	bl	80004dc <__aeabi_i2d>
 8004372:	a319      	add	r3, pc, #100	; (adr r3, 80043d8 <distanceStraight+0xc8>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f7fc f91a 	bl	80005b0 <__aeabi_dmul>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	a316      	add	r3, pc, #88	; (adr r3, 80043e0 <distanceStraight+0xd0>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f7fc fa3b 	bl	8000804 <__aeabi_ddiv>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1)- 0.7;
 8004396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439a:	f04f 0000 	mov.w	r0, #0
 800439e:	4916      	ldr	r1, [pc, #88]	; (80043f8 <distanceStraight+0xe8>)
 80043a0:	f7fc fa30 	bl	8000804 <__aeabi_ddiv>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <distanceStraight+0xec>)
 80043b2:	f7fc f8fd 	bl	80005b0 <__aeabi_dmul>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	a30a      	add	r3, pc, #40	; (adr r3, 80043e8 <distanceStraight+0xd8>)
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fb ff3c 	bl	8000240 <__aeabi_dsub>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
}
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	66666666 	.word	0x66666666
 80043dc:	400a6666 	.word	0x400a6666
 80043e0:	00000000 	.word	0x00000000
 80043e4:	40affe00 	.word	0x40affe00
 80043e8:	66666666 	.word	0x66666666
 80043ec:	3fe66666 	.word	0x3fe66666
 80043f0:	20000264 	.word	0x20000264
 80043f4:	cccccccd 	.word	0xcccccccd
 80043f8:	3ff00000 	.word	0x3ff00000
 80043fc:	402a0000 	.word	0x402a0000

08004400 <distanceRight>:
double distanceRight(){
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0

	uint16_t ADC_VAL;
	double vol = 0;
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8004416:	2300      	movs	r3, #0
 8004418:	757b      	strb	r3, [r7, #21]
 800441a:	e016      	b.n	800444a <distanceRight+0x4a>
  		HAL_ADC_Start(&hadc1);
 800441c:	4830      	ldr	r0, [pc, #192]	; (80044e0 <distanceRight+0xe0>)
 800441e:	f002 fdeb 	bl	8006ff8 <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8004422:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004426:	482e      	ldr	r0, [pc, #184]	; (80044e0 <distanceRight+0xe0>)
 8004428:	f002 fec0 	bl	80071ac <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 800442c:	482c      	ldr	r0, [pc, #176]	; (80044e0 <distanceRight+0xe0>)
 800442e:	f002 ffc3 	bl	80073b8 <HAL_ADC_GetValue>
 8004432:	4603      	mov	r3, r0
 8004434:	80fb      	strh	r3, [r7, #6]
  	    total = total + ADC_VAL;
 8004436:	8afa      	ldrh	r2, [r7, #22]
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	4413      	add	r3, r2
 800443c:	82fb      	strh	r3, [r7, #22]
  	    HAL_ADC_Stop(&hadc1);
 800443e:	4828      	ldr	r0, [pc, #160]	; (80044e0 <distanceRight+0xe0>)
 8004440:	f002 fe88 	bl	8007154 <HAL_ADC_Stop>
  	for (uint8_t i = 0; i < 5; i++){
 8004444:	7d7b      	ldrb	r3, [r7, #21]
 8004446:	3301      	adds	r3, #1
 8004448:	757b      	strb	r3, [r7, #21]
 800444a:	7d7b      	ldrb	r3, [r7, #21]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d9e5      	bls.n	800441c <distanceRight+0x1c>
  	}
  	vol = (total/5*3.3)/4095;
 8004450:	8afb      	ldrh	r3, [r7, #22]
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <distanceRight+0xe4>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	b29b      	uxth	r3, r3
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc f83d 	bl	80004dc <__aeabi_i2d>
 8004462:	a319      	add	r3, pc, #100	; (adr r3, 80044c8 <distanceRight+0xc8>)
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f7fc f8a2 	bl	80005b0 <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	a316      	add	r3, pc, #88	; (adr r3, 80044d0 <distanceRight+0xd0>)
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f7fc f9c3 	bl	8000804 <__aeabi_ddiv>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1) - 0.7;
 8004486:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800448a:	f04f 0000 	mov.w	r0, #0
 800448e:	4916      	ldr	r1, [pc, #88]	; (80044e8 <distanceRight+0xe8>)
 8004490:	f7fc f9b8 	bl	8000804 <__aeabi_ddiv>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <distanceRight+0xec>)
 80044a2:	f7fc f885 	bl	80005b0 <__aeabi_dmul>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	a30a      	add	r3, pc, #40	; (adr r3, 80044d8 <distanceRight+0xd8>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f7fb fec4 	bl	8000240 <__aeabi_dsub>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
}
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	66666666 	.word	0x66666666
 80044cc:	400a6666 	.word	0x400a6666
 80044d0:	00000000 	.word	0x00000000
 80044d4:	40affe00 	.word	0x40affe00
 80044d8:	66666666 	.word	0x66666666
 80044dc:	3fe66666 	.word	0x3fe66666
 80044e0:	20000234 	.word	0x20000234
 80044e4:	cccccccd 	.word	0xcccccccd
 80044e8:	3ff00000 	.word	0x3ff00000
 80044ec:	402a0000 	.word	0x402a0000

080044f0 <isValid>:
//	fyaw = fyaw/1000;
//	printf("froll: %.2f fpitch: %.2f fyaw: %.2f\r\n",froll, fpitch, fyaw);
//	printf("Prove filter done!\r\n");
//}

bool isValid(int x, int y) {
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
    return (x >= 0 && x < rows && y >= 0 && y < cols);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db0c      	blt.n	800451a <isValid+0x2a>
 8004500:	2210      	movs	r2, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4293      	cmp	r3, r2
 8004506:	da08      	bge.n	800451a <isValid+0x2a>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db05      	blt.n	800451a <isValid+0x2a>
 800450e:	2210      	movs	r2, #16
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	4293      	cmp	r3, r2
 8004514:	da01      	bge.n	800451a <isValid+0x2a>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <isValid+0x2c>
 800451a:	2300      	movs	r3, #0
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	b2db      	uxtb	r3, r3
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <init_arr>:
void init_arr(int arr[ROW][COL], int row, int col) {
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < row; i++) {
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e015      	b.n	800456a <init_arr+0x3e>
        for (int j = 0; j < col; j++) {
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e00b      	b.n	800455c <init_arr+0x30>
            arr[i][j] = -1;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	019b      	lsls	r3, r3, #6
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	f04f 31ff 	mov.w	r1, #4294967295
 8004552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < col; j++) {
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3301      	adds	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	dbef      	blt.n	8004544 <init_arr+0x18>
    for (int i = 0; i < row; i++) {
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3301      	adds	r3, #1
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	dbe5      	blt.n	800453e <init_arr+0x12>
        }
    }
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
	...

08004580 <check_and_fill>:
void check_and_fill(int arr[ROW][COL],int row,int col,int value)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
    if(row<0 ||col<0||row>=16||col>=16||arr[row][col]!=-1)return;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db2a      	blt.n	80045ea <check_and_fill+0x6a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	db27      	blt.n	80045ea <check_and_fill+0x6a>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b0f      	cmp	r3, #15
 800459e:	dc24      	bgt.n	80045ea <check_and_fill+0x6a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	dc21      	bgt.n	80045ea <check_and_fill+0x6a>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	019b      	lsls	r3, r3, #6
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d117      	bne.n	80045ea <check_and_fill+0x6a>
    value+=1;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	3301      	adds	r3, #1
 80045be:	603b      	str	r3, [r7, #0]
    coord point={row,col,value};
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	61fb      	str	r3, [r7, #28]
    pushQueue(&myQueue,point);
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d2:	4808      	ldr	r0, [pc, #32]	; (80045f4 <check_and_fill+0x74>)
 80045d4:	f001 fea8 	bl	8006328 <pushQueue>
    arr[row][col]=value;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	019b      	lsls	r3, r3, #6
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6839      	ldr	r1, [r7, #0]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045e8:	e000      	b.n	80045ec <check_and_fill+0x6c>
    if(row<0 ||col<0||row>=16||col>=16||arr[row][col]!=-1)return;
 80045ea:	bf00      	nop
}
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200014a8 	.word	0x200014a8

080045f8 <init_flood>:

void init_flood(int arr[ROW][COL],int row,int col)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b094      	sub	sp, #80	; 0x50
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
    int count_=0;
 8004604:	2300      	movs	r3, #0
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
    coord point={row,col,count_};
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	643b      	str	r3, [r7, #64]	; 0x40
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
 8004610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004612:	64bb      	str	r3, [r7, #72]	; 0x48
    pushQueue(&myQueue,point);
 8004614:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800461a:	4841      	ldr	r0, [pc, #260]	; (8004720 <init_flood+0x128>)
 800461c:	f001 fe84 	bl	8006328 <pushQueue>
    arr[row][col]=0;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	019b      	lsls	r3, r3, #6
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	2100      	movs	r1, #0
 800462c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point2={row+1,col,count_};
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3301      	adds	r3, #1
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	63bb      	str	r3, [r7, #56]	; 0x38
 800463a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
    pushQueue(&myQueue,point2);
 800463e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004644:	4836      	ldr	r0, [pc, #216]	; (8004720 <init_flood+0x128>)
 8004646:	f001 fe6f 	bl	8006328 <pushQueue>
    arr[row+1][col]=0;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3301      	adds	r3, #1
 800464e:	019b      	lsls	r3, r3, #6
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	2100      	movs	r1, #0
 8004658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point3={row,col+1,count_};
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3301      	adds	r3, #1
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
    pushQueue(&myQueue,point3);
 800466a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800466e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004670:	482b      	ldr	r0, [pc, #172]	; (8004720 <init_flood+0x128>)
 8004672:	f001 fe59 	bl	8006328 <pushQueue>
    arr[row][col+1]=0;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	3201      	adds	r2, #1
 8004682:	2100      	movs	r1, #0
 8004684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point4={row+1,col+1,count_};
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	3301      	adds	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3301      	adds	r3, #1
 8004692:	623b      	str	r3, [r7, #32]
 8004694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
    pushQueue(&myQueue,point4);
 8004698:	f107 031c 	add.w	r3, r7, #28
 800469c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469e:	4820      	ldr	r0, [pc, #128]	; (8004720 <init_flood+0x128>)
 80046a0:	f001 fe42 	bl	8006328 <pushQueue>
    arr[row+1][col+1]=0;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3301      	adds	r3, #1
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	3201      	adds	r2, #1
 80046b2:	2100      	movs	r1, #0
 80046b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (!isEmptyQueue(&myQueue)) {
 80046b8:	e024      	b.n	8004704 <init_flood+0x10c>
        coord frontCoord = peekQueue(&myQueue);
 80046ba:	f107 0310 	add.w	r3, r7, #16
 80046be:	4918      	ldr	r1, [pc, #96]	; (8004720 <init_flood+0x128>)
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 fe79 	bl	80063b8 <peekQueue>
        popQueue(&myQueue);
 80046c6:	4816      	ldr	r0, [pc, #88]	; (8004720 <init_flood+0x128>)
 80046c8:	f001 fe5c 	bl	8006384 <popQueue>
        check_and_fill(arr,frontCoord.row+1,frontCoord.col,frontCoord.value);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1c59      	adds	r1, r3, #1
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff ff53 	bl	8004580 <check_and_fill>
        check_and_fill(arr,frontCoord.row-1,frontCoord.col,frontCoord.value);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1e59      	subs	r1, r3, #1
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff ff4c 	bl	8004580 <check_and_fill>
        check_and_fill(arr,frontCoord.row,frontCoord.col+1,frontCoord.value);
 80046e8:	6939      	ldr	r1, [r7, #16]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff ff45 	bl	8004580 <check_and_fill>
        check_and_fill(arr,frontCoord.row,frontCoord.col-1,frontCoord.value);
 80046f6:	6939      	ldr	r1, [r7, #16]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7ff ff3e 	bl	8004580 <check_and_fill>
    while (!isEmptyQueue(&myQueue)) {
 8004704:	4806      	ldr	r0, [pc, #24]	; (8004720 <init_flood+0x128>)
 8004706:	f001 fde2 	bl	80062ce <isEmptyQueue>
 800470a:	4603      	mov	r3, r0
 800470c:	f083 0301 	eor.w	r3, r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1d1      	bne.n	80046ba <init_flood+0xc2>
    }
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	3750      	adds	r7, #80	; 0x50
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200014a8 	.word	0x200014a8

08004724 <init_maze>:

void init_maze()
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
    for(int i =0;i<16;i++)
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e03d      	b.n	80047ac <init_maze+0x88>
    {
        for(int j=0;j<16;j++)
 8004730:	2300      	movs	r3, #0
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	e034      	b.n	80047a0 <init_maze+0x7c>
        {
            maze.cells[i][j].visited=0;
 8004736:	4922      	ldr	r1, [pc, #136]	; (80047c0 <init_maze+0x9c>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	011a      	lsls	r2, r3, #4
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4413      	add	r3, r2
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	440b      	add	r3, r1
 8004744:	3304      	adds	r3, #4
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]
            maze.cells[i][j].angle_update=90;
 800474a:	491d      	ldr	r1, [pc, #116]	; (80047c0 <init_maze+0x9c>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	011a      	lsls	r2, r3, #4
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4413      	add	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	440b      	add	r3, r1
 8004758:	3308      	adds	r3, #8
 800475a:	225a      	movs	r2, #90	; 0x5a
 800475c:	601a      	str	r2, [r3, #0]
            maze.cells[i][j].dead=0;
 800475e:	4918      	ldr	r1, [pc, #96]	; (80047c0 <init_maze+0x9c>)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	011a      	lsls	r2, r3, #4
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4413      	add	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	440b      	add	r3, r1
 800476c:	330c      	adds	r3, #12
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
            for(int k = 0 ;k<4;k++)maze.cells[i][j].walls[k]=0;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	e00d      	b.n	8004794 <init_maze+0x70>
 8004778:	4911      	ldr	r1, [pc, #68]	; (80047c0 <init_maze+0x9c>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	011a      	lsls	r2, r3, #4
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	18ca      	adds	r2, r1, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	2200      	movs	r2, #0
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3301      	adds	r3, #1
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b03      	cmp	r3, #3
 8004798:	ddee      	ble.n	8004778 <init_maze+0x54>
        for(int j=0;j<16;j++)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	3301      	adds	r3, #1
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b0f      	cmp	r3, #15
 80047a4:	ddc7      	ble.n	8004736 <init_maze+0x12>
    for(int i =0;i<16;i++)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3301      	adds	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b0f      	cmp	r3, #15
 80047b0:	ddbe      	ble.n	8004730 <init_maze+0xc>
        }
    }
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	200004a8 	.word	0x200004a8

080047c4 <cell_direction_adjust>:

void intToStr(int num, char *str) {
    sprintf(str, "%d", num);
}
cell_info cell_direction_adjust(cell_info cell)
{
 80047c4:	b084      	sub	sp, #16
 80047c6:	b490      	push	{r4, r7}
 80047c8:	b088      	sub	sp, #32
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80047d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    cell_info cell_new;
    cell_new=cell;
 80047d6:	f107 0408 	add.w	r4, r7, #8
 80047da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for(int i=0;i<4;i++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e051      	b.n	800488e <cell_direction_adjust+0xca>
    {
        int ind = i;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	61bb      	str	r3, [r7, #24]

        switch(cell.angle_update)
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80047f4:	d00a      	beq.n	800480c <cell_direction_adjust+0x48>
 80047f6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80047fa:	dc3a      	bgt.n	8004872 <cell_direction_adjust+0xae>
 80047fc:	2bb4      	cmp	r3, #180	; 0xb4
 80047fe:	d025      	beq.n	800484c <cell_direction_adjust+0x88>
 8004800:	2bb4      	cmp	r3, #180	; 0xb4
 8004802:	dc36      	bgt.n	8004872 <cell_direction_adjust+0xae>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00e      	beq.n	8004826 <cell_direction_adjust+0x62>
 8004808:	2b5a      	cmp	r3, #90	; 0x5a
 800480a:	e032      	b.n	8004872 <cell_direction_adjust+0xae>
        {
            case 90:
                break;
            case 270:
                if(i%2==0)ind+=1;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <cell_direction_adjust+0x5a>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	3301      	adds	r3, #1
 800481a:	61bb      	str	r3, [r7, #24]
                else ind-=1;
                break;
 800481c:	e029      	b.n	8004872 <cell_direction_adjust+0xae>
                else ind-=1;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	3b01      	subs	r3, #1
 8004822:	61bb      	str	r3, [r7, #24]
                break;
 8004824:	e025      	b.n	8004872 <cell_direction_adjust+0xae>
            case 0:
                if(i==0 || i ==1)ind+=2;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <cell_direction_adjust+0x6e>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d103      	bne.n	800483a <cell_direction_adjust+0x76>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3302      	adds	r3, #2
 8004836:	61bb      	str	r3, [r7, #24]
                else if(i==2)ind=1;
                else ind=0;
                break;
 8004838:	e01b      	b.n	8004872 <cell_direction_adjust+0xae>
                else if(i==2)ind=1;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d102      	bne.n	8004846 <cell_direction_adjust+0x82>
 8004840:	2301      	movs	r3, #1
 8004842:	61bb      	str	r3, [r7, #24]
                break;
 8004844:	e015      	b.n	8004872 <cell_direction_adjust+0xae>
                else ind=0;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
                break;
 800484a:	e012      	b.n	8004872 <cell_direction_adjust+0xae>
            case 180:
                if(i==2 || i ==3)ind-=2;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d002      	beq.n	8004858 <cell_direction_adjust+0x94>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d103      	bne.n	8004860 <cell_direction_adjust+0x9c>
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	3b02      	subs	r3, #2
 800485c:	61bb      	str	r3, [r7, #24]
                else if(i==0)ind=3;
                else ind=2;
                break;
 800485e:	e007      	b.n	8004870 <cell_direction_adjust+0xac>
                else if(i==0)ind=3;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <cell_direction_adjust+0xa8>
 8004866:	2303      	movs	r3, #3
 8004868:	61bb      	str	r3, [r7, #24]
                break;
 800486a:	e001      	b.n	8004870 <cell_direction_adjust+0xac>
                else ind=2;
 800486c:	2302      	movs	r3, #2
 800486e:	61bb      	str	r3, [r7, #24]
                break;
 8004870:	bf00      	nop
        }
        cell_new.walls[i]=cell.walls[ind];
 8004872:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	7819      	ldrb	r1, [r3, #0]
 800487c:	f107 0208 	add.w	r2, r7, #8
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	460a      	mov	r2, r1
 8004886:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2b03      	cmp	r3, #3
 8004892:	ddaa      	ble.n	80047ea <cell_direction_adjust+0x26>
    }
    return cell_new;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	461c      	mov	r4, r3
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800489e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc90      	pop	{r4, r7}
 80048aa:	b004      	add	sp, #16
 80048ac:	4770      	bx	lr
	...

080048b0 <update_walls>:

cell_info update_walls(int angle_now,int row,int col)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b093      	sub	sp, #76	; 0x4c
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	61f8      	str	r0, [r7, #28]
 80048b8:	61b9      	str	r1, [r7, #24]
 80048ba:	617a      	str	r2, [r7, #20]
 80048bc:	613b      	str	r3, [r7, #16]
    cell_info new_cell;
    new_cell.angle_update=angle_now;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
    distance_straight = distanceStraight();
 80048c2:	f7ff fd25 	bl	8004310 <distanceStraight>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	49a2      	ldr	r1, [pc, #648]	; (8004b54 <update_walls+0x2a4>)
 80048cc:	e9c1 2300 	strd	r2, r3, [r1]
    distance_left = distanceLeft();
 80048d0:	f7ff fca6 	bl	8004220 <distanceLeft>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	499f      	ldr	r1, [pc, #636]	; (8004b58 <update_walls+0x2a8>)
 80048da:	e9c1 2300 	strd	r2, r3, [r1]
    distance_right = distanceRight();
 80048de:	f7ff fd8f 	bl	8004400 <distanceRight>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	499d      	ldr	r1, [pc, #628]	; (8004b5c <update_walls+0x2ac>)
 80048e8:	e9c1 2300 	strd	r2, r3, [r1]
    bool boolfront = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool boolleft = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    bool boolright = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0){
 80048fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004902:	4897      	ldr	r0, [pc, #604]	; (8004b60 <update_walls+0x2b0>)
 8004904:	f003 fb9a 	bl	800803c <HAL_GPIO_ReadPin>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <update_walls+0x66>
		boolleft = 1;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004914:	e00d      	b.n	8004932 <update_walls+0x82>
	}
    else if(distance_left < 12){
 8004916:	4b90      	ldr	r3, [pc, #576]	; (8004b58 <update_walls+0x2a8>)
 8004918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	4b90      	ldr	r3, [pc, #576]	; (8004b64 <update_walls+0x2b4>)
 8004922:	f7fc f8b7 	bl	8000a94 <__aeabi_dcmplt>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <update_walls+0x82>
		boolleft = 1;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  }
	if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0){
 8004932:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004936:	488a      	ldr	r0, [pc, #552]	; (8004b60 <update_walls+0x2b0>)
 8004938:	f003 fb80 	bl	800803c <HAL_GPIO_ReadPin>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <update_walls+0x9a>
		boolright = 1;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004948:	e00d      	b.n	8004966 <update_walls+0xb6>
	}
	else if(distance_right < 12){
 800494a:	4b84      	ldr	r3, [pc, #528]	; (8004b5c <update_walls+0x2ac>)
 800494c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	4b83      	ldr	r3, [pc, #524]	; (8004b64 <update_walls+0x2b4>)
 8004956:	f7fc f89d 	bl	8000a94 <__aeabi_dcmplt>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <update_walls+0xb6>
		boolright = 1;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  }
	if(distance_straight < 12){
 8004966:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <update_walls+0x2a4>)
 8004968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	4b7c      	ldr	r3, [pc, #496]	; (8004b64 <update_walls+0x2b4>)
 8004972:	f7fc f88f 	bl	8000a94 <__aeabi_dcmplt>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <update_walls+0xd2>
		boolfront = 1;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(!boolfront){
 8004982:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004986:	f083 0301 	eor.w	r3, r3, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <update_walls+0xec>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8004990:	2200      	movs	r2, #0
 8004992:	2108      	movs	r1, #8
 8004994:	4872      	ldr	r0, [pc, #456]	; (8004b60 <update_walls+0x2b0>)
 8004996:	f003 fb68 	bl	800806a <HAL_GPIO_WritePin>
 800499a:	e004      	b.n	80049a6 <update_walls+0xf6>
	}
	else {
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800499c:	2201      	movs	r2, #1
 800499e:	2108      	movs	r1, #8
 80049a0:	486f      	ldr	r0, [pc, #444]	; (8004b60 <update_walls+0x2b0>)
 80049a2:	f003 fb62 	bl	800806a <HAL_GPIO_WritePin>
	}
	if(!boolleft){
 80049a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049aa:	f083 0301 	eor.w	r3, r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d006      	beq.n	80049c2 <update_walls+0x112>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049ba:	486b      	ldr	r0, [pc, #428]	; (8004b68 <update_walls+0x2b8>)
 80049bc:	f003 fb55 	bl	800806a <HAL_GPIO_WritePin>
 80049c0:	e005      	b.n	80049ce <update_walls+0x11e>
	}
	else{
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, SET);
 80049c2:	2201      	movs	r2, #1
 80049c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049c8:	4867      	ldr	r0, [pc, #412]	; (8004b68 <update_walls+0x2b8>)
 80049ca:	f003 fb4e 	bl	800806a <HAL_GPIO_WritePin>
	}
	if(!boolright){
 80049ce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80049d2:	f083 0301 	eor.w	r3, r3, #1
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <update_walls+0x138>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 80049dc:	2200      	movs	r2, #0
 80049de:	2120      	movs	r1, #32
 80049e0:	4861      	ldr	r0, [pc, #388]	; (8004b68 <update_walls+0x2b8>)
 80049e2:	f003 fb42 	bl	800806a <HAL_GPIO_WritePin>
 80049e6:	e004      	b.n	80049f2 <update_walls+0x142>
	}
	else{
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
 80049e8:	2201      	movs	r2, #1
 80049ea:	2120      	movs	r1, #32
 80049ec:	485e      	ldr	r0, [pc, #376]	; (8004b68 <update_walls+0x2b8>)
 80049ee:	f003 fb3c 	bl	800806a <HAL_GPIO_WritePin>
	}
    new_cell.walls[UP]=boolfront;
 80049f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049f6:	f887 3020 	strb.w	r3, [r7, #32]
    new_cell.walls[DOWN]=0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    new_cell.walls[LEFT]=boolleft;
 8004a00:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    new_cell.walls[RIGHT]=boolright;
 8004a08:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    new_cell.dead=0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    new_cell.visited=1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    maze.cells[row][col]=cell_direction_adjust(new_cell);
 8004a1c:	4953      	ldr	r1, [pc, #332]	; (8004b6c <update_walls+0x2bc>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	011a      	lsls	r2, r3, #4
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	18cc      	adds	r4, r1, r3
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	f107 0320 	add.w	r3, r7, #32
 8004a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a36:	f7ff fec5 	bl	80047c4 <cell_direction_adjust>
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(new_cell.walls[UP]==1&&new_cell.walls[LEFT]==1&&new_cell.walls[RIGHT]==1&&row!=0&&col!=0)
 8004a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d017      	beq.n	8004a7a <update_walls+0x1ca>
 8004a4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d013      	beq.n	8004a7a <update_walls+0x1ca>
 8004a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00f      	beq.n	8004a7a <update_walls+0x1ca>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00c      	beq.n	8004a7a <update_walls+0x1ca>
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <update_walls+0x1ca>
    {
        maze.cells[row][col].dead=1;
 8004a66:	4941      	ldr	r1, [pc, #260]	; (8004b6c <update_walls+0x2bc>)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	011a      	lsls	r2, r3, #4
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	440b      	add	r3, r1
 8004a74:	330c      	adds	r3, #12
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
    }
    for(int i=0;i<4;i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7e:	e05a      	b.n	8004b36 <update_walls+0x286>
    {
        int newRow=row+dy[i];
 8004a80:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <update_walls+0x2c0>)
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
        int newCol=col+dx[i];
 8004a8e:	4a39      	ldr	r2, [pc, #228]	; (8004b74 <update_walls+0x2c4>)
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4413      	add	r3, r2
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
        if(isValid(newRow,newCol))
 8004a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004aa0:	f7ff fd26 	bl	80044f0 <isValid>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d042      	beq.n	8004b30 <update_walls+0x280>
        {
            if(i==UP)maze.cells[newRow][newCol].walls[DOWN]=maze.cells[row][col].walls[UP];
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d112      	bne.n	8004ad6 <update_walls+0x226>
 8004ab0:	492e      	ldr	r1, [pc, #184]	; (8004b6c <update_walls+0x2bc>)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	011a      	lsls	r2, r3, #4
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	440b      	add	r3, r1
 8004abe:	7818      	ldrb	r0, [r3, #0]
 8004ac0:	492a      	ldr	r1, [pc, #168]	; (8004b6c <update_walls+0x2bc>)
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	4413      	add	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	440b      	add	r3, r1
 8004ace:	3301      	adds	r3, #1
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e02c      	b.n	8004b30 <update_walls+0x280>
            else if(i==LEFT)maze.cells[newRow][newCol].walls[RIGHT]=maze.cells[row][col].walls[LEFT];
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d113      	bne.n	8004b04 <update_walls+0x254>
 8004adc:	4923      	ldr	r1, [pc, #140]	; (8004b6c <update_walls+0x2bc>)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	011a      	lsls	r2, r3, #4
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	440b      	add	r3, r1
 8004aea:	3302      	adds	r3, #2
 8004aec:	7818      	ldrb	r0, [r3, #0]
 8004aee:	491f      	ldr	r1, [pc, #124]	; (8004b6c <update_walls+0x2bc>)
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	011a      	lsls	r2, r3, #4
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	4413      	add	r3, r2
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	440b      	add	r3, r1
 8004afc:	3303      	adds	r3, #3
 8004afe:	4602      	mov	r2, r0
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e015      	b.n	8004b30 <update_walls+0x280>
            else if(i==RIGHT)maze.cells[newRow][newCol].walls[LEFT]=maze.cells[row][col].walls[RIGHT];
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d112      	bne.n	8004b30 <update_walls+0x280>
 8004b0a:	4918      	ldr	r1, [pc, #96]	; (8004b6c <update_walls+0x2bc>)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	011a      	lsls	r2, r3, #4
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	440b      	add	r3, r1
 8004b18:	3303      	adds	r3, #3
 8004b1a:	7818      	ldrb	r0, [r3, #0]
 8004b1c:	4913      	ldr	r1, [pc, #76]	; (8004b6c <update_walls+0x2bc>)
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b20:	011a      	lsls	r2, r3, #4
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	4413      	add	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	440b      	add	r3, r1
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++)
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	3301      	adds	r3, #1
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	dda1      	ble.n	8004a80 <update_walls+0x1d0>
        }
    }
    return new_cell;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	461c      	mov	r4, r3
 8004b40:	f107 0320 	add.w	r3, r7, #32
 8004b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004b4a:	69f8      	ldr	r0, [r7, #28]
 8004b4c:	3744      	adds	r7, #68	; 0x44
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd90      	pop	{r4, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000480 	.word	0x20000480
 8004b58:	20000488 	.word	0x20000488
 8004b5c:	20000490 	.word	0x20000490
 8004b60:	40010800 	.word	0x40010800
 8004b64:	40280000 	.word	0x40280000
 8004b68:	40010c00 	.word	0x40010c00
 8004b6c:	200004a8 	.word	0x200004a8
 8004b70:	0800ff64 	.word	0x0800ff64
 8004b74:	0800ff54 	.word	0x0800ff54

08004b78 <go_to_cell>:
void go_to_cell(int *angle_now,int dir)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
    switch(dir)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d83e      	bhi.n	8004c08 <go_to_cell+0x90>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <go_to_cell+0x18>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004c09 	.word	0x08004c09
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bab 	.word	0x08004bab
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bf3 	.word	0x08004bf3
            {
                case -1:
                    break;
                case UP:
                    API_moveForward();
 8004ba4:	f7fc fdc0 	bl	8001728 <API_moveForward>
                    break;
 8004ba8:	e02f      	b.n	8004c0a <go_to_cell+0x92>
                case DOWN:
                    *angle_now-=180;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1a3 02b4 	sub.w	r2, r3, #180	; 0xb4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]

                    if(distance_left < distance_right ){
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <go_to_cell+0xd0>)
 8004bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bbc:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <go_to_cell+0xd4>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb ff67 	bl	8000a94 <__aeabi_dcmplt>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <go_to_cell+0x5a>
                    	API_turnRight180();
 8004bcc:	f7fd fa9e 	bl	800210c <API_turnRight180>
 8004bd0:	e001      	b.n	8004bd6 <go_to_cell+0x5e>
//                    	API_turnRight();
                    }
                    else{
                    	API_turnLeft180();
 8004bd2:	f7fd fb8b 	bl	80022ec <API_turnLeft180>
//                    	API_turnLeft();
                    }
                    API_moveForward();
 8004bd6:	f7fc fda7 	bl	8001728 <API_moveForward>
                    break;
 8004bda:	e016      	b.n	8004c0a <go_to_cell+0x92>
                case LEFT:
                    *angle_now+=90;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]
                    API_turnLeft();
 8004be8:	f7fd f99e 	bl	8001f28 <API_turnLeft>
                    API_moveForward();
 8004bec:	f7fc fd9c 	bl	8001728 <API_moveForward>
                    break;
 8004bf0:	e00b      	b.n	8004c0a <go_to_cell+0x92>
                case RIGHT:
                    *angle_now-=90;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
                    API_turnRight();
 8004bfe:	f7fd f8a1 	bl	8001d44 <API_turnRight>
                    API_moveForward();
 8004c02:	f7fc fd91 	bl	8001728 <API_moveForward>
                    break;
 8004c06:	e000      	b.n	8004c0a <go_to_cell+0x92>
                default:
                    break;
 8004c08:	bf00      	nop
            }
            *angle_now = *angle_now % 360;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a10      	ldr	r2, [pc, #64]	; (8004c50 <go_to_cell+0xd8>)
 8004c10:	fb82 1203 	smull	r1, r2, r2, r3
 8004c14:	441a      	add	r2, r3
 8004c16:	1211      	asrs	r1, r2, #8
 8004c18:	17da      	asrs	r2, r3, #31
 8004c1a:	1a8a      	subs	r2, r1, r2
 8004c1c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004c20:	fb01 f202 	mul.w	r2, r1, r2
 8004c24:	1a9a      	subs	r2, r3, r2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	601a      	str	r2, [r3, #0]
            // �?ảm bảo góc không bị âm
            if (*angle_now < 0) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da05      	bge.n	8004c3e <go_to_cell+0xc6>
                *angle_now += 360;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
            }
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000488 	.word	0x20000488
 8004c4c:	20000490 	.word	0x20000490
 8004c50:	b60b60b7 	.word	0xb60b60b7

08004c54 <check_wall_angle>:
bool check_wall_angle(cell_info cell,int *dir)
{
 8004c54:	b490      	push	{r4, r7}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	463c      	mov	r4, r7
 8004c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    switch(cell.angle_update)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004c66:	d00a      	beq.n	8004c7e <check_wall_angle+0x2a>
 8004c68:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004c6c:	dc4d      	bgt.n	8004d0a <check_wall_angle+0xb6>
 8004c6e:	2bb4      	cmp	r3, #180	; 0xb4
 8004c70:	d031      	beq.n	8004cd6 <check_wall_angle+0x82>
 8004c72:	2bb4      	cmp	r3, #180	; 0xb4
 8004c74:	dc49      	bgt.n	8004d0a <check_wall_angle+0xb6>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d013      	beq.n	8004ca2 <check_wall_angle+0x4e>
 8004c7a:	2b5a      	cmp	r3, #90	; 0x5a
 8004c7c:	e045      	b.n	8004d0a <check_wall_angle+0xb6>
    {
        case 90:
            break;
        case 270:
            if(*dir%2==0)*dir+=1;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <check_wall_angle+0x42>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	601a      	str	r2, [r3, #0]
            else *dir-=1;
            break;
 8004c94:	e039      	b.n	8004d0a <check_wall_angle+0xb6>
            else *dir-=1;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	1e5a      	subs	r2, r3, #1
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	601a      	str	r2, [r3, #0]
            break;
 8004ca0:	e033      	b.n	8004d0a <check_wall_angle+0xb6>
        case 0:
            if(*dir==0 || *dir ==1)*dir+=2;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <check_wall_angle+0x5e>
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d105      	bne.n	8004cbe <check_wall_angle+0x6a>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1c9a      	adds	r2, r3, #2
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	601a      	str	r2, [r3, #0]
            else if(*dir==2)*dir=1;
            else *dir=0;
            break;
 8004cbc:	e025      	b.n	8004d0a <check_wall_angle+0xb6>
            else if(*dir==2)*dir=1;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d103      	bne.n	8004cce <check_wall_angle+0x7a>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
            break;
 8004ccc:	e01d      	b.n	8004d0a <check_wall_angle+0xb6>
            else *dir=0;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
            break;
 8004cd4:	e019      	b.n	8004d0a <check_wall_angle+0xb6>
        case 180:
             if(*dir==2 || *dir ==3)*dir-=2;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d003      	beq.n	8004ce6 <check_wall_angle+0x92>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d105      	bne.n	8004cf2 <check_wall_angle+0x9e>
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1e9a      	subs	r2, r3, #2
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	601a      	str	r2, [r3, #0]
            else if(*dir==0)*dir=3;
            else *dir=2;
            break;
 8004cf0:	e00a      	b.n	8004d08 <check_wall_angle+0xb4>
            else if(*dir==0)*dir=3;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <check_wall_angle+0xae>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	601a      	str	r2, [r3, #0]
            break;
 8004d00:	e002      	b.n	8004d08 <check_wall_angle+0xb4>
            else *dir=2;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2202      	movs	r2, #2
 8004d06:	601a      	str	r2, [r3, #0]
            break;
 8004d08:	bf00      	nop
    }
    return cell.walls[*dir];
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3310      	adds	r3, #16
 8004d10:	443b      	add	r3, r7
 8004d12:	f813 3c10 	ldrb.w	r3, [r3, #-16]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc90      	pop	{r4, r7}
 8004d1e:	4770      	bx	lr

08004d20 <get_min_neighbour>:
coord get_min_neighbour(cell_info cell_wall,coord cur, int (*arr)[ROW][COL],bool change_)
{
 8004d20:	b084      	sub	sp, #16
 8004d22:	b590      	push	{r4, r7, lr}
 8004d24:	b08f      	sub	sp, #60	; 0x3c
 8004d26:	af02      	add	r7, sp, #8
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int min_neightbor=255;
 8004d32:	23ff      	movs	r3, #255	; 0xff
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    coord next_step;
    next_step.value=-1;
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	61bb      	str	r3, [r7, #24]
    int ind;
    for (int dir = 0; dir < 4; ++dir) {
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d40:	e04e      	b.n	8004de0 <get_min_neighbour+0xc0>
        int newRow = cur.row + dy[dir]; // 0 0 -1 1
 8004d42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d44:	492f      	ldr	r1, [pc, #188]	; (8004e04 <get_min_neighbour+0xe4>)
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	623b      	str	r3, [r7, #32]
        int newCol = cur.col + dx[dir]; //1 -1 0 0
 8004d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d52:	492d      	ldr	r1, [pc, #180]	; (8004e08 <get_min_neighbour+0xe8>)
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	61fb      	str	r3, [r7, #28]
        ind=dir;
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	60fb      	str	r3, [r7, #12]
        bool check_=cell_wall.walls[dir];
 8004d62:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	4413      	add	r3, r2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(change_)check_=check_wall_angle(cell_wall,&ind);
 8004d70:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <get_min_neighbour+0x6e>
 8004d78:	f107 030c 	add.w	r3, r7, #12
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d84:	f7ff ff66 	bl	8004c54 <check_wall_angle>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(isValid(newRow,newCol) && !check_)
 8004d8e:	69f9      	ldr	r1, [r7, #28]
 8004d90:	6a38      	ldr	r0, [r7, #32]
 8004d92:	f7ff fbad 	bl	80044f0 <isValid>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01e      	beq.n	8004dda <get_min_neighbour+0xba>
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da0:	f083 0301 	eor.w	r3, r3, #1
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d017      	beq.n	8004dda <get_min_neighbour+0xba>
        {
            if((*arr)[newRow][newCol]<=min_neightbor)
 8004daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	0111      	lsls	r1, r2, #4
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	db0d      	blt.n	8004dda <get_min_neighbour+0xba>
            {
                min_neightbor=(*arr)[newRow][newCol];
 8004dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dc0:	6a3a      	ldr	r2, [r7, #32]
 8004dc2:	0111      	lsls	r1, r2, #4
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_step.row=newRow;
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	613b      	str	r3, [r7, #16]
                next_step.col=newCol;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	617b      	str	r3, [r7, #20]
                next_step.value=ind;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	61bb      	str	r3, [r7, #24]
    for (int dir = 0; dir < 4; ++dir) {
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	3301      	adds	r3, #1
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	ddad      	ble.n	8004d42 <get_min_neighbour+0x22>
            }
        }
    }
    return next_step;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	461c      	mov	r4, r3
 8004dea:	f107 0310 	add.w	r3, r7, #16
 8004dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	3734      	adds	r7, #52	; 0x34
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004e00:	b004      	add	sp, #16
 8004e02:	4770      	bx	lr
 8004e04:	0800ff64 	.word	0x0800ff64
 8004e08:	0800ff54 	.word	0x0800ff54

08004e0c <flood>:
void flood(Stack *stack_flood,int (*arr)[ROW][COL])
{
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b09a      	sub	sp, #104	; 0x68
 8004e10:	af06      	add	r7, sp, #24
 8004e12:	6178      	str	r0, [r7, #20]
 8004e14:	6139      	str	r1, [r7, #16]
    // log_out("flood");
    coord cur_stack;
    coord next_step;

    while(!isEmptyStack(stack_flood))
 8004e16:	e0a3      	b.n	8004f60 <flood+0x154>
    {

        cur_stack=peekStack(stack_flood);
 8004e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e1c:	6979      	ldr	r1, [r7, #20]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 fbb0 	bl	8006584 <peekStack>
        popStack(stack_flood);
 8004e24:	463b      	mov	r3, r7
 8004e26:	6979      	ldr	r1, [r7, #20]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fb75 	bl	8006518 <popStack>
        int min_neightbor=255;
 8004e2e:	23ff      	movs	r3, #255	; 0xff
 8004e30:	647b      	str	r3, [r7, #68]	; 0x44
        bool check_;

        next_step=get_min_neighbour(maze.cells[cur_stack.row][cur_stack.col],cur_stack,arr,0);
 8004e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8004e3a:	4950      	ldr	r1, [pc, #320]	; (8004f7c <flood+0x170>)
 8004e3c:	0112      	lsls	r2, r2, #4
 8004e3e:	4413      	add	r3, r2
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	440b      	add	r3, r1
 8004e44:	2200      	movs	r2, #0
 8004e46:	9205      	str	r2, [sp, #20]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	9204      	str	r2, [sp, #16]
 8004e4c:	ac01      	add	r4, sp, #4
 8004e4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004e52:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	9200      	str	r2, [sp, #0]
 8004e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f7ff ff5e 	bl	8004d20 <get_min_neighbour>

        min_neightbor=(*arr)[next_step.row][next_step.col];
 8004e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	0109      	lsls	r1, r1, #4
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
        if((*arr)[cur_stack.row][cur_stack.col]-1 != min_neightbor )
 8004e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	0109      	lsls	r1, r1, #4
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d053      	beq.n	8004f32 <flood+0x126>
        {
            for(int i =0 ;i<4;i++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e8e:	e03b      	b.n	8004f08 <flood+0xfc>
            {
                coord cur_add;
                cur_add.row= cur_stack.row + dy[i]; // 0 0 -1 1
 8004e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e92:	493b      	ldr	r1, [pc, #236]	; (8004f80 <flood+0x174>)
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
                cur_add.col= cur_stack.col + dx[i]; //1 -1 0 0
 8004e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea0:	4938      	ldr	r1, [pc, #224]	; (8004f84 <flood+0x178>)
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]
                check_=maze.cells[cur_stack.row][cur_stack.col].walls[i];
 8004eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	4932      	ldr	r1, [pc, #200]	; (8004f7c <flood+0x170>)
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	4413      	add	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	18ca      	adds	r2, r1, r3
 8004eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebc:	4413      	add	r3, r2
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                if(isValid(cur_add.row,cur_add.col) &&(*arr)[cur_add.row][cur_add.col]!=0&&!check_)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fb10 	bl	80044f0 <isValid>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d015      	beq.n	8004f02 <flood+0xf6>
 8004ed6:	69b9      	ldr	r1, [r7, #24]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	0109      	lsls	r1, r1, #4
 8004ede:	440a      	add	r2, r1
 8004ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00c      	beq.n	8004f02 <flood+0xf6>
 8004ee8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004eec:	f083 0301 	eor.w	r3, r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <flood+0xf6>
                {
                    pushStack(stack_flood,cur_add);
 8004ef6:	f107 0318 	add.w	r3, r7, #24
 8004efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004efc:	6978      	ldr	r0, [r7, #20]
 8004efe:	f001 fadc 	bl	80064ba <pushStack>
            for(int i =0 ;i<4;i++)
 8004f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f04:	3301      	adds	r3, #1
 8004f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	ddc0      	ble.n	8004e90 <flood+0x84>
                }
            }
            if((*arr)[cur_stack.row][cur_stack.col]!=0)(*arr)[cur_stack.row][cur_stack.col]=min_neightbor+1;
 8004f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	0109      	lsls	r1, r1, #4
 8004f16:	440a      	add	r2, r1
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <flood+0x126>
 8004f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	0100      	lsls	r0, r0, #4
 8004f2c:	4402      	add	r2, r0
 8004f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        int stack_size=sizeStack(stack_flood);
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f001 fb56 	bl	80065e4 <sizeStack>
 8004f38:	63f8      	str	r0, [r7, #60]	; 0x3c
        if(stack_size>=35){
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	2b22      	cmp	r3, #34	; 0x22
 8004f3e:	dd0f      	ble.n	8004f60 <flood+0x154>
            for(int i=0;i<stack_size;i++)
 8004f40:	2300      	movs	r3, #0
 8004f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f44:	e007      	b.n	8004f56 <flood+0x14a>
            {
                popStack(stack_flood);
 8004f46:	463b      	mov	r3, r7
 8004f48:	6979      	ldr	r1, [r7, #20]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 fae4 	bl	8006518 <popStack>
            for(int i=0;i<stack_size;i++)
 8004f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f52:	3301      	adds	r3, #1
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	dbf3      	blt.n	8004f46 <flood+0x13a>
            }
            return;
 8004f5e:	e009      	b.n	8004f74 <flood+0x168>
    while(!isEmptyStack(stack_flood))
 8004f60:	6978      	ldr	r0, [r7, #20]
 8004f62:	f001 fa81 	bl	8006468 <isEmptyStack>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f083 0301 	eor.w	r3, r3, #1
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f47f af52 	bne.w	8004e18 <flood+0xc>
        }
    }
}
 8004f74:	3750      	adds	r7, #80	; 0x50
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bdb0      	pop	{r4, r5, r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200004a8 	.word	0x200004a8
 8004f80:	0800ff64 	.word	0x0800ff64
 8004f84:	0800ff54 	.word	0x0800ff54

08004f88 <floodfill>:
coord floodfill(coord start,coord dest,int (*arr)[ROW][COL],int *angle_now)
{
 8004f88:	b5b0      	push	{r4, r5, r7, lr}
 8004f8a:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af06      	add	r7, sp, #24
 8004f92:	f607 6418 	addw	r4, r7, #3608	; 0xe18
 8004f96:	f6a4 640c 	subw	r4, r4, #3596	; 0xe0c
 8004f9a:	6020      	str	r0, [r4, #0]
 8004f9c:	f607 6018 	addw	r0, r7, #3608	; 0xe18
 8004fa0:	f6a0 6018 	subw	r0, r0, #3608	; 0xe18
 8004fa4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Queue path_queue;
    initializeQueue(&path_queue);
 8004fa8:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8004fac:	f103 0318 	add.w	r3, r3, #24
 8004fb0:	3b2c      	subs	r3, #44	; 0x2c
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f001 f973 	bl	800629e <initializeQueue>

    pushQueue(&path_queue,start);
 8004fb8:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004fbc:	f6a3 6318 	subw	r3, r3, #3608	; 0xe18
 8004fc0:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 8004fc4:	f100 0018 	add.w	r0, r0, #24
 8004fc8:	382c      	subs	r0, #44	; 0x2c
 8004fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fcc:	f001 f9ac 	bl	8006328 <pushQueue>
    coord cur=start;
 8004fd0:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8004fd4:	f103 0318 	add.w	r3, r3, #24
 8004fd8:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8004fdc:	f607 6218 	addw	r2, r7, #3608	; 0xe18
 8004fe0:	f6a2 6218 	subw	r2, r2, #3608	; 0xe18
 8004fe4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    cell_info new_cell;

    Stack stack_flood;
    initializeStack(&stack_flood);
 8004fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004fee:	3b6c      	subs	r3, #108	; 0x6c
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 fa28 	bl	8006446 <initializeStack>

    pushStack(&stack_flood,start);
 8004ff6:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004ffa:	f6a3 6318 	subw	r3, r3, #3608	; 0xe18
 8004ffe:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8005002:	386c      	subs	r0, #108	; 0x6c
 8005004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005006:	f001 fa58 	bl	80064ba <pushStack>

    int path_distance_value_find=0;
 800500a:	2300      	movs	r3, #0
 800500c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8005010:	f102 0214 	add.w	r2, r2, #20
 8005014:	6013      	str	r3, [r2, #0]
    // int save_row,save_col;
    coord next_step;

    while(1)
    {
        if(!isEmptyQueue(&path_queue)) // dua ra quyet dinh va go
 8005016:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 800501a:	f103 0318 	add.w	r3, r3, #24
 800501e:	3b2c      	subs	r3, #44	; 0x2c
 8005020:	4618      	mov	r0, r3
 8005022:	f001 f954 	bl	80062ce <isEmptyQueue>
 8005026:	4603      	mov	r3, r0
 8005028:	f083 0301 	eor.w	r3, r3, #1
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80bb 	beq.w	80051aa <floodfill+0x222>
        {
            cur = peekQueue(&path_queue);
 8005034:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8005038:	f103 0318 	add.w	r3, r3, #24
 800503c:	f6a3 62f8 	subw	r2, r3, #3832	; 0xef8
 8005040:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8005044:	f103 0318 	add.w	r3, r3, #24
 8005048:	3b2c      	subs	r3, #44	; 0x2c
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f001 f9b3 	bl	80063b8 <peekQueue>

            new_cell=update_walls(*angle_now,cur.row,cur.col);
 8005052:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8005056:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8005062:	f103 0318 	add.w	r3, r3, #24
 8005066:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8005070:	f103 0318 	add.w	r3, r3, #24
 8005074:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f507 5078 	add.w	r0, r7, #15872	; 0x3e00
 800507e:	f100 0018 	add.w	r0, r0, #24
 8005082:	f6a0 7008 	subw	r0, r0, #3848	; 0xf08
 8005086:	f7ff fc13 	bl	80048b0 <update_walls>

            if((*arr)[cur.row][cur.col]==(*arr)[dest.row][dest.col]){
 800508a:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 800508e:	f103 0318 	add.w	r3, r3, #24
 8005092:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8005096:	6819      	ldr	r1, [r3, #0]
 8005098:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 800509c:	f103 0318 	add.w	r3, r3, #24
 80050a0:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80050aa:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	0109      	lsls	r1, r1, #4
 80050b2:	440a      	add	r2, r1
 80050b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050b8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80050bc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80050c6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80050d0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	0100      	lsls	r0, r0, #4
 80050d8:	4401      	add	r1, r0
 80050da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d065      	beq.n	80051ae <floodfill+0x226>
                break;
            }
            flood(&stack_flood,arr);
 80050e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80050e6:	3b6c      	subs	r3, #108	; 0x6c
 80050e8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80050ec:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80050f0:	6811      	ldr	r1, [r2, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fe8a 	bl	8004e0c <flood>
            popQueue(&path_queue);
 80050f8:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80050fc:	f103 0318 	add.w	r3, r3, #24
 8005100:	3b2c      	subs	r3, #44	; 0x2c
 8005102:	4618      	mov	r0, r3
 8005104:	f001 f93e 	bl	8006384 <popQueue>
            next_step=get_min_neighbour(new_cell,cur,arr,1);
 8005108:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800510c:	f6a3 55f8 	subw	r5, r3, #3576	; 0xdf8
 8005110:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8005114:	f103 0318 	add.w	r3, r3, #24
 8005118:	f6a3 7308 	subw	r3, r3, #3848	; 0xf08
 800511c:	2201      	movs	r2, #1
 800511e:	9205      	str	r2, [sp, #20]
 8005120:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8005124:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	9204      	str	r2, [sp, #16]
 800512c:	f507 5278 	add.w	r2, r7, #15872	; 0x3e00
 8005130:	f102 0218 	add.w	r2, r2, #24
 8005134:	f6a2 62f8 	subw	r2, r2, #3832	; 0xef8
 8005138:	ac01      	add	r4, sp, #4
 800513a:	ca07      	ldmia	r2, {r0, r1, r2}
 800513c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	9200      	str	r2, [sp, #0]
 8005144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005146:	4628      	mov	r0, r5
 8005148:	f7ff fdea 	bl	8004d20 <get_min_neighbour>
            pushQueue(&path_queue,next_step);
 800514c:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8005150:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8005154:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 8005158:	f100 0018 	add.w	r0, r0, #24
 800515c:	382c      	subs	r0, #44	; 0x2c
 800515e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005160:	f001 f8e2 	bl	8006328 <pushQueue>
            pushStack(&stack_flood,next_step);
 8005164:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8005168:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 800516c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8005170:	386c      	subs	r0, #108	; 0x6c
 8005172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005174:	f001 f9a1 	bl	80064ba <pushStack>
            go_to_cell(angle_now,next_step.value);
 8005178:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800517c:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	4619      	mov	r1, r3
 8005184:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8005188:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f7ff fcf3 	bl	8004b78 <go_to_cell>
            path_distance_value_find++;
 8005192:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8005196:	f103 0314 	add.w	r3, r3, #20
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80051a2:	f102 0214 	add.w	r2, r2, #20
 80051a6:	6013      	str	r3, [r2, #0]
        if(!isEmptyQueue(&path_queue)) // dua ra quyet dinh va go
 80051a8:	e735      	b.n	8005016 <floodfill+0x8e>
        }
        else{
            break;
 80051aa:	bf00      	nop
 80051ac:	e009      	b.n	80051c2 <floodfill+0x23a>
                break;
 80051ae:	bf00      	nop
        }
    }

    while(!isEmptyQueue(&path_queue)) popQueue(&path_queue);
 80051b0:	e007      	b.n	80051c2 <floodfill+0x23a>
 80051b2:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80051b6:	f103 0318 	add.w	r3, r3, #24
 80051ba:	3b2c      	subs	r3, #44	; 0x2c
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 f8e1 	bl	8006384 <popQueue>
 80051c2:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80051c6:	f103 0318 	add.w	r3, r3, #24
 80051ca:	3b2c      	subs	r3, #44	; 0x2c
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 f87e 	bl	80062ce <isEmptyQueue>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f083 0301 	eor.w	r3, r3, #1
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e9      	bne.n	80051b2 <floodfill+0x22a>

    coord p_return={next_step.row,next_step.col,0};
 80051de:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80051e2:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80051ec:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80051f6:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8005200:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800520a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 800520e:	2200      	movs	r2, #0
 8005210:	609a      	str	r2, [r3, #8]
    return p_return;
 8005212:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8005216:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f607 6218 	addw	r2, r7, #3608	; 0xe18
 8005220:	f6a2 6204 	subw	r2, r2, #3588	; 0xe04
 8005224:	ca07      	ldmia	r2, {r0, r1, r2}
 8005226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800522a:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800522e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005240 <init_flood_start>:
void init_flood_start(int (*arr)[ROW][COL],int row_,int col_,int back_)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b09a      	sub	sp, #104	; 0x68
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
    int count_=0;
 800524e:	2300      	movs	r3, #0
 8005250:	65bb      	str	r3, [r7, #88]	; 0x58
    for(int i=0;i<16;i++)
 8005252:	2300      	movs	r3, #0
 8005254:	667b      	str	r3, [r7, #100]	; 0x64
 8005256:	e037      	b.n	80052c8 <init_flood_start+0x88>
    {
        for(int j = 0 ;j<16;j++)
 8005258:	2300      	movs	r3, #0
 800525a:	663b      	str	r3, [r7, #96]	; 0x60
 800525c:	e02e      	b.n	80052bc <init_flood_start+0x7c>
        {
            (*arr)[i][j]=-1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005262:	0111      	lsls	r1, r2, #4
 8005264:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005266:	440a      	add	r2, r1
 8005268:	f04f 31ff 	mov.w	r1, #4294967295
 800526c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if(back_==2&&maze.cells[i][j].visited==false){
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d11f      	bne.n	80052b6 <init_flood_start+0x76>
 8005276:	496b      	ldr	r1, [pc, #428]	; (8005424 <init_flood_start+0x1e4>)
 8005278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527a:	011a      	lsls	r2, r3, #4
 800527c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527e:	4413      	add	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	440b      	add	r3, r1
 8005284:	3304      	adds	r3, #4
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f083 0301 	eor.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d011      	beq.n	80052b6 <init_flood_start+0x76>
                (*arr)[i][j]=255;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005296:	0111      	lsls	r1, r2, #4
 8005298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800529a:	440a      	add	r2, r1
 800529c:	21ff      	movs	r1, #255	; 0xff
 800529e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                maze.cells[i][j].dead=true;
 80052a2:	4960      	ldr	r1, [pc, #384]	; (8005424 <init_flood_start+0x1e4>)
 80052a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a6:	011a      	lsls	r2, r3, #4
 80052a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052aa:	4413      	add	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	440b      	add	r3, r1
 80052b0:	330c      	adds	r3, #12
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
        for(int j = 0 ;j<16;j++)
 80052b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b8:	3301      	adds	r3, #1
 80052ba:	663b      	str	r3, [r7, #96]	; 0x60
 80052bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052be:	2b0f      	cmp	r3, #15
 80052c0:	ddcd      	ble.n	800525e <init_flood_start+0x1e>
    for(int i=0;i<16;i++)
 80052c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c4:	3301      	adds	r3, #1
 80052c6:	667b      	str	r3, [r7, #100]	; 0x64
 80052c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	ddc4      	ble.n	8005258 <init_flood_start+0x18>
            }
        }
    }
    if(back_!=1)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d043      	beq.n	800535c <init_flood_start+0x11c>
    {
        coord point2={row_+1,col_,count_};
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	3301      	adds	r3, #1
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80052de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        pushQueue(&myQueue,point2);
 80052e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052e8:	484f      	ldr	r0, [pc, #316]	; (8005428 <init_flood_start+0x1e8>)
 80052ea:	f001 f81d 	bl	8006328 <pushQueue>
        (*arr)[row_+1][col_]=0;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	0111      	lsls	r1, r2, #4
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	440a      	add	r2, r1
 80052fa:	2100      	movs	r1, #0
 80052fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        coord point3={row_,col_+1,count_};
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3301      	adds	r3, #1
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800530c:	633b      	str	r3, [r7, #48]	; 0x30
        pushQueue(&myQueue,point3);
 800530e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005314:	4844      	ldr	r0, [pc, #272]	; (8005428 <init_flood_start+0x1e8>)
 8005316:	f001 f807 	bl	8006328 <pushQueue>
        (*arr)[row_][col_+1]=0;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	0109      	lsls	r1, r1, #4
 8005324:	440a      	add	r2, r1
 8005326:	2100      	movs	r1, #0
 8005328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        coord point4={row_+1,col_+1,count_};
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3301      	adds	r3, #1
 8005336:	623b      	str	r3, [r7, #32]
 8005338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
        pushQueue(&myQueue,point4);
 800533c:	f107 031c 	add.w	r3, r7, #28
 8005340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005342:	4839      	ldr	r0, [pc, #228]	; (8005428 <init_flood_start+0x1e8>)
 8005344:	f000 fff0 	bl	8006328 <pushQueue>
        (*arr)[row_+1][col_+1]=0;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	0109      	lsls	r1, r1, #4
 8005354:	440a      	add	r2, r1
 8005356:	2100      	movs	r1, #0
 8005358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    coord point={row_,col_,count_};
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
 8005364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005366:	64bb      	str	r3, [r7, #72]	; 0x48
    pushQueue(&myQueue,point);
 8005368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800536c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800536e:	482e      	ldr	r0, [pc, #184]	; (8005428 <init_flood_start+0x1e8>)
 8005370:	f000 ffda 	bl	8006328 <pushQueue>
    (*arr)[row_][col_]=0;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0111      	lsls	r1, r2, #4
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	440a      	add	r2, r1
 800537e:	2100      	movs	r1, #0
 8005380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while(!isEmptyQueue(&myQueue))
 8005384:	e040      	b.n	8005408 <init_flood_start+0x1c8>
    {
        coord frontCoord = peekQueue(&myQueue);
 8005386:	f107 0310 	add.w	r3, r7, #16
 800538a:	4927      	ldr	r1, [pc, #156]	; (8005428 <init_flood_start+0x1e8>)
 800538c:	4618      	mov	r0, r3
 800538e:	f001 f813 	bl	80063b8 <peekQueue>
        popQueue(&myQueue);
 8005392:	4825      	ldr	r0, [pc, #148]	; (8005428 <init_flood_start+0x1e8>)
 8005394:	f000 fff6 	bl	8006384 <popQueue>
          for (int i = 0; i < 4; ++i) {
 8005398:	2300      	movs	r3, #0
 800539a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800539c:	e029      	b.n	80053f2 <init_flood_start+0x1b2>
                int newRow = frontCoord.row + dy[i]; // 0 0 -1 1
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4922      	ldr	r1, [pc, #136]	; (800542c <init_flood_start+0x1ec>)
 80053a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053a8:	4413      	add	r3, r2
 80053aa:	657b      	str	r3, [r7, #84]	; 0x54
                int newCol = frontCoord.col + dx[i]; //1 -1 0 0
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4920      	ldr	r1, [pc, #128]	; (8005430 <init_flood_start+0x1f0>)
 80053b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053b6:	4413      	add	r3, r2
 80053b8:	653b      	str	r3, [r7, #80]	; 0x50
                bool check_=maze.cells[frontCoord.row][frontCoord.col].walls[i];
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4919      	ldr	r1, [pc, #100]	; (8005424 <init_flood_start+0x1e4>)
 80053c0:	0112      	lsls	r2, r2, #4
 80053c2:	4413      	add	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	18ca      	adds	r2, r1, r3
 80053c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ca:	4413      	add	r3, r2
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(!check_)check_and_fill(*arr,newRow,newCol,frontCoord.value);
 80053d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053d6:	f083 0301 	eor.w	r3, r3, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <init_flood_start+0x1ac>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff f8ca 	bl	8004580 <check_and_fill>
          for (int i = 0; i < 4; ++i) {
 80053ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ee:	3301      	adds	r3, #1
 80053f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	ddd2      	ble.n	800539e <init_flood_start+0x15e>
          }
          if(sizeQueue(&myQueue)>120){
 80053f8:	480b      	ldr	r0, [pc, #44]	; (8005428 <init_flood_start+0x1e8>)
 80053fa:	f001 f80f 	bl	800641c <sizeQueue>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b78      	cmp	r3, #120	; 0x78
 8005402:	dd01      	ble.n	8005408 <init_flood_start+0x1c8>
            break;
 8005404:	bf00      	nop
          }
    }
}
 8005406:	e008      	b.n	800541a <init_flood_start+0x1da>
    while(!isEmptyQueue(&myQueue))
 8005408:	4807      	ldr	r0, [pc, #28]	; (8005428 <init_flood_start+0x1e8>)
 800540a:	f000 ff60 	bl	80062ce <isEmptyQueue>
 800540e:	4603      	mov	r3, r0
 8005410:	f083 0301 	eor.w	r3, r3, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1b5      	bne.n	8005386 <init_flood_start+0x146>
}
 800541a:	bf00      	nop
 800541c:	3768      	adds	r7, #104	; 0x68
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200004a8 	.word	0x200004a8
 8005428:	200014a8 	.word	0x200014a8
 800542c:	0800ff64 	.word	0x0800ff64
 8005430:	0800ff54 	.word	0x0800ff54

08005434 <HAL_TIM_IC_CaptureCallback>:
            }
    }
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d10a      	bne.n	800545c <HAL_TIM_IC_CaptureCallback+0x28>
    {
        counterTim2 = __HAL_TIM_GET_COUNTER(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <HAL_TIM_IC_CaptureCallback+0x50>)
 800544e:	6013      	str	r3, [r2, #0]
        countTim2 = (int16_t)counterTim2;
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <HAL_TIM_IC_CaptureCallback+0x50>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	b21a      	sxth	r2, r3
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <HAL_TIM_IC_CaptureCallback+0x54>)
 8005458:	801a      	strh	r2, [r3, #0]
    else if (htim->Instance == TIM3)
    {
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
        countTim3 = (int16_t)counterTim3;
    }
}
 800545a:	e00e      	b.n	800547a <HAL_TIM_IC_CaptureCallback+0x46>
    else if (htim->Instance == TIM3)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <HAL_TIM_IC_CaptureCallback+0x58>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d109      	bne.n	800547a <HAL_TIM_IC_CaptureCallback+0x46>
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	4a08      	ldr	r2, [pc, #32]	; (8005490 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800546e:	6013      	str	r3, [r2, #0]
        countTim3 = (int16_t)counterTim3;
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	b21a      	sxth	r2, r3
 8005476:	4b07      	ldr	r3, [pc, #28]	; (8005494 <HAL_TIM_IC_CaptureCallback+0x60>)
 8005478:	801a      	strh	r2, [r3, #0]
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	20000498 	.word	0x20000498
 8005488:	2000049c 	.word	0x2000049c
 800548c:	40000400 	.word	0x40000400
 8005490:	200004a0 	.word	0x200004a0
 8005494:	200004a4 	.word	0x200004a4

08005498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549a:	f2ad 5d0c 	subw	sp, sp, #1292	; 0x50c
 800549e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054a0:	f001 fc3a 	bl	8006d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054a4:	f000 fb46 	bl	8005b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054a8:	f000 fe6e 	bl	8006188 <MX_GPIO_Init>
  MX_ADC1_Init();
 80054ac:	f000 fb9e 	bl	8005bec <MX_ADC1_Init>
  MX_I2C1_Init();
 80054b0:	f000 fc56 	bl	8005d60 <MX_I2C1_Init>
  MX_TIM1_Init();
 80054b4:	f000 fc82 	bl	8005dbc <MX_TIM1_Init>
  MX_TIM2_Init();
 80054b8:	f000 fd1e 	bl	8005ef8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80054bc:	f000 fd70 	bl	8005fa0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80054c0:	f000 fdc2 	bl	8006048 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80054c4:	f000 fe36 	bl	8006134 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80054c8:	f000 fbce 	bl	8005c68 <MX_ADC2_Init>
  MX_ADC3_Init();
 80054cc:	f000 fc0a 	bl	8005ce4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80054d0:	213c      	movs	r1, #60	; 0x3c
 80054d2:	48b3      	ldr	r0, [pc, #716]	; (80057a0 <main+0x308>)
 80054d4:	f004 ff60 	bl	800a398 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80054d8:	213c      	movs	r1, #60	; 0x3c
 80054da:	48b2      	ldr	r0, [pc, #712]	; (80057a4 <main+0x30c>)
 80054dc:	f004 ff5c 	bl	800a398 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80054e0:	210c      	movs	r1, #12
 80054e2:	48b1      	ldr	r0, [pc, #708]	; (80057a8 <main+0x310>)
 80054e4:	f004 fdfc 	bl	800a0e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80054e8:	210c      	movs	r1, #12
 80054ea:	48b0      	ldr	r0, [pc, #704]	; (80057ac <main+0x314>)
 80054ec:	f004 fdf8 	bl	800a0e0 <HAL_TIM_PWM_Start>
//  FEE_ClearPage(0x0803F000);
//  FEE_ReadData(0x0803F000, &read_col, sizeof(uint8_t));
//  FEE_ReadData(0x0803F004, &read_row, sizeof(uint8_t));
//  while(1);

  for (uint8_t i = 0; i < 2; i++){
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 80054f6:	e00b      	b.n	8005510 <main+0x78>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80054f8:	2110      	movs	r1, #16
 80054fa:	48ad      	ldr	r0, [pc, #692]	; (80057b0 <main+0x318>)
 80054fc:	f002 fdcd 	bl	800809a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8005500:	20c8      	movs	r0, #200	; 0xc8
 8005502:	f001 fc6b 	bl	8006ddc <HAL_Delay>
  for (uint8_t i = 0; i < 2; i++){
 8005506:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 800550a:	3301      	adds	r3, #1
 800550c:	f887 34ef 	strb.w	r3, [r7, #1263]	; 0x4ef
 8005510:	f897 34ef 	ldrb.w	r3, [r7, #1263]	; 0x4ef
 8005514:	2b01      	cmp	r3, #1
 8005516:	d9ef      	bls.n	80054f8 <main+0x60>
  }
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8005518:	2200      	movs	r2, #0
 800551a:	2110      	movs	r1, #16
 800551c:	48a4      	ldr	r0, [pc, #656]	; (80057b0 <main+0x318>)
 800551e:	f002 fda4 	bl	800806a <HAL_GPIO_WritePin>

  uint8_t flag_sw1 = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 34ee 	strb.w	r3, [r7, #1262]	; 0x4ee
  uint8_t flag_sw2 = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 34ed 	strb.w	r3, [r7, #1261]	; 0x4ed


  while(1){
	  debug++;
 800552e:	4ba1      	ldr	r3, [pc, #644]	; (80057b4 <main+0x31c>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	b2da      	uxtb	r2, r3
 8005536:	4b9f      	ldr	r3, [pc, #636]	; (80057b4 <main+0x31c>)
 8005538:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0 && flag_sw1){
 800553a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800553e:	489e      	ldr	r0, [pc, #632]	; (80057b8 <main+0x320>)
 8005540:	f002 fd7c 	bl	800803c <HAL_GPIO_ReadPin>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d17e      	bne.n	8005648 <main+0x1b0>
 800554a:	f897 34ee 	ldrb.w	r3, [r7, #1262]	; 0x4ee
 800554e:	2b00      	cmp	r3, #0
 8005550:	d07a      	beq.n	8005648 <main+0x1b0>
		  HAL_Delay(100);
 8005552:	2064      	movs	r0, #100	; 0x64
 8005554:	f001 fc42 	bl	8006ddc <HAL_Delay>

		  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 8005558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800555c:	4896      	ldr	r0, [pc, #600]	; (80057b8 <main+0x320>)
 800555e:	f002 fd6d 	bl	800803c <HAL_GPIO_ReadPin>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d17b      	bne.n	8005660 <main+0x1c8>
			  if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0 ){
 8005568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800556c:	4892      	ldr	r0, [pc, #584]	; (80057b8 <main+0x320>)
 800556e:	f002 fd65 	bl	800803c <HAL_GPIO_ReadPin>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d116      	bne.n	80055a6 <main+0x10e>
				  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8005578:	2200      	movs	r2, #0
 800557a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800557e:	488e      	ldr	r0, [pc, #568]	; (80057b8 <main+0x320>)
 8005580:	f002 fd73 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 8005584:	2200      	movs	r2, #0
 8005586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800558a:	488b      	ldr	r0, [pc, #556]	; (80057b8 <main+0x320>)
 800558c:	f002 fd6d 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8005590:	2200      	movs	r2, #0
 8005592:	2110      	movs	r1, #16
 8005594:	4888      	ldr	r0, [pc, #544]	; (80057b8 <main+0x320>)
 8005596:	f002 fd68 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 800559a:	2200      	movs	r2, #0
 800559c:	2120      	movs	r1, #32
 800559e:	4886      	ldr	r0, [pc, #536]	; (80057b8 <main+0x320>)
 80055a0:	f002 fd63 	bl	800806a <HAL_GPIO_WritePin>
				  break;
 80055a4:	e110      	b.n	80057c8 <main+0x330>
			  }
			  row++;
 80055a6:	4b85      	ldr	r3, [pc, #532]	; (80057bc <main+0x324>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	4b83      	ldr	r3, [pc, #524]	; (80057bc <main+0x324>)
 80055b0:	701a      	strb	r2, [r3, #0]
			  flag_sw1 = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 34ee 	strb.w	r3, [r7, #1262]	; 0x4ee
			  if(row %3 == 0){
 80055b8:	4b80      	ldr	r3, [pc, #512]	; (80057bc <main+0x324>)
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	4b80      	ldr	r3, [pc, #512]	; (80057c0 <main+0x328>)
 80055be:	fba3 1302 	umull	r1, r3, r3, r2
 80055c2:	0859      	lsrs	r1, r3, #1
 80055c4:	460b      	mov	r3, r1
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	440b      	add	r3, r1
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <main+0x150>
				  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 80055d2:	2201      	movs	r2, #1
 80055d4:	2110      	movs	r1, #16
 80055d6:	4878      	ldr	r0, [pc, #480]	; (80057b8 <main+0x320>)
 80055d8:	f002 fd47 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
 80055dc:	2201      	movs	r2, #1
 80055de:	2120      	movs	r1, #32
 80055e0:	4875      	ldr	r0, [pc, #468]	; (80057b8 <main+0x320>)
 80055e2:	f002 fd42 	bl	800806a <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 80055e6:	e03b      	b.n	8005660 <main+0x1c8>

			  }
			  else if(row %3 == 1 ){
 80055e8:	4b74      	ldr	r3, [pc, #464]	; (80057bc <main+0x324>)
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	4b74      	ldr	r3, [pc, #464]	; (80057c0 <main+0x328>)
 80055ee:	fba3 1302 	umull	r1, r3, r3, r2
 80055f2:	0859      	lsrs	r1, r3, #1
 80055f4:	460b      	mov	r3, r1
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	440b      	add	r3, r1
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10a      	bne.n	8005618 <main+0x180>
				  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8005602:	2201      	movs	r2, #1
 8005604:	2110      	movs	r1, #16
 8005606:	486c      	ldr	r0, [pc, #432]	; (80057b8 <main+0x320>)
 8005608:	f002 fd2f 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 800560c:	2200      	movs	r2, #0
 800560e:	2120      	movs	r1, #32
 8005610:	4869      	ldr	r0, [pc, #420]	; (80057b8 <main+0x320>)
 8005612:	f002 fd2a 	bl	800806a <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 8005616:	e023      	b.n	8005660 <main+0x1c8>
			  }
			  else if(row %3 == 2 ){
 8005618:	4b68      	ldr	r3, [pc, #416]	; (80057bc <main+0x324>)
 800561a:	781a      	ldrb	r2, [r3, #0]
 800561c:	4b68      	ldr	r3, [pc, #416]	; (80057c0 <main+0x328>)
 800561e:	fba3 1302 	umull	r1, r3, r3, r2
 8005622:	0859      	lsrs	r1, r3, #1
 8005624:	460b      	mov	r3, r1
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	440b      	add	r3, r1
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d116      	bne.n	8005660 <main+0x1c8>
				  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8005632:	2200      	movs	r2, #0
 8005634:	2110      	movs	r1, #16
 8005636:	4860      	ldr	r0, [pc, #384]	; (80057b8 <main+0x320>)
 8005638:	f002 fd17 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
 800563c:	2201      	movs	r2, #1
 800563e:	2120      	movs	r1, #32
 8005640:	485d      	ldr	r0, [pc, #372]	; (80057b8 <main+0x320>)
 8005642:	f002 fd12 	bl	800806a <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 8005646:	e00b      	b.n	8005660 <main+0x1c8>
			  }
//    			  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		  }
	  }
	  else if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1){
 8005648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800564c:	485a      	ldr	r0, [pc, #360]	; (80057b8 <main+0x320>)
 800564e:	f002 fcf5 	bl	800803c <HAL_GPIO_ReadPin>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d104      	bne.n	8005662 <main+0x1ca>
		  flag_sw1 = 1;
 8005658:	2301      	movs	r3, #1
 800565a:	f887 34ee 	strb.w	r3, [r7, #1262]	; 0x4ee
 800565e:	e000      	b.n	8005662 <main+0x1ca>
		  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0){
 8005660:	bf00      	nop

	  }
	  if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0 && flag_sw2){
 8005662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005666:	4854      	ldr	r0, [pc, #336]	; (80057b8 <main+0x320>)
 8005668:	f002 fce8 	bl	800803c <HAL_GPIO_ReadPin>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 8087 	bne.w	8005782 <main+0x2ea>
 8005674:	f897 34ed 	ldrb.w	r3, [r7, #1261]	; 0x4ed
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8082 	beq.w	8005782 <main+0x2ea>
		  HAL_Delay(100);
 800567e:	2064      	movs	r0, #100	; 0x64
 8005680:	f001 fbac 	bl	8006ddc <HAL_Delay>
		  if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 8005684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005688:	484b      	ldr	r0, [pc, #300]	; (80057b8 <main+0x320>)
 800568a:	f002 fcd7 	bl	800803c <HAL_GPIO_ReadPin>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f040 8083 	bne.w	800579c <main+0x304>
			  if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 0 ){
 8005696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800569a:	4847      	ldr	r0, [pc, #284]	; (80057b8 <main+0x320>)
 800569c:	f002 fcce 	bl	800803c <HAL_GPIO_ReadPin>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d116      	bne.n	80056d4 <main+0x23c>
				  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 80056a6:	2200      	movs	r2, #0
 80056a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056ac:	4842      	ldr	r0, [pc, #264]	; (80057b8 <main+0x320>)
 80056ae:	f002 fcdc 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 80056b2:	2200      	movs	r2, #0
 80056b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056b8:	483f      	ldr	r0, [pc, #252]	; (80057b8 <main+0x320>)
 80056ba:	f002 fcd6 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 80056be:	2200      	movs	r2, #0
 80056c0:	2110      	movs	r1, #16
 80056c2:	483d      	ldr	r0, [pc, #244]	; (80057b8 <main+0x320>)
 80056c4:	f002 fcd1 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 80056c8:	2200      	movs	r2, #0
 80056ca:	2120      	movs	r1, #32
 80056cc:	483a      	ldr	r0, [pc, #232]	; (80057b8 <main+0x320>)
 80056ce:	f002 fccc 	bl	800806a <HAL_GPIO_WritePin>
				  break;
 80056d2:	e079      	b.n	80057c8 <main+0x330>
			  }
			  col++;
 80056d4:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <main+0x32c>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	3301      	adds	r3, #1
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <main+0x32c>)
 80056de:	701a      	strb	r2, [r3, #0]
			  flag_sw2 = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 34ed 	strb.w	r3, [r7, #1261]	; 0x4ed
			  if(col %3 == 0){
 80056e6:	4b37      	ldr	r3, [pc, #220]	; (80057c4 <main+0x32c>)
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	4b35      	ldr	r3, [pc, #212]	; (80057c0 <main+0x328>)
 80056ec:	fba3 1302 	umull	r1, r3, r3, r2
 80056f0:	0859      	lsrs	r1, r3, #1
 80056f2:	460b      	mov	r3, r1
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	440b      	add	r3, r1
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10c      	bne.n	800571a <main+0x282>
				  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, SET);
 8005700:	2201      	movs	r2, #1
 8005702:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005706:	482c      	ldr	r0, [pc, #176]	; (80057b8 <main+0x320>)
 8005708:	f002 fcaf 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, SET);
 800570c:	2201      	movs	r2, #1
 800570e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005712:	4829      	ldr	r0, [pc, #164]	; (80057b8 <main+0x320>)
 8005714:	f002 fca9 	bl	800806a <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 8005718:	e040      	b.n	800579c <main+0x304>

			  }
			  else if(col %3 == 1 ){
 800571a:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <main+0x32c>)
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <main+0x328>)
 8005720:	fba3 1302 	umull	r1, r3, r3, r2
 8005724:	0859      	lsrs	r1, r3, #1
 8005726:	460b      	mov	r3, r1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	440b      	add	r3, r1
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10c      	bne.n	800574e <main+0x2b6>
				  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, SET);
 8005734:	2201      	movs	r2, #1
 8005736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800573a:	481f      	ldr	r0, [pc, #124]	; (80057b8 <main+0x320>)
 800573c:	f002 fc95 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005746:	481c      	ldr	r0, [pc, #112]	; (80057b8 <main+0x320>)
 8005748:	f002 fc8f 	bl	800806a <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 800574c:	e026      	b.n	800579c <main+0x304>
			  }
			  else if(col %3 == 2 ){
 800574e:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <main+0x32c>)
 8005750:	781a      	ldrb	r2, [r3, #0]
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <main+0x328>)
 8005754:	fba3 1302 	umull	r1, r3, r3, r2
 8005758:	0859      	lsrs	r1, r3, #1
 800575a:	460b      	mov	r3, r1
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	440b      	add	r3, r1
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d119      	bne.n	800579c <main+0x304>
				  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800576e:	4812      	ldr	r0, [pc, #72]	; (80057b8 <main+0x320>)
 8005770:	f002 fc7b 	bl	800806a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, SET);
 8005774:	2201      	movs	r2, #1
 8005776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800577a:	480f      	ldr	r0, [pc, #60]	; (80057b8 <main+0x320>)
 800577c:	f002 fc75 	bl	800806a <HAL_GPIO_WritePin>
		  if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 8005780:	e00c      	b.n	800579c <main+0x304>
			  }
		  }
	  }
	  else if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1){
 8005782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005786:	480c      	ldr	r0, [pc, #48]	; (80057b8 <main+0x320>)
 8005788:	f002 fc58 	bl	800803c <HAL_GPIO_ReadPin>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	f47f aecd 	bne.w	800552e <main+0x96>
		  flag_sw2 = 1;
 8005794:	2301      	movs	r3, #1
 8005796:	f887 34ed 	strb.w	r3, [r7, #1261]	; 0x4ed
 800579a:	e6c8      	b.n	800552e <main+0x96>
		  if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 0){
 800579c:	bf00      	nop
	  debug++;
 800579e:	e6c6      	b.n	800552e <main+0x96>
 80057a0:	20000360 	.word	0x20000360
 80057a4:	200003a8 	.word	0x200003a8
 80057a8:	20000318 	.word	0x20000318
 80057ac:	200003f0 	.word	0x200003f0
 80057b0:	40010800 	.word	0x40010800
 80057b4:	20004450 	.word	0x20004450
 80057b8:	40010c00 	.word	0x40010c00
 80057bc:	2000444c 	.word	0x2000444c
 80057c0:	aaaaaaab 	.word	0xaaaaaaab
 80057c4:	2000444d 	.word	0x2000444d
	  }
  }
  if(row != 0 || col != 0){
 80057c8:	4b9a      	ldr	r3, [pc, #616]	; (8005a34 <main+0x59c>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <main+0x340>
 80057d0:	4b99      	ldr	r3, [pc, #612]	; (8005a38 <main+0x5a0>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <main+0x354>
	  FEE_WriteData(0x0803F000, &col, sizeof(uint8_t));
 80057d8:	2201      	movs	r2, #1
 80057da:	4997      	ldr	r1, [pc, #604]	; (8005a38 <main+0x5a0>)
 80057dc:	4897      	ldr	r0, [pc, #604]	; (8005a3c <main+0x5a4>)
 80057de:	f7fc ff97 	bl	8002710 <FEE_WriteData>
	  FEE_WriteData(0x0803F004, &row, sizeof(uint8_t));
 80057e2:	2201      	movs	r2, #1
 80057e4:	4993      	ldr	r1, [pc, #588]	; (8005a34 <main+0x59c>)
 80057e6:	4896      	ldr	r0, [pc, #600]	; (8005a40 <main+0x5a8>)
 80057e8:	f7fc ff92 	bl	8002710 <FEE_WriteData>
  }

  FEE_ReadData(0x0803F000, &read_col, sizeof(uint8_t));
 80057ec:	2201      	movs	r2, #1
 80057ee:	4995      	ldr	r1, [pc, #596]	; (8005a44 <main+0x5ac>)
 80057f0:	4892      	ldr	r0, [pc, #584]	; (8005a3c <main+0x5a4>)
 80057f2:	f7fc ffce 	bl	8002792 <FEE_ReadData>
  FEE_ReadData(0x0803F004, &read_row, sizeof(uint8_t));
 80057f6:	2201      	movs	r2, #1
 80057f8:	4993      	ldr	r1, [pc, #588]	; (8005a48 <main+0x5b0>)
 80057fa:	4891      	ldr	r0, [pc, #580]	; (8005a40 <main+0x5a8>)
 80057fc:	f7fc ffc9 	bl	8002792 <FEE_ReadData>
  if(read_col > 16 || read_row > 16){
 8005800:	4b90      	ldr	r3, [pc, #576]	; (8005a44 <main+0x5ac>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b10      	cmp	r3, #16
 8005806:	d803      	bhi.n	8005810 <main+0x378>
 8005808:	4b8f      	ldr	r3, [pc, #572]	; (8005a48 <main+0x5b0>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b10      	cmp	r3, #16
 800580e:	d905      	bls.n	800581c <main+0x384>
	  read_row = 7;
 8005810:	4b8d      	ldr	r3, [pc, #564]	; (8005a48 <main+0x5b0>)
 8005812:	2207      	movs	r2, #7
 8005814:	701a      	strb	r2, [r3, #0]
	  read_col = 7;
 8005816:	4b8b      	ldr	r3, [pc, #556]	; (8005a44 <main+0x5ac>)
 8005818:	2207      	movs	r2, #7
 800581a:	701a      	strb	r2, [r3, #0]
  }
  HAL_Delay(1000);
 800581c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005820:	f001 fadc 	bl	8006ddc <HAL_Delay>
  for (uint8_t i = 0; i < read_row*2;i++){
 8005824:	2300      	movs	r3, #0
 8005826:	f887 34ec 	strb.w	r3, [r7, #1260]	; 0x4ec
 800582a:	e00c      	b.n	8005846 <main+0x3ae>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED1_Pin);
 800582c:	2110      	movs	r1, #16
 800582e:	4887      	ldr	r0, [pc, #540]	; (8005a4c <main+0x5b4>)
 8005830:	f002 fc33 	bl	800809a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8005834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005838:	f001 fad0 	bl	8006ddc <HAL_Delay>
  for (uint8_t i = 0; i < read_row*2;i++){
 800583c:	f897 34ec 	ldrb.w	r3, [r7, #1260]	; 0x4ec
 8005840:	3301      	adds	r3, #1
 8005842:	f887 34ec 	strb.w	r3, [r7, #1260]	; 0x4ec
 8005846:	f897 24ec 	ldrb.w	r2, [r7, #1260]	; 0x4ec
 800584a:	4b7f      	ldr	r3, [pc, #508]	; (8005a48 <main+0x5b0>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	429a      	cmp	r2, r3
 8005852:	dbeb      	blt.n	800582c <main+0x394>
  }
  for (uint8_t i = 0; i < read_col*2;i++){
 8005854:	2300      	movs	r3, #0
 8005856:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
 800585a:	e00d      	b.n	8005878 <main+0x3e0>
	  HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 800585c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005860:	487a      	ldr	r0, [pc, #488]	; (8005a4c <main+0x5b4>)
 8005862:	f002 fc1a 	bl	800809a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8005866:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800586a:	f001 fab7 	bl	8006ddc <HAL_Delay>
  for (uint8_t i = 0; i < read_col*2;i++){
 800586e:	f897 34eb 	ldrb.w	r3, [r7, #1259]	; 0x4eb
 8005872:	3301      	adds	r3, #1
 8005874:	f887 34eb 	strb.w	r3, [r7, #1259]	; 0x4eb
 8005878:	f897 24eb 	ldrb.w	r2, [r7, #1259]	; 0x4eb
 800587c:	4b71      	ldr	r3, [pc, #452]	; (8005a44 <main+0x5ac>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	429a      	cmp	r2, r3
 8005884:	dbea      	blt.n	800585c <main+0x3c4>
  }
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8005886:	2200      	movs	r2, #0
 8005888:	2110      	movs	r1, #16
 800588a:	4870      	ldr	r0, [pc, #448]	; (8005a4c <main+0x5b4>)
 800588c:	f002 fbed 	bl	800806a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8005890:	2200      	movs	r2, #0
 8005892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005896:	486d      	ldr	r0, [pc, #436]	; (8005a4c <main+0x5b4>)
 8005898:	f002 fbe7 	bl	800806a <HAL_GPIO_WritePin>
//    while(1){
//  	  distance_straight = distanceStraight();
//  	  distance_left = distanceLeft();
//  	  distance_right = distanceRight();
//    }
  bno = (bno055_t){
 800589c:	4b6c      	ldr	r3, [pc, #432]	; (8005a50 <main+0x5b8>)
 800589e:	4618      	mov	r0, r3
 80058a0:	23ac      	movs	r3, #172	; 0xac
 80058a2:	461a      	mov	r2, r3
 80058a4:	2100      	movs	r1, #0
 80058a6:	f006 ff25 	bl	800c6f4 <memset>
 80058aa:	4b69      	ldr	r3, [pc, #420]	; (8005a50 <main+0x5b8>)
 80058ac:	4a69      	ldr	r2, [pc, #420]	; (8005a54 <main+0x5bc>)
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	4b67      	ldr	r3, [pc, #412]	; (8005a50 <main+0x5b8>)
 80058b2:	2208      	movs	r2, #8
 80058b4:	711a      	strb	r2, [r3, #4]
 80058b6:	4b66      	ldr	r3, [pc, #408]	; (8005a50 <main+0x5b8>)
 80058b8:	2228      	movs	r2, #40	; 0x28
 80058ba:	719a      	strb	r2, [r3, #6]
        .i2c = &hi2c1, .addr = BNO_ADDR_ALT, .mode = BNO_MODE_IMU, ._temp_unit = 0,
        // .ptr = &bno,
    };
    HAL_Delay(1000);
 80058bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058c0:	f001 fa8c 	bl	8006ddc <HAL_Delay>

    if ((err = bno055_init(&bno)) == BNO_OK) {
 80058c4:	4862      	ldr	r0, [pc, #392]	; (8005a50 <main+0x5b8>)
 80058c6:	f7fc ffa5 	bl	8002814 <bno055_init>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	4b62      	ldr	r3, [pc, #392]	; (8005a58 <main+0x5c0>)
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	4b61      	ldr	r3, [pc, #388]	; (8005a58 <main+0x5c0>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <main+0x450>
        printf("BNO055 init success\r\n");
 80058da:	4860      	ldr	r0, [pc, #384]	; (8005a5c <main+0x5c4>)
 80058dc:	f006 fe0a 	bl	800c4f4 <puts>
        HAL_Delay(100);
 80058e0:	2064      	movs	r0, #100	; 0x64
 80058e2:	f001 fa7b 	bl	8006ddc <HAL_Delay>
 80058e6:	e00d      	b.n	8005904 <main+0x46c>
    } else {
        printf("BNO055 init failed\r\n");
 80058e8:	485d      	ldr	r0, [pc, #372]	; (8005a60 <main+0x5c8>)
 80058ea:	f006 fe03 	bl	800c4f4 <puts>
        printf("%s\n", bno055_err_str(err));
 80058ee:	4b5a      	ldr	r3, [pc, #360]	; (8005a58 <main+0x5c0>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe fc2a 	bl	800414c <bno055_err_str>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f006 fdfa 	bl	800c4f4 <puts>
        Error_Handler();
 8005900:	f000 fcc8 	bl	8006294 <Error_Handler>
    }
    HAL_Delay(100);
 8005904:	2064      	movs	r0, #100	; 0x64
 8005906:	f001 fa69 	bl	8006ddc <HAL_Delay>
    err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 800590a:	2300      	movs	r3, #0
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2300      	movs	r3, #0
 8005910:	2200      	movs	r2, #0
 8005912:	2100      	movs	r1, #0
 8005914:	484e      	ldr	r0, [pc, #312]	; (8005a50 <main+0x5b8>)
 8005916:	f7fe fa75 	bl	8003e04 <bno055_set_unit>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	4b4e      	ldr	r3, [pc, #312]	; (8005a58 <main+0x5c0>)
 8005920:	701a      	strb	r2, [r3, #0]
                          BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
    if (err != BNO_OK) {
 8005922:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <main+0x5c0>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d006      	beq.n	8005938 <main+0x4a0>
        printf("[BNO] Failed to set units. Err: %d\r\n", err);
 800592a:	4b4b      	ldr	r3, [pc, #300]	; (8005a58 <main+0x5c0>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	484c      	ldr	r0, [pc, #304]	; (8005a64 <main+0x5cc>)
 8005932:	f006 fd79 	bl	800c428 <iprintf>
 8005936:	e002      	b.n	800593e <main+0x4a6>
    } else {
        printf("[BNO] Unit selection success\r\n");
 8005938:	484b      	ldr	r0, [pc, #300]	; (8005a68 <main+0x5d0>)
 800593a:	f006 fddb 	bl	800c4f4 <puts>
    }
    bno055_euler(&bno, &euler);
 800593e:	494b      	ldr	r1, [pc, #300]	; (8005a6c <main+0x5d4>)
 8005940:	4843      	ldr	r0, [pc, #268]	; (8005a50 <main+0x5b8>)
 8005942:	f7fd ff45 	bl	80037d0 <bno055_euler>
    HAL_Delay(100);
 8005946:	2064      	movs	r0, #100	; 0x64
 8005948:	f001 fa48 	bl	8006ddc <HAL_Delay>
//    API_turnLeft();
//    API_moveForward();
//    while(1);
//

  for (uint8_t i = 0; i < 2; i++){
 800594c:	2300      	movs	r3, #0
 800594e:	f887 34ea 	strb.w	r3, [r7, #1258]	; 0x4ea
 8005952:	e00b      	b.n	800596c <main+0x4d4>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005954:	2110      	movs	r1, #16
 8005956:	4846      	ldr	r0, [pc, #280]	; (8005a70 <main+0x5d8>)
 8005958:	f002 fb9f 	bl	800809a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 800595c:	20c8      	movs	r0, #200	; 0xc8
 800595e:	f001 fa3d 	bl	8006ddc <HAL_Delay>
  for (uint8_t i = 0; i < 2; i++){
 8005962:	f897 34ea 	ldrb.w	r3, [r7, #1258]	; 0x4ea
 8005966:	3301      	adds	r3, #1
 8005968:	f887 34ea 	strb.w	r3, [r7, #1258]	; 0x4ea
 800596c:	f897 34ea 	ldrb.w	r3, [r7, #1258]	; 0x4ea
 8005970:	2b01      	cmp	r3, #1
 8005972:	d9ef      	bls.n	8005954 <main+0x4bc>
  }
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8005974:	2200      	movs	r2, #0
 8005976:	2110      	movs	r1, #16
 8005978:	483d      	ldr	r0, [pc, #244]	; (8005a70 <main+0x5d8>)
 800597a:	f002 fb76 	bl	800806a <HAL_GPIO_WritePin>
  initializeQueue(&myQueue);
 800597e:	483d      	ldr	r0, [pc, #244]	; (8005a74 <main+0x5dc>)
 8005980:	f000 fc8d 	bl	800629e <initializeQueue>
  int arr[ROW][COL];

  init_arr(arr,ROW,COL);
 8005984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005988:	2210      	movs	r2, #16
 800598a:	2110      	movs	r1, #16
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe fdcd 	bl	800452c <init_arr>
  init_flood(arr,read_row,read_col);
 8005992:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <main+0x5b0>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	4619      	mov	r1, r3
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <main+0x5ac>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fe28 	bl	80045f8 <init_flood>
  init_maze();
 80059a8:	f7fe febc 	bl	8004724 <init_maze>
  coord start={0,0,arr[0][0]};
 80059ac:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80059b0:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80059bc:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80059c8:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80059d2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80059d6:	609a      	str	r2, [r3, #8]
  coord dest={read_row,read_col,arr[read_row][read_col]};
 80059d8:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <main+0x5b0>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80059e2:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <main+0x5ac>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80059f2:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 80059f6:	605a      	str	r2, [r3, #4]
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <main+0x5b0>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <main+0x5ac>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005a08:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8005a0c:	0112      	lsls	r2, r2, #4
 8005a0e:	440a      	add	r2, r1
 8005a10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a14:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005a18:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8005a1c:	609a      	str	r2, [r3, #8]
  int angle_now=90;
 8005a1e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005a22:	f5a3 639a 	sub.w	r3, r3, #1232	; 0x4d0
 8005a26:	225a      	movs	r2, #90	; 0x5a
 8005a28:	601a      	str	r2, [r3, #0]
  coord new_coord;
  for(uint8_t i = 0; i < 2; i++){
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 34e9 	strb.w	r3, [r7, #1257]	; 0x4e9
 8005a30:	e076      	b.n	8005b20 <main+0x688>
 8005a32:	bf00      	nop
 8005a34:	2000444c 	.word	0x2000444c
 8005a38:	2000444d 	.word	0x2000444d
 8005a3c:	0803f000 	.word	0x0803f000
 8005a40:	0803f004 	.word	0x0803f004
 8005a44:	2000444f 	.word	0x2000444f
 8005a48:	2000444e 	.word	0x2000444e
 8005a4c:	40010c00 	.word	0x40010c00
 8005a50:	20004390 	.word	0x20004390
 8005a54:	200002c4 	.word	0x200002c4
 8005a58:	2000443c 	.word	0x2000443c
 8005a5c:	0800fec8 	.word	0x0800fec8
 8005a60:	0800fee0 	.word	0x0800fee0
 8005a64:	0800fef4 	.word	0x0800fef4
 8005a68:	0800ff1c 	.word	0x0800ff1c
 8005a6c:	20004440 	.word	0x20004440
 8005a70:	40010800 	.word	0x40010800
 8005a74:	200014a8 	.word	0x200014a8
	  new_coord = floodfill(start,dest,&arr,&angle_now);
 8005a78:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005a7c:	f2a3 45dc 	subw	r5, r3, #1244	; 0x4dc
 8005a80:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005a84:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8005a88:	f107 0220 	add.w	r2, r7, #32
 8005a8c:	9204      	str	r2, [sp, #16]
 8005a8e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005a92:	9203      	str	r2, [sp, #12]
 8005a94:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8005a98:	f2a2 42cc 	subw	r2, r2, #1228	; 0x4cc
 8005a9c:	466c      	mov	r4, sp
 8005a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7ff fa6e 	bl	8004f88 <floodfill>

	  init_flood_start(&arr,0,0,1);
 8005aac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f7ff fbc3 	bl	8005240 <init_flood_start>
	  new_coord=floodfill(new_coord,start,&arr,&angle_now);
 8005aba:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005abe:	f2a3 46dc 	subw	r6, r3, #1244	; 0x4dc
 8005ac2:	463d      	mov	r5, r7
 8005ac4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005ac8:	f2a3 43dc 	subw	r3, r3, #1244	; 0x4dc
 8005acc:	f107 0220 	add.w	r2, r7, #32
 8005ad0:	9204      	str	r2, [sp, #16]
 8005ad2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005ad6:	9203      	str	r2, [sp, #12]
 8005ad8:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8005adc:	f5a2 6298 	sub.w	r2, r2, #1216	; 0x4c0
 8005ae0:	466c      	mov	r4, sp
 8005ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aea:	4628      	mov	r0, r5
 8005aec:	f7ff fa4c 	bl	8004f88 <floodfill>
 8005af0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005af4:	f5a3 629e 	sub.w	r2, r3, #1264	; 0x4f0
 8005af8:	4633      	mov	r3, r6
 8005afa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005afc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  init_flood_start(&arr,read_row,read_col,2);
 8005b00:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <main+0x694>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4619      	mov	r1, r3
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <main+0x698>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005b10:	2302      	movs	r3, #2
 8005b12:	f7ff fb95 	bl	8005240 <init_flood_start>
  for(uint8_t i = 0; i < 2; i++){
 8005b16:	f897 34e9 	ldrb.w	r3, [r7, #1257]	; 0x4e9
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f887 34e9 	strb.w	r3, [r7, #1257]	; 0x4e9
 8005b20:	f897 34e9 	ldrb.w	r3, [r7, #1257]	; 0x4e9
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d9a7      	bls.n	8005a78 <main+0x5e0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005b28:	e7fe      	b.n	8005b28 <main+0x690>
 8005b2a:	bf00      	nop
 8005b2c:	2000444e 	.word	0x2000444e
 8005b30:	2000444f 	.word	0x2000444f

08005b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b096      	sub	sp, #88	; 0x58
 8005b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b3e:	2228      	movs	r2, #40	; 0x28
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f006 fdd6 	bl	800c6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b48:	f107 031c 	add.w	r3, r7, #28
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	60da      	str	r2, [r3, #12]
 8005b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b58:	1d3b      	adds	r3, r7, #4
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	609a      	str	r2, [r3, #8]
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	611a      	str	r2, [r3, #16]
 8005b66:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005b72:	2300      	movs	r3, #0
 8005b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b76:	2301      	movs	r3, #1
 8005b78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005b84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005b88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f003 fc60 	bl	8009454 <HAL_RCC_OscConfig>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8005b9a:	f000 fb7b 	bl	8006294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b9e:	230f      	movs	r3, #15
 8005ba0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005bb4:	f107 031c 	add.w	r3, r7, #28
 8005bb8:	2102      	movs	r1, #2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f003 fecc 	bl	8009958 <HAL_RCC_ClockConfig>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005bc6:	f000 fb65 	bl	8006294 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f004 f84d 	bl	8009c74 <HAL_RCCEx_PeriphCLKConfig>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005be0:	f000 fb58 	bl	8006294 <Error_Handler>
  }
}
 8005be4:	bf00      	nop
 8005be6:	3758      	adds	r7, #88	; 0x58
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005bfc:	4b18      	ldr	r3, [pc, #96]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <MX_ADC1_Init+0x78>)
 8005c00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c02:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005c0e:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c14:	4b12      	ldr	r3, [pc, #72]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005c1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c1c:	4b10      	ldr	r3, [pc, #64]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005c22:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005c28:	480d      	ldr	r0, [pc, #52]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c2a:	f001 f8fb 	bl	8006e24 <HAL_ADC_Init>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005c34:	f000 fb2e 	bl	8006294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005c40:	2307      	movs	r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	4619      	mov	r1, r3
 8005c48:	4805      	ldr	r0, [pc, #20]	; (8005c60 <MX_ADC1_Init+0x74>)
 8005c4a:	f001 fbc1 	bl	80073d0 <HAL_ADC_ConfigChannel>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005c54:	f000 fb1e 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000234 	.word	0x20000234
 8005c64:	40012400 	.word	0x40012400

08005c68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8005c78:	4b18      	ldr	r3, [pc, #96]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <MX_ADC2_Init+0x78>)
 8005c7c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c7e:	4b17      	ldr	r3, [pc, #92]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005c84:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005c92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005c96:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c98:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8005c9e:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005ca4:	480d      	ldr	r0, [pc, #52]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005ca6:	f001 f8bd 	bl	8006e24 <HAL_ADC_Init>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8005cb0:	f000 faf0 	bl	8006294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005cbc:	2307      	movs	r3, #7
 8005cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005cc0:	1d3b      	adds	r3, r7, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4805      	ldr	r0, [pc, #20]	; (8005cdc <MX_ADC2_Init+0x74>)
 8005cc6:	f001 fb83 	bl	80073d0 <HAL_ADC_ConfigChannel>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8005cd0:	f000 fae0 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000264 	.word	0x20000264
 8005ce0:	40012800 	.word	0x40012800

08005ce4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005cea:	1d3b      	adds	r3, r7, #4
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8005cf4:	4b18      	ldr	r3, [pc, #96]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005cf6:	4a19      	ldr	r2, [pc, #100]	; (8005d5c <MX_ADC3_Init+0x78>)
 8005cf8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005d00:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d0c:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005d0e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005d12:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 8005d1a:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005d20:	480d      	ldr	r0, [pc, #52]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005d22:	f001 f87f 	bl	8006e24 <HAL_ADC_Init>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8005d2c:	f000 fab2 	bl	8006294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005d30:	230b      	movs	r3, #11
 8005d32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d34:	2301      	movs	r3, #1
 8005d36:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8005d38:	2306      	movs	r3, #6
 8005d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005d3c:	1d3b      	adds	r3, r7, #4
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4805      	ldr	r0, [pc, #20]	; (8005d58 <MX_ADC3_Init+0x74>)
 8005d42:	f001 fb45 	bl	80073d0 <HAL_ADC_ConfigChannel>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 8005d4c:	f000 faa2 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000294 	.word	0x20000294
 8005d5c:	40013c00 	.word	0x40013c00

08005d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d64:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d66:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <MX_I2C1_Init+0x54>)
 8005d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d6c:	4a12      	ldr	r2, [pc, #72]	; (8005db8 <MX_I2C1_Init+0x58>)
 8005d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d9c:	4804      	ldr	r0, [pc, #16]	; (8005db0 <MX_I2C1_Init+0x50>)
 8005d9e:	f002 f995 	bl	80080cc <HAL_I2C_Init>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005da8:	f000 fa74 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005dac:	bf00      	nop
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	200002c4 	.word	0x200002c4
 8005db4:	40005400 	.word	0x40005400
 8005db8:	000186a0 	.word	0x000186a0

08005dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b096      	sub	sp, #88	; 0x58
 8005dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	609a      	str	r2, [r3, #8]
 8005dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	609a      	str	r2, [r3, #8]
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	611a      	str	r2, [r3, #16]
 8005dea:	615a      	str	r2, [r3, #20]
 8005dec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	2220      	movs	r2, #32
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f006 fc7d 	bl	800c6f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005dfa:	4b3d      	ldr	r3, [pc, #244]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005dfc:	4a3d      	ldr	r2, [pc, #244]	; (8005ef4 <MX_TIM1_Init+0x138>)
 8005dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8005e00:	4b3b      	ldr	r3, [pc, #236]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e02:	2211      	movs	r2, #17
 8005e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e06:	4b3a      	ldr	r3, [pc, #232]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8005e0c:	4b38      	ldr	r3, [pc, #224]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e14:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005e1a:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e20:	4b33      	ldr	r3, [pc, #204]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005e26:	4832      	ldr	r0, [pc, #200]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e28:	f004 f8b2 	bl	8009f90 <HAL_TIM_Base_Init>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005e32:	f000 fa2f 	bl	8006294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e40:	4619      	mov	r1, r3
 8005e42:	482b      	ldr	r0, [pc, #172]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e44:	f004 fd08 	bl	800a858 <HAL_TIM_ConfigClockSource>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005e4e:	f000 fa21 	bl	8006294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005e52:	4827      	ldr	r0, [pc, #156]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e54:	f004 f8eb 	bl	800a02e <HAL_TIM_PWM_Init>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005e5e:	f000 fa19 	bl	8006294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e62:	2300      	movs	r3, #0
 8005e64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005e6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e6e:	4619      	mov	r1, r3
 8005e70:	481f      	ldr	r0, [pc, #124]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005e72:	f005 f8c9 	bl	800b008 <HAL_TIMEx_MasterConfigSynchronization>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005e7c:	f000 fa0a 	bl	8006294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e80:	2360      	movs	r3, #96	; 0x60
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005e90:	2300      	movs	r3, #0
 8005e92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005e94:	2300      	movs	r3, #0
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e9c:	220c      	movs	r2, #12
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4813      	ldr	r0, [pc, #76]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005ea2:	f004 fc17 	bl	800a6d4 <HAL_TIM_PWM_ConfigChannel>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8005eac:	f000 f9f2 	bl	8006294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ec8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005ece:	1d3b      	adds	r3, r7, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4807      	ldr	r0, [pc, #28]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005ed4:	f005 f904 	bl	800b0e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8005ede:	f000 f9d9 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005ee2:	4803      	ldr	r0, [pc, #12]	; (8005ef0 <MX_TIM1_Init+0x134>)
 8005ee4:	f000 fd6a 	bl	80069bc <HAL_TIM_MspPostInit>

}
 8005ee8:	bf00      	nop
 8005eea:	3758      	adds	r7, #88	; 0x58
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000318 	.word	0x20000318
 8005ef4:	40012c00 	.word	0x40012c00

08005ef8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08c      	sub	sp, #48	; 0x30
 8005efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005efe:	f107 030c 	add.w	r3, r7, #12
 8005f02:	2224      	movs	r2, #36	; 0x24
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f006 fbf4 	bl	800c6f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005f14:	4b21      	ldr	r3, [pc, #132]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f22:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005f28:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f30:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005f40:	2302      	movs	r3, #2
 8005f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005f44:	2301      	movs	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005f50:	2302      	movs	r3, #2
 8005f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005f54:	2301      	movs	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005f60:	f107 030c 	add.w	r3, r7, #12
 8005f64:	4619      	mov	r1, r3
 8005f66:	480d      	ldr	r0, [pc, #52]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f68:	f004 f974 	bl	800a254 <HAL_TIM_Encoder_Init>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005f72:	f000 f98f 	bl	8006294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f76:	2300      	movs	r3, #0
 8005f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4806      	ldr	r0, [pc, #24]	; (8005f9c <MX_TIM2_Init+0xa4>)
 8005f84:	f005 f840 	bl	800b008 <HAL_TIMEx_MasterConfigSynchronization>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005f8e:	f000 f981 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005f92:	bf00      	nop
 8005f94:	3730      	adds	r7, #48	; 0x30
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000360 	.word	0x20000360

08005fa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	; 0x30
 8005fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005fa6:	f107 030c 	add.w	r3, r7, #12
 8005faa:	2224      	movs	r2, #36	; 0x24
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f006 fba0 	bl	800c6f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005fbc:	4b20      	ldr	r3, [pc, #128]	; (8006040 <MX_TIM3_Init+0xa0>)
 8005fbe:	4a21      	ldr	r2, [pc, #132]	; (8006044 <MX_TIM3_Init+0xa4>)
 8005fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005fc2:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <MX_TIM3_Init+0xa0>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <MX_TIM3_Init+0xa0>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005fce:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <MX_TIM3_Init+0xa0>)
 8005fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <MX_TIM3_Init+0xa0>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fdc:	4b18      	ldr	r3, [pc, #96]	; (8006040 <MX_TIM3_Init+0xa0>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005fea:	2301      	movs	r3, #1
 8005fec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006006:	f107 030c 	add.w	r3, r7, #12
 800600a:	4619      	mov	r1, r3
 800600c:	480c      	ldr	r0, [pc, #48]	; (8006040 <MX_TIM3_Init+0xa0>)
 800600e:	f004 f921 	bl	800a254 <HAL_TIM_Encoder_Init>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8006018:	f000 f93c 	bl	8006294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800601c:	2300      	movs	r3, #0
 800601e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006020:	2300      	movs	r3, #0
 8006022:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006024:	1d3b      	adds	r3, r7, #4
 8006026:	4619      	mov	r1, r3
 8006028:	4805      	ldr	r0, [pc, #20]	; (8006040 <MX_TIM3_Init+0xa0>)
 800602a:	f004 ffed 	bl	800b008 <HAL_TIMEx_MasterConfigSynchronization>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8006034:	f000 f92e 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006038:	bf00      	nop
 800603a:	3730      	adds	r7, #48	; 0x30
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	200003a8 	.word	0x200003a8
 8006044:	40000400 	.word	0x40000400

08006048 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	; 0x38
 800604c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800604e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	609a      	str	r2, [r3, #8]
 800605a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800605c:	f107 0320 	add.w	r3, r7, #32
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
 8006074:	615a      	str	r2, [r3, #20]
 8006076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006078:	4b2c      	ldr	r3, [pc, #176]	; (800612c <MX_TIM4_Init+0xe4>)
 800607a:	4a2d      	ldr	r2, [pc, #180]	; (8006130 <MX_TIM4_Init+0xe8>)
 800607c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 800607e:	4b2b      	ldr	r3, [pc, #172]	; (800612c <MX_TIM4_Init+0xe4>)
 8006080:	2211      	movs	r2, #17
 8006082:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006084:	4b29      	ldr	r3, [pc, #164]	; (800612c <MX_TIM4_Init+0xe4>)
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800608a:	4b28      	ldr	r3, [pc, #160]	; (800612c <MX_TIM4_Init+0xe4>)
 800608c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006090:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <MX_TIM4_Init+0xe4>)
 8006094:	2200      	movs	r2, #0
 8006096:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <MX_TIM4_Init+0xe4>)
 800609a:	2200      	movs	r2, #0
 800609c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800609e:	4823      	ldr	r0, [pc, #140]	; (800612c <MX_TIM4_Init+0xe4>)
 80060a0:	f003 ff76 	bl	8009f90 <HAL_TIM_Base_Init>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80060aa:	f000 f8f3 	bl	8006294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80060b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060b8:	4619      	mov	r1, r3
 80060ba:	481c      	ldr	r0, [pc, #112]	; (800612c <MX_TIM4_Init+0xe4>)
 80060bc:	f004 fbcc 	bl	800a858 <HAL_TIM_ConfigClockSource>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80060c6:	f000 f8e5 	bl	8006294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80060ca:	4818      	ldr	r0, [pc, #96]	; (800612c <MX_TIM4_Init+0xe4>)
 80060cc:	f003 ffaf 	bl	800a02e <HAL_TIM_PWM_Init>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80060d6:	f000 f8dd 	bl	8006294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060da:	2300      	movs	r3, #0
 80060dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060de:	2300      	movs	r3, #0
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80060e2:	f107 0320 	add.w	r3, r7, #32
 80060e6:	4619      	mov	r1, r3
 80060e8:	4810      	ldr	r0, [pc, #64]	; (800612c <MX_TIM4_Init+0xe4>)
 80060ea:	f004 ff8d 	bl	800b008 <HAL_TIMEx_MasterConfigSynchronization>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80060f4:	f000 f8ce 	bl	8006294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060f8:	2360      	movs	r3, #96	; 0x60
 80060fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006108:	1d3b      	adds	r3, r7, #4
 800610a:	220c      	movs	r2, #12
 800610c:	4619      	mov	r1, r3
 800610e:	4807      	ldr	r0, [pc, #28]	; (800612c <MX_TIM4_Init+0xe4>)
 8006110:	f004 fae0 	bl	800a6d4 <HAL_TIM_PWM_ConfigChannel>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800611a:	f000 f8bb 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800611e:	4803      	ldr	r0, [pc, #12]	; (800612c <MX_TIM4_Init+0xe4>)
 8006120:	f000 fc4c 	bl	80069bc <HAL_TIM_MspPostInit>

}
 8006124:	bf00      	nop
 8006126:	3738      	adds	r7, #56	; 0x38
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	200003f0 	.word	0x200003f0
 8006130:	40000800 	.word	0x40000800

08006134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800613a:	4a12      	ldr	r2, [pc, #72]	; (8006184 <MX_USART1_UART_Init+0x50>)
 800613c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006146:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006148:	2200      	movs	r2, #0
 800614a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800614e:	2200      	movs	r2, #0
 8006150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006154:	2200      	movs	r2, #0
 8006156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006158:	4b09      	ldr	r3, [pc, #36]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800615a:	220c      	movs	r2, #12
 800615c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006160:	2200      	movs	r2, #0
 8006162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006166:	2200      	movs	r2, #0
 8006168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800616a:	4805      	ldr	r0, [pc, #20]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800616c:	f005 f81b 	bl	800b1a6 <HAL_UART_Init>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006176:	f000 f88d 	bl	8006294 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000438 	.word	0x20000438
 8006184:	40013800 	.word	0x40013800

08006188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800618e:	f107 0310 	add.w	r3, r7, #16
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	609a      	str	r2, [r3, #8]
 800619a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800619c:	4b3a      	ldr	r3, [pc, #232]	; (8006288 <MX_GPIO_Init+0x100>)
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	4a39      	ldr	r2, [pc, #228]	; (8006288 <MX_GPIO_Init+0x100>)
 80061a2:	f043 0320 	orr.w	r3, r3, #32
 80061a6:	6193      	str	r3, [r2, #24]
 80061a8:	4b37      	ldr	r3, [pc, #220]	; (8006288 <MX_GPIO_Init+0x100>)
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061b4:	4b34      	ldr	r3, [pc, #208]	; (8006288 <MX_GPIO_Init+0x100>)
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4a33      	ldr	r2, [pc, #204]	; (8006288 <MX_GPIO_Init+0x100>)
 80061ba:	f043 0310 	orr.w	r3, r3, #16
 80061be:	6193      	str	r3, [r2, #24]
 80061c0:	4b31      	ldr	r3, [pc, #196]	; (8006288 <MX_GPIO_Init+0x100>)
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061cc:	4b2e      	ldr	r3, [pc, #184]	; (8006288 <MX_GPIO_Init+0x100>)
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	4a2d      	ldr	r2, [pc, #180]	; (8006288 <MX_GPIO_Init+0x100>)
 80061d2:	f043 0304 	orr.w	r3, r3, #4
 80061d6:	6193      	str	r3, [r2, #24]
 80061d8:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <MX_GPIO_Init+0x100>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e4:	4b28      	ldr	r3, [pc, #160]	; (8006288 <MX_GPIO_Init+0x100>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	4a27      	ldr	r2, [pc, #156]	; (8006288 <MX_GPIO_Init+0x100>)
 80061ea:	f043 0308 	orr.w	r3, r3, #8
 80061ee:	6193      	str	r3, [r2, #24]
 80061f0:	4b25      	ldr	r3, [pc, #148]	; (8006288 <MX_GPIO_Init+0x100>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 80061fc:	2200      	movs	r2, #0
 80061fe:	2138      	movs	r1, #56	; 0x38
 8006200:	4822      	ldr	r0, [pc, #136]	; (800628c <MX_GPIO_Init+0x104>)
 8006202:	f001 ff32 	bl	800806a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 8006206:	2200      	movs	r2, #0
 8006208:	f64c 4133 	movw	r1, #52275	; 0xcc33
 800620c:	4820      	ldr	r0, [pc, #128]	; (8006290 <MX_GPIO_Init+0x108>)
 800620e:	f001 ff2c 	bl	800806a <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_Pin LED1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|STBY_Pin;
 8006212:	2338      	movs	r3, #56	; 0x38
 8006214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006216:	2301      	movs	r3, #1
 8006218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800621e:	2302      	movs	r3, #2
 8006220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006222:	f107 0310 	add.w	r3, r7, #16
 8006226:	4619      	mov	r1, r3
 8006228:	4818      	ldr	r0, [pc, #96]	; (800628c <MX_GPIO_Init+0x104>)
 800622a:	f001 fd73 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI2_Pin AI1_Pin BI1_Pin BI2_Pin
                           LED5_Pin LED6_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 800622e:	f64c 4333 	movw	r3, #52275	; 0xcc33
 8006232:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006234:	2301      	movs	r3, #1
 8006236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006238:	2300      	movs	r3, #0
 800623a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800623c:	2302      	movs	r3, #2
 800623e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006240:	f107 0310 	add.w	r3, r7, #16
 8006244:	4619      	mov	r1, r3
 8006246:	4812      	ldr	r0, [pc, #72]	; (8006290 <MX_GPIO_Init+0x108>)
 8006248:	f001 fd64 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800624c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006256:	2301      	movs	r3, #1
 8006258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	4619      	mov	r1, r3
 8006260:	480b      	ldr	r0, [pc, #44]	; (8006290 <MX_GPIO_Init+0x108>)
 8006262:	f001 fd57 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Right_Pin Sensor_Left_Pin */
  GPIO_InitStruct.Pin = Sensor_Right_Pin|Sensor_Left_Pin;
 8006266:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800626a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006270:	2301      	movs	r3, #1
 8006272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006274:	f107 0310 	add.w	r3, r7, #16
 8006278:	4619      	mov	r1, r3
 800627a:	4804      	ldr	r0, [pc, #16]	; (800628c <MX_GPIO_Init+0x104>)
 800627c:	f001 fd4a 	bl	8007d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006280:	bf00      	nop
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40021000 	.word	0x40021000
 800628c:	40010800 	.word	0x40010800
 8006290:	40010c00 	.word	0x40010c00

08006294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006298:	b672      	cpsid	i
}
 800629a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800629c:	e7fe      	b.n	800629c <Error_Handler+0x8>

0800629e <initializeQueue>:
#include "queue.h"


void initializeQueue(Queue* q)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
    q->front = -1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80062ac:	461a      	mov	r2, r3
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
    q->rear = 0;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr

080062ce <isEmptyQueue>:

bool isEmptyQueue(Queue* q) { 
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
    return (q->front == q->rear - 1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80062dc:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80062e6:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 80062ea:	3b01      	subs	r3, #1
 80062ec:	429a      	cmp	r2, r3
 80062ee:	bf0c      	ite	eq
 80062f0:	2301      	moveq	r3, #1
 80062f2:	2300      	movne	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr

08006300 <isFullQueue>:

bool isFullQueue(Queue* q) { 
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
    return (q->rear == MAX_SIZE); 
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800630e:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 8006312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006316:	bf0c      	ite	eq
 8006318:	2301      	moveq	r3, #1
 800631a:	2300      	movne	r3, #0
 800631c:	b2db      	uxtb	r3, r3
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <pushQueue>:

void pushQueue(Queue* q, coord value)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	4638      	mov	r0, r7
 8006332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (isFullQueue(q)) {
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff ffe2 	bl	8006300 <isFullQueue>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d11c      	bne.n	800637c <pushQueue+0x54>
        return;
    }
    q->items[q->rear] = value;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006348:	f8d3 2ee4 	ldr.w	r2, [r3, #3812]	; 0xee4
 800634c:	68f9      	ldr	r1, [r7, #12]
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	461c      	mov	r4, r3
 800635a:	463b      	mov	r3, r7
 800635c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    q->rear++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800636a:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 800636e:	3301      	adds	r3, #1
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8006376:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
 800637a:	e000      	b.n	800637e <pushQueue+0x56>
        return;
 800637c:	bf00      	nop
}
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	bd90      	pop	{r4, r7, pc}

08006384 <popQueue>:

void popQueue(Queue* q)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    if (isEmptyQueue(q)) {
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff ff9e 	bl	80062ce <isEmptyQueue>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <popQueue+0x2c>
        return;
    }
    q->front++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800639e:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80063a2:	3301      	adds	r3, #1
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80063aa:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
 80063ae:	e000      	b.n	80063b2 <popQueue+0x2e>
        return;
 80063b0:	bf00      	nop
}
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <peekQueue>:

coord peekQueue(Queue* q)
{
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
    if (isEmptyQueue(q)) {
 80063c2:	6838      	ldr	r0, [r7, #0]
 80063c4:	f7ff ff83 	bl	80062ce <isEmptyQueue>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <peekQueue+0x34>
        coord empty = {-1, -1, -1};
 80063ce:	4a12      	ldr	r2, [pc, #72]	; (8006418 <peekQueue+0x60>)
 80063d0:	f107 030c 	add.w	r3, r7, #12
 80063d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80063d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return empty;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	461c      	mov	r4, r3
 80063de:	f107 030c 	add.w	r3, r7, #12
 80063e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return q->items[q->front + 1];
}
 80063ea:	e010      	b.n	800640e <peekQueue+0x56>
    return q->items[q->front + 1];
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063f2:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	18ca      	adds	r2, r1, r3
 8006406:	4603      	mov	r3, r0
 8006408:	ca07      	ldmia	r2, {r0, r1, r2}
 800640a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	bd90      	pop	{r4, r7, pc}
 8006416:	bf00      	nop
 8006418:	0800ff3c 	.word	0x0800ff3c

0800641c <sizeQueue>:


int sizeQueue(Queue* q){
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
    return q->rear - q->front - 1;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800642a:	f8d3 2ee4 	ldr.w	r2, [r3, #3812]	; 0xee4
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006434:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	3b01      	subs	r3, #1
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr

08006446 <initializeStack>:
#include "stack.h"

void initializeStack(Stack *stack) {
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
    stack->top = -1;  
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006454:	461a      	mov	r2, r3
 8006456:	f04f 33ff 	mov.w	r3, #4294967295
 800645a:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr

08006468 <isEmptyStack>:

bool isEmptyStack(Stack *stack) {
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
    return stack->top == -1;  
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006476:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
}
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <isFullStack>:

bool isFullStack(Stack *stack) {
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
    return stack->top == MAX_SIZE - 1;  
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800649e:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80064a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <pushStack>:

void pushStack(Stack *stack, coord value) {
 80064ba:	b590      	push	{r4, r7, lr}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	4638      	mov	r0, r7
 80064c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (isFullStack(stack)) {
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff ffe1 	bl	8006490 <isFullStack>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11c      	bne.n	800650e <pushStack+0x54>
        return;
    }
    stack->arr[++stack->top] = value;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064da:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80064de:	3301      	adds	r3, #1
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80064e6:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064f0:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 80064f4:	68f9      	ldr	r1, [r7, #12]
 80064f6:	4613      	mov	r3, r2
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	461c      	mov	r4, r3
 8006502:	463b      	mov	r3, r7
 8006504:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800650c:	e000      	b.n	8006510 <pushStack+0x56>
        return;
 800650e:	bf00      	nop
}
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	bd90      	pop	{r4, r7, pc}
	...

08006518 <popStack>:

coord popStack(Stack *stack) {
 8006518:	b590      	push	{r4, r7, lr}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
    if (isEmptyStack(stack)) {
 8006522:	6838      	ldr	r0, [r7, #0]
 8006524:	f7ff ffa0 	bl	8006468 <isEmptyStack>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00e      	beq.n	800654c <popStack+0x34>
        coord error = {-1, -1, -1}; // or any other error indication
 800652e:	4a14      	ldr	r2, [pc, #80]	; (8006580 <popStack+0x68>)
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	ca07      	ldmia	r2, {r0, r1, r2}
 8006536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return error;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	461c      	mov	r4, r3
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return stack->arr[stack->top--];
}
 800654a:	e015      	b.n	8006578 <popStack+0x60>
    return stack->arr[stack->top--];
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006552:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 8006556:	1e53      	subs	r3, r2, #1
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800655e:	f8c1 3ee0 	str.w	r3, [r1, #3808]	; 0xee0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	18ca      	adds	r2, r1, r3
 8006570:	4603      	mov	r3, r0
 8006572:	ca07      	ldmia	r2, {r0, r1, r2}
 8006574:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	bd90      	pop	{r4, r7, pc}
 8006580:	0800ff48 	.word	0x0800ff48

08006584 <peekStack>:

coord peekStack(Stack *stack) {
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
    if (isEmptyStack(stack)) {
 800658e:	6838      	ldr	r0, [r7, #0]
 8006590:	f7ff ff6a 	bl	8006468 <isEmptyStack>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <peekStack+0x34>
        coord error = {-1, -1, -1}; // or any other error indication
 800659a:	4a11      	ldr	r2, [pc, #68]	; (80065e0 <peekStack+0x5c>)
 800659c:	f107 030c 	add.w	r3, r7, #12
 80065a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80065a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return error;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	461c      	mov	r4, r3
 80065aa:	f107 030c 	add.w	r3, r7, #12
 80065ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return stack->arr[stack->top];
}
 80065b6:	e00f      	b.n	80065d8 <peekStack+0x54>
    return stack->arr[stack->top];
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065be:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	18ca      	adds	r2, r1, r3
 80065d0:	4603      	mov	r3, r0
 80065d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80065d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd90      	pop	{r4, r7, pc}
 80065e0:	0800ff48 	.word	0x0800ff48

080065e4 <sizeStack>:
int sizeStack(Stack *stack){
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
    return stack->top + 1;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065f2:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80065f6:	3301      	adds	r3, #1
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr
	...

08006604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800660a:	4b15      	ldr	r3, [pc, #84]	; (8006660 <HAL_MspInit+0x5c>)
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	4a14      	ldr	r2, [pc, #80]	; (8006660 <HAL_MspInit+0x5c>)
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	6193      	str	r3, [r2, #24]
 8006616:	4b12      	ldr	r3, [pc, #72]	; (8006660 <HAL_MspInit+0x5c>)
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006622:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <HAL_MspInit+0x5c>)
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <HAL_MspInit+0x5c>)
 8006628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662c:	61d3      	str	r3, [r2, #28]
 800662e:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <HAL_MspInit+0x5c>)
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800663a:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <HAL_MspInit+0x60>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	4a04      	ldr	r2, [pc, #16]	; (8006664 <HAL_MspInit+0x60>)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr
 8006660:	40021000 	.word	0x40021000
 8006664:	40010000 	.word	0x40010000

08006668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	; 0x30
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006670:	f107 0320 	add.w	r3, r7, #32
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a3c      	ldr	r2, [pc, #240]	; (8006774 <HAL_ADC_MspInit+0x10c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d122      	bne.n	80066ce <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006688:	4b3b      	ldr	r3, [pc, #236]	; (8006778 <HAL_ADC_MspInit+0x110>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	4a3a      	ldr	r2, [pc, #232]	; (8006778 <HAL_ADC_MspInit+0x110>)
 800668e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006692:	6193      	str	r3, [r2, #24]
 8006694:	4b38      	ldr	r3, [pc, #224]	; (8006778 <HAL_ADC_MspInit+0x110>)
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066a0:	4b35      	ldr	r3, [pc, #212]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	4a34      	ldr	r2, [pc, #208]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	6193      	str	r3, [r2, #24]
 80066ac:	4b32      	ldr	r3, [pc, #200]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80066b8:	2301      	movs	r3, #1
 80066ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066bc:	2303      	movs	r3, #3
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c0:	f107 0320 	add.w	r3, r7, #32
 80066c4:	4619      	mov	r1, r3
 80066c6:	482d      	ldr	r0, [pc, #180]	; (800677c <HAL_ADC_MspInit+0x114>)
 80066c8:	f001 fb24 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80066cc:	e04e      	b.n	800676c <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <HAL_ADC_MspInit+0x118>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d122      	bne.n	800671e <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80066d8:	4b27      	ldr	r3, [pc, #156]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	4a26      	ldr	r2, [pc, #152]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066e2:	6193      	str	r3, [r2, #24]
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	4a20      	ldr	r2, [pc, #128]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066f6:	f043 0304 	orr.w	r3, r3, #4
 80066fa:	6193      	str	r3, [r2, #24]
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_ADC_MspInit+0x110>)
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006708:	2302      	movs	r3, #2
 800670a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800670c:	2303      	movs	r3, #3
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006710:	f107 0320 	add.w	r3, r7, #32
 8006714:	4619      	mov	r1, r3
 8006716:	4819      	ldr	r0, [pc, #100]	; (800677c <HAL_ADC_MspInit+0x114>)
 8006718:	f001 fafc 	bl	8007d14 <HAL_GPIO_Init>
}
 800671c:	e026      	b.n	800676c <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a18      	ldr	r2, [pc, #96]	; (8006784 <HAL_ADC_MspInit+0x11c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d121      	bne.n	800676c <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006728:	4b13      	ldr	r3, [pc, #76]	; (8006778 <HAL_ADC_MspInit+0x110>)
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	4a12      	ldr	r2, [pc, #72]	; (8006778 <HAL_ADC_MspInit+0x110>)
 800672e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006732:	6193      	str	r3, [r2, #24]
 8006734:	4b10      	ldr	r3, [pc, #64]	; (8006778 <HAL_ADC_MspInit+0x110>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <HAL_ADC_MspInit+0x110>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	4a0c      	ldr	r2, [pc, #48]	; (8006778 <HAL_ADC_MspInit+0x110>)
 8006746:	f043 0310 	orr.w	r3, r3, #16
 800674a:	6193      	str	r3, [r2, #24]
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <HAL_ADC_MspInit+0x110>)
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006758:	2302      	movs	r3, #2
 800675a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800675c:	2303      	movs	r3, #3
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006760:	f107 0320 	add.w	r3, r7, #32
 8006764:	4619      	mov	r1, r3
 8006766:	4808      	ldr	r0, [pc, #32]	; (8006788 <HAL_ADC_MspInit+0x120>)
 8006768:	f001 fad4 	bl	8007d14 <HAL_GPIO_Init>
}
 800676c:	bf00      	nop
 800676e:	3730      	adds	r7, #48	; 0x30
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40012400 	.word	0x40012400
 8006778:	40021000 	.word	0x40021000
 800677c:	40010800 	.word	0x40010800
 8006780:	40012800 	.word	0x40012800
 8006784:	40013c00 	.word	0x40013c00
 8006788:	40011000 	.word	0x40011000

0800678c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006794:	f107 0310 	add.w	r3, r7, #16
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a15      	ldr	r2, [pc, #84]	; (80067fc <HAL_I2C_MspInit+0x70>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d123      	bne.n	80067f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ac:	4b14      	ldr	r3, [pc, #80]	; (8006800 <HAL_I2C_MspInit+0x74>)
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	4a13      	ldr	r2, [pc, #76]	; (8006800 <HAL_I2C_MspInit+0x74>)
 80067b2:	f043 0308 	orr.w	r3, r3, #8
 80067b6:	6193      	str	r3, [r2, #24]
 80067b8:	4b11      	ldr	r3, [pc, #68]	; (8006800 <HAL_I2C_MspInit+0x74>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067c4:	23c0      	movs	r3, #192	; 0xc0
 80067c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067c8:	2312      	movs	r3, #18
 80067ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067cc:	2303      	movs	r3, #3
 80067ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067d0:	f107 0310 	add.w	r3, r7, #16
 80067d4:	4619      	mov	r1, r3
 80067d6:	480b      	ldr	r0, [pc, #44]	; (8006804 <HAL_I2C_MspInit+0x78>)
 80067d8:	f001 fa9c 	bl	8007d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80067dc:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_I2C_MspInit+0x74>)
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	4a07      	ldr	r2, [pc, #28]	; (8006800 <HAL_I2C_MspInit+0x74>)
 80067e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067e6:	61d3      	str	r3, [r2, #28]
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_I2C_MspInit+0x74>)
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80067f4:	bf00      	nop
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40005400 	.word	0x40005400
 8006800:	40021000 	.word	0x40021000
 8006804:	40010c00 	.word	0x40010c00

08006808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a12      	ldr	r2, [pc, #72]	; (8006860 <HAL_TIM_Base_MspInit+0x58>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10c      	bne.n	8006834 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <HAL_TIM_Base_MspInit+0x5c>)
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	4a11      	ldr	r2, [pc, #68]	; (8006864 <HAL_TIM_Base_MspInit+0x5c>)
 8006820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006824:	6193      	str	r3, [r2, #24]
 8006826:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <HAL_TIM_Base_MspInit+0x5c>)
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006832:	e010      	b.n	8006856 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a0b      	ldr	r2, [pc, #44]	; (8006868 <HAL_TIM_Base_MspInit+0x60>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d10b      	bne.n	8006856 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_TIM_Base_MspInit+0x5c>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	4a08      	ldr	r2, [pc, #32]	; (8006864 <HAL_TIM_Base_MspInit+0x5c>)
 8006844:	f043 0304 	orr.w	r3, r3, #4
 8006848:	61d3      	str	r3, [r2, #28]
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_TIM_Base_MspInit+0x5c>)
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	60bb      	str	r3, [r7, #8]
 8006854:	68bb      	ldr	r3, [r7, #8]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr
 8006860:	40012c00 	.word	0x40012c00
 8006864:	40021000 	.word	0x40021000
 8006868:	40000800 	.word	0x40000800

0800686c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08c      	sub	sp, #48	; 0x30
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006874:	f107 031c 	add.w	r3, r7, #28
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d157      	bne.n	800693c <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800688c:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4a45      	ldr	r2, [pc, #276]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	61d3      	str	r3, [r2, #28]
 8006898:	4b43      	ldr	r3, [pc, #268]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068a4:	4b40      	ldr	r3, [pc, #256]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80068aa:	f043 0304 	orr.w	r3, r3, #4
 80068ae:	6193      	str	r3, [r2, #24]
 80068b0:	4b3d      	ldr	r3, [pc, #244]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068bc:	4b3a      	ldr	r3, [pc, #232]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	4a39      	ldr	r2, [pc, #228]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80068c2:	f043 0308 	orr.w	r3, r3, #8
 80068c6:	6193      	str	r3, [r2, #24]
 80068c8:	4b37      	ldr	r3, [pc, #220]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80068d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068da:	2300      	movs	r3, #0
 80068dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e2:	f107 031c 	add.w	r3, r7, #28
 80068e6:	4619      	mov	r1, r3
 80068e8:	4830      	ldr	r0, [pc, #192]	; (80069ac <HAL_TIM_Encoder_MspInit+0x140>)
 80068ea:	f001 fa13 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80068ee:	2308      	movs	r3, #8
 80068f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068f2:	2300      	movs	r3, #0
 80068f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068fa:	f107 031c 	add.w	r3, r7, #28
 80068fe:	4619      	mov	r1, r3
 8006900:	482b      	ldr	r0, [pc, #172]	; (80069b0 <HAL_TIM_Encoder_MspInit+0x144>)
 8006902:	f001 fa07 	bl	8007d14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8006906:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <HAL_TIM_Encoder_MspInit+0x148>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006924:	4a23      	ldr	r2, [pc, #140]	; (80069b4 <HAL_TIM_Encoder_MspInit+0x148>)
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800692a:	2200      	movs	r2, #0
 800692c:	2100      	movs	r1, #0
 800692e:	201c      	movs	r0, #28
 8006930:	f000 ffb9 	bl	80078a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006934:	201c      	movs	r0, #28
 8006936:	f000 ffd2 	bl	80078de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800693a:	e030      	b.n	800699e <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_TIM_Encoder_MspInit+0x14c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d12b      	bne.n	800699e <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006946:	4b18      	ldr	r3, [pc, #96]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4a17      	ldr	r2, [pc, #92]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800694c:	f043 0302 	orr.w	r3, r3, #2
 8006950:	61d3      	str	r3, [r2, #28]
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	4a11      	ldr	r2, [pc, #68]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8006964:	f043 0304 	orr.w	r3, r3, #4
 8006968:	6193      	str	r3, [r2, #24]
 800696a:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006976:	23c0      	movs	r3, #192	; 0xc0
 8006978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800697a:	2300      	movs	r3, #0
 800697c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697e:	2300      	movs	r3, #0
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006982:	f107 031c 	add.w	r3, r7, #28
 8006986:	4619      	mov	r1, r3
 8006988:	4808      	ldr	r0, [pc, #32]	; (80069ac <HAL_TIM_Encoder_MspInit+0x140>)
 800698a:	f001 f9c3 	bl	8007d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800698e:	2200      	movs	r2, #0
 8006990:	2100      	movs	r1, #0
 8006992:	201d      	movs	r0, #29
 8006994:	f000 ff87 	bl	80078a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006998:	201d      	movs	r0, #29
 800699a:	f000 ffa0 	bl	80078de <HAL_NVIC_EnableIRQ>
}
 800699e:	bf00      	nop
 80069a0:	3730      	adds	r7, #48	; 0x30
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40010800 	.word	0x40010800
 80069b0:	40010c00 	.word	0x40010c00
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400

080069bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069c4:	f107 0310 	add.w	r3, r7, #16
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	605a      	str	r2, [r3, #4]
 80069ce:	609a      	str	r2, [r3, #8]
 80069d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1f      	ldr	r2, [pc, #124]	; (8006a54 <HAL_TIM_MspPostInit+0x98>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d119      	bne.n	8006a10 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_TIM_MspPostInit+0x9c>)
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <HAL_TIM_MspPostInit+0x9c>)
 80069e2:	f043 0304 	orr.w	r3, r3, #4
 80069e6:	6193      	str	r3, [r2, #24]
 80069e8:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_TIM_MspPostInit+0x9c>)
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80069f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069fa:	2302      	movs	r3, #2
 80069fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069fe:	2302      	movs	r3, #2
 8006a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a02:	f107 0310 	add.w	r3, r7, #16
 8006a06:	4619      	mov	r1, r3
 8006a08:	4814      	ldr	r0, [pc, #80]	; (8006a5c <HAL_TIM_MspPostInit+0xa0>)
 8006a0a:	f001 f983 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006a0e:	e01d      	b.n	8006a4c <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <HAL_TIM_MspPostInit+0xa4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d118      	bne.n	8006a4c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <HAL_TIM_MspPostInit+0x9c>)
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	4a0e      	ldr	r2, [pc, #56]	; (8006a58 <HAL_TIM_MspPostInit+0x9c>)
 8006a20:	f043 0308 	orr.w	r3, r3, #8
 8006a24:	6193      	str	r3, [r2, #24]
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <HAL_TIM_MspPostInit+0x9c>)
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a40:	f107 0310 	add.w	r3, r7, #16
 8006a44:	4619      	mov	r1, r3
 8006a46:	4807      	ldr	r0, [pc, #28]	; (8006a64 <HAL_TIM_MspPostInit+0xa8>)
 8006a48:	f001 f964 	bl	8007d14 <HAL_GPIO_Init>
}
 8006a4c:	bf00      	nop
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	40010800 	.word	0x40010800
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40010c00 	.word	0x40010c00

08006a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a70:	f107 0310 	add.w	r3, r7, #16
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	605a      	str	r2, [r3, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <HAL_UART_MspInit+0x8c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d131      	bne.n	8006aec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <HAL_UART_MspInit+0x90>)
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <HAL_UART_MspInit+0x90>)
 8006a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a92:	6193      	str	r3, [r2, #24]
 8006a94:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <HAL_UART_MspInit+0x90>)
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aa0:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <HAL_UART_MspInit+0x90>)
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <HAL_UART_MspInit+0x90>)
 8006aa6:	f043 0304 	orr.w	r3, r3, #4
 8006aaa:	6193      	str	r3, [r2, #24]
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HAL_UART_MspInit+0x90>)
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	60bb      	str	r3, [r7, #8]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006abe:	2302      	movs	r3, #2
 8006ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ac6:	f107 0310 	add.w	r3, r7, #16
 8006aca:	4619      	mov	r1, r3
 8006acc:	480b      	ldr	r0, [pc, #44]	; (8006afc <HAL_UART_MspInit+0x94>)
 8006ace:	f001 f921 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ae0:	f107 0310 	add.w	r3, r7, #16
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4805      	ldr	r0, [pc, #20]	; (8006afc <HAL_UART_MspInit+0x94>)
 8006ae8:	f001 f914 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006aec:	bf00      	nop
 8006aee:	3720      	adds	r7, #32
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	40013800 	.word	0x40013800
 8006af8:	40021000 	.word	0x40021000
 8006afc:	40010800 	.word	0x40010800

08006b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b04:	e7fe      	b.n	8006b04 <NMI_Handler+0x4>

08006b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b06:	b480      	push	{r7}
 8006b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b0a:	e7fe      	b.n	8006b0a <HardFault_Handler+0x4>

08006b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b10:	e7fe      	b.n	8006b10 <MemManage_Handler+0x4>

08006b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b12:	b480      	push	{r7}
 8006b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b16:	e7fe      	b.n	8006b16 <BusFault_Handler+0x4>

08006b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b1c:	e7fe      	b.n	8006b1c <UsageFault_Handler+0x4>

08006b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b22:	bf00      	nop
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b36:	b480      	push	{r7}
 8006b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b46:	f000 f92d 	bl	8006da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b4a:	bf00      	nop
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006b54:	4802      	ldr	r0, [pc, #8]	; (8006b60 <TIM2_IRQHandler+0x10>)
 8006b56:	f003 fccd 	bl	800a4f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000360 	.word	0x20000360

08006b64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006b68:	4802      	ldr	r0, [pc, #8]	; (8006b74 <TIM3_IRQHandler+0x10>)
 8006b6a:	f003 fcc3 	bl	800a4f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006b6e:	bf00      	nop
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	200003a8 	.word	0x200003a8

08006b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  return 1;
 8006b7c:	2301      	movs	r3, #1
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <_kill>:

int _kill(int pid, int sig)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006b90:	f005 fe02 	bl	800c798 <__errno>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2216      	movs	r2, #22
 8006b98:	601a      	str	r2, [r3, #0]
  return -1;
 8006b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <_exit>:

void _exit (int status)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006bae:	f04f 31ff 	mov.w	r1, #4294967295
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff ffe7 	bl	8006b86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006bb8:	e7fe      	b.n	8006bb8 <_exit+0x12>

08006bba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	e00a      	b.n	8006be2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006bcc:	f3af 8000 	nop.w
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	60ba      	str	r2, [r7, #8]
 8006bd8:	b2ca      	uxtb	r2, r1
 8006bda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3301      	adds	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	dbf0      	blt.n	8006bcc <_read+0x12>
  }

  return len;
 8006bea:	687b      	ldr	r3, [r7, #4]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c1a:	605a      	str	r2, [r3, #4]
  return 0;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <_isatty>:

int _isatty(int file)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006c30:	2301      	movs	r3, #1
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c5c:	4a14      	ldr	r2, [pc, #80]	; (8006cb0 <_sbrk+0x5c>)
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <_sbrk+0x60>)
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <_sbrk+0x64>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d102      	bne.n	8006c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c70:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <_sbrk+0x64>)
 8006c72:	4a12      	ldr	r2, [pc, #72]	; (8006cbc <_sbrk+0x68>)
 8006c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c76:	4b10      	ldr	r3, [pc, #64]	; (8006cb8 <_sbrk+0x64>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d207      	bcs.n	8006c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c84:	f005 fd88 	bl	800c798 <__errno>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	220c      	movs	r2, #12
 8006c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	e009      	b.n	8006ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c94:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <_sbrk+0x64>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <_sbrk+0x64>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4a05      	ldr	r2, [pc, #20]	; (8006cb8 <_sbrk+0x64>)
 8006ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	2000c000 	.word	0x2000c000
 8006cb4:	00000400 	.word	0x00000400
 8006cb8:	20004454 	.word	0x20004454
 8006cbc:	200045d0 	.word	0x200045d0

08006cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006cc4:	bf00      	nop
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr

08006ccc <Reset_Handler>:
 8006ccc:	f7ff fff8 	bl	8006cc0 <SystemInit>
 8006cd0:	480b      	ldr	r0, [pc, #44]	; (8006d00 <LoopFillZerobss+0xe>)
 8006cd2:	490c      	ldr	r1, [pc, #48]	; (8006d04 <LoopFillZerobss+0x12>)
 8006cd4:	4a0c      	ldr	r2, [pc, #48]	; (8006d08 <LoopFillZerobss+0x16>)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e002      	b.n	8006ce0 <LoopCopyDataInit>

08006cda <CopyDataInit>:
 8006cda:	58d4      	ldr	r4, [r2, r3]
 8006cdc:	50c4      	str	r4, [r0, r3]
 8006cde:	3304      	adds	r3, #4

08006ce0 <LoopCopyDataInit>:
 8006ce0:	18c4      	adds	r4, r0, r3
 8006ce2:	428c      	cmp	r4, r1
 8006ce4:	d3f9      	bcc.n	8006cda <CopyDataInit>
 8006ce6:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <LoopFillZerobss+0x1a>)
 8006ce8:	4c09      	ldr	r4, [pc, #36]	; (8006d10 <LoopFillZerobss+0x1e>)
 8006cea:	2300      	movs	r3, #0
 8006cec:	e001      	b.n	8006cf2 <LoopFillZerobss>

08006cee <FillZerobss>:
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	3204      	adds	r2, #4

08006cf2 <LoopFillZerobss>:
 8006cf2:	42a2      	cmp	r2, r4
 8006cf4:	d3fb      	bcc.n	8006cee <FillZerobss>
 8006cf6:	f005 fd55 	bl	800c7a4 <__libc_init_array>
 8006cfa:	f7fe fbcd 	bl	8005498 <main>
 8006cfe:	4770      	bx	lr
 8006d00:	20000000 	.word	0x20000000
 8006d04:	200001e4 	.word	0x200001e4
 8006d08:	080103f0 	.word	0x080103f0
 8006d0c:	200001e8 	.word	0x200001e8
 8006d10:	200045cc 	.word	0x200045cc

08006d14 <ADC1_2_IRQHandler>:
 8006d14:	e7fe      	b.n	8006d14 <ADC1_2_IRQHandler>
	...

08006d18 <HAL_Init>:
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <HAL_Init+0x28>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a07      	ldr	r2, [pc, #28]	; (8006d40 <HAL_Init+0x28>)
 8006d22:	f043 0310 	orr.w	r3, r3, #16
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	2003      	movs	r0, #3
 8006d2a:	f000 fdb1 	bl	8007890 <HAL_NVIC_SetPriorityGrouping>
 8006d2e:	200f      	movs	r0, #15
 8006d30:	f000 f808 	bl	8006d44 <HAL_InitTick>
 8006d34:	f7ff fc66 	bl	8006604 <HAL_MspInit>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	40022000 	.word	0x40022000

08006d44 <HAL_InitTick>:
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <HAL_InitTick+0x54>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <HAL_InitTick+0x58>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fdc9 	bl	80078fa <HAL_SYSTICK_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_InitTick+0x2e>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e00e      	b.n	8006d90 <HAL_InitTick+0x4c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b0f      	cmp	r3, #15
 8006d76:	d80a      	bhi.n	8006d8e <HAL_InitTick+0x4a>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	f000 fd91 	bl	80078a6 <HAL_NVIC_SetPriority>
 8006d84:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <HAL_InitTick+0x5c>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e000      	b.n	8006d90 <HAL_InitTick+0x4c>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000010 	.word	0x20000010
 8006d9c:	20000018 	.word	0x20000018
 8006da0:	20000014 	.word	0x20000014

08006da4 <HAL_IncTick>:
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <HAL_IncTick+0x1c>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <HAL_IncTick+0x20>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4413      	add	r3, r2
 8006db4:	4a03      	ldr	r2, [pc, #12]	; (8006dc4 <HAL_IncTick+0x20>)
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	bf00      	nop
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr
 8006dc0:	20000018 	.word	0x20000018
 8006dc4:	20004458 	.word	0x20004458

08006dc8 <HAL_GetTick>:
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <HAL_GetTick+0x10>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr
 8006dd8:	20004458 	.word	0x20004458

08006ddc <HAL_Delay>:
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	f7ff fff0 	bl	8006dc8 <HAL_GetTick>
 8006de8:	60b8      	str	r0, [r7, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d005      	beq.n	8006e02 <HAL_Delay+0x26>
 8006df6:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <HAL_Delay+0x44>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	bf00      	nop
 8006e04:	f7ff ffe0 	bl	8006dc8 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d8f7      	bhi.n	8006e04 <HAL_Delay+0x28>
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000018 	.word	0x20000018

08006e24 <HAL_ADC_Init>:
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	75fb      	strb	r3, [r7, #23]
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	2300      	movs	r3, #0
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_ADC_Init+0x22>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e0ce      	b.n	8006fe4 <HAL_ADC_Init+0x1c0>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <HAL_ADC_Init+0x44>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fc00 	bl	8006668 <HAL_ADC_MspInit>
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fc03 	bl	8007674 <ADC_ConversionStop_Disable>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f040 80a9 	bne.w	8006fd2 <HAL_ADC_Init+0x1ae>
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 80a5 	bne.w	8006fd2 <HAL_ADC_Init+0x1ae>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e90:	f023 0302 	bic.w	r3, r3, #2
 8006e94:	f043 0202 	orr.w	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4951      	ldr	r1, [pc, #324]	; (8006fec <HAL_ADC_Init+0x1c8>)
 8006ea6:	428b      	cmp	r3, r1
 8006ea8:	d10a      	bne.n	8006ec0 <HAL_ADC_Init+0x9c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006eb2:	d002      	beq.n	8006eba <HAL_ADC_Init+0x96>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	e004      	b.n	8006ec4 <HAL_ADC_Init+0xa0>
 8006eba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ebe:	e001      	b.n	8006ec4 <HAL_ADC_Init+0xa0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7b1b      	ldrb	r3, [r3, #12]
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006edc:	d003      	beq.n	8006ee6 <HAL_ADC_Init+0xc2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d102      	bne.n	8006eec <HAL_ADC_Init+0xc8>
 8006ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eea:	e000      	b.n	8006eee <HAL_ADC_Init+0xca>
 8006eec:	2300      	movs	r3, #0
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	7d1b      	ldrb	r3, [r3, #20]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d119      	bne.n	8006f30 <HAL_ADC_Init+0x10c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7b1b      	ldrb	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_ADC_Init+0xf4>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	035a      	lsls	r2, r3, #13
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	e00b      	b.n	8006f30 <HAL_ADC_Init+0x10c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	f043 0220 	orr.w	r2, r3, #32
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	629a      	str	r2, [r3, #40]	; 0x28
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	f043 0201 	orr.w	r2, r3, #1
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	4b29      	ldr	r3, [pc, #164]	; (8006ff0 <HAL_ADC_Init+0x1cc>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6812      	ldr	r2, [r2, #0]
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6093      	str	r3, [r2, #8]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f60:	d003      	beq.n	8006f6a <HAL_ADC_Init+0x146>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d104      	bne.n	8006f74 <HAL_ADC_Init+0x150>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	051b      	lsls	r3, r3, #20
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <HAL_ADC_Init+0x1d0>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d10b      	bne.n	8006fb0 <HAL_ADC_Init+0x18c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa2:	f023 0303 	bic.w	r3, r3, #3
 8006fa6:	f043 0201 	orr.w	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	629a      	str	r2, [r3, #40]	; 0x28
 8006fae:	e018      	b.n	8006fe2 <HAL_ADC_Init+0x1be>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	f023 0312 	bic.w	r3, r3, #18
 8006fb8:	f043 0210 	orr.w	r2, r3, #16
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	f043 0201 	orr.w	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
 8006fd0:	e007      	b.n	8006fe2 <HAL_ADC_Init+0x1be>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	f043 0210 	orr.w	r2, r3, #16
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8006fde:	2301      	movs	r3, #1
 8006fe0:	75fb      	strb	r3, [r7, #23]
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3718      	adds	r7, #24
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40013c00 	.word	0x40013c00
 8006ff0:	ffe1f7fd 	.word	0xffe1f7fd
 8006ff4:	ff1f0efe 	.word	0xff1f0efe

08006ff8 <HAL_ADC_Start>:
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800700a:	2b01      	cmp	r3, #1
 800700c:	d101      	bne.n	8007012 <HAL_ADC_Start+0x1a>
 800700e:	2302      	movs	r3, #2
 8007010:	e098      	b.n	8007144 <HAL_ADC_Start+0x14c>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fad0 	bl	80075c0 <ADC_Enable>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f040 8087 	bne.w	800713a <HAL_ADC_Start+0x142>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	629a      	str	r2, [r3, #40]	; 0x28
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a41      	ldr	r2, [pc, #260]	; (800714c <HAL_ADC_Start+0x154>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d105      	bne.n	8007056 <HAL_ADC_Start+0x5e>
 800704a:	4b41      	ldr	r3, [pc, #260]	; (8007150 <HAL_ADC_Start+0x158>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d115      	bne.n	8007082 <HAL_ADC_Start+0x8a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	629a      	str	r2, [r3, #40]	; 0x28
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706c:	2b00      	cmp	r3, #0
 800706e:	d026      	beq.n	80070be <HAL_ADC_Start+0xc6>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007078:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	629a      	str	r2, [r3, #40]	; 0x28
 8007080:	e01d      	b.n	80070be <HAL_ADC_Start+0xc6>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	629a      	str	r2, [r3, #40]	; 0x28
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2f      	ldr	r2, [pc, #188]	; (8007150 <HAL_ADC_Start+0x158>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_ADC_Start+0xaa>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <HAL_ADC_Start+0x154>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10d      	bne.n	80070be <HAL_ADC_Start+0xc6>
 80070a2:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <HAL_ADC_Start+0x158>)
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <HAL_ADC_Start+0xc6>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	629a      	str	r2, [r3, #40]	; 0x28
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d006      	beq.n	80070d8 <HAL_ADC_Start+0xe0>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	f023 0206 	bic.w	r2, r3, #6
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80070d6:	e002      	b.n	80070de <HAL_ADC_Start+0xe6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f06f 0202 	mvn.w	r2, #2
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80070fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80070fe:	d113      	bne.n	8007128 <HAL_ADC_Start+0x130>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a11      	ldr	r2, [pc, #68]	; (800714c <HAL_ADC_Start+0x154>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d105      	bne.n	8007116 <HAL_ADC_Start+0x11e>
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_ADC_Start+0x158>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d108      	bne.n	8007128 <HAL_ADC_Start+0x130>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007124:	609a      	str	r2, [r3, #8]
 8007126:	e00c      	b.n	8007142 <HAL_ADC_Start+0x14a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007136:	609a      	str	r2, [r3, #8]
 8007138:	e003      	b.n	8007142 <HAL_ADC_Start+0x14a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40012800 	.word	0x40012800
 8007150:	40012400 	.word	0x40012400

08007154 <HAL_ADC_Stop>:
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_ADC_Stop+0x1a>
 800716a:	2302      	movs	r3, #2
 800716c:	e01a      	b.n	80071a4 <HAL_ADC_Stop+0x50>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa7c 	bl	8007674 <ADC_ConversionStop_Disable>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <HAL_ADC_Stop+0x46>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	f043 0201 	orr.w	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	629a      	str	r2, [r3, #40]	; 0x28
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_ADC_PollForConversion>:
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	f7ff fe01 	bl	8006dc8 <HAL_GetTick>
 80071c6:	6178      	str	r0, [r7, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00b      	beq.n	80071ee <HAL_ADC_PollForConversion+0x42>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	f043 0220 	orr.w	r2, r3, #32
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80071ea:	2301      	movs	r3, #1
 80071ec:	e0d3      	b.n	8007396 <HAL_ADC_PollForConversion+0x1ea>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d131      	bne.n	8007260 <HAL_ADC_PollForConversion+0xb4>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007202:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d12a      	bne.n	8007260 <HAL_ADC_PollForConversion+0xb4>
 800720a:	e021      	b.n	8007250 <HAL_ADC_PollForConversion+0xa4>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d01d      	beq.n	8007250 <HAL_ADC_PollForConversion+0xa4>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <HAL_ADC_PollForConversion+0x7e>
 800721a:	f7ff fdd5 	bl	8006dc8 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d212      	bcs.n	8007250 <HAL_ADC_PollForConversion+0xa4>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <HAL_ADC_PollForConversion+0xa4>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	f043 0204 	orr.w	r2, r3, #4
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	629a      	str	r2, [r3, #40]	; 0x28
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800724c:	2303      	movs	r3, #3
 800724e:	e0a2      	b.n	8007396 <HAL_ADC_PollForConversion+0x1ea>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0d6      	beq.n	800720c <HAL_ADC_PollForConversion+0x60>
 800725e:	e070      	b.n	8007342 <HAL_ADC_PollForConversion+0x196>
 8007260:	4b4f      	ldr	r3, [pc, #316]	; (80073a0 <HAL_ADC_PollForConversion+0x1f4>)
 8007262:	681c      	ldr	r4, [r3, #0]
 8007264:	2002      	movs	r0, #2
 8007266:	f002 fdbb 	bl	8009de0 <HAL_RCCEx_GetPeriphCLKFreq>
 800726a:	4603      	mov	r3, r0
 800726c:	fbb4 f2f3 	udiv	r2, r4, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6919      	ldr	r1, [r3, #16]
 8007276:	4b4b      	ldr	r3, [pc, #300]	; (80073a4 <HAL_ADC_PollForConversion+0x1f8>)
 8007278:	400b      	ands	r3, r1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d118      	bne.n	80072b0 <HAL_ADC_PollForConversion+0x104>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68d9      	ldr	r1, [r3, #12]
 8007284:	4b48      	ldr	r3, [pc, #288]	; (80073a8 <HAL_ADC_PollForConversion+0x1fc>)
 8007286:	400b      	ands	r3, r1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d111      	bne.n	80072b0 <HAL_ADC_PollForConversion+0x104>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6919      	ldr	r1, [r3, #16]
 8007292:	4b46      	ldr	r3, [pc, #280]	; (80073ac <HAL_ADC_PollForConversion+0x200>)
 8007294:	400b      	ands	r3, r1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d108      	bne.n	80072ac <HAL_ADC_PollForConversion+0x100>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68d9      	ldr	r1, [r3, #12]
 80072a0:	4b43      	ldr	r3, [pc, #268]	; (80073b0 <HAL_ADC_PollForConversion+0x204>)
 80072a2:	400b      	ands	r3, r1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_ADC_PollForConversion+0x100>
 80072a8:	2314      	movs	r3, #20
 80072aa:	e020      	b.n	80072ee <HAL_ADC_PollForConversion+0x142>
 80072ac:	2329      	movs	r3, #41	; 0x29
 80072ae:	e01e      	b.n	80072ee <HAL_ADC_PollForConversion+0x142>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6919      	ldr	r1, [r3, #16]
 80072b6:	4b3d      	ldr	r3, [pc, #244]	; (80073ac <HAL_ADC_PollForConversion+0x200>)
 80072b8:	400b      	ands	r3, r1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_ADC_PollForConversion+0x120>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68d9      	ldr	r1, [r3, #12]
 80072c4:	4b3a      	ldr	r3, [pc, #232]	; (80073b0 <HAL_ADC_PollForConversion+0x204>)
 80072c6:	400b      	ands	r3, r1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00d      	beq.n	80072e8 <HAL_ADC_PollForConversion+0x13c>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6919      	ldr	r1, [r3, #16]
 80072d2:	4b38      	ldr	r3, [pc, #224]	; (80073b4 <HAL_ADC_PollForConversion+0x208>)
 80072d4:	400b      	ands	r3, r1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d108      	bne.n	80072ec <HAL_ADC_PollForConversion+0x140>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68d9      	ldr	r1, [r3, #12]
 80072e0:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_ADC_PollForConversion+0x208>)
 80072e2:	400b      	ands	r3, r1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_ADC_PollForConversion+0x140>
 80072e8:	2354      	movs	r3, #84	; 0x54
 80072ea:	e000      	b.n	80072ee <HAL_ADC_PollForConversion+0x142>
 80072ec:	23fc      	movs	r3, #252	; 0xfc
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	e021      	b.n	800733a <HAL_ADC_PollForConversion+0x18e>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d01a      	beq.n	8007334 <HAL_ADC_PollForConversion+0x188>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <HAL_ADC_PollForConversion+0x168>
 8007304:	f7ff fd60 	bl	8006dc8 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d20f      	bcs.n	8007334 <HAL_ADC_PollForConversion+0x188>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d90b      	bls.n	8007334 <HAL_ADC_PollForConversion+0x188>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	f043 0204 	orr.w	r2, r3, #4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	629a      	str	r2, [r3, #40]	; 0x28
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007330:	2303      	movs	r3, #3
 8007332:	e030      	b.n	8007396 <HAL_ADC_PollForConversion+0x1ea>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	d8d9      	bhi.n	80072f6 <HAL_ADC_PollForConversion+0x14a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f06f 0212 	mvn.w	r2, #18
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	629a      	str	r2, [r3, #40]	; 0x28
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007362:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007366:	d115      	bne.n	8007394 <HAL_ADC_PollForConversion+0x1e8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	7b1b      	ldrb	r3, [r3, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d111      	bne.n	8007394 <HAL_ADC_PollForConversion+0x1e8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	629a      	str	r2, [r3, #40]	; 0x28
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d105      	bne.n	8007394 <HAL_ADC_PollForConversion+0x1e8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	f043 0201 	orr.w	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	629a      	str	r2, [r3, #40]	; 0x28
 8007394:	2300      	movs	r3, #0
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd90      	pop	{r4, r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000010 	.word	0x20000010
 80073a4:	24924924 	.word	0x24924924
 80073a8:	00924924 	.word	0x00924924
 80073ac:	12492492 	.word	0x12492492
 80073b0:	00492492 	.word	0x00492492
 80073b4:	00249249 	.word	0x00249249

080073b8 <HAL_ADC_GetValue>:
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bc80      	pop	{r7}
 80073ce:	4770      	bx	lr

080073d0 <HAL_ADC_ConfigChannel>:
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]
 80073de:	2300      	movs	r3, #0
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_ADC_ConfigChannel+0x20>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e0dc      	b.n	80075aa <HAL_ADC_ConfigChannel+0x1da>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b06      	cmp	r3, #6
 80073fe:	d81c      	bhi.n	800743a <HAL_ADC_ConfigChannel+0x6a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	3b05      	subs	r3, #5
 8007412:	221f      	movs	r2, #31
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	4019      	ands	r1, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	3b05      	subs	r3, #5
 800742c:	fa00 f203 	lsl.w	r2, r0, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	635a      	str	r2, [r3, #52]	; 0x34
 8007438:	e03c      	b.n	80074b4 <HAL_ADC_ConfigChannel+0xe4>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b0c      	cmp	r3, #12
 8007440:	d81c      	bhi.n	800747c <HAL_ADC_ConfigChannel+0xac>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	3b23      	subs	r3, #35	; 0x23
 8007454:	221f      	movs	r2, #31
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	43db      	mvns	r3, r3
 800745c:	4019      	ands	r1, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	3b23      	subs	r3, #35	; 0x23
 800746e:	fa00 f203 	lsl.w	r2, r0, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
 800747a:	e01b      	b.n	80074b4 <HAL_ADC_ConfigChannel+0xe4>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	3b41      	subs	r3, #65	; 0x41
 800748e:	221f      	movs	r2, #31
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43db      	mvns	r3, r3
 8007496:	4019      	ands	r1, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	6818      	ldr	r0, [r3, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	3b41      	subs	r3, #65	; 0x41
 80074a8:	fa00 f203 	lsl.w	r2, r0, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b09      	cmp	r3, #9
 80074ba:	d91c      	bls.n	80074f6 <HAL_ADC_ConfigChannel+0x126>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68d9      	ldr	r1, [r3, #12]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4413      	add	r3, r2
 80074cc:	3b1e      	subs	r3, #30
 80074ce:	2207      	movs	r2, #7
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	43db      	mvns	r3, r3
 80074d6:	4019      	ands	r1, r3
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6898      	ldr	r0, [r3, #8]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	4613      	mov	r3, r2
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	4413      	add	r3, r2
 80074e6:	3b1e      	subs	r3, #30
 80074e8:	fa00 f203 	lsl.w	r2, r0, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	60da      	str	r2, [r3, #12]
 80074f4:	e019      	b.n	800752a <HAL_ADC_ConfigChannel+0x15a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6919      	ldr	r1, [r3, #16]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	4613      	mov	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4413      	add	r3, r2
 8007506:	2207      	movs	r2, #7
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	4019      	ands	r1, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6898      	ldr	r0, [r3, #8]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	4413      	add	r3, r2
 800751e:	fa00 f203 	lsl.w	r2, r0, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	611a      	str	r2, [r3, #16]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b10      	cmp	r3, #16
 8007530:	d003      	beq.n	800753a <HAL_ADC_ConfigChannel+0x16a>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b11      	cmp	r3, #17
 8007538:	d132      	bne.n	80075a0 <HAL_ADC_ConfigChannel+0x1d0>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d125      	bne.n	8007590 <HAL_ADC_ConfigChannel+0x1c0>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d126      	bne.n	80075a0 <HAL_ADC_ConfigChannel+0x1d0>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b10      	cmp	r3, #16
 8007568:	d11a      	bne.n	80075a0 <HAL_ADC_ConfigChannel+0x1d0>
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a13      	ldr	r2, [pc, #76]	; (80075bc <HAL_ADC_ConfigChannel+0x1ec>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	0c9a      	lsrs	r2, r3, #18
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	60bb      	str	r3, [r7, #8]
 8007580:	e002      	b.n	8007588 <HAL_ADC_ConfigChannel+0x1b8>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	3b01      	subs	r3, #1
 8007586:	60bb      	str	r3, [r7, #8]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f9      	bne.n	8007582 <HAL_ADC_ConfigChannel+0x1b2>
 800758e:	e007      	b.n	80075a0 <HAL_ADC_ConfigChannel+0x1d0>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	f043 0220 	orr.w	r2, r3, #32
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	629a      	str	r2, [r3, #40]	; 0x28
 800759c:	2301      	movs	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr
 80075b4:	40012400 	.word	0x40012400
 80075b8:	20000010 	.word	0x20000010
 80075bc:	431bde83 	.word	0x431bde83

080075c0 <ADC_Enable>:
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	2300      	movs	r3, #0
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d040      	beq.n	8007660 <ADC_Enable+0xa0>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0201 	orr.w	r2, r2, #1
 80075ec:	609a      	str	r2, [r3, #8]
 80075ee:	4b1f      	ldr	r3, [pc, #124]	; (800766c <ADC_Enable+0xac>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1f      	ldr	r2, [pc, #124]	; (8007670 <ADC_Enable+0xb0>)
 80075f4:	fba2 2303 	umull	r2, r3, r2, r3
 80075f8:	0c9b      	lsrs	r3, r3, #18
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	e002      	b.n	8007604 <ADC_Enable+0x44>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	3b01      	subs	r3, #1
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f9      	bne.n	80075fe <ADC_Enable+0x3e>
 800760a:	f7ff fbdd 	bl	8006dc8 <HAL_GetTick>
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	e01f      	b.n	8007652 <ADC_Enable+0x92>
 8007612:	f7ff fbd9 	bl	8006dc8 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d918      	bls.n	8007652 <ADC_Enable+0x92>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	d011      	beq.n	8007652 <ADC_Enable+0x92>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	f043 0210 	orr.w	r2, r3, #16
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	629a      	str	r2, [r3, #40]	; 0x28
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	f043 0201 	orr.w	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	62da      	str	r2, [r3, #44]	; 0x2c
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800764e:	2301      	movs	r3, #1
 8007650:	e007      	b.n	8007662 <ADC_Enable+0xa2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b01      	cmp	r3, #1
 800765e:	d1d8      	bne.n	8007612 <ADC_Enable+0x52>
 8007660:	2300      	movs	r3, #0
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000010 	.word	0x20000010
 8007670:	431bde83 	.word	0x431bde83

08007674 <ADC_ConversionStop_Disable>:
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b01      	cmp	r3, #1
 800768c:	d12e      	bne.n	80076ec <ADC_ConversionStop_Disable+0x78>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0201 	bic.w	r2, r2, #1
 800769c:	609a      	str	r2, [r3, #8]
 800769e:	f7ff fb93 	bl	8006dc8 <HAL_GetTick>
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	e01b      	b.n	80076de <ADC_ConversionStop_Disable+0x6a>
 80076a6:	f7ff fb8f 	bl	8006dc8 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d914      	bls.n	80076de <ADC_ConversionStop_Disable+0x6a>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d10d      	bne.n	80076de <ADC_ConversionStop_Disable+0x6a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c6:	f043 0210 	orr.w	r2, r3, #16
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	629a      	str	r2, [r3, #40]	; 0x28
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	f043 0201 	orr.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80076da:	2301      	movs	r3, #1
 80076dc:	e007      	b.n	80076ee <ADC_ConversionStop_Disable+0x7a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d0dc      	beq.n	80076a6 <ADC_ConversionStop_Disable+0x32>
 80076ec:	2300      	movs	r3, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <__NVIC_SetPriorityGrouping>:
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <__NVIC_SetPriorityGrouping+0x44>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007714:	4013      	ands	r3, r2
 8007716:	60bb      	str	r3, [r7, #8]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	021a      	lsls	r2, r3, #8
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	4313      	orrs	r3, r2
 8007720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007728:	60bb      	str	r3, [r7, #8]
 800772a:	4a04      	ldr	r2, [pc, #16]	; (800773c <__NVIC_SetPriorityGrouping+0x44>)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	60d3      	str	r3, [r2, #12]
 8007730:	bf00      	nop
 8007732:	3714      	adds	r7, #20
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <__NVIC_GetPriorityGrouping>:
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
 8007744:	4b04      	ldr	r3, [pc, #16]	; (8007758 <__NVIC_GetPriorityGrouping+0x18>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	0a1b      	lsrs	r3, r3, #8
 800774a:	f003 0307 	and.w	r3, r3, #7
 800774e:	4618      	mov	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	e000ed00 	.word	0xe000ed00

0800775c <__NVIC_EnableIRQ>:
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	4603      	mov	r3, r0
 8007764:	71fb      	strb	r3, [r7, #7]
 8007766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776a:	2b00      	cmp	r3, #0
 800776c:	db0b      	blt.n	8007786 <__NVIC_EnableIRQ+0x2a>
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	f003 021f 	and.w	r2, r3, #31
 8007774:	4906      	ldr	r1, [pc, #24]	; (8007790 <__NVIC_EnableIRQ+0x34>)
 8007776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	2001      	movs	r0, #1
 800777e:	fa00 f202 	lsl.w	r2, r0, r2
 8007782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr
 8007790:	e000e100 	.word	0xe000e100

08007794 <__NVIC_SetPriority>:
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
 80077a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	db0a      	blt.n	80077be <__NVIC_SetPriority+0x2a>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	490c      	ldr	r1, [pc, #48]	; (80077e0 <__NVIC_SetPriority+0x4c>)
 80077ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077b2:	0112      	lsls	r2, r2, #4
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	440b      	add	r3, r1
 80077b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80077bc:	e00a      	b.n	80077d4 <__NVIC_SetPriority+0x40>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	4908      	ldr	r1, [pc, #32]	; (80077e4 <__NVIC_SetPriority+0x50>)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	3b04      	subs	r3, #4
 80077cc:	0112      	lsls	r2, r2, #4
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	440b      	add	r3, r1
 80077d2:	761a      	strb	r2, [r3, #24]
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e100 	.word	0xe000e100
 80077e4:	e000ed00 	.word	0xe000ed00

080077e8 <NVIC_EncodePriority>:
 80077e8:	b480      	push	{r7}
 80077ea:	b089      	sub	sp, #36	; 0x24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f1c3 0307 	rsb	r3, r3, #7
 8007802:	2b04      	cmp	r3, #4
 8007804:	bf28      	it	cs
 8007806:	2304      	movcs	r3, #4
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	3304      	adds	r3, #4
 800780e:	2b06      	cmp	r3, #6
 8007810:	d902      	bls.n	8007818 <NVIC_EncodePriority+0x30>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	3b03      	subs	r3, #3
 8007816:	e000      	b.n	800781a <NVIC_EncodePriority+0x32>
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	f04f 32ff 	mov.w	r2, #4294967295
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	43da      	mvns	r2, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	401a      	ands	r2, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	409a      	lsls	r2, r3
 8007830:	f04f 31ff 	mov.w	r1, #4294967295
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	fa01 f303 	lsl.w	r3, r1, r3
 800783a:	43d9      	mvns	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	400b      	ands	r3, r1
 8007840:	4313      	orrs	r3, r2
 8007842:	4618      	mov	r0, r3
 8007844:	3724      	adds	r7, #36	; 0x24
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr

0800784c <SysTick_Config>:
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3b01      	subs	r3, #1
 8007858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800785c:	d301      	bcc.n	8007862 <SysTick_Config+0x16>
 800785e:	2301      	movs	r3, #1
 8007860:	e00f      	b.n	8007882 <SysTick_Config+0x36>
 8007862:	4a0a      	ldr	r2, [pc, #40]	; (800788c <SysTick_Config+0x40>)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3b01      	subs	r3, #1
 8007868:	6053      	str	r3, [r2, #4]
 800786a:	210f      	movs	r1, #15
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	f7ff ff90 	bl	8007794 <__NVIC_SetPriority>
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <SysTick_Config+0x40>)
 8007876:	2200      	movs	r2, #0
 8007878:	609a      	str	r2, [r3, #8]
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <SysTick_Config+0x40>)
 800787c:	2207      	movs	r2, #7
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	2300      	movs	r3, #0
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	e000e010 	.word	0xe000e010

08007890 <HAL_NVIC_SetPriorityGrouping>:
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff ff2d 	bl	80076f8 <__NVIC_SetPriorityGrouping>
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <HAL_NVIC_SetPriority>:
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b086      	sub	sp, #24
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	4603      	mov	r3, r0
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	73fb      	strb	r3, [r7, #15]
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	f7ff ff42 	bl	8007740 <__NVIC_GetPriorityGrouping>
 80078bc:	6178      	str	r0, [r7, #20]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	6978      	ldr	r0, [r7, #20]
 80078c4:	f7ff ff90 	bl	80077e8 <NVIC_EncodePriority>
 80078c8:	4602      	mov	r2, r0
 80078ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff ff5f 	bl	8007794 <__NVIC_SetPriority>
 80078d6:	bf00      	nop
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_NVIC_EnableIRQ>:
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	4603      	mov	r3, r0
 80078e6:	71fb      	strb	r3, [r7, #7]
 80078e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff ff35 	bl	800775c <__NVIC_EnableIRQ>
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_SYSTICK_Config>:
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff ffa2 	bl	800784c <SysTick_Config>
 8007908:	4603      	mov	r3, r0
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <HAL_FLASH_Program>:
 8007914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	e9c7 2300 	strd	r2, r3, [r7]
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]
 8007926:	2300      	movs	r3, #0
 8007928:	75bb      	strb	r3, [r7, #22]
 800792a:	2300      	movs	r3, #0
 800792c:	757b      	strb	r3, [r7, #21]
 800792e:	4b2f      	ldr	r3, [pc, #188]	; (80079ec <HAL_FLASH_Program+0xd8>)
 8007930:	7e1b      	ldrb	r3, [r3, #24]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_FLASH_Program+0x26>
 8007936:	2302      	movs	r3, #2
 8007938:	e054      	b.n	80079e4 <HAL_FLASH_Program+0xd0>
 800793a:	4b2c      	ldr	r3, [pc, #176]	; (80079ec <HAL_FLASH_Program+0xd8>)
 800793c:	2201      	movs	r2, #1
 800793e:	761a      	strb	r2, [r3, #24]
 8007940:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007944:	f000 f8a8 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007948:	4603      	mov	r3, r0
 800794a:	75fb      	strb	r3, [r7, #23]
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d144      	bne.n	80079dc <HAL_FLASH_Program+0xc8>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d102      	bne.n	800795e <HAL_FLASH_Program+0x4a>
 8007958:	2301      	movs	r3, #1
 800795a:	757b      	strb	r3, [r7, #21]
 800795c:	e007      	b.n	800796e <HAL_FLASH_Program+0x5a>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d102      	bne.n	800796a <HAL_FLASH_Program+0x56>
 8007964:	2302      	movs	r3, #2
 8007966:	757b      	strb	r3, [r7, #21]
 8007968:	e001      	b.n	800796e <HAL_FLASH_Program+0x5a>
 800796a:	2304      	movs	r3, #4
 800796c:	757b      	strb	r3, [r7, #21]
 800796e:	2300      	movs	r3, #0
 8007970:	75bb      	strb	r3, [r7, #22]
 8007972:	e02d      	b.n	80079d0 <HAL_FLASH_Program+0xbc>
 8007974:	7dbb      	ldrb	r3, [r7, #22]
 8007976:	005a      	lsls	r2, r3, #1
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	eb02 0c03 	add.w	ip, r2, r3
 800797e:	7dbb      	ldrb	r3, [r7, #22]
 8007980:	0119      	lsls	r1, r3, #4
 8007982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007986:	f1c1 0620 	rsb	r6, r1, #32
 800798a:	f1a1 0020 	sub.w	r0, r1, #32
 800798e:	fa22 f401 	lsr.w	r4, r2, r1
 8007992:	fa03 f606 	lsl.w	r6, r3, r6
 8007996:	4334      	orrs	r4, r6
 8007998:	fa23 f000 	lsr.w	r0, r3, r0
 800799c:	4304      	orrs	r4, r0
 800799e:	fa23 f501 	lsr.w	r5, r3, r1
 80079a2:	b2a3      	uxth	r3, r4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4660      	mov	r0, ip
 80079a8:	f000 f85a 	bl	8007a60 <FLASH_Program_HalfWord>
 80079ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079b0:	f000 f872 	bl	8007a98 <FLASH_WaitForLastOperation>
 80079b4:	4603      	mov	r3, r0
 80079b6:	75fb      	strb	r3, [r7, #23]
 80079b8:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <HAL_FLASH_Program+0xdc>)
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <HAL_FLASH_Program+0xdc>)
 80079be:	f023 0301 	bic.w	r3, r3, #1
 80079c2:	6113      	str	r3, [r2, #16]
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <HAL_FLASH_Program+0xc6>
 80079ca:	7dbb      	ldrb	r3, [r7, #22]
 80079cc:	3301      	adds	r3, #1
 80079ce:	75bb      	strb	r3, [r7, #22]
 80079d0:	7dba      	ldrb	r2, [r7, #22]
 80079d2:	7d7b      	ldrb	r3, [r7, #21]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3cd      	bcc.n	8007974 <HAL_FLASH_Program+0x60>
 80079d8:	e000      	b.n	80079dc <HAL_FLASH_Program+0xc8>
 80079da:	bf00      	nop
 80079dc:	4b03      	ldr	r3, [pc, #12]	; (80079ec <HAL_FLASH_Program+0xd8>)
 80079de:	2200      	movs	r2, #0
 80079e0:	761a      	strb	r2, [r3, #24]
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	4618      	mov	r0, r3
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ec:	20004460 	.word	0x20004460
 80079f0:	40022000 	.word	0x40022000

080079f4 <HAL_FLASH_Unlock>:
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	2300      	movs	r3, #0
 80079fc:	71fb      	strb	r3, [r7, #7]
 80079fe:	4b0d      	ldr	r3, [pc, #52]	; (8007a34 <HAL_FLASH_Unlock+0x40>)
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <HAL_FLASH_Unlock+0x32>
 8007a0a:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <HAL_FLASH_Unlock+0x40>)
 8007a0c:	4a0a      	ldr	r2, [pc, #40]	; (8007a38 <HAL_FLASH_Unlock+0x44>)
 8007a0e:	605a      	str	r2, [r3, #4]
 8007a10:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <HAL_FLASH_Unlock+0x40>)
 8007a12:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <HAL_FLASH_Unlock+0x48>)
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <HAL_FLASH_Unlock+0x40>)
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <HAL_FLASH_Unlock+0x32>
 8007a22:	2301      	movs	r3, #1
 8007a24:	71fb      	strb	r3, [r7, #7]
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40022000 	.word	0x40022000
 8007a38:	45670123 	.word	0x45670123
 8007a3c:	cdef89ab 	.word	0xcdef89ab

08007a40 <HAL_FLASH_Lock>:
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <HAL_FLASH_Lock+0x1c>)
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <HAL_FLASH_Lock+0x1c>)
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4e:	6113      	str	r3, [r2, #16]
 8007a50:	2300      	movs	r3, #0
 8007a52:	4618      	mov	r0, r3
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	40022000 	.word	0x40022000

08007a60 <FLASH_Program_HalfWord>:
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	807b      	strh	r3, [r7, #2]
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <FLASH_Program_HalfWord+0x30>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	61da      	str	r2, [r3, #28]
 8007a72:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <FLASH_Program_HalfWord+0x34>)
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	4a07      	ldr	r2, [pc, #28]	; (8007a94 <FLASH_Program_HalfWord+0x34>)
 8007a78:	f043 0301 	orr.w	r3, r3, #1
 8007a7c:	6113      	str	r3, [r2, #16]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	887a      	ldrh	r2, [r7, #2]
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	20004460 	.word	0x20004460
 8007a94:	40022000 	.word	0x40022000

08007a98 <FLASH_WaitForLastOperation>:
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	f7ff f992 	bl	8006dc8 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	e010      	b.n	8007aca <FLASH_WaitForLastOperation+0x32>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d00c      	beq.n	8007aca <FLASH_WaitForLastOperation+0x32>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <FLASH_WaitForLastOperation+0x2e>
 8007ab6:	f7ff f987 	bl	8006dc8 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d201      	bcs.n	8007aca <FLASH_WaitForLastOperation+0x32>
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e025      	b.n	8007b16 <FLASH_WaitForLastOperation+0x7e>
 8007aca:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <FLASH_WaitForLastOperation+0x88>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e8      	bne.n	8007aa8 <FLASH_WaitForLastOperation+0x10>
 8007ad6:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <FLASH_WaitForLastOperation+0x88>)
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <FLASH_WaitForLastOperation+0x50>
 8007ae2:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <FLASH_WaitForLastOperation+0x88>)
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	60da      	str	r2, [r3, #12]
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <FLASH_WaitForLastOperation+0x88>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <FLASH_WaitForLastOperation+0x74>
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <FLASH_WaitForLastOperation+0x88>)
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <FLASH_WaitForLastOperation+0x74>
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <FLASH_WaitForLastOperation+0x88>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <FLASH_WaitForLastOperation+0x7c>
 8007b0c:	f000 f80a 	bl	8007b24 <FLASH_SetErrorCode>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <FLASH_WaitForLastOperation+0x7e>
 8007b14:	2300      	movs	r3, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	40022000 	.word	0x40022000

08007b24 <FLASH_SetErrorCode>:
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	607b      	str	r3, [r7, #4]
 8007b2e:	4b23      	ldr	r3, [pc, #140]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <FLASH_SetErrorCode+0x2a>
 8007b3a:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <FLASH_SetErrorCode+0x9c>)
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f043 0302 	orr.w	r3, r3, #2
 8007b42:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <FLASH_SetErrorCode+0x9c>)
 8007b44:	61d3      	str	r3, [r2, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f043 0310 	orr.w	r3, r3, #16
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <FLASH_SetErrorCode+0x4a>
 8007b5a:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <FLASH_SetErrorCode+0x9c>)
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	4a17      	ldr	r2, [pc, #92]	; (8007bc0 <FLASH_SetErrorCode+0x9c>)
 8007b64:	61d3      	str	r3, [r2, #28]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f043 0304 	orr.w	r3, r3, #4
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <FLASH_SetErrorCode+0x6e>
 8007b7a:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <FLASH_SetErrorCode+0x9c>)
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f043 0304 	orr.w	r3, r3, #4
 8007b82:	4a0f      	ldr	r2, [pc, #60]	; (8007bc0 <FLASH_SetErrorCode+0x9c>)
 8007b84:	61d3      	str	r3, [r2, #28]
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	61d3      	str	r3, [r2, #28]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f240 1201 	movw	r2, #257	; 0x101
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d106      	bne.n	8007baa <FLASH_SetErrorCode+0x86>
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	4a06      	ldr	r2, [pc, #24]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	61d3      	str	r3, [r2, #28]
 8007ba8:	e002      	b.n	8007bb0 <FLASH_SetErrorCode+0x8c>
 8007baa:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <FLASH_SetErrorCode+0x98>)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60d3      	str	r3, [r2, #12]
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	40022000 	.word	0x40022000
 8007bc0:	20004460 	.word	0x20004460

08007bc4 <HAL_FLASHEx_Erase>:
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	2301      	movs	r3, #1
 8007bd0:	73fb      	strb	r3, [r7, #15]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60bb      	str	r3, [r7, #8]
 8007bd6:	4b2f      	ldr	r3, [pc, #188]	; (8007c94 <HAL_FLASHEx_Erase+0xd0>)
 8007bd8:	7e1b      	ldrb	r3, [r3, #24]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_FLASHEx_Erase+0x1e>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e053      	b.n	8007c8a <HAL_FLASHEx_Erase+0xc6>
 8007be2:	4b2c      	ldr	r3, [pc, #176]	; (8007c94 <HAL_FLASHEx_Erase+0xd0>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	761a      	strb	r2, [r3, #24]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d116      	bne.n	8007c1e <HAL_FLASHEx_Erase+0x5a>
 8007bf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007bf4:	f7ff ff50 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d141      	bne.n	8007c82 <HAL_FLASHEx_Erase+0xbe>
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f000 f84c 	bl	8007c9c <FLASH_MassErase>
 8007c04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c08:	f7ff ff46 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
 8007c10:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <HAL_FLASHEx_Erase+0xd4>)
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <HAL_FLASHEx_Erase+0xd4>)
 8007c16:	f023 0304 	bic.w	r3, r3, #4
 8007c1a:	6113      	str	r3, [r2, #16]
 8007c1c:	e031      	b.n	8007c82 <HAL_FLASHEx_Erase+0xbe>
 8007c1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c22:	f7ff ff39 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d12a      	bne.n	8007c82 <HAL_FLASHEx_Erase+0xbe>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	e019      	b.n	8007c70 <HAL_FLASHEx_Erase+0xac>
 8007c3c:	68b8      	ldr	r0, [r7, #8]
 8007c3e:	f000 f849 	bl	8007cd4 <FLASH_PageErase>
 8007c42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c46:	f7ff ff27 	bl	8007a98 <FLASH_WaitForLastOperation>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]
 8007c4e:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <HAL_FLASHEx_Erase+0xd4>)
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	4a11      	ldr	r2, [pc, #68]	; (8007c98 <HAL_FLASHEx_Erase+0xd4>)
 8007c54:	f023 0302 	bic.w	r3, r3, #2
 8007c58:	6113      	str	r3, [r2, #16]
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_FLASHEx_Erase+0xa4>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e00c      	b.n	8007c82 <HAL_FLASHEx_Erase+0xbe>
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6e:	60bb      	str	r3, [r7, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	02da      	lsls	r2, r3, #11
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d3dc      	bcc.n	8007c3c <HAL_FLASHEx_Erase+0x78>
 8007c82:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <HAL_FLASHEx_Erase+0xd0>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	761a      	strb	r2, [r3, #24]
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20004460 	.word	0x20004460
 8007c98:	40022000 	.word	0x40022000

08007c9c <FLASH_MassErase>:
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <FLASH_MassErase+0x30>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	61da      	str	r2, [r3, #28]
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <FLASH_MassErase+0x34>)
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	4a08      	ldr	r2, [pc, #32]	; (8007cd0 <FLASH_MassErase+0x34>)
 8007cb0:	f043 0304 	orr.w	r3, r3, #4
 8007cb4:	6113      	str	r3, [r2, #16]
 8007cb6:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <FLASH_MassErase+0x34>)
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <FLASH_MassErase+0x34>)
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	6113      	str	r3, [r2, #16]
 8007cc2:	bf00      	nop
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bc80      	pop	{r7}
 8007cca:	4770      	bx	lr
 8007ccc:	20004460 	.word	0x20004460
 8007cd0:	40022000 	.word	0x40022000

08007cd4 <FLASH_PageErase>:
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <FLASH_PageErase+0x38>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	61da      	str	r2, [r3, #28]
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <FLASH_PageErase+0x3c>)
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <FLASH_PageErase+0x3c>)
 8007ce8:	f043 0302 	orr.w	r3, r3, #2
 8007cec:	6113      	str	r3, [r2, #16]
 8007cee:	4a08      	ldr	r2, [pc, #32]	; (8007d10 <FLASH_PageErase+0x3c>)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6153      	str	r3, [r2, #20]
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <FLASH_PageErase+0x3c>)
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	4a05      	ldr	r2, [pc, #20]	; (8007d10 <FLASH_PageErase+0x3c>)
 8007cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfe:	6113      	str	r3, [r2, #16]
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	20004460 	.word	0x20004460
 8007d10:	40022000 	.word	0x40022000

08007d14 <HAL_GPIO_Init>:
 8007d14:	b480      	push	{r7}
 8007d16:	b08b      	sub	sp, #44	; 0x2c
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
 8007d22:	2300      	movs	r3, #0
 8007d24:	623b      	str	r3, [r7, #32]
 8007d26:	e179      	b.n	800801c <HAL_GPIO_Init+0x308>
 8007d28:	2201      	movs	r2, #1
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	f040 8168 	bne.w	8008016 <HAL_GPIO_Init+0x302>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4a96      	ldr	r2, [pc, #600]	; (8007fa4 <HAL_GPIO_Init+0x290>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d05e      	beq.n	8007e0e <HAL_GPIO_Init+0xfa>
 8007d50:	4a94      	ldr	r2, [pc, #592]	; (8007fa4 <HAL_GPIO_Init+0x290>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d875      	bhi.n	8007e42 <HAL_GPIO_Init+0x12e>
 8007d56:	4a94      	ldr	r2, [pc, #592]	; (8007fa8 <HAL_GPIO_Init+0x294>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d058      	beq.n	8007e0e <HAL_GPIO_Init+0xfa>
 8007d5c:	4a92      	ldr	r2, [pc, #584]	; (8007fa8 <HAL_GPIO_Init+0x294>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d86f      	bhi.n	8007e42 <HAL_GPIO_Init+0x12e>
 8007d62:	4a92      	ldr	r2, [pc, #584]	; (8007fac <HAL_GPIO_Init+0x298>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d052      	beq.n	8007e0e <HAL_GPIO_Init+0xfa>
 8007d68:	4a90      	ldr	r2, [pc, #576]	; (8007fac <HAL_GPIO_Init+0x298>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d869      	bhi.n	8007e42 <HAL_GPIO_Init+0x12e>
 8007d6e:	4a90      	ldr	r2, [pc, #576]	; (8007fb0 <HAL_GPIO_Init+0x29c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d04c      	beq.n	8007e0e <HAL_GPIO_Init+0xfa>
 8007d74:	4a8e      	ldr	r2, [pc, #568]	; (8007fb0 <HAL_GPIO_Init+0x29c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d863      	bhi.n	8007e42 <HAL_GPIO_Init+0x12e>
 8007d7a:	4a8e      	ldr	r2, [pc, #568]	; (8007fb4 <HAL_GPIO_Init+0x2a0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d046      	beq.n	8007e0e <HAL_GPIO_Init+0xfa>
 8007d80:	4a8c      	ldr	r2, [pc, #560]	; (8007fb4 <HAL_GPIO_Init+0x2a0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d85d      	bhi.n	8007e42 <HAL_GPIO_Init+0x12e>
 8007d86:	2b12      	cmp	r3, #18
 8007d88:	d82a      	bhi.n	8007de0 <HAL_GPIO_Init+0xcc>
 8007d8a:	2b12      	cmp	r3, #18
 8007d8c:	d859      	bhi.n	8007e42 <HAL_GPIO_Init+0x12e>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <HAL_GPIO_Init+0x80>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007e0f 	.word	0x08007e0f
 8007d98:	08007de9 	.word	0x08007de9
 8007d9c:	08007dfb 	.word	0x08007dfb
 8007da0:	08007e3d 	.word	0x08007e3d
 8007da4:	08007e43 	.word	0x08007e43
 8007da8:	08007e43 	.word	0x08007e43
 8007dac:	08007e43 	.word	0x08007e43
 8007db0:	08007e43 	.word	0x08007e43
 8007db4:	08007e43 	.word	0x08007e43
 8007db8:	08007e43 	.word	0x08007e43
 8007dbc:	08007e43 	.word	0x08007e43
 8007dc0:	08007e43 	.word	0x08007e43
 8007dc4:	08007e43 	.word	0x08007e43
 8007dc8:	08007e43 	.word	0x08007e43
 8007dcc:	08007e43 	.word	0x08007e43
 8007dd0:	08007e43 	.word	0x08007e43
 8007dd4:	08007e43 	.word	0x08007e43
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	4a75      	ldr	r2, [pc, #468]	; (8007fb8 <HAL_GPIO_Init+0x2a4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d013      	beq.n	8007e0e <HAL_GPIO_Init+0xfa>
 8007de6:	e02c      	b.n	8007e42 <HAL_GPIO_Init+0x12e>
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	623b      	str	r3, [r7, #32]
 8007dee:	e029      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	3304      	adds	r3, #4
 8007df6:	623b      	str	r3, [r7, #32]
 8007df8:	e024      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	623b      	str	r3, [r7, #32]
 8007e02:	e01f      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	623b      	str	r3, [r7, #32]
 8007e0c:	e01a      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d102      	bne.n	8007e1c <HAL_GPIO_Init+0x108>
 8007e16:	2304      	movs	r3, #4
 8007e18:	623b      	str	r3, [r7, #32]
 8007e1a:	e013      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d105      	bne.n	8007e30 <HAL_GPIO_Init+0x11c>
 8007e24:	2308      	movs	r3, #8
 8007e26:	623b      	str	r3, [r7, #32]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	611a      	str	r2, [r3, #16]
 8007e2e:	e009      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007e30:	2308      	movs	r3, #8
 8007e32:	623b      	str	r3, [r7, #32]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	615a      	str	r2, [r3, #20]
 8007e3a:	e003      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	623b      	str	r3, [r7, #32]
 8007e40:	e000      	b.n	8007e44 <HAL_GPIO_Init+0x130>
 8007e42:	bf00      	nop
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2bff      	cmp	r3, #255	; 0xff
 8007e48:	d801      	bhi.n	8007e4e <HAL_GPIO_Init+0x13a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	e001      	b.n	8007e52 <HAL_GPIO_Init+0x13e>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3304      	adds	r3, #4
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2bff      	cmp	r3, #255	; 0xff
 8007e58:	d802      	bhi.n	8007e60 <HAL_GPIO_Init+0x14c>
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	e002      	b.n	8007e66 <HAL_GPIO_Init+0x152>
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	3b08      	subs	r3, #8
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	210f      	movs	r1, #15
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	fa01 f303 	lsl.w	r3, r1, r3
 8007e74:	43db      	mvns	r3, r3
 8007e76:	401a      	ands	r2, r3
 8007e78:	6a39      	ldr	r1, [r7, #32]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e80:	431a      	orrs	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80c1 	beq.w	8008016 <HAL_GPIO_Init+0x302>
 8007e94:	4b49      	ldr	r3, [pc, #292]	; (8007fbc <HAL_GPIO_Init+0x2a8>)
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	4a48      	ldr	r2, [pc, #288]	; (8007fbc <HAL_GPIO_Init+0x2a8>)
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	6193      	str	r3, [r2, #24]
 8007ea0:	4b46      	ldr	r3, [pc, #280]	; (8007fbc <HAL_GPIO_Init+0x2a8>)
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	4a44      	ldr	r2, [pc, #272]	; (8007fc0 <HAL_GPIO_Init+0x2ac>)
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	f003 0303 	and.w	r3, r3, #3
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	220f      	movs	r2, #15
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a3c      	ldr	r2, [pc, #240]	; (8007fc4 <HAL_GPIO_Init+0x2b0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d01f      	beq.n	8007f18 <HAL_GPIO_Init+0x204>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a3b      	ldr	r2, [pc, #236]	; (8007fc8 <HAL_GPIO_Init+0x2b4>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d019      	beq.n	8007f14 <HAL_GPIO_Init+0x200>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a3a      	ldr	r2, [pc, #232]	; (8007fcc <HAL_GPIO_Init+0x2b8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d013      	beq.n	8007f10 <HAL_GPIO_Init+0x1fc>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a39      	ldr	r2, [pc, #228]	; (8007fd0 <HAL_GPIO_Init+0x2bc>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00d      	beq.n	8007f0c <HAL_GPIO_Init+0x1f8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a38      	ldr	r2, [pc, #224]	; (8007fd4 <HAL_GPIO_Init+0x2c0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d007      	beq.n	8007f08 <HAL_GPIO_Init+0x1f4>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a37      	ldr	r2, [pc, #220]	; (8007fd8 <HAL_GPIO_Init+0x2c4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d101      	bne.n	8007f04 <HAL_GPIO_Init+0x1f0>
 8007f00:	2305      	movs	r3, #5
 8007f02:	e00a      	b.n	8007f1a <HAL_GPIO_Init+0x206>
 8007f04:	2306      	movs	r3, #6
 8007f06:	e008      	b.n	8007f1a <HAL_GPIO_Init+0x206>
 8007f08:	2304      	movs	r3, #4
 8007f0a:	e006      	b.n	8007f1a <HAL_GPIO_Init+0x206>
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e004      	b.n	8007f1a <HAL_GPIO_Init+0x206>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e002      	b.n	8007f1a <HAL_GPIO_Init+0x206>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e000      	b.n	8007f1a <HAL_GPIO_Init+0x206>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f1c:	f002 0203 	and.w	r2, r2, #3
 8007f20:	0092      	lsls	r2, r2, #2
 8007f22:	4093      	lsls	r3, r2
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	4925      	ldr	r1, [pc, #148]	; (8007fc0 <HAL_GPIO_Init+0x2ac>)
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	089b      	lsrs	r3, r3, #2
 8007f30:	3302      	adds	r3, #2
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <HAL_GPIO_Init+0x23e>
 8007f44:	4b25      	ldr	r3, [pc, #148]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	4924      	ldr	r1, [pc, #144]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	608b      	str	r3, [r1, #8]
 8007f50:	e006      	b.n	8007f60 <HAL_GPIO_Init+0x24c>
 8007f52:	4b22      	ldr	r3, [pc, #136]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	4920      	ldr	r1, [pc, #128]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	608b      	str	r3, [r1, #8]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <HAL_GPIO_Init+0x266>
 8007f6c:	4b1b      	ldr	r3, [pc, #108]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	491a      	ldr	r1, [pc, #104]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60cb      	str	r3, [r1, #12]
 8007f78:	e006      	b.n	8007f88 <HAL_GPIO_Init+0x274>
 8007f7a:	4b18      	ldr	r3, [pc, #96]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	43db      	mvns	r3, r3
 8007f82:	4916      	ldr	r1, [pc, #88]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	60cb      	str	r3, [r1, #12]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d025      	beq.n	8007fe0 <HAL_GPIO_Init+0x2cc>
 8007f94:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	4910      	ldr	r1, [pc, #64]	; (8007fdc <HAL_GPIO_Init+0x2c8>)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	604b      	str	r3, [r1, #4]
 8007fa0:	e025      	b.n	8007fee <HAL_GPIO_Init+0x2da>
 8007fa2:	bf00      	nop
 8007fa4:	10320000 	.word	0x10320000
 8007fa8:	10310000 	.word	0x10310000
 8007fac:	10220000 	.word	0x10220000
 8007fb0:	10210000 	.word	0x10210000
 8007fb4:	10120000 	.word	0x10120000
 8007fb8:	10110000 	.word	0x10110000
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	40010800 	.word	0x40010800
 8007fc8:	40010c00 	.word	0x40010c00
 8007fcc:	40011000 	.word	0x40011000
 8007fd0:	40011400 	.word	0x40011400
 8007fd4:	40011800 	.word	0x40011800
 8007fd8:	40011c00 	.word	0x40011c00
 8007fdc:	40010400 	.word	0x40010400
 8007fe0:	4b15      	ldr	r3, [pc, #84]	; (8008038 <HAL_GPIO_Init+0x324>)
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	4913      	ldr	r1, [pc, #76]	; (8008038 <HAL_GPIO_Init+0x324>)
 8007fea:	4013      	ands	r3, r2
 8007fec:	604b      	str	r3, [r1, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d006      	beq.n	8008008 <HAL_GPIO_Init+0x2f4>
 8007ffa:	4b0f      	ldr	r3, [pc, #60]	; (8008038 <HAL_GPIO_Init+0x324>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	490e      	ldr	r1, [pc, #56]	; (8008038 <HAL_GPIO_Init+0x324>)
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]
 8008006:	e006      	b.n	8008016 <HAL_GPIO_Init+0x302>
 8008008:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <HAL_GPIO_Init+0x324>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	43db      	mvns	r3, r3
 8008010:	4909      	ldr	r1, [pc, #36]	; (8008038 <HAL_GPIO_Init+0x324>)
 8008012:	4013      	ands	r3, r2
 8008014:	600b      	str	r3, [r1, #0]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	3301      	adds	r3, #1
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	fa22 f303 	lsr.w	r3, r2, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	f47f ae7e 	bne.w	8007d28 <HAL_GPIO_Init+0x14>
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	372c      	adds	r7, #44	; 0x2c
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr
 8008038:	40010400 	.word	0x40010400

0800803c <HAL_GPIO_ReadPin>:
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	807b      	strh	r3, [r7, #2]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	887b      	ldrh	r3, [r7, #2]
 800804e:	4013      	ands	r3, r2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <HAL_GPIO_ReadPin+0x1e>
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
 8008058:	e001      	b.n	800805e <HAL_GPIO_ReadPin+0x22>
 800805a:	2300      	movs	r3, #0
 800805c:	73fb      	strb	r3, [r7, #15]
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr

0800806a <HAL_GPIO_WritePin>:
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	807b      	strh	r3, [r7, #2]
 8008076:	4613      	mov	r3, r2
 8008078:	707b      	strb	r3, [r7, #1]
 800807a:	787b      	ldrb	r3, [r7, #1]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <HAL_GPIO_WritePin+0x1e>
 8008080:	887a      	ldrh	r2, [r7, #2]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	611a      	str	r2, [r3, #16]
 8008086:	e003      	b.n	8008090 <HAL_GPIO_WritePin+0x26>
 8008088:	887b      	ldrh	r3, [r7, #2]
 800808a:	041a      	lsls	r2, r3, #16
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	611a      	str	r2, [r3, #16]
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	bc80      	pop	{r7}
 8008098:	4770      	bx	lr

0800809a <HAL_GPIO_TogglePin>:
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	807b      	strh	r3, [r7, #2]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	887a      	ldrh	r2, [r7, #2]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4013      	ands	r3, r2
 80080b2:	041a      	lsls	r2, r3, #16
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	43d9      	mvns	r1, r3
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	400b      	ands	r3, r1
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	611a      	str	r2, [r3, #16]
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr

080080cc <HAL_I2C_Init>:
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_I2C_Init+0x12>
 80080da:	2301      	movs	r3, #1
 80080dc:	e12b      	b.n	8008336 <HAL_I2C_Init+0x26a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_I2C_Init+0x2c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7fe fb4a 	bl	800678c <HAL_I2C_MspInit>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2224      	movs	r2, #36	; 0x24
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	f001 fd5a 	bl	8009be8 <HAL_RCC_GetPCLK1Freq>
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	4a81      	ldr	r2, [pc, #516]	; (8008340 <HAL_I2C_Init+0x274>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d807      	bhi.n	8008150 <HAL_I2C_Init+0x84>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4a80      	ldr	r2, [pc, #512]	; (8008344 <HAL_I2C_Init+0x278>)
 8008144:	4293      	cmp	r3, r2
 8008146:	bf94      	ite	ls
 8008148:	2301      	movls	r3, #1
 800814a:	2300      	movhi	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	e006      	b.n	800815e <HAL_I2C_Init+0x92>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4a7d      	ldr	r2, [pc, #500]	; (8008348 <HAL_I2C_Init+0x27c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	bf94      	ite	ls
 8008158:	2301      	movls	r3, #1
 800815a:	2300      	movhi	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_I2C_Init+0x9a>
 8008162:	2301      	movs	r3, #1
 8008164:	e0e7      	b.n	8008336 <HAL_I2C_Init+0x26a>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a78      	ldr	r2, [pc, #480]	; (800834c <HAL_I2C_Init+0x280>)
 800816a:	fba2 2303 	umull	r2, r3, r2, r3
 800816e:	0c9b      	lsrs	r3, r3, #18
 8008170:	60bb      	str	r3, [r7, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	4a6a      	ldr	r2, [pc, #424]	; (8008340 <HAL_I2C_Init+0x274>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d802      	bhi.n	80081a0 <HAL_I2C_Init+0xd4>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3301      	adds	r3, #1
 800819e:	e009      	b.n	80081b4 <HAL_I2C_Init+0xe8>
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081a6:	fb02 f303 	mul.w	r3, r2, r3
 80081aa:	4a69      	ldr	r2, [pc, #420]	; (8008350 <HAL_I2C_Init+0x284>)
 80081ac:	fba2 2303 	umull	r2, r3, r2, r3
 80081b0:	099b      	lsrs	r3, r3, #6
 80081b2:	3301      	adds	r3, #1
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	430b      	orrs	r3, r1
 80081ba:	6213      	str	r3, [r2, #32]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	495c      	ldr	r1, [pc, #368]	; (8008340 <HAL_I2C_Init+0x274>)
 80081d0:	428b      	cmp	r3, r1
 80081d2:	d819      	bhi.n	8008208 <HAL_I2C_Init+0x13c>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	1e59      	subs	r1, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	fbb1 f3f3 	udiv	r3, r1, r3
 80081e2:	1c59      	adds	r1, r3, #1
 80081e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80081e8:	400b      	ands	r3, r1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <HAL_I2C_Init+0x138>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1e59      	subs	r1, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80081fc:	3301      	adds	r3, #1
 80081fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008202:	e051      	b.n	80082a8 <HAL_I2C_Init+0x1dc>
 8008204:	2304      	movs	r3, #4
 8008206:	e04f      	b.n	80082a8 <HAL_I2C_Init+0x1dc>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d111      	bne.n	8008234 <HAL_I2C_Init+0x168>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	1e58      	subs	r0, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6859      	ldr	r1, [r3, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	440b      	add	r3, r1
 800821e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008222:	3301      	adds	r3, #1
 8008224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008228:	2b00      	cmp	r3, #0
 800822a:	bf0c      	ite	eq
 800822c:	2301      	moveq	r3, #1
 800822e:	2300      	movne	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	e012      	b.n	800825a <HAL_I2C_Init+0x18e>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1e58      	subs	r0, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	0099      	lsls	r1, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	fbb0 f3f3 	udiv	r3, r0, r3
 800824a:	3301      	adds	r3, #1
 800824c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008250:	2b00      	cmp	r3, #0
 8008252:	bf0c      	ite	eq
 8008254:	2301      	moveq	r3, #1
 8008256:	2300      	movne	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_I2C_Init+0x196>
 800825e:	2301      	movs	r3, #1
 8008260:	e022      	b.n	80082a8 <HAL_I2C_Init+0x1dc>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10e      	bne.n	8008288 <HAL_I2C_Init+0x1bc>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1e58      	subs	r0, r3, #1
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6859      	ldr	r1, [r3, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	440b      	add	r3, r1
 8008278:	fbb0 f3f3 	udiv	r3, r0, r3
 800827c:	3301      	adds	r3, #1
 800827e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008286:	e00f      	b.n	80082a8 <HAL_I2C_Init+0x1dc>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	1e58      	subs	r0, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6859      	ldr	r1, [r3, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	0099      	lsls	r1, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	fbb0 f3f3 	udiv	r3, r0, r3
 800829e:	3301      	adds	r3, #1
 80082a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	6809      	ldr	r1, [r1, #0]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	61cb      	str	r3, [r1, #28]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69da      	ldr	r2, [r3, #28]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6911      	ldr	r1, [r2, #16]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68d2      	ldr	r2, [r2, #12]
 80082e2:	4311      	orrs	r1, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6812      	ldr	r2, [r2, #0]
 80082e8:	430b      	orrs	r3, r1
 80082ea:	6093      	str	r3, [r2, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695a      	ldr	r2, [r3, #20]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	60da      	str	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	641a      	str	r2, [r3, #64]	; 0x40
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	631a      	str	r2, [r3, #48]	; 0x30
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008334:	2300      	movs	r3, #0
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	000186a0 	.word	0x000186a0
 8008344:	001e847f 	.word	0x001e847f
 8008348:	003d08ff 	.word	0x003d08ff
 800834c:	431bde83 	.word	0x431bde83
 8008350:	10624dd3 	.word	0x10624dd3

08008354 <HAL_I2C_Master_Transmit>:
 8008354:	b580      	push	{r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af02      	add	r7, sp, #8
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	607a      	str	r2, [r7, #4]
 800835e:	461a      	mov	r2, r3
 8008360:	460b      	mov	r3, r1
 8008362:	817b      	strh	r3, [r7, #10]
 8008364:	4613      	mov	r3, r2
 8008366:	813b      	strh	r3, [r7, #8]
 8008368:	f7fe fd2e 	bl	8006dc8 <HAL_GetTick>
 800836c:	6178      	str	r0, [r7, #20]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b20      	cmp	r3, #32
 8008378:	f040 80e0 	bne.w	800853c <HAL_I2C_Master_Transmit+0x1e8>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	2319      	movs	r3, #25
 8008382:	2201      	movs	r2, #1
 8008384:	4970      	ldr	r1, [pc, #448]	; (8008548 <HAL_I2C_Master_Transmit+0x1f4>)
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fe2e 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <HAL_I2C_Master_Transmit+0x42>
 8008392:	2302      	movs	r3, #2
 8008394:	e0d3      	b.n	800853e <HAL_I2C_Master_Transmit+0x1ea>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_I2C_Master_Transmit+0x50>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e0cc      	b.n	800853e <HAL_I2C_Master_Transmit+0x1ea>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d007      	beq.n	80083ca <HAL_I2C_Master_Transmit+0x76>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0201 	orr.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2221      	movs	r2, #33	; 0x21
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2210      	movs	r2, #16
 80083e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	641a      	str	r2, [r3, #64]	; 0x40
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	893a      	ldrh	r2, [r7, #8]
 80083fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008400:	b29a      	uxth	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	851a      	strh	r2, [r3, #40]	; 0x28
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4a50      	ldr	r2, [pc, #320]	; (800854c <HAL_I2C_Master_Transmit+0x1f8>)
 800840a:	62da      	str	r2, [r3, #44]	; 0x2c
 800840c:	8979      	ldrh	r1, [r7, #10]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 fc02 	bl	8008c1c <I2C_MasterRequestWrite>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <HAL_I2C_Master_Transmit+0xce>
 800841e:	2301      	movs	r3, #1
 8008420:	e08d      	b.n	800853e <HAL_I2C_Master_Transmit+0x1ea>
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	e066      	b.n	8008508 <HAL_I2C_Master_Transmit+0x1b4>
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	6a39      	ldr	r1, [r7, #32]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 feec 	bl	800921c <I2C_WaitOnTXEFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00d      	beq.n	8008466 <HAL_I2C_Master_Transmit+0x112>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	2b04      	cmp	r3, #4
 8008450:	d107      	bne.n	8008462 <HAL_I2C_Master_Transmit+0x10e>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	2301      	movs	r3, #1
 8008464:	e06b      	b.n	800853e <HAL_I2C_Master_Transmit+0x1ea>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	611a      	str	r2, [r3, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	851a      	strh	r2, [r3, #40]	; 0x28
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d11b      	bne.n	80084dc <HAL_I2C_Master_Transmit+0x188>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d017      	beq.n	80084dc <HAL_I2C_Master_Transmit+0x188>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	611a      	str	r2, [r3, #16]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	625a      	str	r2, [r3, #36]	; 0x24
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d4:	3b01      	subs	r3, #1
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	851a      	strh	r2, [r3, #40]	; 0x28
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	6a39      	ldr	r1, [r7, #32]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fee3 	bl	80092ac <I2C_WaitOnBTFFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00d      	beq.n	8008508 <HAL_I2C_Master_Transmit+0x1b4>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d107      	bne.n	8008504 <HAL_I2C_Master_Transmit+0x1b0>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	2301      	movs	r3, #1
 8008506:	e01a      	b.n	800853e <HAL_I2C_Master_Transmit+0x1ea>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850c:	2b00      	cmp	r3, #0
 800850e:	d194      	bne.n	800843a <HAL_I2C_Master_Transmit+0xe6>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008538:	2300      	movs	r3, #0
 800853a:	e000      	b.n	800853e <HAL_I2C_Master_Transmit+0x1ea>
 800853c:	2302      	movs	r3, #2
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	00100002 	.word	0x00100002
 800854c:	ffff0000 	.word	0xffff0000

08008550 <HAL_I2C_Master_Receive>:
 8008550:	b580      	push	{r7, lr}
 8008552:	b08c      	sub	sp, #48	; 0x30
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	461a      	mov	r2, r3
 800855c:	460b      	mov	r3, r1
 800855e:	817b      	strh	r3, [r7, #10]
 8008560:	4613      	mov	r3, r2
 8008562:	813b      	strh	r3, [r7, #8]
 8008564:	2300      	movs	r3, #0
 8008566:	623b      	str	r3, [r7, #32]
 8008568:	f7fe fc2e 	bl	8006dc8 <HAL_GetTick>
 800856c:	6278      	str	r0, [r7, #36]	; 0x24
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b20      	cmp	r3, #32
 8008578:	f040 824b 	bne.w	8008a12 <HAL_I2C_Master_Receive+0x4c2>
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	2319      	movs	r3, #25
 8008582:	2201      	movs	r2, #1
 8008584:	497f      	ldr	r1, [pc, #508]	; (8008784 <HAL_I2C_Master_Receive+0x234>)
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 fd2e 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <HAL_I2C_Master_Receive+0x46>
 8008592:	2302      	movs	r3, #2
 8008594:	e23e      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_I2C_Master_Receive+0x54>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e237      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d007      	beq.n	80085ca <HAL_I2C_Master_Receive+0x7a>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f042 0201 	orr.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2222      	movs	r2, #34	; 0x22
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2210      	movs	r2, #16
 80085e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	641a      	str	r2, [r3, #64]	; 0x40
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	625a      	str	r2, [r3, #36]	; 0x24
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	893a      	ldrh	r2, [r7, #8]
 80085fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	851a      	strh	r2, [r3, #40]	; 0x28
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a5f      	ldr	r2, [pc, #380]	; (8008788 <HAL_I2C_Master_Receive+0x238>)
 800860a:	62da      	str	r2, [r3, #44]	; 0x2c
 800860c:	8979      	ldrh	r1, [r7, #10]
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 fb84 	bl	8008d20 <I2C_MasterRequestRead>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <HAL_I2C_Master_Receive+0xd2>
 800861e:	2301      	movs	r3, #1
 8008620:	e1f8      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d113      	bne.n	8008652 <HAL_I2C_Master_Receive+0x102>
 800862a:	2300      	movs	r3, #0
 800862c:	61fb      	str	r3, [r7, #28]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	61fb      	str	r3, [r7, #28]
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	e1cc      	b.n	80089ec <HAL_I2C_Master_Receive+0x49c>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008656:	2b01      	cmp	r3, #1
 8008658:	d11e      	bne.n	8008698 <HAL_I2C_Master_Receive+0x148>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	b672      	cpsid	i
 800866c:	bf00      	nop
 800866e:	2300      	movs	r3, #0
 8008670:	61bb      	str	r3, [r7, #24]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	b662      	cpsie	i
 8008696:	e035      	b.n	8008704 <HAL_I2C_Master_Receive+0x1b4>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800869c:	2b02      	cmp	r3, #2
 800869e:	d11e      	bne.n	80086de <HAL_I2C_Master_Receive+0x18e>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	b672      	cpsid	i
 80086b2:	bf00      	nop
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	b662      	cpsie	i
 80086dc:	e012      	b.n	8008704 <HAL_I2C_Master_Receive+0x1b4>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	2300      	movs	r3, #0
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	e172      	b.n	80089ec <HAL_I2C_Master_Receive+0x49c>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800870a:	2b03      	cmp	r3, #3
 800870c:	f200 811f 	bhi.w	800894e <HAL_I2C_Master_Receive+0x3fe>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008714:	2b01      	cmp	r3, #1
 8008716:	d123      	bne.n	8008760 <HAL_I2C_Master_Receive+0x210>
 8008718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fe0d 	bl	800933c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <HAL_I2C_Master_Receive+0x1dc>
 8008728:	2301      	movs	r3, #1
 800872a:	e173      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691a      	ldr	r2, [r3, #16]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	625a      	str	r2, [r3, #36]	; 0x24
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800875e:	e145      	b.n	80089ec <HAL_I2C_Master_Receive+0x49c>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008764:	2b02      	cmp	r3, #2
 8008766:	d152      	bne.n	800880e <HAL_I2C_Master_Receive+0x2be>
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	2200      	movs	r2, #0
 8008770:	4906      	ldr	r1, [pc, #24]	; (800878c <HAL_I2C_Master_Receive+0x23c>)
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 fc38 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <HAL_I2C_Master_Receive+0x240>
 800877e:	2301      	movs	r3, #1
 8008780:	e148      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 8008782:	bf00      	nop
 8008784:	00100002 	.word	0x00100002
 8008788:	ffff0000 	.word	0xffff0000
 800878c:	00010004 	.word	0x00010004
 8008790:	b672      	cpsid	i
 8008792:	bf00      	nop
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	691a      	ldr	r2, [r3, #16]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	625a      	str	r2, [r3, #36]	; 0x24
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087d6:	b662      	cpsie	i
 80087d8:	bf00      	nop
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	625a      	str	r2, [r3, #36]	; 0x24
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f6:	3b01      	subs	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008802:	b29b      	uxth	r3, r3
 8008804:	3b01      	subs	r3, #1
 8008806:	b29a      	uxth	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800880c:	e0ee      	b.n	80089ec <HAL_I2C_Master_Receive+0x49c>
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	2200      	movs	r2, #0
 8008816:	4981      	ldr	r1, [pc, #516]	; (8008a1c <HAL_I2C_Master_Receive+0x4cc>)
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 fbe5 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <HAL_I2C_Master_Receive+0x2d8>
 8008824:	2301      	movs	r3, #1
 8008826:	e0f5      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	b672      	cpsid	i
 800883a:	bf00      	nop
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	b2d2      	uxtb	r2, r2
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	625a      	str	r2, [r3, #36]	; 0x24
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	851a      	strh	r2, [r3, #40]	; 0x28
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008864:	b29b      	uxth	r3, r3
 8008866:	3b01      	subs	r3, #1
 8008868:	b29a      	uxth	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800886e:	4b6c      	ldr	r3, [pc, #432]	; (8008a20 <HAL_I2C_Master_Receive+0x4d0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	08db      	lsrs	r3, r3, #3
 8008874:	4a6b      	ldr	r2, [pc, #428]	; (8008a24 <HAL_I2C_Master_Receive+0x4d4>)
 8008876:	fba2 2303 	umull	r2, r3, r2, r3
 800887a:	0a1a      	lsrs	r2, r3, #8
 800887c:	4613      	mov	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	00da      	lsls	r2, r3, #3
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	623b      	str	r3, [r7, #32]
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	3b01      	subs	r3, #1
 800888c:	623b      	str	r3, [r7, #32]
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d118      	bne.n	80088c6 <HAL_I2C_Master_Receive+0x376>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	631a      	str	r2, [r3, #48]	; 0x30
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	f043 0220 	orr.w	r2, r3, #32
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	641a      	str	r2, [r3, #64]	; 0x40
 80088b6:	b662      	cpsie	i
 80088b8:	bf00      	nop
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088c2:	2301      	movs	r3, #1
 80088c4:	e0a6      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d1d9      	bne.n	8008888 <HAL_I2C_Master_Receive+0x338>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	625a      	str	r2, [r3, #36]	; 0x24
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008900:	3b01      	subs	r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	851a      	strh	r2, [r3, #40]	; 0x28
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008916:	b662      	cpsie	i
 8008918:	bf00      	nop
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	701a      	strb	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	625a      	str	r2, [r3, #36]	; 0x24
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008936:	3b01      	subs	r3, #1
 8008938:	b29a      	uxth	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	851a      	strh	r2, [r3, #40]	; 0x28
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800894c:	e04e      	b.n	80089ec <HAL_I2C_Master_Receive+0x49c>
 800894e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 fcf2 	bl	800933c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <HAL_I2C_Master_Receive+0x412>
 800895e:	2301      	movs	r3, #1
 8008960:	e058      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691a      	ldr	r2, [r3, #16]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	625a      	str	r2, [r3, #36]	; 0x24
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	851a      	strh	r2, [r3, #40]	; 0x28
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d124      	bne.n	80089ec <HAL_I2C_Master_Receive+0x49c>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d107      	bne.n	80089ba <HAL_I2C_Master_Receive+0x46a>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	b2d2      	uxtb	r2, r2
 80089c6:	701a      	strb	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	625a      	str	r2, [r3, #36]	; 0x24
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	851a      	strh	r2, [r3, #40]	; 0x28
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f47f ae88 	bne.w	8008706 <HAL_I2C_Master_Receive+0x1b6>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e000      	b.n	8008a14 <HAL_I2C_Master_Receive+0x4c4>
 8008a12:	2302      	movs	r3, #2
 8008a14:	4618      	mov	r0, r3
 8008a16:	3728      	adds	r7, #40	; 0x28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	00010004 	.word	0x00010004
 8008a20:	20000010 	.word	0x20000010
 8008a24:	14f8b589 	.word	0x14f8b589

08008a28 <HAL_I2C_Mem_Write>:
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	461a      	mov	r2, r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	817b      	strh	r3, [r7, #10]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	813b      	strh	r3, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	80fb      	strh	r3, [r7, #6]
 8008a42:	f7fe f9c1 	bl	8006dc8 <HAL_GetTick>
 8008a46:	6178      	str	r0, [r7, #20]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	f040 80d9 	bne.w	8008c08 <HAL_I2C_Mem_Write+0x1e0>
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	2319      	movs	r3, #25
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	496d      	ldr	r1, [pc, #436]	; (8008c14 <HAL_I2C_Mem_Write+0x1ec>)
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 fac1 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <HAL_I2C_Mem_Write+0x48>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e0cc      	b.n	8008c0a <HAL_I2C_Mem_Write+0x1e2>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d101      	bne.n	8008a7e <HAL_I2C_Mem_Write+0x56>
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	e0c5      	b.n	8008c0a <HAL_I2C_Mem_Write+0x1e2>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d007      	beq.n	8008aa4 <HAL_I2C_Mem_Write+0x7c>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0201 	orr.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2221      	movs	r2, #33	; 0x21
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2240      	movs	r2, #64	; 0x40
 8008ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	641a      	str	r2, [r3, #64]	; 0x40
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a3a      	ldr	r2, [r7, #32]
 8008ace:	625a      	str	r2, [r3, #36]	; 0x24
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	851a      	strh	r2, [r3, #40]	; 0x28
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4a4d      	ldr	r2, [pc, #308]	; (8008c18 <HAL_I2C_Mem_Write+0x1f0>)
 8008ae4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ae6:	88f8      	ldrh	r0, [r7, #6]
 8008ae8:	893a      	ldrh	r2, [r7, #8]
 8008aea:	8979      	ldrh	r1, [r7, #10]
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	4603      	mov	r3, r0
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f9e0 	bl	8008ebc <I2C_RequestMemoryWrite>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d052      	beq.n	8008ba8 <HAL_I2C_Mem_Write+0x180>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e081      	b.n	8008c0a <HAL_I2C_Mem_Write+0x1e2>
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 fb86 	bl	800921c <I2C_WaitOnTXEFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00d      	beq.n	8008b32 <HAL_I2C_Mem_Write+0x10a>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d107      	bne.n	8008b2e <HAL_I2C_Mem_Write+0x106>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e06b      	b.n	8008c0a <HAL_I2C_Mem_Write+0x1e2>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	781a      	ldrb	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	611a      	str	r2, [r3, #16]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	625a      	str	r2, [r3, #36]	; 0x24
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	851a      	strh	r2, [r3, #40]	; 0x28
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d11b      	bne.n	8008ba8 <HAL_I2C_Mem_Write+0x180>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d017      	beq.n	8008ba8 <HAL_I2C_Mem_Write+0x180>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	781a      	ldrb	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	611a      	str	r2, [r3, #16]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	1c5a      	adds	r2, r3, #1
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	851a      	strh	r2, [r3, #40]	; 0x28
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1aa      	bne.n	8008b06 <HAL_I2C_Mem_Write+0xde>
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fb79 	bl	80092ac <I2C_WaitOnBTFFlagUntilTimeout>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00d      	beq.n	8008bdc <HAL_I2C_Mem_Write+0x1b4>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d107      	bne.n	8008bd8 <HAL_I2C_Mem_Write+0x1b0>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e016      	b.n	8008c0a <HAL_I2C_Mem_Write+0x1e2>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c04:	2300      	movs	r3, #0
 8008c06:	e000      	b.n	8008c0a <HAL_I2C_Mem_Write+0x1e2>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	00100002 	.word	0x00100002
 8008c18:	ffff0000 	.word	0xffff0000

08008c1c <I2C_MasterRequestWrite>:
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	817b      	strh	r3, [r7, #10]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d006      	beq.n	8008c46 <I2C_MasterRequestWrite+0x2a>
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d003      	beq.n	8008c46 <I2C_MasterRequestWrite+0x2a>
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c44:	d108      	bne.n	8008c58 <I2C_MasterRequestWrite+0x3c>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e00b      	b.n	8008c70 <I2C_MasterRequestWrite+0x54>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5c:	2b12      	cmp	r3, #18
 8008c5e:	d107      	bne.n	8008c70 <I2C_MasterRequestWrite+0x54>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f9b3 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00d      	beq.n	8008ca4 <I2C_MasterRequestWrite+0x88>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c96:	d103      	bne.n	8008ca0 <I2C_MasterRequestWrite+0x84>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e035      	b.n	8008d10 <I2C_MasterRequestWrite+0xf4>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cac:	d108      	bne.n	8008cc0 <I2C_MasterRequestWrite+0xa4>
 8008cae:	897b      	ldrh	r3, [r7, #10]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008cbc:	611a      	str	r2, [r3, #16]
 8008cbe:	e01b      	b.n	8008cf8 <I2C_MasterRequestWrite+0xdc>
 8008cc0:	897b      	ldrh	r3, [r7, #10]
 8008cc2:	11db      	asrs	r3, r3, #7
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0306 	and.w	r3, r3, #6
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	f063 030f 	orn	r3, r3, #15
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	611a      	str	r2, [r3, #16]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	490e      	ldr	r1, [pc, #56]	; (8008d18 <I2C_MasterRequestWrite+0xfc>)
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 f9fc 	bl	80090dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <I2C_MasterRequestWrite+0xd2>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e010      	b.n	8008d10 <I2C_MasterRequestWrite+0xf4>
 8008cee:	897b      	ldrh	r3, [r7, #10]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	611a      	str	r2, [r3, #16]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4907      	ldr	r1, [pc, #28]	; (8008d1c <I2C_MasterRequestWrite+0x100>)
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 f9ec 	bl	80090dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <I2C_MasterRequestWrite+0xf2>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <I2C_MasterRequestWrite+0xf4>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	00010008 	.word	0x00010008
 8008d1c:	00010002 	.word	0x00010002

08008d20 <I2C_MasterRequestRead>:
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	817b      	strh	r3, [r7, #10]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d006      	beq.n	8008d5a <I2C_MasterRequestRead+0x3a>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d003      	beq.n	8008d5a <I2C_MasterRequestRead+0x3a>
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d58:	d108      	bne.n	8008d6c <I2C_MasterRequestRead+0x4c>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	e00b      	b.n	8008d84 <I2C_MasterRequestRead+0x64>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	2b11      	cmp	r3, #17
 8008d72:	d107      	bne.n	8008d84 <I2C_MasterRequestRead+0x64>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f929 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00d      	beq.n	8008db8 <I2C_MasterRequestRead+0x98>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008daa:	d103      	bne.n	8008db4 <I2C_MasterRequestRead+0x94>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008db2:	641a      	str	r2, [r3, #64]	; 0x40
 8008db4:	2303      	movs	r3, #3
 8008db6:	e079      	b.n	8008eac <I2C_MasterRequestRead+0x18c>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc0:	d108      	bne.n	8008dd4 <I2C_MasterRequestRead+0xb4>
 8008dc2:	897b      	ldrh	r3, [r7, #10]
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	611a      	str	r2, [r3, #16]
 8008dd2:	e05f      	b.n	8008e94 <I2C_MasterRequestRead+0x174>
 8008dd4:	897b      	ldrh	r3, [r7, #10]
 8008dd6:	11db      	asrs	r3, r3, #7
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 0306 	and.w	r3, r3, #6
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f063 030f 	orn	r3, r3, #15
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	611a      	str	r2, [r3, #16]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4930      	ldr	r1, [pc, #192]	; (8008eb4 <I2C_MasterRequestRead+0x194>)
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 f972 	bl	80090dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <I2C_MasterRequestRead+0xe2>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e054      	b.n	8008eac <I2C_MasterRequestRead+0x18c>
 8008e02:	897b      	ldrh	r3, [r7, #10]
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	611a      	str	r2, [r3, #16]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4929      	ldr	r1, [pc, #164]	; (8008eb8 <I2C_MasterRequestRead+0x198>)
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f962 	bl	80090dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <I2C_MasterRequestRead+0x102>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e044      	b.n	8008eac <I2C_MasterRequestRead+0x18c>
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f8c7 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00d      	beq.n	8008e7c <I2C_MasterRequestRead+0x15c>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d103      	bne.n	8008e78 <I2C_MasterRequestRead+0x158>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e76:	641a      	str	r2, [r3, #64]	; 0x40
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e017      	b.n	8008eac <I2C_MasterRequestRead+0x18c>
 8008e7c:	897b      	ldrh	r3, [r7, #10]
 8008e7e:	11db      	asrs	r3, r3, #7
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	f003 0306 	and.w	r3, r3, #6
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f063 030e 	orn	r3, r3, #14
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	611a      	str	r2, [r3, #16]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	4907      	ldr	r1, [pc, #28]	; (8008eb8 <I2C_MasterRequestRead+0x198>)
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 f91e 	bl	80090dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <I2C_MasterRequestRead+0x18a>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <I2C_MasterRequestRead+0x18c>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	00010008 	.word	0x00010008
 8008eb8:	00010002 	.word	0x00010002

08008ebc <I2C_RequestMemoryWrite>:
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4603      	mov	r3, r0
 8008ecc:	817b      	strh	r3, [r7, #10]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	813b      	strh	r3, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 f878 	bl	8008fe8 <I2C_WaitOnFlagUntilTimeout>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00d      	beq.n	8008f1a <I2C_RequestMemoryWrite+0x5e>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f0c:	d103      	bne.n	8008f16 <I2C_RequestMemoryWrite+0x5a>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f14:	641a      	str	r2, [r3, #64]	; 0x40
 8008f16:	2303      	movs	r3, #3
 8008f18:	e05f      	b.n	8008fda <I2C_RequestMemoryWrite+0x11e>
 8008f1a:	897b      	ldrh	r3, [r7, #10]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f28:	611a      	str	r2, [r3, #16]
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	6a3a      	ldr	r2, [r7, #32]
 8008f2e:	492d      	ldr	r1, [pc, #180]	; (8008fe4 <I2C_RequestMemoryWrite+0x128>)
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 f8d3 	bl	80090dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <I2C_RequestMemoryWrite+0x84>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e04c      	b.n	8008fda <I2C_RequestMemoryWrite+0x11e>
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f58:	6a39      	ldr	r1, [r7, #32]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 f95e 	bl	800921c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00d      	beq.n	8008f82 <I2C_RequestMemoryWrite+0xc6>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d107      	bne.n	8008f7e <I2C_RequestMemoryWrite+0xc2>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e02b      	b.n	8008fda <I2C_RequestMemoryWrite+0x11e>
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d105      	bne.n	8008f94 <I2C_RequestMemoryWrite+0xd8>
 8008f88:	893b      	ldrh	r3, [r7, #8]
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	611a      	str	r2, [r3, #16]
 8008f92:	e021      	b.n	8008fd8 <I2C_RequestMemoryWrite+0x11c>
 8008f94:	893b      	ldrh	r3, [r7, #8]
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	611a      	str	r2, [r3, #16]
 8008fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa4:	6a39      	ldr	r1, [r7, #32]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f938 	bl	800921c <I2C_WaitOnTXEFlagUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00d      	beq.n	8008fce <I2C_RequestMemoryWrite+0x112>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d107      	bne.n	8008fca <I2C_RequestMemoryWrite+0x10e>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e005      	b.n	8008fda <I2C_RequestMemoryWrite+0x11e>
 8008fce:	893b      	ldrh	r3, [r7, #8]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	611a      	str	r2, [r3, #16]
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	00010002 	.word	0x00010002

08008fe8 <I2C_WaitOnFlagUntilTimeout>:
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	71fb      	strb	r3, [r7, #7]
 8008ff8:	e048      	b.n	800908c <I2C_WaitOnFlagUntilTimeout+0xa4>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009000:	d044      	beq.n	800908c <I2C_WaitOnFlagUntilTimeout+0xa4>
 8009002:	f7fd fee1 	bl	8006dc8 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d302      	bcc.n	8009018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d139      	bne.n	800908c <I2C_WaitOnFlagUntilTimeout+0xa4>
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	0c1b      	lsrs	r3, r3, #16
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b01      	cmp	r3, #1
 8009020:	d10d      	bne.n	800903e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	43da      	mvns	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4013      	ands	r3, r2
 800902e:	b29b      	uxth	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	e00c      	b.n	8009058 <I2C_WaitOnFlagUntilTimeout+0x70>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	43da      	mvns	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4013      	ands	r3, r2
 800904a:	b29b      	uxth	r3, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	bf0c      	ite	eq
 8009050:	2301      	moveq	r3, #1
 8009052:	2300      	movne	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	429a      	cmp	r2, r3
 800905c:	d116      	bne.n	800908c <I2C_WaitOnFlagUntilTimeout+0xa4>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	f043 0220 	orr.w	r2, r3, #32
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	641a      	str	r2, [r3, #64]	; 0x40
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009088:	2301      	movs	r3, #1
 800908a:	e023      	b.n	80090d4 <I2C_WaitOnFlagUntilTimeout+0xec>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d10d      	bne.n	80090b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	43da      	mvns	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4013      	ands	r3, r2
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bf0c      	ite	eq
 80090a8:	2301      	moveq	r3, #1
 80090aa:	2300      	movne	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	e00c      	b.n	80090cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	43da      	mvns	r2, r3
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4013      	ands	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bf0c      	ite	eq
 80090c4:	2301      	moveq	r3, #1
 80090c6:	2300      	movne	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	461a      	mov	r2, r3
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d093      	beq.n	8008ffa <I2C_WaitOnFlagUntilTimeout+0x12>
 80090d2:	2300      	movs	r3, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
 80090ea:	e071      	b.n	80091d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090fa:	d123      	bne.n	8009144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009114:	615a      	str	r2, [r3, #20]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	631a      	str	r2, [r3, #48]	; 0x30
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2220      	movs	r2, #32
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009130:	f043 0204 	orr.w	r2, r3, #4
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	641a      	str	r2, [r3, #64]	; 0x40
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009140:	2301      	movs	r3, #1
 8009142:	e067      	b.n	8009214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d041      	beq.n	80091d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800914c:	f7fd fe3c 	bl	8006dc8 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	429a      	cmp	r2, r3
 800915a:	d302      	bcc.n	8009162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d136      	bne.n	80091d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	0c1b      	lsrs	r3, r3, #16
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b01      	cmp	r3, #1
 800916a:	d10c      	bne.n	8009186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	43da      	mvns	r2, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4013      	ands	r3, r2
 8009178:	b29b      	uxth	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	bf14      	ite	ne
 800917e:	2301      	movne	r3, #1
 8009180:	2300      	moveq	r3, #0
 8009182:	b2db      	uxtb	r3, r3
 8009184:	e00b      	b.n	800919e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	43da      	mvns	r2, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	4013      	ands	r3, r2
 8009192:	b29b      	uxth	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	bf14      	ite	ne
 8009198:	2301      	movne	r3, #1
 800919a:	2300      	moveq	r3, #0
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d016      	beq.n	80091d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	631a      	str	r2, [r3, #48]	; 0x30
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	f043 0220 	orr.w	r2, r3, #32
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	641a      	str	r2, [r3, #64]	; 0x40
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80091cc:	2301      	movs	r3, #1
 80091ce:	e021      	b.n	8009214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	0c1b      	lsrs	r3, r3, #16
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d10c      	bne.n	80091f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	43da      	mvns	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4013      	ands	r3, r2
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf14      	ite	ne
 80091ec:	2301      	movne	r3, #1
 80091ee:	2300      	moveq	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	e00b      	b.n	800920c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	43da      	mvns	r2, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4013      	ands	r3, r2
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	bf14      	ite	ne
 8009206:	2301      	movne	r3, #1
 8009208:	2300      	moveq	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	f47f af6d 	bne.w	80090ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8009212:	2300      	movs	r3, #0
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <I2C_WaitOnTXEFlagUntilTimeout>:
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	e034      	b.n	8009294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f8e3 	bl	80093f6 <I2C_IsAcknowledgeFailed>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8009236:	2301      	movs	r3, #1
 8009238:	e034      	b.n	80092a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009240:	d028      	beq.n	8009294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8009242:	f7fd fdc1 	bl	8006dc8 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	429a      	cmp	r2, r3
 8009250:	d302      	bcc.n	8009258 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d11d      	bne.n	8009294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009262:	2b80      	cmp	r3, #128	; 0x80
 8009264:	d016      	beq.n	8009294 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	631a      	str	r2, [r3, #48]	; 0x30
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	f043 0220 	orr.w	r2, r3, #32
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	641a      	str	r2, [r3, #64]	; 0x40
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009290:	2301      	movs	r3, #1
 8009292:	e007      	b.n	80092a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929e:	2b80      	cmp	r3, #128	; 0x80
 80092a0:	d1c3      	bne.n	800922a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80092a2:	2300      	movs	r3, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <I2C_WaitOnBTFFlagUntilTimeout>:
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	e034      	b.n	8009324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 f89b 	bl	80093f6 <I2C_IsAcknowledgeFailed>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e034      	b.n	8009334 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d028      	beq.n	8009324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80092d2:	f7fd fd79 	bl	8006dc8 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d302      	bcc.n	80092e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d11d      	bne.n	8009324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d016      	beq.n	8009324 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	631a      	str	r2, [r3, #48]	; 0x30
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009310:	f043 0220 	orr.w	r2, r3, #32
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	641a      	str	r2, [r3, #64]	; 0x40
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009320:	2301      	movs	r3, #1
 8009322:	e007      	b.n	8009334 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	2b04      	cmp	r3, #4
 8009330:	d1c3      	bne.n	80092ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8009332:	2300      	movs	r3, #0
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <I2C_WaitOnRXNEFlagUntilTimeout>:
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	e049      	b.n	80093de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	f003 0310 	and.w	r3, r3, #16
 8009354:	2b10      	cmp	r3, #16
 8009356:	d119      	bne.n	800938c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0210 	mvn.w	r2, #16
 8009360:	615a      	str	r2, [r3, #20]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	631a      	str	r2, [r3, #48]	; 0x30
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2220      	movs	r2, #32
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	641a      	str	r2, [r3, #64]	; 0x40
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009388:	2301      	movs	r3, #1
 800938a:	e030      	b.n	80093ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 800938c:	f7fd fd1c 	bl	8006dc8 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	429a      	cmp	r2, r3
 800939a:	d302      	bcc.n	80093a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d11d      	bne.n	80093de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d016      	beq.n	80093de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	631a      	str	r2, [r3, #48]	; 0x30
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	f043 0220 	orr.w	r2, r3, #32
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	641a      	str	r2, [r3, #64]	; 0x40
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80093da:	2301      	movs	r3, #1
 80093dc:	e007      	b.n	80093ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d1ae      	bne.n	800934a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80093ec:	2300      	movs	r3, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <I2C_IsAcknowledgeFailed>:
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800940c:	d11b      	bne.n	8009446 <I2C_IsAcknowledgeFailed+0x50>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009416:	615a      	str	r2, [r3, #20]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	631a      	str	r2, [r3, #48]	; 0x30
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	f043 0204 	orr.w	r2, r3, #4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	641a      	str	r2, [r3, #64]	; 0x40
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <I2C_IsAcknowledgeFailed+0x52>
 8009446:	2300      	movs	r3, #0
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	bc80      	pop	{r7}
 8009450:	4770      	bx	lr
	...

08009454 <HAL_RCC_OscConfig>:
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_RCC_OscConfig+0x12>
 8009462:	2301      	movs	r3, #1
 8009464:	e272      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 8087 	beq.w	8009582 <HAL_RCC_OscConfig+0x12e>
 8009474:	4b92      	ldr	r3, [pc, #584]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f003 030c 	and.w	r3, r3, #12
 800947c:	2b04      	cmp	r3, #4
 800947e:	d00c      	beq.n	800949a <HAL_RCC_OscConfig+0x46>
 8009480:	4b8f      	ldr	r3, [pc, #572]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f003 030c 	and.w	r3, r3, #12
 8009488:	2b08      	cmp	r3, #8
 800948a:	d112      	bne.n	80094b2 <HAL_RCC_OscConfig+0x5e>
 800948c:	4b8c      	ldr	r3, [pc, #560]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009498:	d10b      	bne.n	80094b2 <HAL_RCC_OscConfig+0x5e>
 800949a:	4b89      	ldr	r3, [pc, #548]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d06c      	beq.n	8009580 <HAL_RCC_OscConfig+0x12c>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d168      	bne.n	8009580 <HAL_RCC_OscConfig+0x12c>
 80094ae:	2301      	movs	r3, #1
 80094b0:	e24c      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ba:	d106      	bne.n	80094ca <HAL_RCC_OscConfig+0x76>
 80094bc:	4b80      	ldr	r3, [pc, #512]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a7f      	ldr	r2, [pc, #508]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	e02e      	b.n	8009528 <HAL_RCC_OscConfig+0xd4>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10c      	bne.n	80094ec <HAL_RCC_OscConfig+0x98>
 80094d2:	4b7b      	ldr	r3, [pc, #492]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a7a      	ldr	r2, [pc, #488]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	4b78      	ldr	r3, [pc, #480]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a77      	ldr	r2, [pc, #476]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	e01d      	b.n	8009528 <HAL_RCC_OscConfig+0xd4>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094f4:	d10c      	bne.n	8009510 <HAL_RCC_OscConfig+0xbc>
 80094f6:	4b72      	ldr	r3, [pc, #456]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a71      	ldr	r2, [pc, #452]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80094fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	4b6f      	ldr	r3, [pc, #444]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a6e      	ldr	r2, [pc, #440]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	e00b      	b.n	8009528 <HAL_RCC_OscConfig+0xd4>
 8009510:	4b6b      	ldr	r3, [pc, #428]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a6a      	ldr	r2, [pc, #424]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	4b68      	ldr	r3, [pc, #416]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a67      	ldr	r2, [pc, #412]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d013      	beq.n	8009558 <HAL_RCC_OscConfig+0x104>
 8009530:	f7fd fc4a 	bl	8006dc8 <HAL_GetTick>
 8009534:	6138      	str	r0, [r7, #16]
 8009536:	e008      	b.n	800954a <HAL_RCC_OscConfig+0xf6>
 8009538:	f7fd fc46 	bl	8006dc8 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b64      	cmp	r3, #100	; 0x64
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0xf6>
 8009546:	2303      	movs	r3, #3
 8009548:	e200      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 800954a:	4b5d      	ldr	r3, [pc, #372]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f0      	beq.n	8009538 <HAL_RCC_OscConfig+0xe4>
 8009556:	e014      	b.n	8009582 <HAL_RCC_OscConfig+0x12e>
 8009558:	f7fd fc36 	bl	8006dc8 <HAL_GetTick>
 800955c:	6138      	str	r0, [r7, #16]
 800955e:	e008      	b.n	8009572 <HAL_RCC_OscConfig+0x11e>
 8009560:	f7fd fc32 	bl	8006dc8 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b64      	cmp	r3, #100	; 0x64
 800956c:	d901      	bls.n	8009572 <HAL_RCC_OscConfig+0x11e>
 800956e:	2303      	movs	r3, #3
 8009570:	e1ec      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 8009572:	4b53      	ldr	r3, [pc, #332]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f0      	bne.n	8009560 <HAL_RCC_OscConfig+0x10c>
 800957e:	e000      	b.n	8009582 <HAL_RCC_OscConfig+0x12e>
 8009580:	bf00      	nop
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d063      	beq.n	8009656 <HAL_RCC_OscConfig+0x202>
 800958e:	4b4c      	ldr	r3, [pc, #304]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f003 030c 	and.w	r3, r3, #12
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <HAL_RCC_OscConfig+0x15e>
 800959a:	4b49      	ldr	r3, [pc, #292]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f003 030c 	and.w	r3, r3, #12
 80095a2:	2b08      	cmp	r3, #8
 80095a4:	d11c      	bne.n	80095e0 <HAL_RCC_OscConfig+0x18c>
 80095a6:	4b46      	ldr	r3, [pc, #280]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d116      	bne.n	80095e0 <HAL_RCC_OscConfig+0x18c>
 80095b2:	4b43      	ldr	r3, [pc, #268]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d005      	beq.n	80095ca <HAL_RCC_OscConfig+0x176>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d001      	beq.n	80095ca <HAL_RCC_OscConfig+0x176>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e1c0      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 80095ca:	4b3d      	ldr	r3, [pc, #244]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	4939      	ldr	r1, [pc, #228]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	600b      	str	r3, [r1, #0]
 80095de:	e03a      	b.n	8009656 <HAL_RCC_OscConfig+0x202>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d020      	beq.n	800962a <HAL_RCC_OscConfig+0x1d6>
 80095e8:	4b36      	ldr	r3, [pc, #216]	; (80096c4 <HAL_RCC_OscConfig+0x270>)
 80095ea:	2201      	movs	r2, #1
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f7fd fbeb 	bl	8006dc8 <HAL_GetTick>
 80095f2:	6138      	str	r0, [r7, #16]
 80095f4:	e008      	b.n	8009608 <HAL_RCC_OscConfig+0x1b4>
 80095f6:	f7fd fbe7 	bl	8006dc8 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	2b02      	cmp	r3, #2
 8009602:	d901      	bls.n	8009608 <HAL_RCC_OscConfig+0x1b4>
 8009604:	2303      	movs	r3, #3
 8009606:	e1a1      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 8009608:	4b2d      	ldr	r3, [pc, #180]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0f0      	beq.n	80095f6 <HAL_RCC_OscConfig+0x1a2>
 8009614:	4b2a      	ldr	r3, [pc, #168]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	4927      	ldr	r1, [pc, #156]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 8009624:	4313      	orrs	r3, r2
 8009626:	600b      	str	r3, [r1, #0]
 8009628:	e015      	b.n	8009656 <HAL_RCC_OscConfig+0x202>
 800962a:	4b26      	ldr	r3, [pc, #152]	; (80096c4 <HAL_RCC_OscConfig+0x270>)
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	f7fd fbca 	bl	8006dc8 <HAL_GetTick>
 8009634:	6138      	str	r0, [r7, #16]
 8009636:	e008      	b.n	800964a <HAL_RCC_OscConfig+0x1f6>
 8009638:	f7fd fbc6 	bl	8006dc8 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	2b02      	cmp	r3, #2
 8009644:	d901      	bls.n	800964a <HAL_RCC_OscConfig+0x1f6>
 8009646:	2303      	movs	r3, #3
 8009648:	e180      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 800964a:	4b1d      	ldr	r3, [pc, #116]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1f0      	bne.n	8009638 <HAL_RCC_OscConfig+0x1e4>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	2b00      	cmp	r3, #0
 8009660:	d03a      	beq.n	80096d8 <HAL_RCC_OscConfig+0x284>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d019      	beq.n	800969e <HAL_RCC_OscConfig+0x24a>
 800966a:	4b17      	ldr	r3, [pc, #92]	; (80096c8 <HAL_RCC_OscConfig+0x274>)
 800966c:	2201      	movs	r2, #1
 800966e:	601a      	str	r2, [r3, #0]
 8009670:	f7fd fbaa 	bl	8006dc8 <HAL_GetTick>
 8009674:	6138      	str	r0, [r7, #16]
 8009676:	e008      	b.n	800968a <HAL_RCC_OscConfig+0x236>
 8009678:	f7fd fba6 	bl	8006dc8 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d901      	bls.n	800968a <HAL_RCC_OscConfig+0x236>
 8009686:	2303      	movs	r3, #3
 8009688:	e160      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 800968a:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <HAL_RCC_OscConfig+0x26c>)
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0f0      	beq.n	8009678 <HAL_RCC_OscConfig+0x224>
 8009696:	2001      	movs	r0, #1
 8009698:	f000 face 	bl	8009c38 <RCC_Delay>
 800969c:	e01c      	b.n	80096d8 <HAL_RCC_OscConfig+0x284>
 800969e:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <HAL_RCC_OscConfig+0x274>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	f7fd fb90 	bl	8006dc8 <HAL_GetTick>
 80096a8:	6138      	str	r0, [r7, #16]
 80096aa:	e00f      	b.n	80096cc <HAL_RCC_OscConfig+0x278>
 80096ac:	f7fd fb8c 	bl	8006dc8 <HAL_GetTick>
 80096b0:	4602      	mov	r2, r0
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d908      	bls.n	80096cc <HAL_RCC_OscConfig+0x278>
 80096ba:	2303      	movs	r3, #3
 80096bc:	e146      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 80096be:	bf00      	nop
 80096c0:	40021000 	.word	0x40021000
 80096c4:	42420000 	.word	0x42420000
 80096c8:	42420480 	.word	0x42420480
 80096cc:	4b92      	ldr	r3, [pc, #584]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e9      	bne.n	80096ac <HAL_RCC_OscConfig+0x258>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 80a6 	beq.w	8009832 <HAL_RCC_OscConfig+0x3de>
 80096e6:	2300      	movs	r3, #0
 80096e8:	75fb      	strb	r3, [r7, #23]
 80096ea:	4b8b      	ldr	r3, [pc, #556]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10d      	bne.n	8009712 <HAL_RCC_OscConfig+0x2be>
 80096f6:	4b88      	ldr	r3, [pc, #544]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	4a87      	ldr	r2, [pc, #540]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80096fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009700:	61d3      	str	r3, [r2, #28]
 8009702:	4b85      	ldr	r3, [pc, #532]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800970a:	60bb      	str	r3, [r7, #8]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2301      	movs	r3, #1
 8009710:	75fb      	strb	r3, [r7, #23]
 8009712:	4b82      	ldr	r3, [pc, #520]	; (800991c <HAL_RCC_OscConfig+0x4c8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971a:	2b00      	cmp	r3, #0
 800971c:	d118      	bne.n	8009750 <HAL_RCC_OscConfig+0x2fc>
 800971e:	4b7f      	ldr	r3, [pc, #508]	; (800991c <HAL_RCC_OscConfig+0x4c8>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a7e      	ldr	r2, [pc, #504]	; (800991c <HAL_RCC_OscConfig+0x4c8>)
 8009724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	f7fd fb4d 	bl	8006dc8 <HAL_GetTick>
 800972e:	6138      	str	r0, [r7, #16]
 8009730:	e008      	b.n	8009744 <HAL_RCC_OscConfig+0x2f0>
 8009732:	f7fd fb49 	bl	8006dc8 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b64      	cmp	r3, #100	; 0x64
 800973e:	d901      	bls.n	8009744 <HAL_RCC_OscConfig+0x2f0>
 8009740:	2303      	movs	r3, #3
 8009742:	e103      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 8009744:	4b75      	ldr	r3, [pc, #468]	; (800991c <HAL_RCC_OscConfig+0x4c8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974c:	2b00      	cmp	r3, #0
 800974e:	d0f0      	beq.n	8009732 <HAL_RCC_OscConfig+0x2de>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d106      	bne.n	8009766 <HAL_RCC_OscConfig+0x312>
 8009758:	4b6f      	ldr	r3, [pc, #444]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 800975a:	6a1b      	ldr	r3, [r3, #32]
 800975c:	4a6e      	ldr	r2, [pc, #440]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	6213      	str	r3, [r2, #32]
 8009764:	e02d      	b.n	80097c2 <HAL_RCC_OscConfig+0x36e>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10c      	bne.n	8009788 <HAL_RCC_OscConfig+0x334>
 800976e:	4b6a      	ldr	r3, [pc, #424]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	4a69      	ldr	r2, [pc, #420]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	6213      	str	r3, [r2, #32]
 800977a:	4b67      	ldr	r3, [pc, #412]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	4a66      	ldr	r2, [pc, #408]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009780:	f023 0304 	bic.w	r3, r3, #4
 8009784:	6213      	str	r3, [r2, #32]
 8009786:	e01c      	b.n	80097c2 <HAL_RCC_OscConfig+0x36e>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	2b05      	cmp	r3, #5
 800978e:	d10c      	bne.n	80097aa <HAL_RCC_OscConfig+0x356>
 8009790:	4b61      	ldr	r3, [pc, #388]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	4a60      	ldr	r2, [pc, #384]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009796:	f043 0304 	orr.w	r3, r3, #4
 800979a:	6213      	str	r3, [r2, #32]
 800979c:	4b5e      	ldr	r3, [pc, #376]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	4a5d      	ldr	r2, [pc, #372]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80097a2:	f043 0301 	orr.w	r3, r3, #1
 80097a6:	6213      	str	r3, [r2, #32]
 80097a8:	e00b      	b.n	80097c2 <HAL_RCC_OscConfig+0x36e>
 80097aa:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	4a5a      	ldr	r2, [pc, #360]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80097b0:	f023 0301 	bic.w	r3, r3, #1
 80097b4:	6213      	str	r3, [r2, #32]
 80097b6:	4b58      	ldr	r3, [pc, #352]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	4a57      	ldr	r2, [pc, #348]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80097bc:	f023 0304 	bic.w	r3, r3, #4
 80097c0:	6213      	str	r3, [r2, #32]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d015      	beq.n	80097f6 <HAL_RCC_OscConfig+0x3a2>
 80097ca:	f7fd fafd 	bl	8006dc8 <HAL_GetTick>
 80097ce:	6138      	str	r0, [r7, #16]
 80097d0:	e00a      	b.n	80097e8 <HAL_RCC_OscConfig+0x394>
 80097d2:	f7fd faf9 	bl	8006dc8 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d901      	bls.n	80097e8 <HAL_RCC_OscConfig+0x394>
 80097e4:	2303      	movs	r3, #3
 80097e6:	e0b1      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 80097e8:	4b4b      	ldr	r3, [pc, #300]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0ee      	beq.n	80097d2 <HAL_RCC_OscConfig+0x37e>
 80097f4:	e014      	b.n	8009820 <HAL_RCC_OscConfig+0x3cc>
 80097f6:	f7fd fae7 	bl	8006dc8 <HAL_GetTick>
 80097fa:	6138      	str	r0, [r7, #16]
 80097fc:	e00a      	b.n	8009814 <HAL_RCC_OscConfig+0x3c0>
 80097fe:	f7fd fae3 	bl	8006dc8 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	f241 3288 	movw	r2, #5000	; 0x1388
 800980c:	4293      	cmp	r3, r2
 800980e:	d901      	bls.n	8009814 <HAL_RCC_OscConfig+0x3c0>
 8009810:	2303      	movs	r3, #3
 8009812:	e09b      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 8009814:	4b40      	ldr	r3, [pc, #256]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	f003 0302 	and.w	r3, r3, #2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1ee      	bne.n	80097fe <HAL_RCC_OscConfig+0x3aa>
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d105      	bne.n	8009832 <HAL_RCC_OscConfig+0x3de>
 8009826:	4b3c      	ldr	r3, [pc, #240]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	4a3b      	ldr	r2, [pc, #236]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 800982c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009830:	61d3      	str	r3, [r2, #28]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8087 	beq.w	800994a <HAL_RCC_OscConfig+0x4f6>
 800983c:	4b36      	ldr	r3, [pc, #216]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f003 030c 	and.w	r3, r3, #12
 8009844:	2b08      	cmp	r3, #8
 8009846:	d061      	beq.n	800990c <HAL_RCC_OscConfig+0x4b8>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d146      	bne.n	80098de <HAL_RCC_OscConfig+0x48a>
 8009850:	4b33      	ldr	r3, [pc, #204]	; (8009920 <HAL_RCC_OscConfig+0x4cc>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	f7fd fab7 	bl	8006dc8 <HAL_GetTick>
 800985a:	6138      	str	r0, [r7, #16]
 800985c:	e008      	b.n	8009870 <HAL_RCC_OscConfig+0x41c>
 800985e:	f7fd fab3 	bl	8006dc8 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b02      	cmp	r3, #2
 800986a:	d901      	bls.n	8009870 <HAL_RCC_OscConfig+0x41c>
 800986c:	2303      	movs	r3, #3
 800986e:	e06d      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1f0      	bne.n	800985e <HAL_RCC_OscConfig+0x40a>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009884:	d108      	bne.n	8009898 <HAL_RCC_OscConfig+0x444>
 8009886:	4b24      	ldr	r3, [pc, #144]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	4921      	ldr	r1, [pc, #132]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009894:	4313      	orrs	r3, r2
 8009896:	604b      	str	r3, [r1, #4]
 8009898:	4b1f      	ldr	r3, [pc, #124]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a19      	ldr	r1, [r3, #32]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	430b      	orrs	r3, r1
 80098aa:	491b      	ldr	r1, [pc, #108]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	604b      	str	r3, [r1, #4]
 80098b0:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <HAL_RCC_OscConfig+0x4cc>)
 80098b2:	2201      	movs	r2, #1
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f7fd fa87 	bl	8006dc8 <HAL_GetTick>
 80098ba:	6138      	str	r0, [r7, #16]
 80098bc:	e008      	b.n	80098d0 <HAL_RCC_OscConfig+0x47c>
 80098be:	f7fd fa83 	bl	8006dc8 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d901      	bls.n	80098d0 <HAL_RCC_OscConfig+0x47c>
 80098cc:	2303      	movs	r3, #3
 80098ce:	e03d      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 80098d0:	4b11      	ldr	r3, [pc, #68]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0f0      	beq.n	80098be <HAL_RCC_OscConfig+0x46a>
 80098dc:	e035      	b.n	800994a <HAL_RCC_OscConfig+0x4f6>
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <HAL_RCC_OscConfig+0x4cc>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	f7fd fa70 	bl	8006dc8 <HAL_GetTick>
 80098e8:	6138      	str	r0, [r7, #16]
 80098ea:	e008      	b.n	80098fe <HAL_RCC_OscConfig+0x4aa>
 80098ec:	f7fd fa6c 	bl	8006dc8 <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d901      	bls.n	80098fe <HAL_RCC_OscConfig+0x4aa>
 80098fa:	2303      	movs	r3, #3
 80098fc:	e026      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <HAL_RCC_OscConfig+0x4c4>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f0      	bne.n	80098ec <HAL_RCC_OscConfig+0x498>
 800990a:	e01e      	b.n	800994a <HAL_RCC_OscConfig+0x4f6>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d107      	bne.n	8009924 <HAL_RCC_OscConfig+0x4d0>
 8009914:	2301      	movs	r3, #1
 8009916:	e019      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 8009918:	40021000 	.word	0x40021000
 800991c:	40007000 	.word	0x40007000
 8009920:	42420060 	.word	0x42420060
 8009924:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <HAL_RCC_OscConfig+0x500>)
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	429a      	cmp	r2, r3
 8009936:	d106      	bne.n	8009946 <HAL_RCC_OscConfig+0x4f2>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	429a      	cmp	r2, r3
 8009944:	d001      	beq.n	800994a <HAL_RCC_OscConfig+0x4f6>
 8009946:	2301      	movs	r3, #1
 8009948:	e000      	b.n	800994c <HAL_RCC_OscConfig+0x4f8>
 800994a:	2300      	movs	r3, #0
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	40021000 	.word	0x40021000

08009958 <HAL_RCC_ClockConfig>:
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <HAL_RCC_ClockConfig+0x14>
 8009968:	2301      	movs	r3, #1
 800996a:	e0d0      	b.n	8009b0e <HAL_RCC_ClockConfig+0x1b6>
 800996c:	4b6a      	ldr	r3, [pc, #424]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d910      	bls.n	800999c <HAL_RCC_ClockConfig+0x44>
 800997a:	4b67      	ldr	r3, [pc, #412]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f023 0207 	bic.w	r2, r3, #7
 8009982:	4965      	ldr	r1, [pc, #404]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	4313      	orrs	r3, r2
 8009988:	600b      	str	r3, [r1, #0]
 800998a:	4b63      	ldr	r3, [pc, #396]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d001      	beq.n	800999c <HAL_RCC_ClockConfig+0x44>
 8009998:	2301      	movs	r3, #1
 800999a:	e0b8      	b.n	8009b0e <HAL_RCC_ClockConfig+0x1b6>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0302 	and.w	r3, r3, #2
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d020      	beq.n	80099ea <HAL_RCC_ClockConfig+0x92>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <HAL_RCC_ClockConfig+0x68>
 80099b4:	4b59      	ldr	r3, [pc, #356]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	4a58      	ldr	r2, [pc, #352]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 80099ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80099be:	6053      	str	r3, [r2, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0308 	and.w	r3, r3, #8
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <HAL_RCC_ClockConfig+0x80>
 80099cc:	4b53      	ldr	r3, [pc, #332]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	4a52      	ldr	r2, [pc, #328]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 80099d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80099d6:	6053      	str	r3, [r2, #4]
 80099d8:	4b50      	ldr	r3, [pc, #320]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	494d      	ldr	r1, [pc, #308]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	604b      	str	r3, [r1, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d040      	beq.n	8009a78 <HAL_RCC_ClockConfig+0x120>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d107      	bne.n	8009a0e <HAL_RCC_ClockConfig+0xb6>
 80099fe:	4b47      	ldr	r3, [pc, #284]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d115      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xde>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e07f      	b.n	8009b0e <HAL_RCC_ClockConfig+0x1b6>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d107      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xce>
 8009a16:	4b41      	ldr	r3, [pc, #260]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xde>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e073      	b.n	8009b0e <HAL_RCC_ClockConfig+0x1b6>
 8009a26:	4b3d      	ldr	r3, [pc, #244]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <HAL_RCC_ClockConfig+0xde>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e06b      	b.n	8009b0e <HAL_RCC_ClockConfig+0x1b6>
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f023 0203 	bic.w	r2, r3, #3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	4936      	ldr	r1, [pc, #216]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	604b      	str	r3, [r1, #4]
 8009a48:	f7fd f9be 	bl	8006dc8 <HAL_GetTick>
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	e00a      	b.n	8009a66 <HAL_RCC_ClockConfig+0x10e>
 8009a50:	f7fd f9ba 	bl	8006dc8 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d901      	bls.n	8009a66 <HAL_RCC_ClockConfig+0x10e>
 8009a62:	2303      	movs	r3, #3
 8009a64:	e053      	b.n	8009b0e <HAL_RCC_ClockConfig+0x1b6>
 8009a66:	4b2d      	ldr	r3, [pc, #180]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f003 020c 	and.w	r2, r3, #12
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d1eb      	bne.n	8009a50 <HAL_RCC_ClockConfig+0xf8>
 8009a78:	4b27      	ldr	r3, [pc, #156]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d210      	bcs.n	8009aa8 <HAL_RCC_ClockConfig+0x150>
 8009a86:	4b24      	ldr	r3, [pc, #144]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f023 0207 	bic.w	r2, r3, #7
 8009a8e:	4922      	ldr	r1, [pc, #136]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	600b      	str	r3, [r1, #0]
 8009a96:	4b20      	ldr	r3, [pc, #128]	; (8009b18 <HAL_RCC_ClockConfig+0x1c0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d001      	beq.n	8009aa8 <HAL_RCC_ClockConfig+0x150>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e032      	b.n	8009b0e <HAL_RCC_ClockConfig+0x1b6>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d008      	beq.n	8009ac6 <HAL_RCC_ClockConfig+0x16e>
 8009ab4:	4b19      	ldr	r3, [pc, #100]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	4916      	ldr	r1, [pc, #88]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	604b      	str	r3, [r1, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <HAL_RCC_ClockConfig+0x18e>
 8009ad2:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	490e      	ldr	r1, [pc, #56]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	604b      	str	r3, [r1, #4]
 8009ae6:	f000 f821 	bl	8009b2c <HAL_RCC_GetSysClockFreq>
 8009aea:	4602      	mov	r2, r0
 8009aec:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <HAL_RCC_ClockConfig+0x1c4>)
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	091b      	lsrs	r3, r3, #4
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	490a      	ldr	r1, [pc, #40]	; (8009b20 <HAL_RCC_ClockConfig+0x1c8>)
 8009af8:	5ccb      	ldrb	r3, [r1, r3]
 8009afa:	fa22 f303 	lsr.w	r3, r2, r3
 8009afe:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <HAL_RCC_ClockConfig+0x1cc>)
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <HAL_RCC_ClockConfig+0x1d0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fd f91c 	bl	8006d44 <HAL_InitTick>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	40022000 	.word	0x40022000
 8009b1c:	40021000 	.word	0x40021000
 8009b20:	0800ff74 	.word	0x0800ff74
 8009b24:	20000010 	.word	0x20000010
 8009b28:	20000014 	.word	0x20000014

08009b2c <HAL_RCC_GetSysClockFreq>:
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	2300      	movs	r3, #0
 8009b38:	60bb      	str	r3, [r7, #8]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	607b      	str	r3, [r7, #4]
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	4b1e      	ldr	r3, [pc, #120]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f003 030c 	and.w	r3, r3, #12
 8009b52:	2b04      	cmp	r3, #4
 8009b54:	d002      	beq.n	8009b5c <HAL_RCC_GetSysClockFreq+0x30>
 8009b56:	2b08      	cmp	r3, #8
 8009b58:	d003      	beq.n	8009b62 <HAL_RCC_GetSysClockFreq+0x36>
 8009b5a:	e027      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x80>
 8009b5c:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	e027      	b.n	8009bb2 <HAL_RCC_GetSysClockFreq+0x86>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	0c9b      	lsrs	r3, r3, #18
 8009b66:	f003 030f 	and.w	r3, r3, #15
 8009b6a:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009b6c:	5cd3      	ldrb	r3, [r2, r3]
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d010      	beq.n	8009b9c <HAL_RCC_GetSysClockFreq+0x70>
 8009b7a:	4b11      	ldr	r3, [pc, #68]	; (8009bc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	0c5b      	lsrs	r3, r3, #17
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	4a11      	ldr	r2, [pc, #68]	; (8009bcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8009b86:	5cd3      	ldrb	r3, [r2, r3]
 8009b88:	60bb      	str	r3, [r7, #8]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a0d      	ldr	r2, [pc, #52]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8009b8e:	fb03 f202 	mul.w	r2, r3, r2
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b98:	617b      	str	r3, [r7, #20]
 8009b9a:	e004      	b.n	8009ba6 <HAL_RCC_GetSysClockFreq+0x7a>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a0c      	ldr	r2, [pc, #48]	; (8009bd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009ba0:	fb02 f303 	mul.w	r3, r2, r3
 8009ba4:	617b      	str	r3, [r7, #20]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	e002      	b.n	8009bb2 <HAL_RCC_GetSysClockFreq+0x86>
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	bf00      	nop
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	371c      	adds	r7, #28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bc80      	pop	{r7}
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	40021000 	.word	0x40021000
 8009bc4:	007a1200 	.word	0x007a1200
 8009bc8:	0800ff8c 	.word	0x0800ff8c
 8009bcc:	0800ff9c 	.word	0x0800ff9c
 8009bd0:	003d0900 	.word	0x003d0900

08009bd4 <HAL_RCC_GetHCLKFreq>:
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	4b02      	ldr	r3, [pc, #8]	; (8009be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bc80      	pop	{r7}
 8009be2:	4770      	bx	lr
 8009be4:	20000010 	.word	0x20000010

08009be8 <HAL_RCC_GetPCLK1Freq>:
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	f7ff fff2 	bl	8009bd4 <HAL_RCC_GetHCLKFreq>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	0a1b      	lsrs	r3, r3, #8
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	4903      	ldr	r1, [pc, #12]	; (8009c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bfe:	5ccb      	ldrb	r3, [r1, r3]
 8009c00:	fa22 f303 	lsr.w	r3, r2, r3
 8009c04:	4618      	mov	r0, r3
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40021000 	.word	0x40021000
 8009c0c:	0800ff84 	.word	0x0800ff84

08009c10 <HAL_RCC_GetPCLK2Freq>:
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	f7ff ffde 	bl	8009bd4 <HAL_RCC_GetHCLKFreq>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	0adb      	lsrs	r3, r3, #11
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	4903      	ldr	r1, [pc, #12]	; (8009c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c26:	5ccb      	ldrb	r3, [r1, r3]
 8009c28:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	40021000 	.word	0x40021000
 8009c34:	0800ff84 	.word	0x0800ff84

08009c38 <RCC_Delay>:
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <RCC_Delay+0x34>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a0a      	ldr	r2, [pc, #40]	; (8009c70 <RCC_Delay+0x38>)
 8009c46:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4a:	0a5b      	lsrs	r3, r3, #9
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	fb02 f303 	mul.w	r3, r2, r3
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	bf00      	nop
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	1e5a      	subs	r2, r3, #1
 8009c5a:	60fa      	str	r2, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1f9      	bne.n	8009c54 <RCC_Delay+0x1c>
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr
 8009c6c:	20000010 	.word	0x20000010
 8009c70:	10624dd3 	.word	0x10624dd3

08009c74 <HAL_RCCEx_PeriphCLKConfig>:
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	613b      	str	r3, [r7, #16]
 8009c80:	2300      	movs	r3, #0
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d07d      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8009c90:	2300      	movs	r3, #0
 8009c92:	75fb      	strb	r3, [r7, #23]
 8009c94:	4b4f      	ldr	r3, [pc, #316]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10d      	bne.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
 8009ca0:	4b4c      	ldr	r3, [pc, #304]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	4a4b      	ldr	r2, [pc, #300]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009caa:	61d3      	str	r3, [r2, #28]
 8009cac:	4b49      	ldr	r3, [pc, #292]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cb4:	60bb      	str	r3, [r7, #8]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
 8009cbc:	4b46      	ldr	r3, [pc, #280]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d118      	bne.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x86>
 8009cc8:	4b43      	ldr	r3, [pc, #268]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a42      	ldr	r2, [pc, #264]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	f7fd f878 	bl	8006dc8 <HAL_GetTick>
 8009cd8:	6138      	str	r0, [r7, #16]
 8009cda:	e008      	b.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009cdc:	f7fd f874 	bl	8006dc8 <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	2b64      	cmp	r3, #100	; 0x64
 8009ce8:	d901      	bls.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009cea:	2303      	movs	r3, #3
 8009cec:	e06d      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x156>
 8009cee:	4b3a      	ldr	r3, [pc, #232]	; (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0f0      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x68>
 8009cfa:	4b36      	ldr	r3, [pc, #216]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d02e      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d027      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009d18:	4b2e      	ldr	r3, [pc, #184]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	4b2e      	ldr	r3, [pc, #184]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009d24:	2201      	movs	r2, #1
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	4b2c      	ldr	r3, [pc, #176]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	4a29      	ldr	r2, [pc, #164]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6213      	str	r3, [r2, #32]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d014      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009d3e:	f7fd f843 	bl	8006dc8 <HAL_GetTick>
 8009d42:	6138      	str	r0, [r7, #16]
 8009d44:	e00a      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009d46:	f7fd f83f 	bl	8006dc8 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d901      	bls.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e036      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x156>
 8009d5c:	4b1d      	ldr	r3, [pc, #116]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0ee      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8009d68:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4917      	ldr	r1, [pc, #92]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	620b      	str	r3, [r1, #32]
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d105      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	4a13      	ldr	r2, [pc, #76]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d8a:	61d3      	str	r3, [r2, #28]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d008      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d98:	4b0e      	ldr	r3, [pc, #56]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	490b      	ldr	r1, [pc, #44]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	604b      	str	r3, [r1, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0310 	and.w	r3, r3, #16
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009db6:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	4904      	ldr	r1, [pc, #16]	; (8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	604b      	str	r3, [r1, #4]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	40021000 	.word	0x40021000
 8009dd8:	40007000 	.word	0x40007000
 8009ddc:	42420440 	.word	0x42420440

08009de0 <HAL_RCCEx_GetPeriphCLKFreq>:
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]
 8009dec:	2300      	movs	r3, #0
 8009dee:	61fb      	str	r3, [r7, #28]
 8009df0:	2300      	movs	r3, #0
 8009df2:	613b      	str	r3, [r7, #16]
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	61bb      	str	r3, [r7, #24]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	2b0f      	cmp	r3, #15
 8009e02:	f200 80af 	bhi.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009ee3 	.word	0x08009ee3
 8009e10:	08009f49 	.word	0x08009f49
 8009e14:	08009f65 	.word	0x08009f65
 8009e18:	08009ed3 	.word	0x08009ed3
 8009e1c:	08009f65 	.word	0x08009f65
 8009e20:	08009f65 	.word	0x08009f65
 8009e24:	08009f65 	.word	0x08009f65
 8009e28:	08009edb 	.word	0x08009edb
 8009e2c:	08009f65 	.word	0x08009f65
 8009e30:	08009f65 	.word	0x08009f65
 8009e34:	08009f65 	.word	0x08009f65
 8009e38:	08009f65 	.word	0x08009f65
 8009e3c:	08009f65 	.word	0x08009f65
 8009e40:	08009f65 	.word	0x08009f65
 8009e44:	08009f65 	.word	0x08009f65
 8009e48:	08009e4d 	.word	0x08009e4d
 8009e4c:	4b4a      	ldr	r3, [pc, #296]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	4b49      	ldr	r3, [pc, #292]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f000 8084 	beq.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	0c9b      	lsrs	r3, r3, #18
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	4a44      	ldr	r2, [pc, #272]	; (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8009e6a:	5cd3      	ldrb	r3, [r2, r3]
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d015      	beq.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8009e78:	4b3f      	ldr	r3, [pc, #252]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	0c5b      	lsrs	r3, r3, #17
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	4a3f      	ldr	r2, [pc, #252]	; (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8009e84:	5cd3      	ldrb	r3, [r2, r3]
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00d      	beq.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8009e92:	4a3c      	ldr	r2, [pc, #240]	; (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	fbb2 f2f3 	udiv	r2, r2, r3
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	e004      	b.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0xce>
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	4a38      	ldr	r2, [pc, #224]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8009ea8:	fb02 f303 	mul.w	r3, r2, r3
 8009eac:	61fb      	str	r3, [r7, #28]
 8009eae:	4b32      	ldr	r3, [pc, #200]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eba:	d102      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	61bb      	str	r3, [r7, #24]
 8009ec0:	e052      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4a31      	ldr	r2, [pc, #196]	; (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	085b      	lsrs	r3, r3, #1
 8009ece:	61bb      	str	r3, [r7, #24]
 8009ed0:	e04a      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009ed2:	f7ff fe2b 	bl	8009b2c <HAL_RCC_GetSysClockFreq>
 8009ed6:	61b8      	str	r0, [r7, #24]
 8009ed8:	e049      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8009eda:	f7ff fe27 	bl	8009b2c <HAL_RCC_GetSysClockFreq>
 8009ede:	61b8      	str	r0, [r7, #24]
 8009ee0:	e045      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8009ee2:	4b25      	ldr	r3, [pc, #148]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef2:	d108      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8009efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f02:	61bb      	str	r3, [r7, #24]
 8009f04:	e01f      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f10:	d109      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009f12:	4b19      	ldr	r3, [pc, #100]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8009f1e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009f22:	61bb      	str	r3, [r7, #24]
 8009f24:	e00f      	b.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f30:	d11c      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8009f32:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d016      	beq.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8009f3e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	e012      	b.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8009f46:	e011      	b.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8009f48:	f7ff fe62 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	0b9b      	lsrs	r3, r3, #14
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	3301      	adds	r3, #1
 8009f5a:	005b      	lsls	r3, r3, #1
 8009f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e004      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8009f64:	bf00      	nop
 8009f66:	e002      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8009f68:	bf00      	nop
 8009f6a:	e000      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8009f6c:	bf00      	nop
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	4618      	mov	r0, r3
 8009f72:	3720      	adds	r7, #32
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	40021000 	.word	0x40021000
 8009f7c:	0800ffa0 	.word	0x0800ffa0
 8009f80:	0800ffb0 	.word	0x0800ffb0
 8009f84:	007a1200 	.word	0x007a1200
 8009f88:	003d0900 	.word	0x003d0900
 8009f8c:	aaaaaaab 	.word	0xaaaaaaab

08009f90 <HAL_TIM_Base_Init>:
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_TIM_Base_Init+0x12>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e041      	b.n	800a026 <HAL_TIM_Base_Init+0x96>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <HAL_TIM_Base_Init+0x2c>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fc fc26 	bl	8006808 <HAL_TIM_Base_MspInit>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	f000 fd2e 	bl	800aa30 <TIM_Base_SetConfig>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a024:	2300      	movs	r3, #0
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <HAL_TIM_PWM_Init>:
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <HAL_TIM_PWM_Init+0x12>
 800a03c:	2301      	movs	r3, #1
 800a03e:	e041      	b.n	800a0c4 <HAL_TIM_PWM_Init+0x96>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d106      	bne.n	800a05a <HAL_TIM_PWM_Init+0x2c>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f839 	bl	800a0cc <HAL_TIM_PWM_MspInit>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3304      	adds	r3, #4
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f000 fcdf 	bl	800aa30 <TIM_Base_SetConfig>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_TIM_PWM_MspInit>:
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bc80      	pop	{r7}
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <HAL_TIM_PWM_Start>:
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d109      	bne.n	800a104 <HAL_TIM_PWM_Start+0x24>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	bf14      	ite	ne
 800a0fc:	2301      	movne	r3, #1
 800a0fe:	2300      	moveq	r3, #0
 800a100:	b2db      	uxtb	r3, r3
 800a102:	e022      	b.n	800a14a <HAL_TIM_PWM_Start+0x6a>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b04      	cmp	r3, #4
 800a108:	d109      	bne.n	800a11e <HAL_TIM_PWM_Start+0x3e>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b01      	cmp	r3, #1
 800a114:	bf14      	ite	ne
 800a116:	2301      	movne	r3, #1
 800a118:	2300      	moveq	r3, #0
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	e015      	b.n	800a14a <HAL_TIM_PWM_Start+0x6a>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b08      	cmp	r3, #8
 800a122:	d109      	bne.n	800a138 <HAL_TIM_PWM_Start+0x58>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	bf14      	ite	ne
 800a130:	2301      	movne	r3, #1
 800a132:	2300      	moveq	r3, #0
 800a134:	b2db      	uxtb	r3, r3
 800a136:	e008      	b.n	800a14a <HAL_TIM_PWM_Start+0x6a>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b01      	cmp	r3, #1
 800a142:	bf14      	ite	ne
 800a144:	2301      	movne	r3, #1
 800a146:	2300      	moveq	r3, #0
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <HAL_TIM_PWM_Start+0x72>
 800a14e:	2301      	movs	r3, #1
 800a150:	e072      	b.n	800a238 <HAL_TIM_PWM_Start+0x158>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <HAL_TIM_PWM_Start+0x82>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a160:	e013      	b.n	800a18a <HAL_TIM_PWM_Start+0xaa>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b04      	cmp	r3, #4
 800a166:	d104      	bne.n	800a172 <HAL_TIM_PWM_Start+0x92>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a170:	e00b      	b.n	800a18a <HAL_TIM_PWM_Start+0xaa>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b08      	cmp	r3, #8
 800a176:	d104      	bne.n	800a182 <HAL_TIM_PWM_Start+0xa2>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a180:	e003      	b.n	800a18a <HAL_TIM_PWM_Start+0xaa>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2201      	movs	r2, #1
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 ff14 	bl	800afc0 <TIM_CCxChannelCmd>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a28      	ldr	r2, [pc, #160]	; (800a240 <HAL_TIM_PWM_Start+0x160>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d004      	beq.n	800a1ac <HAL_TIM_PWM_Start+0xcc>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a27      	ldr	r2, [pc, #156]	; (800a244 <HAL_TIM_PWM_Start+0x164>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d101      	bne.n	800a1b0 <HAL_TIM_PWM_Start+0xd0>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e000      	b.n	800a1b2 <HAL_TIM_PWM_Start+0xd2>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <HAL_TIM_PWM_Start+0xe6>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1c4:	645a      	str	r2, [r3, #68]	; 0x44
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a1d      	ldr	r2, [pc, #116]	; (800a240 <HAL_TIM_PWM_Start+0x160>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d018      	beq.n	800a202 <HAL_TIM_PWM_Start+0x122>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a1b      	ldr	r2, [pc, #108]	; (800a244 <HAL_TIM_PWM_Start+0x164>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d013      	beq.n	800a202 <HAL_TIM_PWM_Start+0x122>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e2:	d00e      	beq.n	800a202 <HAL_TIM_PWM_Start+0x122>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a17      	ldr	r2, [pc, #92]	; (800a248 <HAL_TIM_PWM_Start+0x168>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d009      	beq.n	800a202 <HAL_TIM_PWM_Start+0x122>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a16      	ldr	r2, [pc, #88]	; (800a24c <HAL_TIM_PWM_Start+0x16c>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d004      	beq.n	800a202 <HAL_TIM_PWM_Start+0x122>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a14      	ldr	r2, [pc, #80]	; (800a250 <HAL_TIM_PWM_Start+0x170>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d111      	bne.n	800a226 <HAL_TIM_PWM_Start+0x146>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b06      	cmp	r3, #6
 800a212:	d010      	beq.n	800a236 <HAL_TIM_PWM_Start+0x156>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0201 	orr.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	e007      	b.n	800a236 <HAL_TIM_PWM_Start+0x156>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0201 	orr.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	2300      	movs	r3, #0
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	40012c00 	.word	0x40012c00
 800a244:	40013400 	.word	0x40013400
 800a248:	40000400 	.word	0x40000400
 800a24c:	40000800 	.word	0x40000800
 800a250:	40000c00 	.word	0x40000c00

0800a254 <HAL_TIM_Encoder_Init>:
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <HAL_TIM_Encoder_Init+0x14>
 800a264:	2301      	movs	r3, #1
 800a266:	e093      	b.n	800a390 <HAL_TIM_Encoder_Init+0x13c>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <HAL_TIM_Encoder_Init+0x2e>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7fc faf5 	bl	800686c <HAL_TIM_Encoder_MspInit>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	6812      	ldr	r2, [r2, #0]
 800a294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a298:	f023 0307 	bic.w	r3, r3, #7
 800a29c:	6093      	str	r3, [r2, #8]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	f000 fbc1 	bl	800aa30 <TIM_Base_SetConfig>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	617b      	str	r3, [r7, #20]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	613b      	str	r3, [r7, #16]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	021b      	lsls	r3, r3, #8
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a2f4:	f023 030c 	bic.w	r3, r3, #12
 800a2f8:	613b      	str	r3, [r7, #16]
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	4313      	orrs	r3, r2
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	4313      	orrs	r3, r2
 800a316:	613b      	str	r3, [r7, #16]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	011a      	lsls	r2, r3, #4
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	031b      	lsls	r3, r3, #12
 800a324:	4313      	orrs	r3, r2
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	4313      	orrs	r3, r2
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	4313      	orrs	r3, r2
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	609a      	str	r2, [r3, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	619a      	str	r2, [r3, #24]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	621a      	str	r2, [r3, #32]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2201      	movs	r2, #1
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a38e:	2300      	movs	r3, #0
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_TIM_Encoder_Start_IT>:
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3a8:	73fb      	strb	r3, [r7, #15]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a3b0:	73bb      	strb	r3, [r7, #14]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3b8:	737b      	strb	r3, [r7, #13]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3c0:	733b      	strb	r3, [r7, #12]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d110      	bne.n	800a3ea <HAL_TIM_Encoder_Start_IT+0x52>
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d102      	bne.n	800a3d4 <HAL_TIM_Encoder_Start_IT+0x3c>
 800a3ce:	7b7b      	ldrb	r3, [r7, #13]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d001      	beq.n	800a3d8 <HAL_TIM_Encoder_Start_IT+0x40>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e089      	b.n	800a4ec <HAL_TIM_Encoder_Start_IT+0x154>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3e8:	e031      	b.n	800a44e <HAL_TIM_Encoder_Start_IT+0xb6>
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d110      	bne.n	800a412 <HAL_TIM_Encoder_Start_IT+0x7a>
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d102      	bne.n	800a3fc <HAL_TIM_Encoder_Start_IT+0x64>
 800a3f6:	7b3b      	ldrb	r3, [r7, #12]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d001      	beq.n	800a400 <HAL_TIM_Encoder_Start_IT+0x68>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e075      	b.n	800a4ec <HAL_TIM_Encoder_Start_IT+0x154>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a410:	e01d      	b.n	800a44e <HAL_TIM_Encoder_Start_IT+0xb6>
 800a412:	7bfb      	ldrb	r3, [r7, #15]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d108      	bne.n	800a42a <HAL_TIM_Encoder_Start_IT+0x92>
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d105      	bne.n	800a42a <HAL_TIM_Encoder_Start_IT+0x92>
 800a41e:	7b7b      	ldrb	r3, [r7, #13]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d102      	bne.n	800a42a <HAL_TIM_Encoder_Start_IT+0x92>
 800a424:	7b3b      	ldrb	r3, [r7, #12]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d001      	beq.n	800a42e <HAL_TIM_Encoder_Start_IT+0x96>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e05e      	b.n	800a4ec <HAL_TIM_Encoder_Start_IT+0x154>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2202      	movs	r2, #2
 800a432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2202      	movs	r2, #2
 800a43a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2202      	movs	r2, #2
 800a442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2202      	movs	r2, #2
 800a44a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <HAL_TIM_Encoder_Start_IT+0xc4>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b04      	cmp	r3, #4
 800a458:	d010      	beq.n	800a47c <HAL_TIM_Encoder_Start_IT+0xe4>
 800a45a:	e01f      	b.n	800a49c <HAL_TIM_Encoder_Start_IT+0x104>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2201      	movs	r2, #1
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fdab 	bl	800afc0 <TIM_CCxChannelCmd>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f042 0202 	orr.w	r2, r2, #2
 800a478:	60da      	str	r2, [r3, #12]
 800a47a:	e02e      	b.n	800a4da <HAL_TIM_Encoder_Start_IT+0x142>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2201      	movs	r2, #1
 800a482:	2104      	movs	r1, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fd9b 	bl	800afc0 <TIM_CCxChannelCmd>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f042 0204 	orr.w	r2, r2, #4
 800a498:	60da      	str	r2, [r3, #12]
 800a49a:	e01e      	b.n	800a4da <HAL_TIM_Encoder_Start_IT+0x142>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fd8b 	bl	800afc0 <TIM_CCxChannelCmd>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fd84 	bl	800afc0 <TIM_CCxChannelCmd>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68da      	ldr	r2, [r3, #12]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0202 	orr.w	r2, r2, #2
 800a4c6:	60da      	str	r2, [r3, #12]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f042 0204 	orr.w	r2, r2, #4
 800a4d6:	60da      	str	r2, [r3, #12]
 800a4d8:	bf00      	nop
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f042 0201 	orr.w	r2, r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <HAL_TIM_IRQHandler>:
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	60bb      	str	r3, [r7, #8]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d020      	beq.n	800a558 <HAL_TIM_IRQHandler+0x64>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01b      	beq.n	800a558 <HAL_TIM_IRQHandler+0x64>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0202 	mvn.w	r2, #2
 800a528:	611a      	str	r2, [r3, #16]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	771a      	strb	r2, [r3, #28]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <HAL_TIM_IRQHandler+0x52>
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7fa ff78 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 800a544:	e005      	b.n	800a552 <HAL_TIM_IRQHandler+0x5e>
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fa56 	bl	800a9f8 <HAL_TIM_OC_DelayElapsedCallback>
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fa5c 	bl	800aa0a <HAL_TIM_PWM_PulseFinishedCallback>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	771a      	strb	r2, [r3, #28]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f003 0304 	and.w	r3, r3, #4
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d020      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0xb0>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d01b      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0xb0>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f06f 0204 	mvn.w	r2, #4
 800a574:	611a      	str	r2, [r3, #16]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2202      	movs	r2, #2
 800a57a:	771a      	strb	r2, [r3, #28]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <HAL_TIM_IRQHandler+0x9e>
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7fa ff52 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 800a590:	e005      	b.n	800a59e <HAL_TIM_IRQHandler+0xaa>
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa30 	bl	800a9f8 <HAL_TIM_OC_DelayElapsedCallback>
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fa36 	bl	800aa0a <HAL_TIM_PWM_PulseFinishedCallback>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	771a      	strb	r2, [r3, #28]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0308 	and.w	r3, r3, #8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d020      	beq.n	800a5f0 <HAL_TIM_IRQHandler+0xfc>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f003 0308 	and.w	r3, r3, #8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d01b      	beq.n	800a5f0 <HAL_TIM_IRQHandler+0xfc>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f06f 0208 	mvn.w	r2, #8
 800a5c0:	611a      	str	r2, [r3, #16]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	771a      	strb	r2, [r3, #28]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_TIM_IRQHandler+0xea>
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7fa ff2c 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 800a5dc:	e005      	b.n	800a5ea <HAL_TIM_IRQHandler+0xf6>
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa0a 	bl	800a9f8 <HAL_TIM_OC_DelayElapsedCallback>
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fa10 	bl	800aa0a <HAL_TIM_PWM_PulseFinishedCallback>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	771a      	strb	r2, [r3, #28]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f003 0310 	and.w	r3, r3, #16
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d020      	beq.n	800a63c <HAL_TIM_IRQHandler+0x148>
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f003 0310 	and.w	r3, r3, #16
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01b      	beq.n	800a63c <HAL_TIM_IRQHandler+0x148>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f06f 0210 	mvn.w	r2, #16
 800a60c:	611a      	str	r2, [r3, #16]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2208      	movs	r2, #8
 800a612:	771a      	strb	r2, [r3, #28]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <HAL_TIM_IRQHandler+0x136>
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fa ff06 	bl	8005434 <HAL_TIM_IC_CaptureCallback>
 800a628:	e005      	b.n	800a636 <HAL_TIM_IRQHandler+0x142>
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f9e4 	bl	800a9f8 <HAL_TIM_OC_DelayElapsedCallback>
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f9ea 	bl	800aa0a <HAL_TIM_PWM_PulseFinishedCallback>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	771a      	strb	r2, [r3, #28]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00c      	beq.n	800a660 <HAL_TIM_IRQHandler+0x16c>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d007      	beq.n	800a660 <HAL_TIM_IRQHandler+0x16c>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f06f 0201 	mvn.w	r2, #1
 800a658:	611a      	str	r2, [r3, #16]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f9c3 	bl	800a9e6 <HAL_TIM_PeriodElapsedCallback>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00c      	beq.n	800a684 <HAL_TIM_IRQHandler+0x190>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a670:	2b00      	cmp	r3, #0
 800a672:	d007      	beq.n	800a684 <HAL_TIM_IRQHandler+0x190>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a67c:	611a      	str	r2, [r3, #16]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fd88 	bl	800b194 <HAL_TIMEx_BreakCallback>
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00c      	beq.n	800a6a8 <HAL_TIM_IRQHandler+0x1b4>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <HAL_TIM_IRQHandler+0x1b4>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6a0:	611a      	str	r2, [r3, #16]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f9ba 	bl	800aa1c <HAL_TIM_TriggerCallback>
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f003 0320 	and.w	r3, r3, #32
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00c      	beq.n	800a6cc <HAL_TIM_IRQHandler+0x1d8>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <HAL_TIM_IRQHandler+0x1d8>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f06f 0220 	mvn.w	r2, #32
 800a6c4:	611a      	str	r2, [r3, #16]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fd5b 	bl	800b182 <HAL_TIMEx_CommutCallback>
 800a6cc:	bf00      	nop
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_TIM_PWM_ConfigChannel>:
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	75fb      	strb	r3, [r7, #23]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e0ae      	b.n	800a850 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b0c      	cmp	r3, #12
 800a6fe:	f200 809f 	bhi.w	800a840 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a702:	a201      	add	r2, pc, #4	; (adr r2, 800a708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a708:	0800a73d 	.word	0x0800a73d
 800a70c:	0800a841 	.word	0x0800a841
 800a710:	0800a841 	.word	0x0800a841
 800a714:	0800a841 	.word	0x0800a841
 800a718:	0800a77d 	.word	0x0800a77d
 800a71c:	0800a841 	.word	0x0800a841
 800a720:	0800a841 	.word	0x0800a841
 800a724:	0800a841 	.word	0x0800a841
 800a728:	0800a7bf 	.word	0x0800a7bf
 800a72c:	0800a841 	.word	0x0800a841
 800a730:	0800a841 	.word	0x0800a841
 800a734:	0800a841 	.word	0x0800a841
 800a738:	0800a7ff 	.word	0x0800a7ff
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68b9      	ldr	r1, [r7, #8]
 800a742:	4618      	mov	r0, r3
 800a744:	f000 f9fa 	bl	800ab3c <TIM_OC1_SetConfig>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	699a      	ldr	r2, [r3, #24]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f042 0208 	orr.w	r2, r2, #8
 800a756:	619a      	str	r2, [r3, #24]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	699a      	ldr	r2, [r3, #24]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f022 0204 	bic.w	r2, r2, #4
 800a766:	619a      	str	r2, [r3, #24]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6999      	ldr	r1, [r3, #24]
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	691a      	ldr	r2, [r3, #16]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	619a      	str	r2, [r3, #24]
 800a77a:	e064      	b.n	800a846 <HAL_TIM_PWM_ConfigChannel+0x172>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68b9      	ldr	r1, [r7, #8]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fa4a 	bl	800ac1c <TIM_OC2_SetConfig>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	699a      	ldr	r2, [r3, #24]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a796:	619a      	str	r2, [r3, #24]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7a6:	619a      	str	r2, [r3, #24]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6999      	ldr	r1, [r3, #24]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	021a      	lsls	r2, r3, #8
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	619a      	str	r2, [r3, #24]
 800a7bc:	e043      	b.n	800a846 <HAL_TIM_PWM_ConfigChannel+0x172>
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fa9d 	bl	800ad04 <TIM_OC3_SetConfig>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	69da      	ldr	r2, [r3, #28]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f042 0208 	orr.w	r2, r2, #8
 800a7d8:	61da      	str	r2, [r3, #28]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	69da      	ldr	r2, [r3, #28]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0204 	bic.w	r2, r2, #4
 800a7e8:	61da      	str	r2, [r3, #28]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69d9      	ldr	r1, [r3, #28]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	691a      	ldr	r2, [r3, #16]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	61da      	str	r2, [r3, #28]
 800a7fc:	e023      	b.n	800a846 <HAL_TIM_PWM_ConfigChannel+0x172>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	4618      	mov	r0, r3
 800a806:	f000 faf1 	bl	800adec <TIM_OC4_SetConfig>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69da      	ldr	r2, [r3, #28]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a818:	61da      	str	r2, [r3, #28]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69da      	ldr	r2, [r3, #28]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a828:	61da      	str	r2, [r3, #28]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69d9      	ldr	r1, [r3, #28]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	021a      	lsls	r2, r3, #8
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	61da      	str	r2, [r3, #28]
 800a83e:	e002      	b.n	800a846 <HAL_TIM_PWM_ConfigChannel+0x172>
 800a840:	2301      	movs	r3, #1
 800a842:	75fb      	strb	r3, [r7, #23]
 800a844:	bf00      	nop
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_TIM_ConfigClockSource>:
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	2300      	movs	r3, #0
 800a864:	73fb      	strb	r3, [r7, #15]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d101      	bne.n	800a874 <HAL_TIM_ConfigClockSource+0x1c>
 800a870:	2302      	movs	r3, #2
 800a872:	e0b4      	b.n	800a9de <HAL_TIM_ConfigClockSource+0x186>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	60bb      	str	r3, [r7, #8]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a892:	60bb      	str	r3, [r7, #8]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a89a:	60bb      	str	r3, [r7, #8]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	609a      	str	r2, [r3, #8]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ac:	d03e      	beq.n	800a92c <HAL_TIM_ConfigClockSource+0xd4>
 800a8ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8b2:	f200 8087 	bhi.w	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ba:	f000 8086 	beq.w	800a9ca <HAL_TIM_ConfigClockSource+0x172>
 800a8be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c2:	d87f      	bhi.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8c4:	2b70      	cmp	r3, #112	; 0x70
 800a8c6:	d01a      	beq.n	800a8fe <HAL_TIM_ConfigClockSource+0xa6>
 800a8c8:	2b70      	cmp	r3, #112	; 0x70
 800a8ca:	d87b      	bhi.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8cc:	2b60      	cmp	r3, #96	; 0x60
 800a8ce:	d050      	beq.n	800a972 <HAL_TIM_ConfigClockSource+0x11a>
 800a8d0:	2b60      	cmp	r3, #96	; 0x60
 800a8d2:	d877      	bhi.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8d4:	2b50      	cmp	r3, #80	; 0x50
 800a8d6:	d03c      	beq.n	800a952 <HAL_TIM_ConfigClockSource+0xfa>
 800a8d8:	2b50      	cmp	r3, #80	; 0x50
 800a8da:	d873      	bhi.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8dc:	2b40      	cmp	r3, #64	; 0x40
 800a8de:	d058      	beq.n	800a992 <HAL_TIM_ConfigClockSource+0x13a>
 800a8e0:	2b40      	cmp	r3, #64	; 0x40
 800a8e2:	d86f      	bhi.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8e4:	2b30      	cmp	r3, #48	; 0x30
 800a8e6:	d064      	beq.n	800a9b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8e8:	2b30      	cmp	r3, #48	; 0x30
 800a8ea:	d86b      	bhi.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	d060      	beq.n	800a9b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8f0:	2b20      	cmp	r3, #32
 800a8f2:	d867      	bhi.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d05c      	beq.n	800a9b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8f8:	2b10      	cmp	r3, #16
 800a8fa:	d05a      	beq.n	800a9b2 <HAL_TIM_ConfigClockSource+0x15a>
 800a8fc:	e062      	b.n	800a9c4 <HAL_TIM_ConfigClockSource+0x16c>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	6899      	ldr	r1, [r3, #8]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	f000 fb38 	bl	800af82 <TIM_ETR_SetConfig>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	60bb      	str	r3, [r7, #8]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a920:	60bb      	str	r3, [r7, #8]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	609a      	str	r2, [r3, #8]
 800a92a:	e04f      	b.n	800a9cc <HAL_TIM_ConfigClockSource+0x174>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6818      	ldr	r0, [r3, #0]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	6899      	ldr	r1, [r3, #8]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f000 fb21 	bl	800af82 <TIM_ETR_SetConfig>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689a      	ldr	r2, [r3, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a94e:	609a      	str	r2, [r3, #8]
 800a950:	e03c      	b.n	800a9cc <HAL_TIM_ConfigClockSource+0x174>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	6859      	ldr	r1, [r3, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	461a      	mov	r2, r3
 800a960:	f000 fa98 	bl	800ae94 <TIM_TI1_ConfigInputStage>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2150      	movs	r1, #80	; 0x50
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 faef 	bl	800af4e <TIM_ITRx_SetConfig>
 800a970:	e02c      	b.n	800a9cc <HAL_TIM_ConfigClockSource+0x174>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6818      	ldr	r0, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	6859      	ldr	r1, [r3, #4]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	461a      	mov	r2, r3
 800a980:	f000 fab6 	bl	800aef0 <TIM_TI2_ConfigInputStage>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	2160      	movs	r1, #96	; 0x60
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 fadf 	bl	800af4e <TIM_ITRx_SetConfig>
 800a990:	e01c      	b.n	800a9cc <HAL_TIM_ConfigClockSource+0x174>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	6859      	ldr	r1, [r3, #4]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f000 fa78 	bl	800ae94 <TIM_TI1_ConfigInputStage>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2140      	movs	r1, #64	; 0x40
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 facf 	bl	800af4e <TIM_ITRx_SetConfig>
 800a9b0:	e00c      	b.n	800a9cc <HAL_TIM_ConfigClockSource+0x174>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f000 fac6 	bl	800af4e <TIM_ITRx_SetConfig>
 800a9c2:	e003      	b.n	800a9cc <HAL_TIM_ConfigClockSource+0x174>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
 800a9c8:	e000      	b.n	800a9cc <HAL_TIM_ConfigClockSource+0x174>
 800a9ca:	bf00      	nop
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <HAL_TIM_PeriodElapsedCallback>:
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bc80      	pop	{r7}
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_TIM_OC_DelayElapsedCallback>:
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr

0800aa0a <HAL_TIM_PWM_PulseFinishedCallback>:
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	bf00      	nop
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bc80      	pop	{r7}
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_TIM_TriggerCallback>:
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr
	...

0800aa30 <TIM_Base_SetConfig>:
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a39      	ldr	r2, [pc, #228]	; (800ab28 <TIM_Base_SetConfig+0xf8>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d013      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a38      	ldr	r2, [pc, #224]	; (800ab2c <TIM_Base_SetConfig+0xfc>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d00f      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa56:	d00b      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a35      	ldr	r2, [pc, #212]	; (800ab30 <TIM_Base_SetConfig+0x100>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d007      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a34      	ldr	r2, [pc, #208]	; (800ab34 <TIM_Base_SetConfig+0x104>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d003      	beq.n	800aa70 <TIM_Base_SetConfig+0x40>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a33      	ldr	r2, [pc, #204]	; (800ab38 <TIM_Base_SetConfig+0x108>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d108      	bne.n	800aa82 <TIM_Base_SetConfig+0x52>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a28      	ldr	r2, [pc, #160]	; (800ab28 <TIM_Base_SetConfig+0xf8>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d013      	beq.n	800aab2 <TIM_Base_SetConfig+0x82>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a27      	ldr	r2, [pc, #156]	; (800ab2c <TIM_Base_SetConfig+0xfc>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d00f      	beq.n	800aab2 <TIM_Base_SetConfig+0x82>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa98:	d00b      	beq.n	800aab2 <TIM_Base_SetConfig+0x82>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a24      	ldr	r2, [pc, #144]	; (800ab30 <TIM_Base_SetConfig+0x100>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d007      	beq.n	800aab2 <TIM_Base_SetConfig+0x82>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a23      	ldr	r2, [pc, #140]	; (800ab34 <TIM_Base_SetConfig+0x104>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d003      	beq.n	800aab2 <TIM_Base_SetConfig+0x82>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a22      	ldr	r2, [pc, #136]	; (800ab38 <TIM_Base_SetConfig+0x108>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d108      	bne.n	800aac4 <TIM_Base_SetConfig+0x94>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	4313      	orrs	r3, r2
 800aad0:	60fb      	str	r3, [r7, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	689a      	ldr	r2, [r3, #8]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	62da      	str	r2, [r3, #44]	; 0x2c
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	629a      	str	r2, [r3, #40]	; 0x28
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a0f      	ldr	r2, [pc, #60]	; (800ab28 <TIM_Base_SetConfig+0xf8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d003      	beq.n	800aaf8 <TIM_Base_SetConfig+0xc8>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a0e      	ldr	r2, [pc, #56]	; (800ab2c <TIM_Base_SetConfig+0xfc>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d103      	bne.n	800ab00 <TIM_Base_SetConfig+0xd0>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	691a      	ldr	r2, [r3, #16]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	631a      	str	r2, [r3, #48]	; 0x30
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	615a      	str	r2, [r3, #20]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d005      	beq.n	800ab1e <TIM_Base_SetConfig+0xee>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	f023 0201 	bic.w	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	611a      	str	r2, [r3, #16]
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bc80      	pop	{r7}
 800ab26:	4770      	bx	lr
 800ab28:	40012c00 	.word	0x40012c00
 800ab2c:	40013400 	.word	0x40013400
 800ab30:	40000400 	.word	0x40000400
 800ab34:	40000800 	.word	0x40000800
 800ab38:	40000c00 	.word	0x40000c00

0800ab3c <TIM_OC1_SetConfig>:
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	617b      	str	r3, [r7, #20]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	f023 0201 	bic.w	r2, r3, #1
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	621a      	str	r2, [r3, #32]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	613b      	str	r3, [r7, #16]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 0303 	bic.w	r3, r3, #3
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f023 0302 	bic.w	r3, r3, #2
 800ab84:	617b      	str	r3, [r7, #20]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a20      	ldr	r2, [pc, #128]	; (800ac14 <TIM_OC1_SetConfig+0xd8>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d003      	beq.n	800aba0 <TIM_OC1_SetConfig+0x64>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a1f      	ldr	r2, [pc, #124]	; (800ac18 <TIM_OC1_SetConfig+0xdc>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d10c      	bne.n	800abba <TIM_OC1_SetConfig+0x7e>
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f023 0308 	bic.w	r3, r3, #8
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	4313      	orrs	r3, r2
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f023 0304 	bic.w	r3, r3, #4
 800abb8:	617b      	str	r3, [r7, #20]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a15      	ldr	r2, [pc, #84]	; (800ac14 <TIM_OC1_SetConfig+0xd8>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d003      	beq.n	800abca <TIM_OC1_SetConfig+0x8e>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a14      	ldr	r2, [pc, #80]	; (800ac18 <TIM_OC1_SetConfig+0xdc>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d111      	bne.n	800abee <TIM_OC1_SetConfig+0xb2>
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abd0:	613b      	str	r3, [r7, #16]
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	613b      	str	r3, [r7, #16]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	4313      	orrs	r3, r2
 800abec:	613b      	str	r3, [r7, #16]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	605a      	str	r2, [r3, #4]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	619a      	str	r2, [r3, #24]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	635a      	str	r2, [r3, #52]	; 0x34
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	621a      	str	r2, [r3, #32]
 800ac08:	bf00      	nop
 800ac0a:	371c      	adds	r7, #28
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bc80      	pop	{r7}
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	40012c00 	.word	0x40012c00
 800ac18:	40013400 	.word	0x40013400

0800ac1c <TIM_OC2_SetConfig>:
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	f023 0210 	bic.w	r2, r3, #16
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	621a      	str	r2, [r3, #32]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	613b      	str	r3, [r7, #16]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	021b      	lsls	r3, r3, #8
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f023 0320 	bic.w	r3, r3, #32
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	011b      	lsls	r3, r3, #4
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a21      	ldr	r2, [pc, #132]	; (800acfc <TIM_OC2_SetConfig+0xe0>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_OC2_SetConfig+0x68>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a20      	ldr	r2, [pc, #128]	; (800ad00 <TIM_OC2_SetConfig+0xe4>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d10d      	bne.n	800aca0 <TIM_OC2_SetConfig+0x84>
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac8a:	617b      	str	r3, [r7, #20]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	011b      	lsls	r3, r3, #4
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac9e:	617b      	str	r3, [r7, #20]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a16      	ldr	r2, [pc, #88]	; (800acfc <TIM_OC2_SetConfig+0xe0>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d003      	beq.n	800acb0 <TIM_OC2_SetConfig+0x94>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a15      	ldr	r2, [pc, #84]	; (800ad00 <TIM_OC2_SetConfig+0xe4>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d113      	bne.n	800acd8 <TIM_OC2_SetConfig+0xbc>
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acb6:	613b      	str	r3, [r7, #16]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acbe:	613b      	str	r3, [r7, #16]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	4313      	orrs	r3, r2
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	613b      	str	r3, [r7, #16]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	619a      	str	r2, [r3, #24]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	639a      	str	r2, [r3, #56]	; 0x38
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	621a      	str	r2, [r3, #32]
 800acf2:	bf00      	nop
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bc80      	pop	{r7}
 800acfa:	4770      	bx	lr
 800acfc:	40012c00 	.word	0x40012c00
 800ad00:	40013400 	.word	0x40013400

0800ad04 <TIM_OC3_SetConfig>:
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	617b      	str	r3, [r7, #20]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	621a      	str	r2, [r3, #32]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	613b      	str	r3, [r7, #16]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 0303 	bic.w	r3, r3, #3
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad4c:	617b      	str	r3, [r7, #20]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	617b      	str	r3, [r7, #20]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a21      	ldr	r2, [pc, #132]	; (800ade4 <TIM_OC3_SetConfig+0xe0>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d003      	beq.n	800ad6a <TIM_OC3_SetConfig+0x66>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a20      	ldr	r2, [pc, #128]	; (800ade8 <TIM_OC3_SetConfig+0xe4>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d10d      	bne.n	800ad86 <TIM_OC3_SetConfig+0x82>
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad70:	617b      	str	r3, [r7, #20]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a16      	ldr	r2, [pc, #88]	; (800ade4 <TIM_OC3_SetConfig+0xe0>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d003      	beq.n	800ad96 <TIM_OC3_SetConfig+0x92>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a15      	ldr	r2, [pc, #84]	; (800ade8 <TIM_OC3_SetConfig+0xe4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d113      	bne.n	800adbe <TIM_OC3_SetConfig+0xba>
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad9c:	613b      	str	r3, [r7, #16]
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ada4:	613b      	str	r3, [r7, #16]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	011b      	lsls	r3, r3, #4
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	011b      	lsls	r3, r3, #4
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4313      	orrs	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	605a      	str	r2, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	61da      	str	r2, [r3, #28]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	63da      	str	r2, [r3, #60]	; 0x3c
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	621a      	str	r2, [r3, #32]
 800add8:	bf00      	nop
 800adda:	371c      	adds	r7, #28
 800addc:	46bd      	mov	sp, r7
 800adde:	bc80      	pop	{r7}
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	40012c00 	.word	0x40012c00
 800ade8:	40013400 	.word	0x40013400

0800adec <TIM_OC4_SetConfig>:
 800adec:	b480      	push	{r7}
 800adee:	b087      	sub	sp, #28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	613b      	str	r3, [r7, #16]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	621a      	str	r2, [r3, #32]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	617b      	str	r3, [r7, #20]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae36:	613b      	str	r3, [r7, #16]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	031b      	lsls	r3, r3, #12
 800ae3e:	693a      	ldr	r2, [r7, #16]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a11      	ldr	r2, [pc, #68]	; (800ae8c <TIM_OC4_SetConfig+0xa0>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d003      	beq.n	800ae54 <TIM_OC4_SetConfig+0x68>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a10      	ldr	r2, [pc, #64]	; (800ae90 <TIM_OC4_SetConfig+0xa4>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d109      	bne.n	800ae68 <TIM_OC4_SetConfig+0x7c>
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae5a:	617b      	str	r3, [r7, #20]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	019b      	lsls	r3, r3, #6
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	605a      	str	r2, [r3, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	61da      	str	r2, [r3, #28]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	641a      	str	r2, [r3, #64]	; 0x40
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	621a      	str	r2, [r3, #32]
 800ae82:	bf00      	nop
 800ae84:	371c      	adds	r7, #28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bc80      	pop	{r7}
 800ae8a:	4770      	bx	lr
 800ae8c:	40012c00 	.word	0x40012c00
 800ae90:	40013400 	.word	0x40013400

0800ae94 <TIM_TI1_ConfigInputStage>:
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	f023 0201 	bic.w	r2, r3, #1
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	621a      	str	r2, [r3, #32]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	613b      	str	r3, [r7, #16]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aebe:	613b      	str	r3, [r7, #16]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	011b      	lsls	r3, r3, #4
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	613b      	str	r3, [r7, #16]
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f023 030a 	bic.w	r3, r3, #10
 800aed0:	617b      	str	r3, [r7, #20]
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	617b      	str	r3, [r7, #20]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	619a      	str	r2, [r3, #24]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	621a      	str	r2, [r3, #32]
 800aee6:	bf00      	nop
 800aee8:	371c      	adds	r7, #28
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bc80      	pop	{r7}
 800aeee:	4770      	bx	lr

0800aef0 <TIM_TI2_ConfigInputStage>:
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	617b      	str	r3, [r7, #20]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	f023 0210 	bic.w	r2, r3, #16
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	621a      	str	r2, [r3, #32]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	031b      	lsls	r3, r3, #12
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	4313      	orrs	r3, r2
 800af24:	613b      	str	r3, [r7, #16]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	4313      	orrs	r3, r2
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	619a      	str	r2, [r3, #24]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	621a      	str	r2, [r3, #32]
 800af44:	bf00      	nop
 800af46:	371c      	adds	r7, #28
 800af48:	46bd      	mov	sp, r7
 800af4a:	bc80      	pop	{r7}
 800af4c:	4770      	bx	lr

0800af4e <TIM_ITRx_SetConfig>:
 800af4e:	b480      	push	{r7}
 800af50:	b085      	sub	sp, #20
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	6039      	str	r1, [r7, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f043 0307 	orr.w	r3, r3, #7
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	609a      	str	r2, [r3, #8]
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr

0800af82 <TIM_ETR_SetConfig>:
 800af82:	b480      	push	{r7}
 800af84:	b087      	sub	sp, #28
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	607a      	str	r2, [r7, #4]
 800af8e:	603b      	str	r3, [r7, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af9c:	617b      	str	r3, [r7, #20]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	021a      	lsls	r2, r3, #8
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	431a      	orrs	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	4313      	orrs	r3, r2
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	609a      	str	r2, [r3, #8]
 800afb6:	bf00      	nop
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	bc80      	pop	{r7}
 800afbe:	4770      	bx	lr

0800afc0 <TIM_CCxChannelCmd>:
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f003 031f 	and.w	r3, r3, #31
 800afd2:	2201      	movs	r2, #1
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6a1a      	ldr	r2, [r3, #32]
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	43db      	mvns	r3, r3
 800afe2:	401a      	ands	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	621a      	str	r2, [r3, #32]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a1a      	ldr	r2, [r3, #32]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f003 031f 	and.w	r3, r3, #31
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	fa01 f303 	lsl.w	r3, r1, r3
 800aff8:	431a      	orrs	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	621a      	str	r2, [r3, #32]
 800affe:	bf00      	nop
 800b000:	371c      	adds	r7, #28
 800b002:	46bd      	mov	sp, r7
 800b004:	bc80      	pop	{r7}
 800b006:	4770      	bx	lr

0800b008 <HAL_TIMEx_MasterConfigSynchronization>:
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d101      	bne.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b01c:	2302      	movs	r3, #2
 800b01e:	e050      	b.n	800b0c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2202      	movs	r2, #2
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	60fb      	str	r3, [r7, #12]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	60bb      	str	r3, [r7, #8]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	4313      	orrs	r3, r2
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	605a      	str	r2, [r3, #4]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a1b      	ldr	r2, [pc, #108]	; (800b0cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d018      	beq.n	800b096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a19      	ldr	r2, [pc, #100]	; (800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d013      	beq.n	800b096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b076:	d00e      	beq.n	800b096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d009      	beq.n	800b096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a14      	ldr	r2, [pc, #80]	; (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d004      	beq.n	800b096 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a12      	ldr	r2, [pc, #72]	; (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d10c      	bne.n	800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b09c:	60bb      	str	r3, [r7, #8]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60bb      	str	r3, [r7, #8]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	609a      	str	r2, [r3, #8]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bc80      	pop	{r7}
 800b0ca:	4770      	bx	lr
 800b0cc:	40012c00 	.word	0x40012c00
 800b0d0:	40013400 	.word	0x40013400
 800b0d4:	40000400 	.word	0x40000400
 800b0d8:	40000800 	.word	0x40000800
 800b0dc:	40000c00 	.word	0x40000c00

0800b0e0 <HAL_TIMEx_ConfigBreakDeadTime>:
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e03d      	b.n	800b178 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	4313      	orrs	r3, r2
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4313      	orrs	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	4313      	orrs	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	4313      	orrs	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	645a      	str	r2, [r3, #68]	; 0x44
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b176:	2300      	movs	r3, #0
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bc80      	pop	{r7}
 800b180:	4770      	bx	lr

0800b182 <HAL_TIMEx_CommutCallback>:
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	bf00      	nop
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	bc80      	pop	{r7}
 800b192:	4770      	bx	lr

0800b194 <HAL_TIMEx_BreakCallback>:
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bc80      	pop	{r7}
 800b1a4:	4770      	bx	lr

0800b1a6 <HAL_UART_Init>:
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <HAL_UART_Init+0x12>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e042      	b.n	800b23e <HAL_UART_Init+0x98>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d106      	bne.n	800b1d2 <HAL_UART_Init+0x2c>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7fb fc4b 	bl	8006a68 <HAL_UART_MspInit>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2224      	movs	r2, #36	; 0x24
 800b1d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68da      	ldr	r2, [r3, #12]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1e8:	60da      	str	r2, [r3, #12]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f972 	bl	800b4d4 <UART_SetConfig>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	691a      	ldr	r2, [r3, #16]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1fe:	611a      	str	r2, [r3, #16]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	695a      	ldr	r2, [r3, #20]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b20e:	615a      	str	r2, [r3, #20]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b21e:	60da      	str	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	645a      	str	r2, [r3, #68]	; 0x44
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2220      	movs	r2, #32
 800b22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2220      	movs	r2, #32
 800b232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	635a      	str	r2, [r3, #52]	; 0x34
 800b23c:	2300      	movs	r3, #0
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <HAL_UART_Transmit>:
 800b246:	b580      	push	{r7, lr}
 800b248:	b08a      	sub	sp, #40	; 0x28
 800b24a:	af02      	add	r7, sp, #8
 800b24c:	60f8      	str	r0, [r7, #12]
 800b24e:	60b9      	str	r1, [r7, #8]
 800b250:	603b      	str	r3, [r7, #0]
 800b252:	4613      	mov	r3, r2
 800b254:	80fb      	strh	r3, [r7, #6]
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b20      	cmp	r3, #32
 800b264:	d175      	bne.n	800b352 <HAL_UART_Transmit+0x10c>
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <HAL_UART_Transmit+0x2c>
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <HAL_UART_Transmit+0x30>
 800b272:	2301      	movs	r3, #1
 800b274:	e06e      	b.n	800b354 <HAL_UART_Transmit+0x10e>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	645a      	str	r2, [r3, #68]	; 0x44
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2221      	movs	r2, #33	; 0x21
 800b280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b284:	f7fb fda0 	bl	8006dc8 <HAL_GetTick>
 800b288:	6178      	str	r0, [r7, #20]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	88fa      	ldrh	r2, [r7, #6]
 800b28e:	849a      	strh	r2, [r3, #36]	; 0x24
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	88fa      	ldrh	r2, [r7, #6]
 800b294:	84da      	strh	r2, [r3, #38]	; 0x26
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b29e:	d108      	bne.n	800b2b2 <HAL_UART_Transmit+0x6c>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <HAL_UART_Transmit+0x6c>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	61fb      	str	r3, [r7, #28]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	61bb      	str	r3, [r7, #24]
 800b2b0:	e003      	b.n	800b2ba <HAL_UART_Transmit+0x74>
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	61fb      	str	r3, [r7, #28]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	61bb      	str	r3, [r7, #24]
 800b2ba:	e02e      	b.n	800b31a <HAL_UART_Transmit+0xd4>
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2180      	movs	r1, #128	; 0x80
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 f848 	bl	800b35c <UART_WaitOnFlagUntilTimeout>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d005      	beq.n	800b2de <HAL_UART_Transmit+0x98>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e03a      	b.n	800b354 <HAL_UART_Transmit+0x10e>
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10b      	bne.n	800b2fc <HAL_UART_Transmit+0xb6>
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2f2:	605a      	str	r2, [r3, #4]
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	3302      	adds	r3, #2
 800b2f8:	61bb      	str	r3, [r7, #24]
 800b2fa:	e007      	b.n	800b30c <HAL_UART_Transmit+0xc6>
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	781a      	ldrb	r2, [r3, #0]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	605a      	str	r2, [r3, #4]
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	3301      	adds	r3, #1
 800b30a:	61fb      	str	r3, [r7, #28]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b310:	b29b      	uxth	r3, r3
 800b312:	3b01      	subs	r3, #1
 800b314:	b29a      	uxth	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	84da      	strh	r2, [r3, #38]	; 0x26
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b31e:	b29b      	uxth	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1cb      	bne.n	800b2bc <HAL_UART_Transmit+0x76>
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2200      	movs	r2, #0
 800b32c:	2140      	movs	r1, #64	; 0x40
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f000 f814 	bl	800b35c <UART_WaitOnFlagUntilTimeout>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <HAL_UART_Transmit+0x100>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b342:	2303      	movs	r3, #3
 800b344:	e006      	b.n	800b354 <HAL_UART_Transmit+0x10e>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2220      	movs	r2, #32
 800b34a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b34e:	2300      	movs	r3, #0
 800b350:	e000      	b.n	800b354 <HAL_UART_Transmit+0x10e>
 800b352:	2302      	movs	r3, #2
 800b354:	4618      	mov	r0, r3
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <UART_WaitOnFlagUntilTimeout>:
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	4613      	mov	r3, r2
 800b36a:	71fb      	strb	r3, [r7, #7]
 800b36c:	e03b      	b.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b374:	d037      	beq.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b376:	f7fb fd27 	bl	8006dc8 <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	6a3a      	ldr	r2, [r7, #32]
 800b382:	429a      	cmp	r2, r3
 800b384:	d302      	bcc.n	800b38c <UART_WaitOnFlagUntilTimeout+0x30>
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d101      	bne.n	800b390 <UART_WaitOnFlagUntilTimeout+0x34>
 800b38c:	2303      	movs	r3, #3
 800b38e:	e03a      	b.n	800b406 <UART_WaitOnFlagUntilTimeout+0xaa>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f003 0304 	and.w	r3, r3, #4
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d023      	beq.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b80      	cmp	r3, #128	; 0x80
 800b3a2:	d020      	beq.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b40      	cmp	r3, #64	; 0x40
 800b3a8:	d01d      	beq.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0308 	and.w	r3, r3, #8
 800b3b4:	2b08      	cmp	r3, #8
 800b3b6:	d116      	bne.n	800b3e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	617b      	str	r3, [r7, #20]
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 f81d 	bl	800b40e <UART_EndRxTransfer>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2208      	movs	r2, #8
 800b3d8:	645a      	str	r2, [r3, #68]	; 0x44
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e00f      	b.n	800b406 <UART_WaitOnFlagUntilTimeout+0xaa>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	bf0c      	ite	eq
 800b3f6:	2301      	moveq	r3, #1
 800b3f8:	2300      	movne	r3, #0
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	429a      	cmp	r2, r3
 800b402:	d0b4      	beq.n	800b36e <UART_WaitOnFlagUntilTimeout+0x12>
 800b404:	2300      	movs	r3, #0
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <UART_EndRxTransfer>:
 800b40e:	b480      	push	{r7}
 800b410:	b095      	sub	sp, #84	; 0x54
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	330c      	adds	r3, #12
 800b41c:	637b      	str	r3, [r7, #52]	; 0x34
 800b41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	633b      	str	r3, [r7, #48]	; 0x30
 800b426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b42c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	330c      	adds	r3, #12
 800b434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b436:	643a      	str	r2, [r7, #64]	; 0x40
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b43a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b43c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	63bb      	str	r3, [r7, #56]	; 0x38
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e5      	bne.n	800b416 <UART_EndRxTransfer+0x8>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3314      	adds	r3, #20
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	61fb      	str	r3, [r7, #28]
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	f023 0301 	bic.w	r3, r3, #1
 800b460:	64bb      	str	r3, [r7, #72]	; 0x48
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3314      	adds	r3, #20
 800b468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b46a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b46e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	627b      	str	r3, [r7, #36]	; 0x24
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e5      	bne.n	800b44a <UART_EndRxTransfer+0x3c>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b482:	2b01      	cmp	r3, #1
 800b484:	d119      	bne.n	800b4ba <UART_EndRxTransfer+0xac>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	330c      	adds	r3, #12
 800b48c:	60fb      	str	r3, [r7, #12]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	e853 3f00 	ldrex	r3, [r3]
 800b494:	60bb      	str	r3, [r7, #8]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	f023 0310 	bic.w	r3, r3, #16
 800b49c:	647b      	str	r3, [r7, #68]	; 0x44
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	330c      	adds	r3, #12
 800b4a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4a6:	61ba      	str	r2, [r7, #24]
 800b4a8:	617b      	str	r3, [r7, #20]
 800b4aa:	6979      	ldr	r1, [r7, #20]
 800b4ac:	69ba      	ldr	r2, [r7, #24]
 800b4ae:	e841 2300 	strex	r3, r2, [r1]
 800b4b2:	613b      	str	r3, [r7, #16]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1e5      	bne.n	800b486 <UART_EndRxTransfer+0x78>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	631a      	str	r2, [r3, #48]	; 0x30
 800b4c8:	bf00      	nop
 800b4ca:	3754      	adds	r7, #84	; 0x54
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bc80      	pop	{r7}
 800b4d0:	4770      	bx	lr
	...

0800b4d4 <UART_SetConfig>:
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68da      	ldr	r2, [r3, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	611a      	str	r2, [r3, #16]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689a      	ldr	r2, [r3, #8]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	4313      	orrs	r3, r2
 800b502:	60bb      	str	r3, [r7, #8]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b50e:	f023 030c 	bic.w	r3, r3, #12
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	6812      	ldr	r2, [r2, #0]
 800b516:	68b9      	ldr	r1, [r7, #8]
 800b518:	430b      	orrs	r3, r1
 800b51a:	60d3      	str	r3, [r2, #12]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	699a      	ldr	r2, [r3, #24]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	430a      	orrs	r2, r1
 800b530:	615a      	str	r2, [r3, #20]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a2c      	ldr	r2, [pc, #176]	; (800b5e8 <UART_SetConfig+0x114>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d103      	bne.n	800b544 <UART_SetConfig+0x70>
 800b53c:	f7fe fb68 	bl	8009c10 <HAL_RCC_GetPCLK2Freq>
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	e002      	b.n	800b54a <UART_SetConfig+0x76>
 800b544:	f7fe fb50 	bl	8009be8 <HAL_RCC_GetPCLK1Freq>
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	4613      	mov	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4413      	add	r3, r2
 800b552:	009a      	lsls	r2, r3, #2
 800b554:	441a      	add	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b560:	4a22      	ldr	r2, [pc, #136]	; (800b5ec <UART_SetConfig+0x118>)
 800b562:	fba2 2303 	umull	r2, r3, r2, r3
 800b566:	095b      	lsrs	r3, r3, #5
 800b568:	0119      	lsls	r1, r3, #4
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009a      	lsls	r2, r3, #2
 800b574:	441a      	add	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b580:	4b1a      	ldr	r3, [pc, #104]	; (800b5ec <UART_SetConfig+0x118>)
 800b582:	fba3 0302 	umull	r0, r3, r3, r2
 800b586:	095b      	lsrs	r3, r3, #5
 800b588:	2064      	movs	r0, #100	; 0x64
 800b58a:	fb00 f303 	mul.w	r3, r0, r3
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	011b      	lsls	r3, r3, #4
 800b592:	3332      	adds	r3, #50	; 0x32
 800b594:	4a15      	ldr	r2, [pc, #84]	; (800b5ec <UART_SetConfig+0x118>)
 800b596:	fba2 2303 	umull	r2, r3, r2, r3
 800b59a:	095b      	lsrs	r3, r3, #5
 800b59c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5a0:	4419      	add	r1, r3
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009a      	lsls	r2, r3, #2
 800b5ac:	441a      	add	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b5b8:	4b0c      	ldr	r3, [pc, #48]	; (800b5ec <UART_SetConfig+0x118>)
 800b5ba:	fba3 0302 	umull	r0, r3, r3, r2
 800b5be:	095b      	lsrs	r3, r3, #5
 800b5c0:	2064      	movs	r0, #100	; 0x64
 800b5c2:	fb00 f303 	mul.w	r3, r0, r3
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	011b      	lsls	r3, r3, #4
 800b5ca:	3332      	adds	r3, #50	; 0x32
 800b5cc:	4a07      	ldr	r2, [pc, #28]	; (800b5ec <UART_SetConfig+0x118>)
 800b5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b5d2:	095b      	lsrs	r3, r3, #5
 800b5d4:	f003 020f 	and.w	r2, r3, #15
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	440a      	add	r2, r1
 800b5de:	609a      	str	r2, [r3, #8]
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	40013800 	.word	0x40013800
 800b5ec:	51eb851f 	.word	0x51eb851f

0800b5f0 <__cvt>:
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f6:	461f      	mov	r7, r3
 800b5f8:	bfbb      	ittet	lt
 800b5fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b5fe:	461f      	movlt	r7, r3
 800b600:	2300      	movge	r3, #0
 800b602:	232d      	movlt	r3, #45	; 0x2d
 800b604:	b088      	sub	sp, #32
 800b606:	4614      	mov	r4, r2
 800b608:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b60a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b60c:	7013      	strb	r3, [r2, #0]
 800b60e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b610:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b614:	f023 0820 	bic.w	r8, r3, #32
 800b618:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b61c:	d005      	beq.n	800b62a <__cvt+0x3a>
 800b61e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b622:	d100      	bne.n	800b626 <__cvt+0x36>
 800b624:	3501      	adds	r5, #1
 800b626:	2302      	movs	r3, #2
 800b628:	e000      	b.n	800b62c <__cvt+0x3c>
 800b62a:	2303      	movs	r3, #3
 800b62c:	aa07      	add	r2, sp, #28
 800b62e:	9204      	str	r2, [sp, #16]
 800b630:	aa06      	add	r2, sp, #24
 800b632:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b636:	e9cd 3500 	strd	r3, r5, [sp]
 800b63a:	4622      	mov	r2, r4
 800b63c:	463b      	mov	r3, r7
 800b63e:	f001 f983 	bl	800c948 <_dtoa_r>
 800b642:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b646:	4606      	mov	r6, r0
 800b648:	d102      	bne.n	800b650 <__cvt+0x60>
 800b64a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b64c:	07db      	lsls	r3, r3, #31
 800b64e:	d522      	bpl.n	800b696 <__cvt+0xa6>
 800b650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b654:	eb06 0905 	add.w	r9, r6, r5
 800b658:	d110      	bne.n	800b67c <__cvt+0x8c>
 800b65a:	7833      	ldrb	r3, [r6, #0]
 800b65c:	2b30      	cmp	r3, #48	; 0x30
 800b65e:	d10a      	bne.n	800b676 <__cvt+0x86>
 800b660:	2200      	movs	r2, #0
 800b662:	2300      	movs	r3, #0
 800b664:	4620      	mov	r0, r4
 800b666:	4639      	mov	r1, r7
 800b668:	f7f5 fa0a 	bl	8000a80 <__aeabi_dcmpeq>
 800b66c:	b918      	cbnz	r0, 800b676 <__cvt+0x86>
 800b66e:	f1c5 0501 	rsb	r5, r5, #1
 800b672:	f8ca 5000 	str.w	r5, [sl]
 800b676:	f8da 3000 	ldr.w	r3, [sl]
 800b67a:	4499      	add	r9, r3
 800b67c:	2200      	movs	r2, #0
 800b67e:	2300      	movs	r3, #0
 800b680:	4620      	mov	r0, r4
 800b682:	4639      	mov	r1, r7
 800b684:	f7f5 f9fc 	bl	8000a80 <__aeabi_dcmpeq>
 800b688:	b108      	cbz	r0, 800b68e <__cvt+0x9e>
 800b68a:	f8cd 901c 	str.w	r9, [sp, #28]
 800b68e:	2230      	movs	r2, #48	; 0x30
 800b690:	9b07      	ldr	r3, [sp, #28]
 800b692:	454b      	cmp	r3, r9
 800b694:	d307      	bcc.n	800b6a6 <__cvt+0xb6>
 800b696:	4630      	mov	r0, r6
 800b698:	9b07      	ldr	r3, [sp, #28]
 800b69a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b69c:	1b9b      	subs	r3, r3, r6
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	b008      	add	sp, #32
 800b6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a6:	1c59      	adds	r1, r3, #1
 800b6a8:	9107      	str	r1, [sp, #28]
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	e7f0      	b.n	800b690 <__cvt+0xa0>

0800b6ae <__exponent>:
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6b2:	2900      	cmp	r1, #0
 800b6b4:	f803 2b02 	strb.w	r2, [r3], #2
 800b6b8:	bfb6      	itet	lt
 800b6ba:	222d      	movlt	r2, #45	; 0x2d
 800b6bc:	222b      	movge	r2, #43	; 0x2b
 800b6be:	4249      	neglt	r1, r1
 800b6c0:	2909      	cmp	r1, #9
 800b6c2:	7042      	strb	r2, [r0, #1]
 800b6c4:	dd2a      	ble.n	800b71c <__exponent+0x6e>
 800b6c6:	f10d 0207 	add.w	r2, sp, #7
 800b6ca:	4617      	mov	r7, r2
 800b6cc:	260a      	movs	r6, #10
 800b6ce:	fb91 f5f6 	sdiv	r5, r1, r6
 800b6d2:	4694      	mov	ip, r2
 800b6d4:	fb06 1415 	mls	r4, r6, r5, r1
 800b6d8:	3430      	adds	r4, #48	; 0x30
 800b6da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b6de:	460c      	mov	r4, r1
 800b6e0:	2c63      	cmp	r4, #99	; 0x63
 800b6e2:	4629      	mov	r1, r5
 800b6e4:	f102 32ff 	add.w	r2, r2, #4294967295
 800b6e8:	dcf1      	bgt.n	800b6ce <__exponent+0x20>
 800b6ea:	3130      	adds	r1, #48	; 0x30
 800b6ec:	f1ac 0402 	sub.w	r4, ip, #2
 800b6f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	1c41      	adds	r1, r0, #1
 800b6f8:	42ba      	cmp	r2, r7
 800b6fa:	d30a      	bcc.n	800b712 <__exponent+0x64>
 800b6fc:	f10d 0209 	add.w	r2, sp, #9
 800b700:	eba2 020c 	sub.w	r2, r2, ip
 800b704:	42bc      	cmp	r4, r7
 800b706:	bf88      	it	hi
 800b708:	2200      	movhi	r2, #0
 800b70a:	4413      	add	r3, r2
 800b70c:	1a18      	subs	r0, r3, r0
 800b70e:	b003      	add	sp, #12
 800b710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b712:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b716:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b71a:	e7ed      	b.n	800b6f8 <__exponent+0x4a>
 800b71c:	2330      	movs	r3, #48	; 0x30
 800b71e:	3130      	adds	r1, #48	; 0x30
 800b720:	7083      	strb	r3, [r0, #2]
 800b722:	70c1      	strb	r1, [r0, #3]
 800b724:	1d03      	adds	r3, r0, #4
 800b726:	e7f1      	b.n	800b70c <__exponent+0x5e>

0800b728 <_printf_float>:
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	b091      	sub	sp, #68	; 0x44
 800b72e:	460c      	mov	r4, r1
 800b730:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b734:	4616      	mov	r6, r2
 800b736:	461f      	mov	r7, r3
 800b738:	4605      	mov	r5, r0
 800b73a:	f000 ffe3 	bl	800c704 <_localeconv_r>
 800b73e:	6803      	ldr	r3, [r0, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	9309      	str	r3, [sp, #36]	; 0x24
 800b744:	f7f4 fd70 	bl	8000228 <strlen>
 800b748:	2300      	movs	r3, #0
 800b74a:	930e      	str	r3, [sp, #56]	; 0x38
 800b74c:	f8d8 3000 	ldr.w	r3, [r8]
 800b750:	900a      	str	r0, [sp, #40]	; 0x28
 800b752:	3307      	adds	r3, #7
 800b754:	f023 0307 	bic.w	r3, r3, #7
 800b758:	f103 0208 	add.w	r2, r3, #8
 800b75c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b760:	f8d4 b000 	ldr.w	fp, [r4]
 800b764:	f8c8 2000 	str.w	r2, [r8]
 800b768:	e9d3 a800 	ldrd	sl, r8, [r3]
 800b76c:	4652      	mov	r2, sl
 800b76e:	4643      	mov	r3, r8
 800b770:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b774:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800b778:	930b      	str	r3, [sp, #44]	; 0x2c
 800b77a:	f04f 32ff 	mov.w	r2, #4294967295
 800b77e:	4650      	mov	r0, sl
 800b780:	4b9c      	ldr	r3, [pc, #624]	; (800b9f4 <_printf_float+0x2cc>)
 800b782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b784:	f7f5 f9ae 	bl	8000ae4 <__aeabi_dcmpun>
 800b788:	bb70      	cbnz	r0, 800b7e8 <_printf_float+0xc0>
 800b78a:	f04f 32ff 	mov.w	r2, #4294967295
 800b78e:	4650      	mov	r0, sl
 800b790:	4b98      	ldr	r3, [pc, #608]	; (800b9f4 <_printf_float+0x2cc>)
 800b792:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b794:	f7f5 f988 	bl	8000aa8 <__aeabi_dcmple>
 800b798:	bb30      	cbnz	r0, 800b7e8 <_printf_float+0xc0>
 800b79a:	2200      	movs	r2, #0
 800b79c:	2300      	movs	r3, #0
 800b79e:	4650      	mov	r0, sl
 800b7a0:	4641      	mov	r1, r8
 800b7a2:	f7f5 f977 	bl	8000a94 <__aeabi_dcmplt>
 800b7a6:	b110      	cbz	r0, 800b7ae <_printf_float+0x86>
 800b7a8:	232d      	movs	r3, #45	; 0x2d
 800b7aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ae:	4a92      	ldr	r2, [pc, #584]	; (800b9f8 <_printf_float+0x2d0>)
 800b7b0:	4b92      	ldr	r3, [pc, #584]	; (800b9fc <_printf_float+0x2d4>)
 800b7b2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b7b6:	bf94      	ite	ls
 800b7b8:	4690      	movls	r8, r2
 800b7ba:	4698      	movhi	r8, r3
 800b7bc:	2303      	movs	r3, #3
 800b7be:	f04f 0a00 	mov.w	sl, #0
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	f02b 0304 	bic.w	r3, fp, #4
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	4633      	mov	r3, r6
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	9700      	str	r7, [sp, #0]
 800b7d2:	aa0f      	add	r2, sp, #60	; 0x3c
 800b7d4:	f000 f9d6 	bl	800bb84 <_printf_common>
 800b7d8:	3001      	adds	r0, #1
 800b7da:	f040 8090 	bne.w	800b8fe <_printf_float+0x1d6>
 800b7de:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e2:	b011      	add	sp, #68	; 0x44
 800b7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e8:	4652      	mov	r2, sl
 800b7ea:	4643      	mov	r3, r8
 800b7ec:	4650      	mov	r0, sl
 800b7ee:	4641      	mov	r1, r8
 800b7f0:	f7f5 f978 	bl	8000ae4 <__aeabi_dcmpun>
 800b7f4:	b148      	cbz	r0, 800b80a <_printf_float+0xe2>
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	bfb8      	it	lt
 800b7fc:	232d      	movlt	r3, #45	; 0x2d
 800b7fe:	4a80      	ldr	r2, [pc, #512]	; (800ba00 <_printf_float+0x2d8>)
 800b800:	bfb8      	it	lt
 800b802:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b806:	4b7f      	ldr	r3, [pc, #508]	; (800ba04 <_printf_float+0x2dc>)
 800b808:	e7d3      	b.n	800b7b2 <_printf_float+0x8a>
 800b80a:	6863      	ldr	r3, [r4, #4]
 800b80c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	d142      	bne.n	800b89a <_printf_float+0x172>
 800b814:	2306      	movs	r3, #6
 800b816:	6063      	str	r3, [r4, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	9206      	str	r2, [sp, #24]
 800b81c:	aa0e      	add	r2, sp, #56	; 0x38
 800b81e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b822:	aa0d      	add	r2, sp, #52	; 0x34
 800b824:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b828:	9203      	str	r2, [sp, #12]
 800b82a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b82e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	4652      	mov	r2, sl
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	4628      	mov	r0, r5
 800b83c:	4643      	mov	r3, r8
 800b83e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b840:	f7ff fed6 	bl	800b5f0 <__cvt>
 800b844:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b846:	4680      	mov	r8, r0
 800b848:	2947      	cmp	r1, #71	; 0x47
 800b84a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b84c:	d108      	bne.n	800b860 <_printf_float+0x138>
 800b84e:	1cc8      	adds	r0, r1, #3
 800b850:	db02      	blt.n	800b858 <_printf_float+0x130>
 800b852:	6863      	ldr	r3, [r4, #4]
 800b854:	4299      	cmp	r1, r3
 800b856:	dd40      	ble.n	800b8da <_printf_float+0x1b2>
 800b858:	f1a9 0902 	sub.w	r9, r9, #2
 800b85c:	fa5f f989 	uxtb.w	r9, r9
 800b860:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b864:	d81f      	bhi.n	800b8a6 <_printf_float+0x17e>
 800b866:	464a      	mov	r2, r9
 800b868:	3901      	subs	r1, #1
 800b86a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b86e:	910d      	str	r1, [sp, #52]	; 0x34
 800b870:	f7ff ff1d 	bl	800b6ae <__exponent>
 800b874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b876:	4682      	mov	sl, r0
 800b878:	1813      	adds	r3, r2, r0
 800b87a:	2a01      	cmp	r2, #1
 800b87c:	6123      	str	r3, [r4, #16]
 800b87e:	dc02      	bgt.n	800b886 <_printf_float+0x15e>
 800b880:	6822      	ldr	r2, [r4, #0]
 800b882:	07d2      	lsls	r2, r2, #31
 800b884:	d501      	bpl.n	800b88a <_printf_float+0x162>
 800b886:	3301      	adds	r3, #1
 800b888:	6123      	str	r3, [r4, #16]
 800b88a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d09b      	beq.n	800b7ca <_printf_float+0xa2>
 800b892:	232d      	movs	r3, #45	; 0x2d
 800b894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b898:	e797      	b.n	800b7ca <_printf_float+0xa2>
 800b89a:	2947      	cmp	r1, #71	; 0x47
 800b89c:	d1bc      	bne.n	800b818 <_printf_float+0xf0>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1ba      	bne.n	800b818 <_printf_float+0xf0>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e7b7      	b.n	800b816 <_printf_float+0xee>
 800b8a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b8aa:	d118      	bne.n	800b8de <_printf_float+0x1b6>
 800b8ac:	2900      	cmp	r1, #0
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	dd0b      	ble.n	800b8ca <_printf_float+0x1a2>
 800b8b2:	6121      	str	r1, [r4, #16]
 800b8b4:	b913      	cbnz	r3, 800b8bc <_printf_float+0x194>
 800b8b6:	6822      	ldr	r2, [r4, #0]
 800b8b8:	07d0      	lsls	r0, r2, #31
 800b8ba:	d502      	bpl.n	800b8c2 <_printf_float+0x19a>
 800b8bc:	3301      	adds	r3, #1
 800b8be:	440b      	add	r3, r1
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	f04f 0a00 	mov.w	sl, #0
 800b8c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b8c8:	e7df      	b.n	800b88a <_printf_float+0x162>
 800b8ca:	b913      	cbnz	r3, 800b8d2 <_printf_float+0x1aa>
 800b8cc:	6822      	ldr	r2, [r4, #0]
 800b8ce:	07d2      	lsls	r2, r2, #31
 800b8d0:	d501      	bpl.n	800b8d6 <_printf_float+0x1ae>
 800b8d2:	3302      	adds	r3, #2
 800b8d4:	e7f4      	b.n	800b8c0 <_printf_float+0x198>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e7f2      	b.n	800b8c0 <_printf_float+0x198>
 800b8da:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b8de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8e0:	4299      	cmp	r1, r3
 800b8e2:	db05      	blt.n	800b8f0 <_printf_float+0x1c8>
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	6121      	str	r1, [r4, #16]
 800b8e8:	07d8      	lsls	r0, r3, #31
 800b8ea:	d5ea      	bpl.n	800b8c2 <_printf_float+0x19a>
 800b8ec:	1c4b      	adds	r3, r1, #1
 800b8ee:	e7e7      	b.n	800b8c0 <_printf_float+0x198>
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	bfcc      	ite	gt
 800b8f4:	2201      	movgt	r2, #1
 800b8f6:	f1c1 0202 	rsble	r2, r1, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	e7e0      	b.n	800b8c0 <_printf_float+0x198>
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	055a      	lsls	r2, r3, #21
 800b902:	d407      	bmi.n	800b914 <_printf_float+0x1ec>
 800b904:	6923      	ldr	r3, [r4, #16]
 800b906:	4642      	mov	r2, r8
 800b908:	4631      	mov	r1, r6
 800b90a:	4628      	mov	r0, r5
 800b90c:	47b8      	blx	r7
 800b90e:	3001      	adds	r0, #1
 800b910:	d12b      	bne.n	800b96a <_printf_float+0x242>
 800b912:	e764      	b.n	800b7de <_printf_float+0xb6>
 800b914:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b918:	f240 80dd 	bls.w	800bad6 <_printf_float+0x3ae>
 800b91c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b920:	2200      	movs	r2, #0
 800b922:	2300      	movs	r3, #0
 800b924:	f7f5 f8ac 	bl	8000a80 <__aeabi_dcmpeq>
 800b928:	2800      	cmp	r0, #0
 800b92a:	d033      	beq.n	800b994 <_printf_float+0x26c>
 800b92c:	2301      	movs	r3, #1
 800b92e:	4631      	mov	r1, r6
 800b930:	4628      	mov	r0, r5
 800b932:	4a35      	ldr	r2, [pc, #212]	; (800ba08 <_printf_float+0x2e0>)
 800b934:	47b8      	blx	r7
 800b936:	3001      	adds	r0, #1
 800b938:	f43f af51 	beq.w	800b7de <_printf_float+0xb6>
 800b93c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b940:	429a      	cmp	r2, r3
 800b942:	db02      	blt.n	800b94a <_printf_float+0x222>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	07d8      	lsls	r0, r3, #31
 800b948:	d50f      	bpl.n	800b96a <_printf_float+0x242>
 800b94a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b94e:	4631      	mov	r1, r6
 800b950:	4628      	mov	r0, r5
 800b952:	47b8      	blx	r7
 800b954:	3001      	adds	r0, #1
 800b956:	f43f af42 	beq.w	800b7de <_printf_float+0xb6>
 800b95a:	f04f 0800 	mov.w	r8, #0
 800b95e:	f104 091a 	add.w	r9, r4, #26
 800b962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b964:	3b01      	subs	r3, #1
 800b966:	4543      	cmp	r3, r8
 800b968:	dc09      	bgt.n	800b97e <_printf_float+0x256>
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	079b      	lsls	r3, r3, #30
 800b96e:	f100 8104 	bmi.w	800bb7a <_printf_float+0x452>
 800b972:	68e0      	ldr	r0, [r4, #12]
 800b974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b976:	4298      	cmp	r0, r3
 800b978:	bfb8      	it	lt
 800b97a:	4618      	movlt	r0, r3
 800b97c:	e731      	b.n	800b7e2 <_printf_float+0xba>
 800b97e:	2301      	movs	r3, #1
 800b980:	464a      	mov	r2, r9
 800b982:	4631      	mov	r1, r6
 800b984:	4628      	mov	r0, r5
 800b986:	47b8      	blx	r7
 800b988:	3001      	adds	r0, #1
 800b98a:	f43f af28 	beq.w	800b7de <_printf_float+0xb6>
 800b98e:	f108 0801 	add.w	r8, r8, #1
 800b992:	e7e6      	b.n	800b962 <_printf_float+0x23a>
 800b994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b996:	2b00      	cmp	r3, #0
 800b998:	dc38      	bgt.n	800ba0c <_printf_float+0x2e4>
 800b99a:	2301      	movs	r3, #1
 800b99c:	4631      	mov	r1, r6
 800b99e:	4628      	mov	r0, r5
 800b9a0:	4a19      	ldr	r2, [pc, #100]	; (800ba08 <_printf_float+0x2e0>)
 800b9a2:	47b8      	blx	r7
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f43f af1a 	beq.w	800b7de <_printf_float+0xb6>
 800b9aa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	d102      	bne.n	800b9b8 <_printf_float+0x290>
 800b9b2:	6823      	ldr	r3, [r4, #0]
 800b9b4:	07d9      	lsls	r1, r3, #31
 800b9b6:	d5d8      	bpl.n	800b96a <_printf_float+0x242>
 800b9b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9bc:	4631      	mov	r1, r6
 800b9be:	4628      	mov	r0, r5
 800b9c0:	47b8      	blx	r7
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	f43f af0b 	beq.w	800b7de <_printf_float+0xb6>
 800b9c8:	f04f 0900 	mov.w	r9, #0
 800b9cc:	f104 0a1a 	add.w	sl, r4, #26
 800b9d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9d2:	425b      	negs	r3, r3
 800b9d4:	454b      	cmp	r3, r9
 800b9d6:	dc01      	bgt.n	800b9dc <_printf_float+0x2b4>
 800b9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9da:	e794      	b.n	800b906 <_printf_float+0x1de>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	4652      	mov	r2, sl
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	47b8      	blx	r7
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	f43f aef9 	beq.w	800b7de <_printf_float+0xb6>
 800b9ec:	f109 0901 	add.w	r9, r9, #1
 800b9f0:	e7ee      	b.n	800b9d0 <_printf_float+0x2a8>
 800b9f2:	bf00      	nop
 800b9f4:	7fefffff 	.word	0x7fefffff
 800b9f8:	0800ffb2 	.word	0x0800ffb2
 800b9fc:	0800ffb6 	.word	0x0800ffb6
 800ba00:	0800ffba 	.word	0x0800ffba
 800ba04:	0800ffbe 	.word	0x0800ffbe
 800ba08:	0800ffc2 	.word	0x0800ffc2
 800ba0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba10:	429a      	cmp	r2, r3
 800ba12:	bfa8      	it	ge
 800ba14:	461a      	movge	r2, r3
 800ba16:	2a00      	cmp	r2, #0
 800ba18:	4691      	mov	r9, r2
 800ba1a:	dc37      	bgt.n	800ba8c <_printf_float+0x364>
 800ba1c:	f04f 0b00 	mov.w	fp, #0
 800ba20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba24:	f104 021a 	add.w	r2, r4, #26
 800ba28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ba2c:	ebaa 0309 	sub.w	r3, sl, r9
 800ba30:	455b      	cmp	r3, fp
 800ba32:	dc33      	bgt.n	800ba9c <_printf_float+0x374>
 800ba34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	db3b      	blt.n	800bab4 <_printf_float+0x38c>
 800ba3c:	6823      	ldr	r3, [r4, #0]
 800ba3e:	07da      	lsls	r2, r3, #31
 800ba40:	d438      	bmi.n	800bab4 <_printf_float+0x38c>
 800ba42:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ba46:	eba2 0903 	sub.w	r9, r2, r3
 800ba4a:	eba2 020a 	sub.w	r2, r2, sl
 800ba4e:	4591      	cmp	r9, r2
 800ba50:	bfa8      	it	ge
 800ba52:	4691      	movge	r9, r2
 800ba54:	f1b9 0f00 	cmp.w	r9, #0
 800ba58:	dc34      	bgt.n	800bac4 <_printf_float+0x39c>
 800ba5a:	f04f 0800 	mov.w	r8, #0
 800ba5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba62:	f104 0a1a 	add.w	sl, r4, #26
 800ba66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba6a:	1a9b      	subs	r3, r3, r2
 800ba6c:	eba3 0309 	sub.w	r3, r3, r9
 800ba70:	4543      	cmp	r3, r8
 800ba72:	f77f af7a 	ble.w	800b96a <_printf_float+0x242>
 800ba76:	2301      	movs	r3, #1
 800ba78:	4652      	mov	r2, sl
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	47b8      	blx	r7
 800ba80:	3001      	adds	r0, #1
 800ba82:	f43f aeac 	beq.w	800b7de <_printf_float+0xb6>
 800ba86:	f108 0801 	add.w	r8, r8, #1
 800ba8a:	e7ec      	b.n	800ba66 <_printf_float+0x33e>
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	4631      	mov	r1, r6
 800ba90:	4642      	mov	r2, r8
 800ba92:	4628      	mov	r0, r5
 800ba94:	47b8      	blx	r7
 800ba96:	3001      	adds	r0, #1
 800ba98:	d1c0      	bne.n	800ba1c <_printf_float+0x2f4>
 800ba9a:	e6a0      	b.n	800b7de <_printf_float+0xb6>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	4631      	mov	r1, r6
 800baa0:	4628      	mov	r0, r5
 800baa2:	920b      	str	r2, [sp, #44]	; 0x2c
 800baa4:	47b8      	blx	r7
 800baa6:	3001      	adds	r0, #1
 800baa8:	f43f ae99 	beq.w	800b7de <_printf_float+0xb6>
 800baac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800baae:	f10b 0b01 	add.w	fp, fp, #1
 800bab2:	e7b9      	b.n	800ba28 <_printf_float+0x300>
 800bab4:	4631      	mov	r1, r6
 800bab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	d1bf      	bne.n	800ba42 <_printf_float+0x31a>
 800bac2:	e68c      	b.n	800b7de <_printf_float+0xb6>
 800bac4:	464b      	mov	r3, r9
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	eb08 020a 	add.w	r2, r8, sl
 800bace:	47b8      	blx	r7
 800bad0:	3001      	adds	r0, #1
 800bad2:	d1c2      	bne.n	800ba5a <_printf_float+0x332>
 800bad4:	e683      	b.n	800b7de <_printf_float+0xb6>
 800bad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bad8:	2a01      	cmp	r2, #1
 800bada:	dc01      	bgt.n	800bae0 <_printf_float+0x3b8>
 800badc:	07db      	lsls	r3, r3, #31
 800bade:	d539      	bpl.n	800bb54 <_printf_float+0x42c>
 800bae0:	2301      	movs	r3, #1
 800bae2:	4642      	mov	r2, r8
 800bae4:	4631      	mov	r1, r6
 800bae6:	4628      	mov	r0, r5
 800bae8:	47b8      	blx	r7
 800baea:	3001      	adds	r0, #1
 800baec:	f43f ae77 	beq.w	800b7de <_printf_float+0xb6>
 800baf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baf4:	4631      	mov	r1, r6
 800baf6:	4628      	mov	r0, r5
 800baf8:	47b8      	blx	r7
 800bafa:	3001      	adds	r0, #1
 800bafc:	f43f ae6f 	beq.w	800b7de <_printf_float+0xb6>
 800bb00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb04:	2200      	movs	r2, #0
 800bb06:	2300      	movs	r3, #0
 800bb08:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800bb0c:	f7f4 ffb8 	bl	8000a80 <__aeabi_dcmpeq>
 800bb10:	b9d8      	cbnz	r0, 800bb4a <_printf_float+0x422>
 800bb12:	f109 33ff 	add.w	r3, r9, #4294967295
 800bb16:	f108 0201 	add.w	r2, r8, #1
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	47b8      	blx	r7
 800bb20:	3001      	adds	r0, #1
 800bb22:	d10e      	bne.n	800bb42 <_printf_float+0x41a>
 800bb24:	e65b      	b.n	800b7de <_printf_float+0xb6>
 800bb26:	2301      	movs	r3, #1
 800bb28:	464a      	mov	r2, r9
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	47b8      	blx	r7
 800bb30:	3001      	adds	r0, #1
 800bb32:	f43f ae54 	beq.w	800b7de <_printf_float+0xb6>
 800bb36:	f108 0801 	add.w	r8, r8, #1
 800bb3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	4543      	cmp	r3, r8
 800bb40:	dcf1      	bgt.n	800bb26 <_printf_float+0x3fe>
 800bb42:	4653      	mov	r3, sl
 800bb44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb48:	e6de      	b.n	800b908 <_printf_float+0x1e0>
 800bb4a:	f04f 0800 	mov.w	r8, #0
 800bb4e:	f104 091a 	add.w	r9, r4, #26
 800bb52:	e7f2      	b.n	800bb3a <_printf_float+0x412>
 800bb54:	2301      	movs	r3, #1
 800bb56:	4642      	mov	r2, r8
 800bb58:	e7df      	b.n	800bb1a <_printf_float+0x3f2>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	464a      	mov	r2, r9
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4628      	mov	r0, r5
 800bb62:	47b8      	blx	r7
 800bb64:	3001      	adds	r0, #1
 800bb66:	f43f ae3a 	beq.w	800b7de <_printf_float+0xb6>
 800bb6a:	f108 0801 	add.w	r8, r8, #1
 800bb6e:	68e3      	ldr	r3, [r4, #12]
 800bb70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb72:	1a5b      	subs	r3, r3, r1
 800bb74:	4543      	cmp	r3, r8
 800bb76:	dcf0      	bgt.n	800bb5a <_printf_float+0x432>
 800bb78:	e6fb      	b.n	800b972 <_printf_float+0x24a>
 800bb7a:	f04f 0800 	mov.w	r8, #0
 800bb7e:	f104 0919 	add.w	r9, r4, #25
 800bb82:	e7f4      	b.n	800bb6e <_printf_float+0x446>

0800bb84 <_printf_common>:
 800bb84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb88:	4616      	mov	r6, r2
 800bb8a:	4699      	mov	r9, r3
 800bb8c:	688a      	ldr	r2, [r1, #8]
 800bb8e:	690b      	ldr	r3, [r1, #16]
 800bb90:	4607      	mov	r7, r0
 800bb92:	4293      	cmp	r3, r2
 800bb94:	bfb8      	it	lt
 800bb96:	4613      	movlt	r3, r2
 800bb98:	6033      	str	r3, [r6, #0]
 800bb9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb9e:	460c      	mov	r4, r1
 800bba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bba4:	b10a      	cbz	r2, 800bbaa <_printf_common+0x26>
 800bba6:	3301      	adds	r3, #1
 800bba8:	6033      	str	r3, [r6, #0]
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	0699      	lsls	r1, r3, #26
 800bbae:	bf42      	ittt	mi
 800bbb0:	6833      	ldrmi	r3, [r6, #0]
 800bbb2:	3302      	addmi	r3, #2
 800bbb4:	6033      	strmi	r3, [r6, #0]
 800bbb6:	6825      	ldr	r5, [r4, #0]
 800bbb8:	f015 0506 	ands.w	r5, r5, #6
 800bbbc:	d106      	bne.n	800bbcc <_printf_common+0x48>
 800bbbe:	f104 0a19 	add.w	sl, r4, #25
 800bbc2:	68e3      	ldr	r3, [r4, #12]
 800bbc4:	6832      	ldr	r2, [r6, #0]
 800bbc6:	1a9b      	subs	r3, r3, r2
 800bbc8:	42ab      	cmp	r3, r5
 800bbca:	dc2b      	bgt.n	800bc24 <_printf_common+0xa0>
 800bbcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbd0:	1e13      	subs	r3, r2, #0
 800bbd2:	6822      	ldr	r2, [r4, #0]
 800bbd4:	bf18      	it	ne
 800bbd6:	2301      	movne	r3, #1
 800bbd8:	0692      	lsls	r2, r2, #26
 800bbda:	d430      	bmi.n	800bc3e <_printf_common+0xba>
 800bbdc:	4649      	mov	r1, r9
 800bbde:	4638      	mov	r0, r7
 800bbe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbe4:	47c0      	blx	r8
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d023      	beq.n	800bc32 <_printf_common+0xae>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	6922      	ldr	r2, [r4, #16]
 800bbee:	f003 0306 	and.w	r3, r3, #6
 800bbf2:	2b04      	cmp	r3, #4
 800bbf4:	bf14      	ite	ne
 800bbf6:	2500      	movne	r5, #0
 800bbf8:	6833      	ldreq	r3, [r6, #0]
 800bbfa:	f04f 0600 	mov.w	r6, #0
 800bbfe:	bf08      	it	eq
 800bc00:	68e5      	ldreq	r5, [r4, #12]
 800bc02:	f104 041a 	add.w	r4, r4, #26
 800bc06:	bf08      	it	eq
 800bc08:	1aed      	subeq	r5, r5, r3
 800bc0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bc0e:	bf08      	it	eq
 800bc10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc14:	4293      	cmp	r3, r2
 800bc16:	bfc4      	itt	gt
 800bc18:	1a9b      	subgt	r3, r3, r2
 800bc1a:	18ed      	addgt	r5, r5, r3
 800bc1c:	42b5      	cmp	r5, r6
 800bc1e:	d11a      	bne.n	800bc56 <_printf_common+0xd2>
 800bc20:	2000      	movs	r0, #0
 800bc22:	e008      	b.n	800bc36 <_printf_common+0xb2>
 800bc24:	2301      	movs	r3, #1
 800bc26:	4652      	mov	r2, sl
 800bc28:	4649      	mov	r1, r9
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	47c0      	blx	r8
 800bc2e:	3001      	adds	r0, #1
 800bc30:	d103      	bne.n	800bc3a <_printf_common+0xb6>
 800bc32:	f04f 30ff 	mov.w	r0, #4294967295
 800bc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc3a:	3501      	adds	r5, #1
 800bc3c:	e7c1      	b.n	800bbc2 <_printf_common+0x3e>
 800bc3e:	2030      	movs	r0, #48	; 0x30
 800bc40:	18e1      	adds	r1, r4, r3
 800bc42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc4c:	4422      	add	r2, r4
 800bc4e:	3302      	adds	r3, #2
 800bc50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc54:	e7c2      	b.n	800bbdc <_printf_common+0x58>
 800bc56:	2301      	movs	r3, #1
 800bc58:	4622      	mov	r2, r4
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	47c0      	blx	r8
 800bc60:	3001      	adds	r0, #1
 800bc62:	d0e6      	beq.n	800bc32 <_printf_common+0xae>
 800bc64:	3601      	adds	r6, #1
 800bc66:	e7d9      	b.n	800bc1c <_printf_common+0x98>

0800bc68 <_printf_i>:
 800bc68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	7e0f      	ldrb	r7, [r1, #24]
 800bc6e:	4691      	mov	r9, r2
 800bc70:	2f78      	cmp	r7, #120	; 0x78
 800bc72:	4680      	mov	r8, r0
 800bc74:	460c      	mov	r4, r1
 800bc76:	469a      	mov	sl, r3
 800bc78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc7e:	d807      	bhi.n	800bc90 <_printf_i+0x28>
 800bc80:	2f62      	cmp	r7, #98	; 0x62
 800bc82:	d80a      	bhi.n	800bc9a <_printf_i+0x32>
 800bc84:	2f00      	cmp	r7, #0
 800bc86:	f000 80d5 	beq.w	800be34 <_printf_i+0x1cc>
 800bc8a:	2f58      	cmp	r7, #88	; 0x58
 800bc8c:	f000 80c1 	beq.w	800be12 <_printf_i+0x1aa>
 800bc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc98:	e03a      	b.n	800bd10 <_printf_i+0xa8>
 800bc9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc9e:	2b15      	cmp	r3, #21
 800bca0:	d8f6      	bhi.n	800bc90 <_printf_i+0x28>
 800bca2:	a101      	add	r1, pc, #4	; (adr r1, 800bca8 <_printf_i+0x40>)
 800bca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bca8:	0800bd01 	.word	0x0800bd01
 800bcac:	0800bd15 	.word	0x0800bd15
 800bcb0:	0800bc91 	.word	0x0800bc91
 800bcb4:	0800bc91 	.word	0x0800bc91
 800bcb8:	0800bc91 	.word	0x0800bc91
 800bcbc:	0800bc91 	.word	0x0800bc91
 800bcc0:	0800bd15 	.word	0x0800bd15
 800bcc4:	0800bc91 	.word	0x0800bc91
 800bcc8:	0800bc91 	.word	0x0800bc91
 800bccc:	0800bc91 	.word	0x0800bc91
 800bcd0:	0800bc91 	.word	0x0800bc91
 800bcd4:	0800be1b 	.word	0x0800be1b
 800bcd8:	0800bd41 	.word	0x0800bd41
 800bcdc:	0800bdd5 	.word	0x0800bdd5
 800bce0:	0800bc91 	.word	0x0800bc91
 800bce4:	0800bc91 	.word	0x0800bc91
 800bce8:	0800be3d 	.word	0x0800be3d
 800bcec:	0800bc91 	.word	0x0800bc91
 800bcf0:	0800bd41 	.word	0x0800bd41
 800bcf4:	0800bc91 	.word	0x0800bc91
 800bcf8:	0800bc91 	.word	0x0800bc91
 800bcfc:	0800bddd 	.word	0x0800bddd
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	1d1a      	adds	r2, r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	602a      	str	r2, [r5, #0]
 800bd08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd10:	2301      	movs	r3, #1
 800bd12:	e0a0      	b.n	800be56 <_printf_i+0x1ee>
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	682b      	ldr	r3, [r5, #0]
 800bd18:	0607      	lsls	r7, r0, #24
 800bd1a:	f103 0104 	add.w	r1, r3, #4
 800bd1e:	6029      	str	r1, [r5, #0]
 800bd20:	d501      	bpl.n	800bd26 <_printf_i+0xbe>
 800bd22:	681e      	ldr	r6, [r3, #0]
 800bd24:	e003      	b.n	800bd2e <_printf_i+0xc6>
 800bd26:	0646      	lsls	r6, r0, #25
 800bd28:	d5fb      	bpl.n	800bd22 <_printf_i+0xba>
 800bd2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd2e:	2e00      	cmp	r6, #0
 800bd30:	da03      	bge.n	800bd3a <_printf_i+0xd2>
 800bd32:	232d      	movs	r3, #45	; 0x2d
 800bd34:	4276      	negs	r6, r6
 800bd36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd3a:	230a      	movs	r3, #10
 800bd3c:	4859      	ldr	r0, [pc, #356]	; (800bea4 <_printf_i+0x23c>)
 800bd3e:	e012      	b.n	800bd66 <_printf_i+0xfe>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	6820      	ldr	r0, [r4, #0]
 800bd44:	1d19      	adds	r1, r3, #4
 800bd46:	6029      	str	r1, [r5, #0]
 800bd48:	0605      	lsls	r5, r0, #24
 800bd4a:	d501      	bpl.n	800bd50 <_printf_i+0xe8>
 800bd4c:	681e      	ldr	r6, [r3, #0]
 800bd4e:	e002      	b.n	800bd56 <_printf_i+0xee>
 800bd50:	0641      	lsls	r1, r0, #25
 800bd52:	d5fb      	bpl.n	800bd4c <_printf_i+0xe4>
 800bd54:	881e      	ldrh	r6, [r3, #0]
 800bd56:	2f6f      	cmp	r7, #111	; 0x6f
 800bd58:	bf0c      	ite	eq
 800bd5a:	2308      	moveq	r3, #8
 800bd5c:	230a      	movne	r3, #10
 800bd5e:	4851      	ldr	r0, [pc, #324]	; (800bea4 <_printf_i+0x23c>)
 800bd60:	2100      	movs	r1, #0
 800bd62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd66:	6865      	ldr	r5, [r4, #4]
 800bd68:	2d00      	cmp	r5, #0
 800bd6a:	bfa8      	it	ge
 800bd6c:	6821      	ldrge	r1, [r4, #0]
 800bd6e:	60a5      	str	r5, [r4, #8]
 800bd70:	bfa4      	itt	ge
 800bd72:	f021 0104 	bicge.w	r1, r1, #4
 800bd76:	6021      	strge	r1, [r4, #0]
 800bd78:	b90e      	cbnz	r6, 800bd7e <_printf_i+0x116>
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	d04b      	beq.n	800be16 <_printf_i+0x1ae>
 800bd7e:	4615      	mov	r5, r2
 800bd80:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd84:	fb03 6711 	mls	r7, r3, r1, r6
 800bd88:	5dc7      	ldrb	r7, [r0, r7]
 800bd8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd8e:	4637      	mov	r7, r6
 800bd90:	42bb      	cmp	r3, r7
 800bd92:	460e      	mov	r6, r1
 800bd94:	d9f4      	bls.n	800bd80 <_printf_i+0x118>
 800bd96:	2b08      	cmp	r3, #8
 800bd98:	d10b      	bne.n	800bdb2 <_printf_i+0x14a>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	07de      	lsls	r6, r3, #31
 800bd9e:	d508      	bpl.n	800bdb2 <_printf_i+0x14a>
 800bda0:	6923      	ldr	r3, [r4, #16]
 800bda2:	6861      	ldr	r1, [r4, #4]
 800bda4:	4299      	cmp	r1, r3
 800bda6:	bfde      	ittt	le
 800bda8:	2330      	movle	r3, #48	; 0x30
 800bdaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdb2:	1b52      	subs	r2, r2, r5
 800bdb4:	6122      	str	r2, [r4, #16]
 800bdb6:	464b      	mov	r3, r9
 800bdb8:	4621      	mov	r1, r4
 800bdba:	4640      	mov	r0, r8
 800bdbc:	f8cd a000 	str.w	sl, [sp]
 800bdc0:	aa03      	add	r2, sp, #12
 800bdc2:	f7ff fedf 	bl	800bb84 <_printf_common>
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	d14a      	bne.n	800be60 <_printf_i+0x1f8>
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295
 800bdce:	b004      	add	sp, #16
 800bdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	f043 0320 	orr.w	r3, r3, #32
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	2778      	movs	r7, #120	; 0x78
 800bdde:	4832      	ldr	r0, [pc, #200]	; (800bea8 <_printf_i+0x240>)
 800bde0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	6829      	ldr	r1, [r5, #0]
 800bde8:	061f      	lsls	r7, r3, #24
 800bdea:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdee:	d402      	bmi.n	800bdf6 <_printf_i+0x18e>
 800bdf0:	065f      	lsls	r7, r3, #25
 800bdf2:	bf48      	it	mi
 800bdf4:	b2b6      	uxthmi	r6, r6
 800bdf6:	07df      	lsls	r7, r3, #31
 800bdf8:	bf48      	it	mi
 800bdfa:	f043 0320 	orrmi.w	r3, r3, #32
 800bdfe:	6029      	str	r1, [r5, #0]
 800be00:	bf48      	it	mi
 800be02:	6023      	strmi	r3, [r4, #0]
 800be04:	b91e      	cbnz	r6, 800be0e <_printf_i+0x1a6>
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	f023 0320 	bic.w	r3, r3, #32
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	2310      	movs	r3, #16
 800be10:	e7a6      	b.n	800bd60 <_printf_i+0xf8>
 800be12:	4824      	ldr	r0, [pc, #144]	; (800bea4 <_printf_i+0x23c>)
 800be14:	e7e4      	b.n	800bde0 <_printf_i+0x178>
 800be16:	4615      	mov	r5, r2
 800be18:	e7bd      	b.n	800bd96 <_printf_i+0x12e>
 800be1a:	682b      	ldr	r3, [r5, #0]
 800be1c:	6826      	ldr	r6, [r4, #0]
 800be1e:	1d18      	adds	r0, r3, #4
 800be20:	6961      	ldr	r1, [r4, #20]
 800be22:	6028      	str	r0, [r5, #0]
 800be24:	0635      	lsls	r5, r6, #24
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	d501      	bpl.n	800be2e <_printf_i+0x1c6>
 800be2a:	6019      	str	r1, [r3, #0]
 800be2c:	e002      	b.n	800be34 <_printf_i+0x1cc>
 800be2e:	0670      	lsls	r0, r6, #25
 800be30:	d5fb      	bpl.n	800be2a <_printf_i+0x1c2>
 800be32:	8019      	strh	r1, [r3, #0]
 800be34:	2300      	movs	r3, #0
 800be36:	4615      	mov	r5, r2
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	e7bc      	b.n	800bdb6 <_printf_i+0x14e>
 800be3c:	682b      	ldr	r3, [r5, #0]
 800be3e:	2100      	movs	r1, #0
 800be40:	1d1a      	adds	r2, r3, #4
 800be42:	602a      	str	r2, [r5, #0]
 800be44:	681d      	ldr	r5, [r3, #0]
 800be46:	6862      	ldr	r2, [r4, #4]
 800be48:	4628      	mov	r0, r5
 800be4a:	f000 fcd1 	bl	800c7f0 <memchr>
 800be4e:	b108      	cbz	r0, 800be54 <_printf_i+0x1ec>
 800be50:	1b40      	subs	r0, r0, r5
 800be52:	6060      	str	r0, [r4, #4]
 800be54:	6863      	ldr	r3, [r4, #4]
 800be56:	6123      	str	r3, [r4, #16]
 800be58:	2300      	movs	r3, #0
 800be5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be5e:	e7aa      	b.n	800bdb6 <_printf_i+0x14e>
 800be60:	462a      	mov	r2, r5
 800be62:	4649      	mov	r1, r9
 800be64:	4640      	mov	r0, r8
 800be66:	6923      	ldr	r3, [r4, #16]
 800be68:	47d0      	blx	sl
 800be6a:	3001      	adds	r0, #1
 800be6c:	d0ad      	beq.n	800bdca <_printf_i+0x162>
 800be6e:	6823      	ldr	r3, [r4, #0]
 800be70:	079b      	lsls	r3, r3, #30
 800be72:	d413      	bmi.n	800be9c <_printf_i+0x234>
 800be74:	68e0      	ldr	r0, [r4, #12]
 800be76:	9b03      	ldr	r3, [sp, #12]
 800be78:	4298      	cmp	r0, r3
 800be7a:	bfb8      	it	lt
 800be7c:	4618      	movlt	r0, r3
 800be7e:	e7a6      	b.n	800bdce <_printf_i+0x166>
 800be80:	2301      	movs	r3, #1
 800be82:	4632      	mov	r2, r6
 800be84:	4649      	mov	r1, r9
 800be86:	4640      	mov	r0, r8
 800be88:	47d0      	blx	sl
 800be8a:	3001      	adds	r0, #1
 800be8c:	d09d      	beq.n	800bdca <_printf_i+0x162>
 800be8e:	3501      	adds	r5, #1
 800be90:	68e3      	ldr	r3, [r4, #12]
 800be92:	9903      	ldr	r1, [sp, #12]
 800be94:	1a5b      	subs	r3, r3, r1
 800be96:	42ab      	cmp	r3, r5
 800be98:	dcf2      	bgt.n	800be80 <_printf_i+0x218>
 800be9a:	e7eb      	b.n	800be74 <_printf_i+0x20c>
 800be9c:	2500      	movs	r5, #0
 800be9e:	f104 0619 	add.w	r6, r4, #25
 800bea2:	e7f5      	b.n	800be90 <_printf_i+0x228>
 800bea4:	0800ffc4 	.word	0x0800ffc4
 800bea8:	0800ffd5 	.word	0x0800ffd5

0800beac <_scanf_float>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	b087      	sub	sp, #28
 800beb2:	9303      	str	r3, [sp, #12]
 800beb4:	688b      	ldr	r3, [r1, #8]
 800beb6:	4617      	mov	r7, r2
 800beb8:	1e5a      	subs	r2, r3, #1
 800beba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bebe:	bf85      	ittet	hi
 800bec0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bec4:	195b      	addhi	r3, r3, r5
 800bec6:	2300      	movls	r3, #0
 800bec8:	9302      	strhi	r3, [sp, #8]
 800beca:	bf88      	it	hi
 800becc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bed0:	468b      	mov	fp, r1
 800bed2:	f04f 0500 	mov.w	r5, #0
 800bed6:	bf8c      	ite	hi
 800bed8:	608b      	strhi	r3, [r1, #8]
 800beda:	9302      	strls	r3, [sp, #8]
 800bedc:	680b      	ldr	r3, [r1, #0]
 800bede:	4680      	mov	r8, r0
 800bee0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bee4:	f84b 3b1c 	str.w	r3, [fp], #28
 800bee8:	460c      	mov	r4, r1
 800beea:	465e      	mov	r6, fp
 800beec:	46aa      	mov	sl, r5
 800beee:	46a9      	mov	r9, r5
 800bef0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bef4:	9501      	str	r5, [sp, #4]
 800bef6:	68a2      	ldr	r2, [r4, #8]
 800bef8:	b152      	cbz	r2, 800bf10 <_scanf_float+0x64>
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b4e      	cmp	r3, #78	; 0x4e
 800bf00:	d864      	bhi.n	800bfcc <_scanf_float+0x120>
 800bf02:	2b40      	cmp	r3, #64	; 0x40
 800bf04:	d83c      	bhi.n	800bf80 <_scanf_float+0xd4>
 800bf06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bf0a:	b2c8      	uxtb	r0, r1
 800bf0c:	280e      	cmp	r0, #14
 800bf0e:	d93a      	bls.n	800bf86 <_scanf_float+0xda>
 800bf10:	f1b9 0f00 	cmp.w	r9, #0
 800bf14:	d003      	beq.n	800bf1e <_scanf_float+0x72>
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf22:	f1ba 0f01 	cmp.w	sl, #1
 800bf26:	f200 8113 	bhi.w	800c150 <_scanf_float+0x2a4>
 800bf2a:	455e      	cmp	r6, fp
 800bf2c:	f200 8105 	bhi.w	800c13a <_scanf_float+0x28e>
 800bf30:	2501      	movs	r5, #1
 800bf32:	4628      	mov	r0, r5
 800bf34:	b007      	add	sp, #28
 800bf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bf3e:	2a0d      	cmp	r2, #13
 800bf40:	d8e6      	bhi.n	800bf10 <_scanf_float+0x64>
 800bf42:	a101      	add	r1, pc, #4	; (adr r1, 800bf48 <_scanf_float+0x9c>)
 800bf44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf48:	0800c087 	.word	0x0800c087
 800bf4c:	0800bf11 	.word	0x0800bf11
 800bf50:	0800bf11 	.word	0x0800bf11
 800bf54:	0800bf11 	.word	0x0800bf11
 800bf58:	0800c0e7 	.word	0x0800c0e7
 800bf5c:	0800c0bf 	.word	0x0800c0bf
 800bf60:	0800bf11 	.word	0x0800bf11
 800bf64:	0800bf11 	.word	0x0800bf11
 800bf68:	0800c095 	.word	0x0800c095
 800bf6c:	0800bf11 	.word	0x0800bf11
 800bf70:	0800bf11 	.word	0x0800bf11
 800bf74:	0800bf11 	.word	0x0800bf11
 800bf78:	0800bf11 	.word	0x0800bf11
 800bf7c:	0800c04d 	.word	0x0800c04d
 800bf80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bf84:	e7db      	b.n	800bf3e <_scanf_float+0x92>
 800bf86:	290e      	cmp	r1, #14
 800bf88:	d8c2      	bhi.n	800bf10 <_scanf_float+0x64>
 800bf8a:	a001      	add	r0, pc, #4	; (adr r0, 800bf90 <_scanf_float+0xe4>)
 800bf8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bf90:	0800c03f 	.word	0x0800c03f
 800bf94:	0800bf11 	.word	0x0800bf11
 800bf98:	0800c03f 	.word	0x0800c03f
 800bf9c:	0800c0d3 	.word	0x0800c0d3
 800bfa0:	0800bf11 	.word	0x0800bf11
 800bfa4:	0800bfed 	.word	0x0800bfed
 800bfa8:	0800c029 	.word	0x0800c029
 800bfac:	0800c029 	.word	0x0800c029
 800bfb0:	0800c029 	.word	0x0800c029
 800bfb4:	0800c029 	.word	0x0800c029
 800bfb8:	0800c029 	.word	0x0800c029
 800bfbc:	0800c029 	.word	0x0800c029
 800bfc0:	0800c029 	.word	0x0800c029
 800bfc4:	0800c029 	.word	0x0800c029
 800bfc8:	0800c029 	.word	0x0800c029
 800bfcc:	2b6e      	cmp	r3, #110	; 0x6e
 800bfce:	d809      	bhi.n	800bfe4 <_scanf_float+0x138>
 800bfd0:	2b60      	cmp	r3, #96	; 0x60
 800bfd2:	d8b2      	bhi.n	800bf3a <_scanf_float+0x8e>
 800bfd4:	2b54      	cmp	r3, #84	; 0x54
 800bfd6:	d077      	beq.n	800c0c8 <_scanf_float+0x21c>
 800bfd8:	2b59      	cmp	r3, #89	; 0x59
 800bfda:	d199      	bne.n	800bf10 <_scanf_float+0x64>
 800bfdc:	2d07      	cmp	r5, #7
 800bfde:	d197      	bne.n	800bf10 <_scanf_float+0x64>
 800bfe0:	2508      	movs	r5, #8
 800bfe2:	e029      	b.n	800c038 <_scanf_float+0x18c>
 800bfe4:	2b74      	cmp	r3, #116	; 0x74
 800bfe6:	d06f      	beq.n	800c0c8 <_scanf_float+0x21c>
 800bfe8:	2b79      	cmp	r3, #121	; 0x79
 800bfea:	e7f6      	b.n	800bfda <_scanf_float+0x12e>
 800bfec:	6821      	ldr	r1, [r4, #0]
 800bfee:	05c8      	lsls	r0, r1, #23
 800bff0:	d51a      	bpl.n	800c028 <_scanf_float+0x17c>
 800bff2:	9b02      	ldr	r3, [sp, #8]
 800bff4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bff8:	6021      	str	r1, [r4, #0]
 800bffa:	f109 0901 	add.w	r9, r9, #1
 800bffe:	b11b      	cbz	r3, 800c008 <_scanf_float+0x15c>
 800c000:	3b01      	subs	r3, #1
 800c002:	3201      	adds	r2, #1
 800c004:	9302      	str	r3, [sp, #8]
 800c006:	60a2      	str	r2, [r4, #8]
 800c008:	68a3      	ldr	r3, [r4, #8]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	6923      	ldr	r3, [r4, #16]
 800c010:	3301      	adds	r3, #1
 800c012:	6123      	str	r3, [r4, #16]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3b01      	subs	r3, #1
 800c018:	2b00      	cmp	r3, #0
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	f340 8084 	ble.w	800c128 <_scanf_float+0x27c>
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	3301      	adds	r3, #1
 800c024:	603b      	str	r3, [r7, #0]
 800c026:	e766      	b.n	800bef6 <_scanf_float+0x4a>
 800c028:	eb1a 0f05 	cmn.w	sl, r5
 800c02c:	f47f af70 	bne.w	800bf10 <_scanf_float+0x64>
 800c030:	6822      	ldr	r2, [r4, #0]
 800c032:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c036:	6022      	str	r2, [r4, #0]
 800c038:	f806 3b01 	strb.w	r3, [r6], #1
 800c03c:	e7e4      	b.n	800c008 <_scanf_float+0x15c>
 800c03e:	6822      	ldr	r2, [r4, #0]
 800c040:	0610      	lsls	r0, r2, #24
 800c042:	f57f af65 	bpl.w	800bf10 <_scanf_float+0x64>
 800c046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c04a:	e7f4      	b.n	800c036 <_scanf_float+0x18a>
 800c04c:	f1ba 0f00 	cmp.w	sl, #0
 800c050:	d10e      	bne.n	800c070 <_scanf_float+0x1c4>
 800c052:	f1b9 0f00 	cmp.w	r9, #0
 800c056:	d10e      	bne.n	800c076 <_scanf_float+0x1ca>
 800c058:	6822      	ldr	r2, [r4, #0]
 800c05a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c05e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c062:	d108      	bne.n	800c076 <_scanf_float+0x1ca>
 800c064:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c068:	f04f 0a01 	mov.w	sl, #1
 800c06c:	6022      	str	r2, [r4, #0]
 800c06e:	e7e3      	b.n	800c038 <_scanf_float+0x18c>
 800c070:	f1ba 0f02 	cmp.w	sl, #2
 800c074:	d055      	beq.n	800c122 <_scanf_float+0x276>
 800c076:	2d01      	cmp	r5, #1
 800c078:	d002      	beq.n	800c080 <_scanf_float+0x1d4>
 800c07a:	2d04      	cmp	r5, #4
 800c07c:	f47f af48 	bne.w	800bf10 <_scanf_float+0x64>
 800c080:	3501      	adds	r5, #1
 800c082:	b2ed      	uxtb	r5, r5
 800c084:	e7d8      	b.n	800c038 <_scanf_float+0x18c>
 800c086:	f1ba 0f01 	cmp.w	sl, #1
 800c08a:	f47f af41 	bne.w	800bf10 <_scanf_float+0x64>
 800c08e:	f04f 0a02 	mov.w	sl, #2
 800c092:	e7d1      	b.n	800c038 <_scanf_float+0x18c>
 800c094:	b97d      	cbnz	r5, 800c0b6 <_scanf_float+0x20a>
 800c096:	f1b9 0f00 	cmp.w	r9, #0
 800c09a:	f47f af3c 	bne.w	800bf16 <_scanf_float+0x6a>
 800c09e:	6822      	ldr	r2, [r4, #0]
 800c0a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c0a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c0a8:	f47f af39 	bne.w	800bf1e <_scanf_float+0x72>
 800c0ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c0b0:	2501      	movs	r5, #1
 800c0b2:	6022      	str	r2, [r4, #0]
 800c0b4:	e7c0      	b.n	800c038 <_scanf_float+0x18c>
 800c0b6:	2d03      	cmp	r5, #3
 800c0b8:	d0e2      	beq.n	800c080 <_scanf_float+0x1d4>
 800c0ba:	2d05      	cmp	r5, #5
 800c0bc:	e7de      	b.n	800c07c <_scanf_float+0x1d0>
 800c0be:	2d02      	cmp	r5, #2
 800c0c0:	f47f af26 	bne.w	800bf10 <_scanf_float+0x64>
 800c0c4:	2503      	movs	r5, #3
 800c0c6:	e7b7      	b.n	800c038 <_scanf_float+0x18c>
 800c0c8:	2d06      	cmp	r5, #6
 800c0ca:	f47f af21 	bne.w	800bf10 <_scanf_float+0x64>
 800c0ce:	2507      	movs	r5, #7
 800c0d0:	e7b2      	b.n	800c038 <_scanf_float+0x18c>
 800c0d2:	6822      	ldr	r2, [r4, #0]
 800c0d4:	0591      	lsls	r1, r2, #22
 800c0d6:	f57f af1b 	bpl.w	800bf10 <_scanf_float+0x64>
 800c0da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c0de:	6022      	str	r2, [r4, #0]
 800c0e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0e4:	e7a8      	b.n	800c038 <_scanf_float+0x18c>
 800c0e6:	6822      	ldr	r2, [r4, #0]
 800c0e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c0ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c0f0:	d006      	beq.n	800c100 <_scanf_float+0x254>
 800c0f2:	0550      	lsls	r0, r2, #21
 800c0f4:	f57f af0c 	bpl.w	800bf10 <_scanf_float+0x64>
 800c0f8:	f1b9 0f00 	cmp.w	r9, #0
 800c0fc:	f43f af0f 	beq.w	800bf1e <_scanf_float+0x72>
 800c100:	0591      	lsls	r1, r2, #22
 800c102:	bf58      	it	pl
 800c104:	9901      	ldrpl	r1, [sp, #4]
 800c106:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c10a:	bf58      	it	pl
 800c10c:	eba9 0101 	subpl.w	r1, r9, r1
 800c110:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c114:	f04f 0900 	mov.w	r9, #0
 800c118:	bf58      	it	pl
 800c11a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c11e:	6022      	str	r2, [r4, #0]
 800c120:	e78a      	b.n	800c038 <_scanf_float+0x18c>
 800c122:	f04f 0a03 	mov.w	sl, #3
 800c126:	e787      	b.n	800c038 <_scanf_float+0x18c>
 800c128:	4639      	mov	r1, r7
 800c12a:	4640      	mov	r0, r8
 800c12c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c130:	4798      	blx	r3
 800c132:	2800      	cmp	r0, #0
 800c134:	f43f aedf 	beq.w	800bef6 <_scanf_float+0x4a>
 800c138:	e6ea      	b.n	800bf10 <_scanf_float+0x64>
 800c13a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c13e:	463a      	mov	r2, r7
 800c140:	4640      	mov	r0, r8
 800c142:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c146:	4798      	blx	r3
 800c148:	6923      	ldr	r3, [r4, #16]
 800c14a:	3b01      	subs	r3, #1
 800c14c:	6123      	str	r3, [r4, #16]
 800c14e:	e6ec      	b.n	800bf2a <_scanf_float+0x7e>
 800c150:	1e6b      	subs	r3, r5, #1
 800c152:	2b06      	cmp	r3, #6
 800c154:	d825      	bhi.n	800c1a2 <_scanf_float+0x2f6>
 800c156:	2d02      	cmp	r5, #2
 800c158:	d836      	bhi.n	800c1c8 <_scanf_float+0x31c>
 800c15a:	455e      	cmp	r6, fp
 800c15c:	f67f aee8 	bls.w	800bf30 <_scanf_float+0x84>
 800c160:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c164:	463a      	mov	r2, r7
 800c166:	4640      	mov	r0, r8
 800c168:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c16c:	4798      	blx	r3
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	3b01      	subs	r3, #1
 800c172:	6123      	str	r3, [r4, #16]
 800c174:	e7f1      	b.n	800c15a <_scanf_float+0x2ae>
 800c176:	9802      	ldr	r0, [sp, #8]
 800c178:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c17c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c180:	463a      	mov	r2, r7
 800c182:	9002      	str	r0, [sp, #8]
 800c184:	4640      	mov	r0, r8
 800c186:	4798      	blx	r3
 800c188:	6923      	ldr	r3, [r4, #16]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c192:	fa5f fa8a 	uxtb.w	sl, sl
 800c196:	f1ba 0f02 	cmp.w	sl, #2
 800c19a:	d1ec      	bne.n	800c176 <_scanf_float+0x2ca>
 800c19c:	3d03      	subs	r5, #3
 800c19e:	b2ed      	uxtb	r5, r5
 800c1a0:	1b76      	subs	r6, r6, r5
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	05da      	lsls	r2, r3, #23
 800c1a6:	d52f      	bpl.n	800c208 <_scanf_float+0x35c>
 800c1a8:	055b      	lsls	r3, r3, #21
 800c1aa:	d510      	bpl.n	800c1ce <_scanf_float+0x322>
 800c1ac:	455e      	cmp	r6, fp
 800c1ae:	f67f aebf 	bls.w	800bf30 <_scanf_float+0x84>
 800c1b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1b6:	463a      	mov	r2, r7
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c1be:	4798      	blx	r3
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	6123      	str	r3, [r4, #16]
 800c1c6:	e7f1      	b.n	800c1ac <_scanf_float+0x300>
 800c1c8:	46aa      	mov	sl, r5
 800c1ca:	9602      	str	r6, [sp, #8]
 800c1cc:	e7df      	b.n	800c18e <_scanf_float+0x2e2>
 800c1ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c1d2:	6923      	ldr	r3, [r4, #16]
 800c1d4:	2965      	cmp	r1, #101	; 0x65
 800c1d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c1da:	f106 35ff 	add.w	r5, r6, #4294967295
 800c1de:	6123      	str	r3, [r4, #16]
 800c1e0:	d00c      	beq.n	800c1fc <_scanf_float+0x350>
 800c1e2:	2945      	cmp	r1, #69	; 0x45
 800c1e4:	d00a      	beq.n	800c1fc <_scanf_float+0x350>
 800c1e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1ea:	463a      	mov	r2, r7
 800c1ec:	4640      	mov	r0, r8
 800c1ee:	4798      	blx	r3
 800c1f0:	6923      	ldr	r3, [r4, #16]
 800c1f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	1eb5      	subs	r5, r6, #2
 800c1fa:	6123      	str	r3, [r4, #16]
 800c1fc:	463a      	mov	r2, r7
 800c1fe:	4640      	mov	r0, r8
 800c200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c204:	4798      	blx	r3
 800c206:	462e      	mov	r6, r5
 800c208:	6825      	ldr	r5, [r4, #0]
 800c20a:	f015 0510 	ands.w	r5, r5, #16
 800c20e:	d155      	bne.n	800c2bc <_scanf_float+0x410>
 800c210:	7035      	strb	r5, [r6, #0]
 800c212:	6823      	ldr	r3, [r4, #0]
 800c214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c21c:	d11d      	bne.n	800c25a <_scanf_float+0x3ae>
 800c21e:	9b01      	ldr	r3, [sp, #4]
 800c220:	454b      	cmp	r3, r9
 800c222:	eba3 0209 	sub.w	r2, r3, r9
 800c226:	d125      	bne.n	800c274 <_scanf_float+0x3c8>
 800c228:	2200      	movs	r2, #0
 800c22a:	4659      	mov	r1, fp
 800c22c:	4640      	mov	r0, r8
 800c22e:	f002 fd1f 	bl	800ec70 <_strtod_r>
 800c232:	9b03      	ldr	r3, [sp, #12]
 800c234:	f8d4 c000 	ldr.w	ip, [r4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f01c 0f02 	tst.w	ip, #2
 800c23e:	4606      	mov	r6, r0
 800c240:	460f      	mov	r7, r1
 800c242:	f103 0204 	add.w	r2, r3, #4
 800c246:	d020      	beq.n	800c28a <_scanf_float+0x3de>
 800c248:	9903      	ldr	r1, [sp, #12]
 800c24a:	600a      	str	r2, [r1, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	e9c3 6700 	strd	r6, r7, [r3]
 800c252:	68e3      	ldr	r3, [r4, #12]
 800c254:	3301      	adds	r3, #1
 800c256:	60e3      	str	r3, [r4, #12]
 800c258:	e66b      	b.n	800bf32 <_scanf_float+0x86>
 800c25a:	9b04      	ldr	r3, [sp, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0e3      	beq.n	800c228 <_scanf_float+0x37c>
 800c260:	9905      	ldr	r1, [sp, #20]
 800c262:	230a      	movs	r3, #10
 800c264:	462a      	mov	r2, r5
 800c266:	4640      	mov	r0, r8
 800c268:	3101      	adds	r1, #1
 800c26a:	f002 fd85 	bl	800ed78 <_strtol_r>
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	9e05      	ldr	r6, [sp, #20]
 800c272:	1ac2      	subs	r2, r0, r3
 800c274:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c278:	429e      	cmp	r6, r3
 800c27a:	bf28      	it	cs
 800c27c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c280:	4630      	mov	r0, r6
 800c282:	490f      	ldr	r1, [pc, #60]	; (800c2c0 <_scanf_float+0x414>)
 800c284:	f000 f93e 	bl	800c504 <siprintf>
 800c288:	e7ce      	b.n	800c228 <_scanf_float+0x37c>
 800c28a:	f01c 0f04 	tst.w	ip, #4
 800c28e:	d1db      	bne.n	800c248 <_scanf_float+0x39c>
 800c290:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c294:	f8cc 2000 	str.w	r2, [ip]
 800c298:	f8d3 8000 	ldr.w	r8, [r3]
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	f7f4 fc20 	bl	8000ae4 <__aeabi_dcmpun>
 800c2a4:	b128      	cbz	r0, 800c2b2 <_scanf_float+0x406>
 800c2a6:	4807      	ldr	r0, [pc, #28]	; (800c2c4 <_scanf_float+0x418>)
 800c2a8:	f000 fabe 	bl	800c828 <nanf>
 800c2ac:	f8c8 0000 	str.w	r0, [r8]
 800c2b0:	e7cf      	b.n	800c252 <_scanf_float+0x3a6>
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	f7f4 fc73 	bl	8000ba0 <__aeabi_d2f>
 800c2ba:	e7f7      	b.n	800c2ac <_scanf_float+0x400>
 800c2bc:	2500      	movs	r5, #0
 800c2be:	e638      	b.n	800bf32 <_scanf_float+0x86>
 800c2c0:	0800ffe6 	.word	0x0800ffe6
 800c2c4:	0801037d 	.word	0x0801037d

0800c2c8 <std>:
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	b510      	push	{r4, lr}
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2d6:	6083      	str	r3, [r0, #8]
 800c2d8:	8181      	strh	r1, [r0, #12]
 800c2da:	6643      	str	r3, [r0, #100]	; 0x64
 800c2dc:	81c2      	strh	r2, [r0, #14]
 800c2de:	6183      	str	r3, [r0, #24]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	2208      	movs	r2, #8
 800c2e4:	305c      	adds	r0, #92	; 0x5c
 800c2e6:	f000 fa05 	bl	800c6f4 <memset>
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <std+0x38>)
 800c2ec:	6224      	str	r4, [r4, #32]
 800c2ee:	6263      	str	r3, [r4, #36]	; 0x24
 800c2f0:	4b04      	ldr	r3, [pc, #16]	; (800c304 <std+0x3c>)
 800c2f2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2f4:	4b04      	ldr	r3, [pc, #16]	; (800c308 <std+0x40>)
 800c2f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2f8:	4b04      	ldr	r3, [pc, #16]	; (800c30c <std+0x44>)
 800c2fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	bf00      	nop
 800c300:	0800c545 	.word	0x0800c545
 800c304:	0800c567 	.word	0x0800c567
 800c308:	0800c59f 	.word	0x0800c59f
 800c30c:	0800c5c3 	.word	0x0800c5c3

0800c310 <stdio_exit_handler>:
 800c310:	4a02      	ldr	r2, [pc, #8]	; (800c31c <stdio_exit_handler+0xc>)
 800c312:	4903      	ldr	r1, [pc, #12]	; (800c320 <stdio_exit_handler+0x10>)
 800c314:	4803      	ldr	r0, [pc, #12]	; (800c324 <stdio_exit_handler+0x14>)
 800c316:	f000 b869 	b.w	800c3ec <_fwalk_sglue>
 800c31a:	bf00      	nop
 800c31c:	2000001c 	.word	0x2000001c
 800c320:	0800f3b5 	.word	0x0800f3b5
 800c324:	20000028 	.word	0x20000028

0800c328 <cleanup_stdio>:
 800c328:	6841      	ldr	r1, [r0, #4]
 800c32a:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <cleanup_stdio+0x34>)
 800c32c:	b510      	push	{r4, lr}
 800c32e:	4299      	cmp	r1, r3
 800c330:	4604      	mov	r4, r0
 800c332:	d001      	beq.n	800c338 <cleanup_stdio+0x10>
 800c334:	f003 f83e 	bl	800f3b4 <_fflush_r>
 800c338:	68a1      	ldr	r1, [r4, #8]
 800c33a:	4b09      	ldr	r3, [pc, #36]	; (800c360 <cleanup_stdio+0x38>)
 800c33c:	4299      	cmp	r1, r3
 800c33e:	d002      	beq.n	800c346 <cleanup_stdio+0x1e>
 800c340:	4620      	mov	r0, r4
 800c342:	f003 f837 	bl	800f3b4 <_fflush_r>
 800c346:	68e1      	ldr	r1, [r4, #12]
 800c348:	4b06      	ldr	r3, [pc, #24]	; (800c364 <cleanup_stdio+0x3c>)
 800c34a:	4299      	cmp	r1, r3
 800c34c:	d004      	beq.n	800c358 <cleanup_stdio+0x30>
 800c34e:	4620      	mov	r0, r4
 800c350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c354:	f003 b82e 	b.w	800f3b4 <_fflush_r>
 800c358:	bd10      	pop	{r4, pc}
 800c35a:	bf00      	nop
 800c35c:	20004480 	.word	0x20004480
 800c360:	200044e8 	.word	0x200044e8
 800c364:	20004550 	.word	0x20004550

0800c368 <global_stdio_init.part.0>:
 800c368:	b510      	push	{r4, lr}
 800c36a:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <global_stdio_init.part.0+0x30>)
 800c36c:	4c0b      	ldr	r4, [pc, #44]	; (800c39c <global_stdio_init.part.0+0x34>)
 800c36e:	4a0c      	ldr	r2, [pc, #48]	; (800c3a0 <global_stdio_init.part.0+0x38>)
 800c370:	4620      	mov	r0, r4
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	2104      	movs	r1, #4
 800c376:	2200      	movs	r2, #0
 800c378:	f7ff ffa6 	bl	800c2c8 <std>
 800c37c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c380:	2201      	movs	r2, #1
 800c382:	2109      	movs	r1, #9
 800c384:	f7ff ffa0 	bl	800c2c8 <std>
 800c388:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c38c:	2202      	movs	r2, #2
 800c38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c392:	2112      	movs	r1, #18
 800c394:	f7ff bf98 	b.w	800c2c8 <std>
 800c398:	200045b8 	.word	0x200045b8
 800c39c:	20004480 	.word	0x20004480
 800c3a0:	0800c311 	.word	0x0800c311

0800c3a4 <__sfp_lock_acquire>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__sfp_lock_acquire+0x8>)
 800c3a6:	f000 ba21 	b.w	800c7ec <__retarget_lock_acquire_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	200045c1 	.word	0x200045c1

0800c3b0 <__sfp_lock_release>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__sfp_lock_release+0x8>)
 800c3b2:	f000 ba1c 	b.w	800c7ee <__retarget_lock_release_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	200045c1 	.word	0x200045c1

0800c3bc <__sinit>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	4604      	mov	r4, r0
 800c3c0:	f7ff fff0 	bl	800c3a4 <__sfp_lock_acquire>
 800c3c4:	6a23      	ldr	r3, [r4, #32]
 800c3c6:	b11b      	cbz	r3, 800c3d0 <__sinit+0x14>
 800c3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3cc:	f7ff bff0 	b.w	800c3b0 <__sfp_lock_release>
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <__sinit+0x28>)
 800c3d2:	6223      	str	r3, [r4, #32]
 800c3d4:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <__sinit+0x2c>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1f5      	bne.n	800c3c8 <__sinit+0xc>
 800c3dc:	f7ff ffc4 	bl	800c368 <global_stdio_init.part.0>
 800c3e0:	e7f2      	b.n	800c3c8 <__sinit+0xc>
 800c3e2:	bf00      	nop
 800c3e4:	0800c329 	.word	0x0800c329
 800c3e8:	200045b8 	.word	0x200045b8

0800c3ec <_fwalk_sglue>:
 800c3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	4688      	mov	r8, r1
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	2600      	movs	r6, #0
 800c3f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3fc:	f1b9 0901 	subs.w	r9, r9, #1
 800c400:	d505      	bpl.n	800c40e <_fwalk_sglue+0x22>
 800c402:	6824      	ldr	r4, [r4, #0]
 800c404:	2c00      	cmp	r4, #0
 800c406:	d1f7      	bne.n	800c3f8 <_fwalk_sglue+0xc>
 800c408:	4630      	mov	r0, r6
 800c40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40e:	89ab      	ldrh	r3, [r5, #12]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d907      	bls.n	800c424 <_fwalk_sglue+0x38>
 800c414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c418:	3301      	adds	r3, #1
 800c41a:	d003      	beq.n	800c424 <_fwalk_sglue+0x38>
 800c41c:	4629      	mov	r1, r5
 800c41e:	4638      	mov	r0, r7
 800c420:	47c0      	blx	r8
 800c422:	4306      	orrs	r6, r0
 800c424:	3568      	adds	r5, #104	; 0x68
 800c426:	e7e9      	b.n	800c3fc <_fwalk_sglue+0x10>

0800c428 <iprintf>:
 800c428:	b40f      	push	{r0, r1, r2, r3}
 800c42a:	b507      	push	{r0, r1, r2, lr}
 800c42c:	4906      	ldr	r1, [pc, #24]	; (800c448 <iprintf+0x20>)
 800c42e:	ab04      	add	r3, sp, #16
 800c430:	6808      	ldr	r0, [r1, #0]
 800c432:	f853 2b04 	ldr.w	r2, [r3], #4
 800c436:	6881      	ldr	r1, [r0, #8]
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	f002 fe1f 	bl	800f07c <_vfiprintf_r>
 800c43e:	b003      	add	sp, #12
 800c440:	f85d eb04 	ldr.w	lr, [sp], #4
 800c444:	b004      	add	sp, #16
 800c446:	4770      	bx	lr
 800c448:	20000074 	.word	0x20000074

0800c44c <_puts_r>:
 800c44c:	6a03      	ldr	r3, [r0, #32]
 800c44e:	b570      	push	{r4, r5, r6, lr}
 800c450:	4605      	mov	r5, r0
 800c452:	460e      	mov	r6, r1
 800c454:	6884      	ldr	r4, [r0, #8]
 800c456:	b90b      	cbnz	r3, 800c45c <_puts_r+0x10>
 800c458:	f7ff ffb0 	bl	800c3bc <__sinit>
 800c45c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c45e:	07db      	lsls	r3, r3, #31
 800c460:	d405      	bmi.n	800c46e <_puts_r+0x22>
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	0598      	lsls	r0, r3, #22
 800c466:	d402      	bmi.n	800c46e <_puts_r+0x22>
 800c468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c46a:	f000 f9bf 	bl	800c7ec <__retarget_lock_acquire_recursive>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	0719      	lsls	r1, r3, #28
 800c472:	d513      	bpl.n	800c49c <_puts_r+0x50>
 800c474:	6923      	ldr	r3, [r4, #16]
 800c476:	b18b      	cbz	r3, 800c49c <_puts_r+0x50>
 800c478:	3e01      	subs	r6, #1
 800c47a:	68a3      	ldr	r3, [r4, #8]
 800c47c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c480:	3b01      	subs	r3, #1
 800c482:	60a3      	str	r3, [r4, #8]
 800c484:	b9e9      	cbnz	r1, 800c4c2 <_puts_r+0x76>
 800c486:	2b00      	cmp	r3, #0
 800c488:	da2e      	bge.n	800c4e8 <_puts_r+0x9c>
 800c48a:	4622      	mov	r2, r4
 800c48c:	210a      	movs	r1, #10
 800c48e:	4628      	mov	r0, r5
 800c490:	f000 f89b 	bl	800c5ca <__swbuf_r>
 800c494:	3001      	adds	r0, #1
 800c496:	d007      	beq.n	800c4a8 <_puts_r+0x5c>
 800c498:	250a      	movs	r5, #10
 800c49a:	e007      	b.n	800c4ac <_puts_r+0x60>
 800c49c:	4621      	mov	r1, r4
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 f8d0 	bl	800c644 <__swsetup_r>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d0e7      	beq.n	800c478 <_puts_r+0x2c>
 800c4a8:	f04f 35ff 	mov.w	r5, #4294967295
 800c4ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4ae:	07da      	lsls	r2, r3, #31
 800c4b0:	d405      	bmi.n	800c4be <_puts_r+0x72>
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	059b      	lsls	r3, r3, #22
 800c4b6:	d402      	bmi.n	800c4be <_puts_r+0x72>
 800c4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ba:	f000 f998 	bl	800c7ee <__retarget_lock_release_recursive>
 800c4be:	4628      	mov	r0, r5
 800c4c0:	bd70      	pop	{r4, r5, r6, pc}
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	da04      	bge.n	800c4d0 <_puts_r+0x84>
 800c4c6:	69a2      	ldr	r2, [r4, #24]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	dc06      	bgt.n	800c4da <_puts_r+0x8e>
 800c4cc:	290a      	cmp	r1, #10
 800c4ce:	d004      	beq.n	800c4da <_puts_r+0x8e>
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	6022      	str	r2, [r4, #0]
 800c4d6:	7019      	strb	r1, [r3, #0]
 800c4d8:	e7cf      	b.n	800c47a <_puts_r+0x2e>
 800c4da:	4622      	mov	r2, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 f874 	bl	800c5ca <__swbuf_r>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d1c9      	bne.n	800c47a <_puts_r+0x2e>
 800c4e6:	e7df      	b.n	800c4a8 <_puts_r+0x5c>
 800c4e8:	250a      	movs	r5, #10
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	1c5a      	adds	r2, r3, #1
 800c4ee:	6022      	str	r2, [r4, #0]
 800c4f0:	701d      	strb	r5, [r3, #0]
 800c4f2:	e7db      	b.n	800c4ac <_puts_r+0x60>

0800c4f4 <puts>:
 800c4f4:	4b02      	ldr	r3, [pc, #8]	; (800c500 <puts+0xc>)
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	f7ff bfa7 	b.w	800c44c <_puts_r>
 800c4fe:	bf00      	nop
 800c500:	20000074 	.word	0x20000074

0800c504 <siprintf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c50a:	b500      	push	{lr}
 800c50c:	b09c      	sub	sp, #112	; 0x70
 800c50e:	ab1d      	add	r3, sp, #116	; 0x74
 800c510:	9002      	str	r0, [sp, #8]
 800c512:	9006      	str	r0, [sp, #24]
 800c514:	9107      	str	r1, [sp, #28]
 800c516:	9104      	str	r1, [sp, #16]
 800c518:	4808      	ldr	r0, [pc, #32]	; (800c53c <siprintf+0x38>)
 800c51a:	4909      	ldr	r1, [pc, #36]	; (800c540 <siprintf+0x3c>)
 800c51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c520:	9105      	str	r1, [sp, #20]
 800c522:	6800      	ldr	r0, [r0, #0]
 800c524:	a902      	add	r1, sp, #8
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	f002 fc82 	bl	800ee30 <_svfiprintf_r>
 800c52c:	2200      	movs	r2, #0
 800c52e:	9b02      	ldr	r3, [sp, #8]
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	b01c      	add	sp, #112	; 0x70
 800c534:	f85d eb04 	ldr.w	lr, [sp], #4
 800c538:	b003      	add	sp, #12
 800c53a:	4770      	bx	lr
 800c53c:	20000074 	.word	0x20000074
 800c540:	ffff0208 	.word	0xffff0208

0800c544 <__sread>:
 800c544:	b510      	push	{r4, lr}
 800c546:	460c      	mov	r4, r1
 800c548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54c:	f000 f900 	bl	800c750 <_read_r>
 800c550:	2800      	cmp	r0, #0
 800c552:	bfab      	itete	ge
 800c554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c556:	89a3      	ldrhlt	r3, [r4, #12]
 800c558:	181b      	addge	r3, r3, r0
 800c55a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c55e:	bfac      	ite	ge
 800c560:	6563      	strge	r3, [r4, #84]	; 0x54
 800c562:	81a3      	strhlt	r3, [r4, #12]
 800c564:	bd10      	pop	{r4, pc}

0800c566 <__swrite>:
 800c566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c56a:	461f      	mov	r7, r3
 800c56c:	898b      	ldrh	r3, [r1, #12]
 800c56e:	4605      	mov	r5, r0
 800c570:	05db      	lsls	r3, r3, #23
 800c572:	460c      	mov	r4, r1
 800c574:	4616      	mov	r6, r2
 800c576:	d505      	bpl.n	800c584 <__swrite+0x1e>
 800c578:	2302      	movs	r3, #2
 800c57a:	2200      	movs	r2, #0
 800c57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c580:	f000 f8d4 	bl	800c72c <_lseek_r>
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	4632      	mov	r2, r6
 800c588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c58c:	81a3      	strh	r3, [r4, #12]
 800c58e:	4628      	mov	r0, r5
 800c590:	463b      	mov	r3, r7
 800c592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c59a:	f000 b8eb 	b.w	800c774 <_write_r>

0800c59e <__sseek>:
 800c59e:	b510      	push	{r4, lr}
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a6:	f000 f8c1 	bl	800c72c <_lseek_r>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	bf15      	itete	ne
 800c5b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ba:	81a3      	strheq	r3, [r4, #12]
 800c5bc:	bf18      	it	ne
 800c5be:	81a3      	strhne	r3, [r4, #12]
 800c5c0:	bd10      	pop	{r4, pc}

0800c5c2 <__sclose>:
 800c5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c6:	f000 b8a1 	b.w	800c70c <_close_r>

0800c5ca <__swbuf_r>:
 800c5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5cc:	460e      	mov	r6, r1
 800c5ce:	4614      	mov	r4, r2
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	b118      	cbz	r0, 800c5dc <__swbuf_r+0x12>
 800c5d4:	6a03      	ldr	r3, [r0, #32]
 800c5d6:	b90b      	cbnz	r3, 800c5dc <__swbuf_r+0x12>
 800c5d8:	f7ff fef0 	bl	800c3bc <__sinit>
 800c5dc:	69a3      	ldr	r3, [r4, #24]
 800c5de:	60a3      	str	r3, [r4, #8]
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	071a      	lsls	r2, r3, #28
 800c5e4:	d525      	bpl.n	800c632 <__swbuf_r+0x68>
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	b31b      	cbz	r3, 800c632 <__swbuf_r+0x68>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	6922      	ldr	r2, [r4, #16]
 800c5ee:	b2f6      	uxtb	r6, r6
 800c5f0:	1a98      	subs	r0, r3, r2
 800c5f2:	6963      	ldr	r3, [r4, #20]
 800c5f4:	4637      	mov	r7, r6
 800c5f6:	4283      	cmp	r3, r0
 800c5f8:	dc04      	bgt.n	800c604 <__swbuf_r+0x3a>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f002 fed9 	bl	800f3b4 <_fflush_r>
 800c602:	b9e0      	cbnz	r0, 800c63e <__swbuf_r+0x74>
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	3b01      	subs	r3, #1
 800c608:	60a3      	str	r3, [r4, #8]
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	1c5a      	adds	r2, r3, #1
 800c60e:	6022      	str	r2, [r4, #0]
 800c610:	701e      	strb	r6, [r3, #0]
 800c612:	6962      	ldr	r2, [r4, #20]
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	429a      	cmp	r2, r3
 800c618:	d004      	beq.n	800c624 <__swbuf_r+0x5a>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	07db      	lsls	r3, r3, #31
 800c61e:	d506      	bpl.n	800c62e <__swbuf_r+0x64>
 800c620:	2e0a      	cmp	r6, #10
 800c622:	d104      	bne.n	800c62e <__swbuf_r+0x64>
 800c624:	4621      	mov	r1, r4
 800c626:	4628      	mov	r0, r5
 800c628:	f002 fec4 	bl	800f3b4 <_fflush_r>
 800c62c:	b938      	cbnz	r0, 800c63e <__swbuf_r+0x74>
 800c62e:	4638      	mov	r0, r7
 800c630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c632:	4621      	mov	r1, r4
 800c634:	4628      	mov	r0, r5
 800c636:	f000 f805 	bl	800c644 <__swsetup_r>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d0d5      	beq.n	800c5ea <__swbuf_r+0x20>
 800c63e:	f04f 37ff 	mov.w	r7, #4294967295
 800c642:	e7f4      	b.n	800c62e <__swbuf_r+0x64>

0800c644 <__swsetup_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4b2a      	ldr	r3, [pc, #168]	; (800c6f0 <__swsetup_r+0xac>)
 800c648:	4605      	mov	r5, r0
 800c64a:	6818      	ldr	r0, [r3, #0]
 800c64c:	460c      	mov	r4, r1
 800c64e:	b118      	cbz	r0, 800c658 <__swsetup_r+0x14>
 800c650:	6a03      	ldr	r3, [r0, #32]
 800c652:	b90b      	cbnz	r3, 800c658 <__swsetup_r+0x14>
 800c654:	f7ff feb2 	bl	800c3bc <__sinit>
 800c658:	89a3      	ldrh	r3, [r4, #12]
 800c65a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c65e:	0718      	lsls	r0, r3, #28
 800c660:	d422      	bmi.n	800c6a8 <__swsetup_r+0x64>
 800c662:	06d9      	lsls	r1, r3, #27
 800c664:	d407      	bmi.n	800c676 <__swsetup_r+0x32>
 800c666:	2309      	movs	r3, #9
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c66e:	f04f 30ff 	mov.w	r0, #4294967295
 800c672:	81a3      	strh	r3, [r4, #12]
 800c674:	e034      	b.n	800c6e0 <__swsetup_r+0x9c>
 800c676:	0758      	lsls	r0, r3, #29
 800c678:	d512      	bpl.n	800c6a0 <__swsetup_r+0x5c>
 800c67a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c67c:	b141      	cbz	r1, 800c690 <__swsetup_r+0x4c>
 800c67e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c682:	4299      	cmp	r1, r3
 800c684:	d002      	beq.n	800c68c <__swsetup_r+0x48>
 800c686:	4628      	mov	r0, r5
 800c688:	f000 ff42 	bl	800d510 <_free_r>
 800c68c:	2300      	movs	r3, #0
 800c68e:	6363      	str	r3, [r4, #52]	; 0x34
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c696:	81a3      	strh	r3, [r4, #12]
 800c698:	2300      	movs	r3, #0
 800c69a:	6063      	str	r3, [r4, #4]
 800c69c:	6923      	ldr	r3, [r4, #16]
 800c69e:	6023      	str	r3, [r4, #0]
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	f043 0308 	orr.w	r3, r3, #8
 800c6a6:	81a3      	strh	r3, [r4, #12]
 800c6a8:	6923      	ldr	r3, [r4, #16]
 800c6aa:	b94b      	cbnz	r3, 800c6c0 <__swsetup_r+0x7c>
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6b6:	d003      	beq.n	800c6c0 <__swsetup_r+0x7c>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f002 fec7 	bl	800f44e <__smakebuf_r>
 800c6c0:	89a0      	ldrh	r0, [r4, #12]
 800c6c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6c6:	f010 0301 	ands.w	r3, r0, #1
 800c6ca:	d00a      	beq.n	800c6e2 <__swsetup_r+0x9e>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	60a3      	str	r3, [r4, #8]
 800c6d0:	6963      	ldr	r3, [r4, #20]
 800c6d2:	425b      	negs	r3, r3
 800c6d4:	61a3      	str	r3, [r4, #24]
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	b943      	cbnz	r3, 800c6ec <__swsetup_r+0xa8>
 800c6da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6de:	d1c4      	bne.n	800c66a <__swsetup_r+0x26>
 800c6e0:	bd38      	pop	{r3, r4, r5, pc}
 800c6e2:	0781      	lsls	r1, r0, #30
 800c6e4:	bf58      	it	pl
 800c6e6:	6963      	ldrpl	r3, [r4, #20]
 800c6e8:	60a3      	str	r3, [r4, #8]
 800c6ea:	e7f4      	b.n	800c6d6 <__swsetup_r+0x92>
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	e7f7      	b.n	800c6e0 <__swsetup_r+0x9c>
 800c6f0:	20000074 	.word	0x20000074

0800c6f4 <memset>:
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	4402      	add	r2, r0
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d100      	bne.n	800c6fe <memset+0xa>
 800c6fc:	4770      	bx	lr
 800c6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c702:	e7f9      	b.n	800c6f8 <memset+0x4>

0800c704 <_localeconv_r>:
 800c704:	4800      	ldr	r0, [pc, #0]	; (800c708 <_localeconv_r+0x4>)
 800c706:	4770      	bx	lr
 800c708:	20000168 	.word	0x20000168

0800c70c <_close_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	2300      	movs	r3, #0
 800c710:	4d05      	ldr	r5, [pc, #20]	; (800c728 <_close_r+0x1c>)
 800c712:	4604      	mov	r4, r0
 800c714:	4608      	mov	r0, r1
 800c716:	602b      	str	r3, [r5, #0]
 800c718:	f7fa fa6c 	bl	8006bf4 <_close>
 800c71c:	1c43      	adds	r3, r0, #1
 800c71e:	d102      	bne.n	800c726 <_close_r+0x1a>
 800c720:	682b      	ldr	r3, [r5, #0]
 800c722:	b103      	cbz	r3, 800c726 <_close_r+0x1a>
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	200045bc 	.word	0x200045bc

0800c72c <_lseek_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4604      	mov	r4, r0
 800c730:	4608      	mov	r0, r1
 800c732:	4611      	mov	r1, r2
 800c734:	2200      	movs	r2, #0
 800c736:	4d05      	ldr	r5, [pc, #20]	; (800c74c <_lseek_r+0x20>)
 800c738:	602a      	str	r2, [r5, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	f7fa fa7e 	bl	8006c3c <_lseek>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d102      	bne.n	800c74a <_lseek_r+0x1e>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b103      	cbz	r3, 800c74a <_lseek_r+0x1e>
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	200045bc 	.word	0x200045bc

0800c750 <_read_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4604      	mov	r4, r0
 800c754:	4608      	mov	r0, r1
 800c756:	4611      	mov	r1, r2
 800c758:	2200      	movs	r2, #0
 800c75a:	4d05      	ldr	r5, [pc, #20]	; (800c770 <_read_r+0x20>)
 800c75c:	602a      	str	r2, [r5, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	f7fa fa2b 	bl	8006bba <_read>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_read_r+0x1e>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_read_r+0x1e>
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	200045bc 	.word	0x200045bc

0800c774 <_write_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	4611      	mov	r1, r2
 800c77c:	2200      	movs	r2, #0
 800c77e:	4d05      	ldr	r5, [pc, #20]	; (800c794 <_write_r+0x20>)
 800c780:	602a      	str	r2, [r5, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	f7f7 fd1e 	bl	80041c4 <_write>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_write_r+0x1e>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_write_r+0x1e>
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	200045bc 	.word	0x200045bc

0800c798 <__errno>:
 800c798:	4b01      	ldr	r3, [pc, #4]	; (800c7a0 <__errno+0x8>)
 800c79a:	6818      	ldr	r0, [r3, #0]
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	20000074 	.word	0x20000074

0800c7a4 <__libc_init_array>:
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	2600      	movs	r6, #0
 800c7a8:	4d0c      	ldr	r5, [pc, #48]	; (800c7dc <__libc_init_array+0x38>)
 800c7aa:	4c0d      	ldr	r4, [pc, #52]	; (800c7e0 <__libc_init_array+0x3c>)
 800c7ac:	1b64      	subs	r4, r4, r5
 800c7ae:	10a4      	asrs	r4, r4, #2
 800c7b0:	42a6      	cmp	r6, r4
 800c7b2:	d109      	bne.n	800c7c8 <__libc_init_array+0x24>
 800c7b4:	f003 fb2c 	bl	800fe10 <_init>
 800c7b8:	2600      	movs	r6, #0
 800c7ba:	4d0a      	ldr	r5, [pc, #40]	; (800c7e4 <__libc_init_array+0x40>)
 800c7bc:	4c0a      	ldr	r4, [pc, #40]	; (800c7e8 <__libc_init_array+0x44>)
 800c7be:	1b64      	subs	r4, r4, r5
 800c7c0:	10a4      	asrs	r4, r4, #2
 800c7c2:	42a6      	cmp	r6, r4
 800c7c4:	d105      	bne.n	800c7d2 <__libc_init_array+0x2e>
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}
 800c7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7cc:	4798      	blx	r3
 800c7ce:	3601      	adds	r6, #1
 800c7d0:	e7ee      	b.n	800c7b0 <__libc_init_array+0xc>
 800c7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d6:	4798      	blx	r3
 800c7d8:	3601      	adds	r6, #1
 800c7da:	e7f2      	b.n	800c7c2 <__libc_init_array+0x1e>
 800c7dc:	080103e8 	.word	0x080103e8
 800c7e0:	080103e8 	.word	0x080103e8
 800c7e4:	080103e8 	.word	0x080103e8
 800c7e8:	080103ec 	.word	0x080103ec

0800c7ec <__retarget_lock_acquire_recursive>:
 800c7ec:	4770      	bx	lr

0800c7ee <__retarget_lock_release_recursive>:
 800c7ee:	4770      	bx	lr

0800c7f0 <memchr>:
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	b510      	push	{r4, lr}
 800c7f4:	b2c9      	uxtb	r1, r1
 800c7f6:	4402      	add	r2, r0
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	d101      	bne.n	800c802 <memchr+0x12>
 800c7fe:	2000      	movs	r0, #0
 800c800:	e003      	b.n	800c80a <memchr+0x1a>
 800c802:	7804      	ldrb	r4, [r0, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	428c      	cmp	r4, r1
 800c808:	d1f6      	bne.n	800c7f8 <memchr+0x8>
 800c80a:	bd10      	pop	{r4, pc}

0800c80c <memcpy>:
 800c80c:	440a      	add	r2, r1
 800c80e:	4291      	cmp	r1, r2
 800c810:	f100 33ff 	add.w	r3, r0, #4294967295
 800c814:	d100      	bne.n	800c818 <memcpy+0xc>
 800c816:	4770      	bx	lr
 800c818:	b510      	push	{r4, lr}
 800c81a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c81e:	4291      	cmp	r1, r2
 800c820:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c824:	d1f9      	bne.n	800c81a <memcpy+0xe>
 800c826:	bd10      	pop	{r4, pc}

0800c828 <nanf>:
 800c828:	4800      	ldr	r0, [pc, #0]	; (800c82c <nanf+0x4>)
 800c82a:	4770      	bx	lr
 800c82c:	7fc00000 	.word	0x7fc00000

0800c830 <quorem>:
 800c830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	6903      	ldr	r3, [r0, #16]
 800c836:	690c      	ldr	r4, [r1, #16]
 800c838:	4607      	mov	r7, r0
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	db7f      	blt.n	800c93e <quorem+0x10e>
 800c83e:	3c01      	subs	r4, #1
 800c840:	f100 0514 	add.w	r5, r0, #20
 800c844:	f101 0814 	add.w	r8, r1, #20
 800c848:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c856:	3301      	adds	r3, #1
 800c858:	429a      	cmp	r2, r3
 800c85a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c85e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c862:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c866:	d331      	bcc.n	800c8cc <quorem+0x9c>
 800c868:	f04f 0e00 	mov.w	lr, #0
 800c86c:	4640      	mov	r0, r8
 800c86e:	46ac      	mov	ip, r5
 800c870:	46f2      	mov	sl, lr
 800c872:	f850 2b04 	ldr.w	r2, [r0], #4
 800c876:	b293      	uxth	r3, r2
 800c878:	fb06 e303 	mla	r3, r6, r3, lr
 800c87c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c880:	0c1a      	lsrs	r2, r3, #16
 800c882:	b29b      	uxth	r3, r3
 800c884:	fb06 220e 	mla	r2, r6, lr, r2
 800c888:	ebaa 0303 	sub.w	r3, sl, r3
 800c88c:	f8dc a000 	ldr.w	sl, [ip]
 800c890:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c894:	fa1f fa8a 	uxth.w	sl, sl
 800c898:	4453      	add	r3, sl
 800c89a:	f8dc a000 	ldr.w	sl, [ip]
 800c89e:	b292      	uxth	r2, r2
 800c8a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c8a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8ae:	4581      	cmp	r9, r0
 800c8b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c8b4:	f84c 3b04 	str.w	r3, [ip], #4
 800c8b8:	d2db      	bcs.n	800c872 <quorem+0x42>
 800c8ba:	f855 300b 	ldr.w	r3, [r5, fp]
 800c8be:	b92b      	cbnz	r3, 800c8cc <quorem+0x9c>
 800c8c0:	9b01      	ldr	r3, [sp, #4]
 800c8c2:	3b04      	subs	r3, #4
 800c8c4:	429d      	cmp	r5, r3
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	d32d      	bcc.n	800c926 <quorem+0xf6>
 800c8ca:	613c      	str	r4, [r7, #16]
 800c8cc:	4638      	mov	r0, r7
 800c8ce:	f001 f9df 	bl	800dc90 <__mcmp>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	db23      	blt.n	800c91e <quorem+0xee>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	2000      	movs	r0, #0
 800c8da:	3601      	adds	r6, #1
 800c8dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8e0:	f8d1 c000 	ldr.w	ip, [r1]
 800c8e4:	b293      	uxth	r3, r2
 800c8e6:	1ac3      	subs	r3, r0, r3
 800c8e8:	0c12      	lsrs	r2, r2, #16
 800c8ea:	fa1f f08c 	uxth.w	r0, ip
 800c8ee:	4403      	add	r3, r0
 800c8f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c8f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8fe:	45c1      	cmp	r9, r8
 800c900:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c904:	f841 3b04 	str.w	r3, [r1], #4
 800c908:	d2e8      	bcs.n	800c8dc <quorem+0xac>
 800c90a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c90e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c912:	b922      	cbnz	r2, 800c91e <quorem+0xee>
 800c914:	3b04      	subs	r3, #4
 800c916:	429d      	cmp	r5, r3
 800c918:	461a      	mov	r2, r3
 800c91a:	d30a      	bcc.n	800c932 <quorem+0x102>
 800c91c:	613c      	str	r4, [r7, #16]
 800c91e:	4630      	mov	r0, r6
 800c920:	b003      	add	sp, #12
 800c922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c926:	6812      	ldr	r2, [r2, #0]
 800c928:	3b04      	subs	r3, #4
 800c92a:	2a00      	cmp	r2, #0
 800c92c:	d1cd      	bne.n	800c8ca <quorem+0x9a>
 800c92e:	3c01      	subs	r4, #1
 800c930:	e7c8      	b.n	800c8c4 <quorem+0x94>
 800c932:	6812      	ldr	r2, [r2, #0]
 800c934:	3b04      	subs	r3, #4
 800c936:	2a00      	cmp	r2, #0
 800c938:	d1f0      	bne.n	800c91c <quorem+0xec>
 800c93a:	3c01      	subs	r4, #1
 800c93c:	e7eb      	b.n	800c916 <quorem+0xe6>
 800c93e:	2000      	movs	r0, #0
 800c940:	e7ee      	b.n	800c920 <quorem+0xf0>
 800c942:	0000      	movs	r0, r0
 800c944:	0000      	movs	r0, r0
	...

0800c948 <_dtoa_r>:
 800c948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	4616      	mov	r6, r2
 800c94e:	461f      	mov	r7, r3
 800c950:	69c4      	ldr	r4, [r0, #28]
 800c952:	b099      	sub	sp, #100	; 0x64
 800c954:	4605      	mov	r5, r0
 800c956:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c95a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c95e:	b974      	cbnz	r4, 800c97e <_dtoa_r+0x36>
 800c960:	2010      	movs	r0, #16
 800c962:	f000 fe1d 	bl	800d5a0 <malloc>
 800c966:	4602      	mov	r2, r0
 800c968:	61e8      	str	r0, [r5, #28]
 800c96a:	b920      	cbnz	r0, 800c976 <_dtoa_r+0x2e>
 800c96c:	21ef      	movs	r1, #239	; 0xef
 800c96e:	4bac      	ldr	r3, [pc, #688]	; (800cc20 <_dtoa_r+0x2d8>)
 800c970:	48ac      	ldr	r0, [pc, #688]	; (800cc24 <_dtoa_r+0x2dc>)
 800c972:	f002 fe0d 	bl	800f590 <__assert_func>
 800c976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c97a:	6004      	str	r4, [r0, #0]
 800c97c:	60c4      	str	r4, [r0, #12]
 800c97e:	69eb      	ldr	r3, [r5, #28]
 800c980:	6819      	ldr	r1, [r3, #0]
 800c982:	b151      	cbz	r1, 800c99a <_dtoa_r+0x52>
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	2301      	movs	r3, #1
 800c988:	4093      	lsls	r3, r2
 800c98a:	604a      	str	r2, [r1, #4]
 800c98c:	608b      	str	r3, [r1, #8]
 800c98e:	4628      	mov	r0, r5
 800c990:	f000 fefa 	bl	800d788 <_Bfree>
 800c994:	2200      	movs	r2, #0
 800c996:	69eb      	ldr	r3, [r5, #28]
 800c998:	601a      	str	r2, [r3, #0]
 800c99a:	1e3b      	subs	r3, r7, #0
 800c99c:	bfaf      	iteee	ge
 800c99e:	2300      	movge	r3, #0
 800c9a0:	2201      	movlt	r2, #1
 800c9a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c9a6:	9305      	strlt	r3, [sp, #20]
 800c9a8:	bfa8      	it	ge
 800c9aa:	f8c8 3000 	strge.w	r3, [r8]
 800c9ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c9b2:	4b9d      	ldr	r3, [pc, #628]	; (800cc28 <_dtoa_r+0x2e0>)
 800c9b4:	bfb8      	it	lt
 800c9b6:	f8c8 2000 	strlt.w	r2, [r8]
 800c9ba:	ea33 0309 	bics.w	r3, r3, r9
 800c9be:	d119      	bne.n	800c9f4 <_dtoa_r+0xac>
 800c9c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c9c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9cc:	4333      	orrs	r3, r6
 800c9ce:	f000 8589 	beq.w	800d4e4 <_dtoa_r+0xb9c>
 800c9d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c9d4:	b953      	cbnz	r3, 800c9ec <_dtoa_r+0xa4>
 800c9d6:	4b95      	ldr	r3, [pc, #596]	; (800cc2c <_dtoa_r+0x2e4>)
 800c9d8:	e023      	b.n	800ca22 <_dtoa_r+0xda>
 800c9da:	4b95      	ldr	r3, [pc, #596]	; (800cc30 <_dtoa_r+0x2e8>)
 800c9dc:	9303      	str	r3, [sp, #12]
 800c9de:	3308      	adds	r3, #8
 800c9e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	9803      	ldr	r0, [sp, #12]
 800c9e6:	b019      	add	sp, #100	; 0x64
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	4b8f      	ldr	r3, [pc, #572]	; (800cc2c <_dtoa_r+0x2e4>)
 800c9ee:	9303      	str	r3, [sp, #12]
 800c9f0:	3303      	adds	r3, #3
 800c9f2:	e7f5      	b.n	800c9e0 <_dtoa_r+0x98>
 800c9f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c9f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c9fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca00:	2200      	movs	r2, #0
 800ca02:	2300      	movs	r3, #0
 800ca04:	f7f4 f83c 	bl	8000a80 <__aeabi_dcmpeq>
 800ca08:	4680      	mov	r8, r0
 800ca0a:	b160      	cbz	r0, 800ca26 <_dtoa_r+0xde>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 8562 	beq.w	800d4de <_dtoa_r+0xb96>
 800ca1a:	4b86      	ldr	r3, [pc, #536]	; (800cc34 <_dtoa_r+0x2ec>)
 800ca1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ca1e:	6013      	str	r3, [r2, #0]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	9303      	str	r3, [sp, #12]
 800ca24:	e7de      	b.n	800c9e4 <_dtoa_r+0x9c>
 800ca26:	ab16      	add	r3, sp, #88	; 0x58
 800ca28:	9301      	str	r3, [sp, #4]
 800ca2a:	ab17      	add	r3, sp, #92	; 0x5c
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	4628      	mov	r0, r5
 800ca30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ca34:	f001 fa3c 	bl	800deb0 <__d2b>
 800ca38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ca3c:	4682      	mov	sl, r0
 800ca3e:	2c00      	cmp	r4, #0
 800ca40:	d07e      	beq.n	800cb40 <_dtoa_r+0x1f8>
 800ca42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ca4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ca54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	2200      	movs	r2, #0
 800ca60:	4b75      	ldr	r3, [pc, #468]	; (800cc38 <_dtoa_r+0x2f0>)
 800ca62:	f7f3 fbed 	bl	8000240 <__aeabi_dsub>
 800ca66:	a368      	add	r3, pc, #416	; (adr r3, 800cc08 <_dtoa_r+0x2c0>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	f7f3 fda0 	bl	80005b0 <__aeabi_dmul>
 800ca70:	a367      	add	r3, pc, #412	; (adr r3, 800cc10 <_dtoa_r+0x2c8>)
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	f7f3 fbe5 	bl	8000244 <__adddf3>
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	460f      	mov	r7, r1
 800ca80:	f7f3 fd2c 	bl	80004dc <__aeabi_i2d>
 800ca84:	a364      	add	r3, pc, #400	; (adr r3, 800cc18 <_dtoa_r+0x2d0>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	f7f3 fd91 	bl	80005b0 <__aeabi_dmul>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	460b      	mov	r3, r1
 800ca92:	4630      	mov	r0, r6
 800ca94:	4639      	mov	r1, r7
 800ca96:	f7f3 fbd5 	bl	8000244 <__adddf3>
 800ca9a:	4606      	mov	r6, r0
 800ca9c:	460f      	mov	r7, r1
 800ca9e:	f7f4 f837 	bl	8000b10 <__aeabi_d2iz>
 800caa2:	2200      	movs	r2, #0
 800caa4:	4683      	mov	fp, r0
 800caa6:	2300      	movs	r3, #0
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	f7f3 fff2 	bl	8000a94 <__aeabi_dcmplt>
 800cab0:	b148      	cbz	r0, 800cac6 <_dtoa_r+0x17e>
 800cab2:	4658      	mov	r0, fp
 800cab4:	f7f3 fd12 	bl	80004dc <__aeabi_i2d>
 800cab8:	4632      	mov	r2, r6
 800caba:	463b      	mov	r3, r7
 800cabc:	f7f3 ffe0 	bl	8000a80 <__aeabi_dcmpeq>
 800cac0:	b908      	cbnz	r0, 800cac6 <_dtoa_r+0x17e>
 800cac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cac6:	f1bb 0f16 	cmp.w	fp, #22
 800caca:	d857      	bhi.n	800cb7c <_dtoa_r+0x234>
 800cacc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cad0:	4b5a      	ldr	r3, [pc, #360]	; (800cc3c <_dtoa_r+0x2f4>)
 800cad2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	f7f3 ffdb 	bl	8000a94 <__aeabi_dcmplt>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d04e      	beq.n	800cb80 <_dtoa_r+0x238>
 800cae2:	2300      	movs	r3, #0
 800cae4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cae8:	930f      	str	r3, [sp, #60]	; 0x3c
 800caea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800caec:	1b1b      	subs	r3, r3, r4
 800caee:	1e5a      	subs	r2, r3, #1
 800caf0:	bf46      	itte	mi
 800caf2:	f1c3 0901 	rsbmi	r9, r3, #1
 800caf6:	2300      	movmi	r3, #0
 800caf8:	f04f 0900 	movpl.w	r9, #0
 800cafc:	9209      	str	r2, [sp, #36]	; 0x24
 800cafe:	bf48      	it	mi
 800cb00:	9309      	strmi	r3, [sp, #36]	; 0x24
 800cb02:	f1bb 0f00 	cmp.w	fp, #0
 800cb06:	db3d      	blt.n	800cb84 <_dtoa_r+0x23c>
 800cb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb0a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800cb0e:	445b      	add	r3, fp
 800cb10:	9309      	str	r3, [sp, #36]	; 0x24
 800cb12:	2300      	movs	r3, #0
 800cb14:	930a      	str	r3, [sp, #40]	; 0x28
 800cb16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	d867      	bhi.n	800cbec <_dtoa_r+0x2a4>
 800cb1c:	2b05      	cmp	r3, #5
 800cb1e:	bfc4      	itt	gt
 800cb20:	3b04      	subgt	r3, #4
 800cb22:	9322      	strgt	r3, [sp, #136]	; 0x88
 800cb24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb26:	bfc8      	it	gt
 800cb28:	2400      	movgt	r4, #0
 800cb2a:	f1a3 0302 	sub.w	r3, r3, #2
 800cb2e:	bfd8      	it	le
 800cb30:	2401      	movle	r4, #1
 800cb32:	2b03      	cmp	r3, #3
 800cb34:	f200 8086 	bhi.w	800cc44 <_dtoa_r+0x2fc>
 800cb38:	e8df f003 	tbb	[pc, r3]
 800cb3c:	5637392c 	.word	0x5637392c
 800cb40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800cb44:	441c      	add	r4, r3
 800cb46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800cb4a:	2b20      	cmp	r3, #32
 800cb4c:	bfc1      	itttt	gt
 800cb4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb52:	fa09 f903 	lslgt.w	r9, r9, r3
 800cb56:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800cb5a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cb5e:	bfd6      	itet	le
 800cb60:	f1c3 0320 	rsble	r3, r3, #32
 800cb64:	ea49 0003 	orrgt.w	r0, r9, r3
 800cb68:	fa06 f003 	lslle.w	r0, r6, r3
 800cb6c:	f7f3 fca6 	bl	80004bc <__aeabi_ui2d>
 800cb70:	2201      	movs	r2, #1
 800cb72:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800cb76:	3c01      	subs	r4, #1
 800cb78:	9213      	str	r2, [sp, #76]	; 0x4c
 800cb7a:	e76f      	b.n	800ca5c <_dtoa_r+0x114>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e7b3      	b.n	800cae8 <_dtoa_r+0x1a0>
 800cb80:	900f      	str	r0, [sp, #60]	; 0x3c
 800cb82:	e7b2      	b.n	800caea <_dtoa_r+0x1a2>
 800cb84:	f1cb 0300 	rsb	r3, fp, #0
 800cb88:	930a      	str	r3, [sp, #40]	; 0x28
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	eba9 090b 	sub.w	r9, r9, fp
 800cb90:	930e      	str	r3, [sp, #56]	; 0x38
 800cb92:	e7c0      	b.n	800cb16 <_dtoa_r+0x1ce>
 800cb94:	2300      	movs	r3, #0
 800cb96:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	dc55      	bgt.n	800cc4a <_dtoa_r+0x302>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	461a      	mov	r2, r3
 800cba2:	9306      	str	r3, [sp, #24]
 800cba4:	9308      	str	r3, [sp, #32]
 800cba6:	9223      	str	r2, [sp, #140]	; 0x8c
 800cba8:	e00b      	b.n	800cbc2 <_dtoa_r+0x27a>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e7f3      	b.n	800cb96 <_dtoa_r+0x24e>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cbb4:	445b      	add	r3, fp
 800cbb6:	9306      	str	r3, [sp, #24]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	9308      	str	r3, [sp, #32]
 800cbbe:	bfb8      	it	lt
 800cbc0:	2301      	movlt	r3, #1
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	2204      	movs	r2, #4
 800cbc6:	69e8      	ldr	r0, [r5, #28]
 800cbc8:	f102 0614 	add.w	r6, r2, #20
 800cbcc:	429e      	cmp	r6, r3
 800cbce:	d940      	bls.n	800cc52 <_dtoa_r+0x30a>
 800cbd0:	6041      	str	r1, [r0, #4]
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f000 fd98 	bl	800d708 <_Balloc>
 800cbd8:	9003      	str	r0, [sp, #12]
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	d13c      	bne.n	800cc58 <_dtoa_r+0x310>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	f240 11af 	movw	r1, #431	; 0x1af
 800cbe4:	4b16      	ldr	r3, [pc, #88]	; (800cc40 <_dtoa_r+0x2f8>)
 800cbe6:	e6c3      	b.n	800c970 <_dtoa_r+0x28>
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e7e1      	b.n	800cbb0 <_dtoa_r+0x268>
 800cbec:	2401      	movs	r4, #1
 800cbee:	2300      	movs	r3, #0
 800cbf0:	940b      	str	r4, [sp, #44]	; 0x2c
 800cbf2:	9322      	str	r3, [sp, #136]	; 0x88
 800cbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	9306      	str	r3, [sp, #24]
 800cbfc:	9308      	str	r3, [sp, #32]
 800cbfe:	2312      	movs	r3, #18
 800cc00:	e7d1      	b.n	800cba6 <_dtoa_r+0x25e>
 800cc02:	bf00      	nop
 800cc04:	f3af 8000 	nop.w
 800cc08:	636f4361 	.word	0x636f4361
 800cc0c:	3fd287a7 	.word	0x3fd287a7
 800cc10:	8b60c8b3 	.word	0x8b60c8b3
 800cc14:	3fc68a28 	.word	0x3fc68a28
 800cc18:	509f79fb 	.word	0x509f79fb
 800cc1c:	3fd34413 	.word	0x3fd34413
 800cc20:	0800fff8 	.word	0x0800fff8
 800cc24:	0801000f 	.word	0x0801000f
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	0800fff4 	.word	0x0800fff4
 800cc30:	0800ffeb 	.word	0x0800ffeb
 800cc34:	0800ffc3 	.word	0x0800ffc3
 800cc38:	3ff80000 	.word	0x3ff80000
 800cc3c:	08010100 	.word	0x08010100
 800cc40:	08010067 	.word	0x08010067
 800cc44:	2301      	movs	r3, #1
 800cc46:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc48:	e7d4      	b.n	800cbf4 <_dtoa_r+0x2ac>
 800cc4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc4c:	9306      	str	r3, [sp, #24]
 800cc4e:	9308      	str	r3, [sp, #32]
 800cc50:	e7b7      	b.n	800cbc2 <_dtoa_r+0x27a>
 800cc52:	3101      	adds	r1, #1
 800cc54:	0052      	lsls	r2, r2, #1
 800cc56:	e7b7      	b.n	800cbc8 <_dtoa_r+0x280>
 800cc58:	69eb      	ldr	r3, [r5, #28]
 800cc5a:	9a03      	ldr	r2, [sp, #12]
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	9b08      	ldr	r3, [sp, #32]
 800cc60:	2b0e      	cmp	r3, #14
 800cc62:	f200 80a8 	bhi.w	800cdb6 <_dtoa_r+0x46e>
 800cc66:	2c00      	cmp	r4, #0
 800cc68:	f000 80a5 	beq.w	800cdb6 <_dtoa_r+0x46e>
 800cc6c:	f1bb 0f00 	cmp.w	fp, #0
 800cc70:	dd34      	ble.n	800ccdc <_dtoa_r+0x394>
 800cc72:	4b9a      	ldr	r3, [pc, #616]	; (800cedc <_dtoa_r+0x594>)
 800cc74:	f00b 020f 	and.w	r2, fp, #15
 800cc78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cc80:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cc84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cc88:	ea4f 142b 	mov.w	r4, fp, asr #4
 800cc8c:	d016      	beq.n	800ccbc <_dtoa_r+0x374>
 800cc8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc92:	4b93      	ldr	r3, [pc, #588]	; (800cee0 <_dtoa_r+0x598>)
 800cc94:	2703      	movs	r7, #3
 800cc96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc9a:	f7f3 fdb3 	bl	8000804 <__aeabi_ddiv>
 800cc9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cca2:	f004 040f 	and.w	r4, r4, #15
 800cca6:	4e8e      	ldr	r6, [pc, #568]	; (800cee0 <_dtoa_r+0x598>)
 800cca8:	b954      	cbnz	r4, 800ccc0 <_dtoa_r+0x378>
 800ccaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ccae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccb2:	f7f3 fda7 	bl	8000804 <__aeabi_ddiv>
 800ccb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccba:	e029      	b.n	800cd10 <_dtoa_r+0x3c8>
 800ccbc:	2702      	movs	r7, #2
 800ccbe:	e7f2      	b.n	800cca6 <_dtoa_r+0x35e>
 800ccc0:	07e1      	lsls	r1, r4, #31
 800ccc2:	d508      	bpl.n	800ccd6 <_dtoa_r+0x38e>
 800ccc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ccc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cccc:	f7f3 fc70 	bl	80005b0 <__aeabi_dmul>
 800ccd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ccd4:	3701      	adds	r7, #1
 800ccd6:	1064      	asrs	r4, r4, #1
 800ccd8:	3608      	adds	r6, #8
 800ccda:	e7e5      	b.n	800cca8 <_dtoa_r+0x360>
 800ccdc:	f000 80a5 	beq.w	800ce2a <_dtoa_r+0x4e2>
 800cce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cce4:	f1cb 0400 	rsb	r4, fp, #0
 800cce8:	4b7c      	ldr	r3, [pc, #496]	; (800cedc <_dtoa_r+0x594>)
 800ccea:	f004 020f 	and.w	r2, r4, #15
 800ccee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f7f3 fc5b 	bl	80005b0 <__aeabi_dmul>
 800ccfa:	2702      	movs	r7, #2
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd02:	4e77      	ldr	r6, [pc, #476]	; (800cee0 <_dtoa_r+0x598>)
 800cd04:	1124      	asrs	r4, r4, #4
 800cd06:	2c00      	cmp	r4, #0
 800cd08:	f040 8084 	bne.w	800ce14 <_dtoa_r+0x4cc>
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1d2      	bne.n	800ccb6 <_dtoa_r+0x36e>
 800cd10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cd14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cd18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 8087 	beq.w	800ce2e <_dtoa_r+0x4e6>
 800cd20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd24:	2200      	movs	r2, #0
 800cd26:	4b6f      	ldr	r3, [pc, #444]	; (800cee4 <_dtoa_r+0x59c>)
 800cd28:	f7f3 feb4 	bl	8000a94 <__aeabi_dcmplt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d07e      	beq.n	800ce2e <_dtoa_r+0x4e6>
 800cd30:	9b08      	ldr	r3, [sp, #32]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d07b      	beq.n	800ce2e <_dtoa_r+0x4e6>
 800cd36:	9b06      	ldr	r3, [sp, #24]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	dd38      	ble.n	800cdae <_dtoa_r+0x466>
 800cd3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd40:	2200      	movs	r2, #0
 800cd42:	4b69      	ldr	r3, [pc, #420]	; (800cee8 <_dtoa_r+0x5a0>)
 800cd44:	f7f3 fc34 	bl	80005b0 <__aeabi_dmul>
 800cd48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd4c:	9c06      	ldr	r4, [sp, #24]
 800cd4e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800cd52:	3701      	adds	r7, #1
 800cd54:	4638      	mov	r0, r7
 800cd56:	f7f3 fbc1 	bl	80004dc <__aeabi_i2d>
 800cd5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd5e:	f7f3 fc27 	bl	80005b0 <__aeabi_dmul>
 800cd62:	2200      	movs	r2, #0
 800cd64:	4b61      	ldr	r3, [pc, #388]	; (800ceec <_dtoa_r+0x5a4>)
 800cd66:	f7f3 fa6d 	bl	8000244 <__adddf3>
 800cd6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cd6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cd72:	9611      	str	r6, [sp, #68]	; 0x44
 800cd74:	2c00      	cmp	r4, #0
 800cd76:	d15d      	bne.n	800ce34 <_dtoa_r+0x4ec>
 800cd78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	4b5c      	ldr	r3, [pc, #368]	; (800cef0 <_dtoa_r+0x5a8>)
 800cd80:	f7f3 fa5e 	bl	8000240 <__aeabi_dsub>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd8c:	4633      	mov	r3, r6
 800cd8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cd90:	f7f3 fe9e 	bl	8000ad0 <__aeabi_dcmpgt>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	f040 8295 	bne.w	800d2c4 <_dtoa_r+0x97c>
 800cd9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cda0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cda4:	f7f3 fe76 	bl	8000a94 <__aeabi_dcmplt>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	f040 8289 	bne.w	800d2c0 <_dtoa_r+0x978>
 800cdae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cdb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cdb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f2c0 8151 	blt.w	800d060 <_dtoa_r+0x718>
 800cdbe:	f1bb 0f0e 	cmp.w	fp, #14
 800cdc2:	f300 814d 	bgt.w	800d060 <_dtoa_r+0x718>
 800cdc6:	4b45      	ldr	r3, [pc, #276]	; (800cedc <_dtoa_r+0x594>)
 800cdc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cdcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cdd0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cdd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f280 80da 	bge.w	800cf90 <_dtoa_r+0x648>
 800cddc:	9b08      	ldr	r3, [sp, #32]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f300 80d6 	bgt.w	800cf90 <_dtoa_r+0x648>
 800cde4:	f040 826b 	bne.w	800d2be <_dtoa_r+0x976>
 800cde8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdec:	2200      	movs	r2, #0
 800cdee:	4b40      	ldr	r3, [pc, #256]	; (800cef0 <_dtoa_r+0x5a8>)
 800cdf0:	f7f3 fbde 	bl	80005b0 <__aeabi_dmul>
 800cdf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdf8:	f7f3 fe60 	bl	8000abc <__aeabi_dcmpge>
 800cdfc:	9c08      	ldr	r4, [sp, #32]
 800cdfe:	4626      	mov	r6, r4
 800ce00:	2800      	cmp	r0, #0
 800ce02:	f040 8241 	bne.w	800d288 <_dtoa_r+0x940>
 800ce06:	2331      	movs	r3, #49	; 0x31
 800ce08:	9f03      	ldr	r7, [sp, #12]
 800ce0a:	f10b 0b01 	add.w	fp, fp, #1
 800ce0e:	f807 3b01 	strb.w	r3, [r7], #1
 800ce12:	e23d      	b.n	800d290 <_dtoa_r+0x948>
 800ce14:	07e2      	lsls	r2, r4, #31
 800ce16:	d505      	bpl.n	800ce24 <_dtoa_r+0x4dc>
 800ce18:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce1c:	f7f3 fbc8 	bl	80005b0 <__aeabi_dmul>
 800ce20:	2301      	movs	r3, #1
 800ce22:	3701      	adds	r7, #1
 800ce24:	1064      	asrs	r4, r4, #1
 800ce26:	3608      	adds	r6, #8
 800ce28:	e76d      	b.n	800cd06 <_dtoa_r+0x3be>
 800ce2a:	2702      	movs	r7, #2
 800ce2c:	e770      	b.n	800cd10 <_dtoa_r+0x3c8>
 800ce2e:	46d8      	mov	r8, fp
 800ce30:	9c08      	ldr	r4, [sp, #32]
 800ce32:	e78f      	b.n	800cd54 <_dtoa_r+0x40c>
 800ce34:	9903      	ldr	r1, [sp, #12]
 800ce36:	4b29      	ldr	r3, [pc, #164]	; (800cedc <_dtoa_r+0x594>)
 800ce38:	4421      	add	r1, r4
 800ce3a:	9112      	str	r1, [sp, #72]	; 0x48
 800ce3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ce46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce4a:	2900      	cmp	r1, #0
 800ce4c:	d054      	beq.n	800cef8 <_dtoa_r+0x5b0>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	4928      	ldr	r1, [pc, #160]	; (800cef4 <_dtoa_r+0x5ac>)
 800ce52:	f7f3 fcd7 	bl	8000804 <__aeabi_ddiv>
 800ce56:	463b      	mov	r3, r7
 800ce58:	4632      	mov	r2, r6
 800ce5a:	f7f3 f9f1 	bl	8000240 <__aeabi_dsub>
 800ce5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ce62:	9f03      	ldr	r7, [sp, #12]
 800ce64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce68:	f7f3 fe52 	bl	8000b10 <__aeabi_d2iz>
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	f7f3 fb35 	bl	80004dc <__aeabi_i2d>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce7a:	f7f3 f9e1 	bl	8000240 <__aeabi_dsub>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	460b      	mov	r3, r1
 800ce82:	3430      	adds	r4, #48	; 0x30
 800ce84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ce8c:	f807 4b01 	strb.w	r4, [r7], #1
 800ce90:	f7f3 fe00 	bl	8000a94 <__aeabi_dcmplt>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d173      	bne.n	800cf80 <_dtoa_r+0x638>
 800ce98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	4911      	ldr	r1, [pc, #68]	; (800cee4 <_dtoa_r+0x59c>)
 800cea0:	f7f3 f9ce 	bl	8000240 <__aeabi_dsub>
 800cea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cea8:	f7f3 fdf4 	bl	8000a94 <__aeabi_dcmplt>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	f040 80b6 	bne.w	800d01e <_dtoa_r+0x6d6>
 800ceb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ceb4:	429f      	cmp	r7, r3
 800ceb6:	f43f af7a 	beq.w	800cdae <_dtoa_r+0x466>
 800ceba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cebe:	2200      	movs	r2, #0
 800cec0:	4b09      	ldr	r3, [pc, #36]	; (800cee8 <_dtoa_r+0x5a0>)
 800cec2:	f7f3 fb75 	bl	80005b0 <__aeabi_dmul>
 800cec6:	2200      	movs	r2, #0
 800cec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ced0:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <_dtoa_r+0x5a0>)
 800ced2:	f7f3 fb6d 	bl	80005b0 <__aeabi_dmul>
 800ced6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ceda:	e7c3      	b.n	800ce64 <_dtoa_r+0x51c>
 800cedc:	08010100 	.word	0x08010100
 800cee0:	080100d8 	.word	0x080100d8
 800cee4:	3ff00000 	.word	0x3ff00000
 800cee8:	40240000 	.word	0x40240000
 800ceec:	401c0000 	.word	0x401c0000
 800cef0:	40140000 	.word	0x40140000
 800cef4:	3fe00000 	.word	0x3fe00000
 800cef8:	4630      	mov	r0, r6
 800cefa:	4639      	mov	r1, r7
 800cefc:	f7f3 fb58 	bl	80005b0 <__aeabi_dmul>
 800cf00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cf06:	9c03      	ldr	r4, [sp, #12]
 800cf08:	9314      	str	r3, [sp, #80]	; 0x50
 800cf0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf0e:	f7f3 fdff 	bl	8000b10 <__aeabi_d2iz>
 800cf12:	9015      	str	r0, [sp, #84]	; 0x54
 800cf14:	f7f3 fae2 	bl	80004dc <__aeabi_i2d>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf20:	f7f3 f98e 	bl	8000240 <__aeabi_dsub>
 800cf24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf26:	4606      	mov	r6, r0
 800cf28:	3330      	adds	r3, #48	; 0x30
 800cf2a:	f804 3b01 	strb.w	r3, [r4], #1
 800cf2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf30:	460f      	mov	r7, r1
 800cf32:	429c      	cmp	r4, r3
 800cf34:	f04f 0200 	mov.w	r2, #0
 800cf38:	d124      	bne.n	800cf84 <_dtoa_r+0x63c>
 800cf3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cf3e:	4baf      	ldr	r3, [pc, #700]	; (800d1fc <_dtoa_r+0x8b4>)
 800cf40:	f7f3 f980 	bl	8000244 <__adddf3>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4630      	mov	r0, r6
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f7f3 fdc0 	bl	8000ad0 <__aeabi_dcmpgt>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d163      	bne.n	800d01c <_dtoa_r+0x6d4>
 800cf54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf58:	2000      	movs	r0, #0
 800cf5a:	49a8      	ldr	r1, [pc, #672]	; (800d1fc <_dtoa_r+0x8b4>)
 800cf5c:	f7f3 f970 	bl	8000240 <__aeabi_dsub>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	4630      	mov	r0, r6
 800cf66:	4639      	mov	r1, r7
 800cf68:	f7f3 fd94 	bl	8000a94 <__aeabi_dcmplt>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	f43f af1e 	beq.w	800cdae <_dtoa_r+0x466>
 800cf72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cf74:	1e7b      	subs	r3, r7, #1
 800cf76:	9314      	str	r3, [sp, #80]	; 0x50
 800cf78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800cf7c:	2b30      	cmp	r3, #48	; 0x30
 800cf7e:	d0f8      	beq.n	800cf72 <_dtoa_r+0x62a>
 800cf80:	46c3      	mov	fp, r8
 800cf82:	e03b      	b.n	800cffc <_dtoa_r+0x6b4>
 800cf84:	4b9e      	ldr	r3, [pc, #632]	; (800d200 <_dtoa_r+0x8b8>)
 800cf86:	f7f3 fb13 	bl	80005b0 <__aeabi_dmul>
 800cf8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf8e:	e7bc      	b.n	800cf0a <_dtoa_r+0x5c2>
 800cf90:	9f03      	ldr	r7, [sp, #12]
 800cf92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800cf96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	4649      	mov	r1, r9
 800cf9e:	f7f3 fc31 	bl	8000804 <__aeabi_ddiv>
 800cfa2:	f7f3 fdb5 	bl	8000b10 <__aeabi_d2iz>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	f7f3 fa98 	bl	80004dc <__aeabi_i2d>
 800cfac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfb0:	f7f3 fafe 	bl	80005b0 <__aeabi_dmul>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4640      	mov	r0, r8
 800cfba:	4649      	mov	r1, r9
 800cfbc:	f7f3 f940 	bl	8000240 <__aeabi_dsub>
 800cfc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800cfc4:	f807 6b01 	strb.w	r6, [r7], #1
 800cfc8:	9e03      	ldr	r6, [sp, #12]
 800cfca:	f8dd c020 	ldr.w	ip, [sp, #32]
 800cfce:	1bbe      	subs	r6, r7, r6
 800cfd0:	45b4      	cmp	ip, r6
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	d136      	bne.n	800d046 <_dtoa_r+0x6fe>
 800cfd8:	f7f3 f934 	bl	8000244 <__adddf3>
 800cfdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfe0:	4680      	mov	r8, r0
 800cfe2:	4689      	mov	r9, r1
 800cfe4:	f7f3 fd74 	bl	8000ad0 <__aeabi_dcmpgt>
 800cfe8:	bb58      	cbnz	r0, 800d042 <_dtoa_r+0x6fa>
 800cfea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfee:	4640      	mov	r0, r8
 800cff0:	4649      	mov	r1, r9
 800cff2:	f7f3 fd45 	bl	8000a80 <__aeabi_dcmpeq>
 800cff6:	b108      	cbz	r0, 800cffc <_dtoa_r+0x6b4>
 800cff8:	07e3      	lsls	r3, r4, #31
 800cffa:	d422      	bmi.n	800d042 <_dtoa_r+0x6fa>
 800cffc:	4651      	mov	r1, sl
 800cffe:	4628      	mov	r0, r5
 800d000:	f000 fbc2 	bl	800d788 <_Bfree>
 800d004:	2300      	movs	r3, #0
 800d006:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d008:	703b      	strb	r3, [r7, #0]
 800d00a:	f10b 0301 	add.w	r3, fp, #1
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d012:	2b00      	cmp	r3, #0
 800d014:	f43f ace6 	beq.w	800c9e4 <_dtoa_r+0x9c>
 800d018:	601f      	str	r7, [r3, #0]
 800d01a:	e4e3      	b.n	800c9e4 <_dtoa_r+0x9c>
 800d01c:	4627      	mov	r7, r4
 800d01e:	463b      	mov	r3, r7
 800d020:	461f      	mov	r7, r3
 800d022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d026:	2a39      	cmp	r2, #57	; 0x39
 800d028:	d107      	bne.n	800d03a <_dtoa_r+0x6f2>
 800d02a:	9a03      	ldr	r2, [sp, #12]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d1f7      	bne.n	800d020 <_dtoa_r+0x6d8>
 800d030:	2230      	movs	r2, #48	; 0x30
 800d032:	9903      	ldr	r1, [sp, #12]
 800d034:	f108 0801 	add.w	r8, r8, #1
 800d038:	700a      	strb	r2, [r1, #0]
 800d03a:	781a      	ldrb	r2, [r3, #0]
 800d03c:	3201      	adds	r2, #1
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	e79e      	b.n	800cf80 <_dtoa_r+0x638>
 800d042:	46d8      	mov	r8, fp
 800d044:	e7eb      	b.n	800d01e <_dtoa_r+0x6d6>
 800d046:	2200      	movs	r2, #0
 800d048:	4b6d      	ldr	r3, [pc, #436]	; (800d200 <_dtoa_r+0x8b8>)
 800d04a:	f7f3 fab1 	bl	80005b0 <__aeabi_dmul>
 800d04e:	2200      	movs	r2, #0
 800d050:	2300      	movs	r3, #0
 800d052:	4680      	mov	r8, r0
 800d054:	4689      	mov	r9, r1
 800d056:	f7f3 fd13 	bl	8000a80 <__aeabi_dcmpeq>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d09b      	beq.n	800cf96 <_dtoa_r+0x64e>
 800d05e:	e7cd      	b.n	800cffc <_dtoa_r+0x6b4>
 800d060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d062:	2a00      	cmp	r2, #0
 800d064:	f000 80c4 	beq.w	800d1f0 <_dtoa_r+0x8a8>
 800d068:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d06a:	2a01      	cmp	r2, #1
 800d06c:	f300 80a8 	bgt.w	800d1c0 <_dtoa_r+0x878>
 800d070:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d072:	2a00      	cmp	r2, #0
 800d074:	f000 80a0 	beq.w	800d1b8 <_dtoa_r+0x870>
 800d078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d07c:	464f      	mov	r7, r9
 800d07e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d082:	2101      	movs	r1, #1
 800d084:	441a      	add	r2, r3
 800d086:	4628      	mov	r0, r5
 800d088:	4499      	add	r9, r3
 800d08a:	9209      	str	r2, [sp, #36]	; 0x24
 800d08c:	f000 fc7c 	bl	800d988 <__i2b>
 800d090:	4606      	mov	r6, r0
 800d092:	b15f      	cbz	r7, 800d0ac <_dtoa_r+0x764>
 800d094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d096:	2b00      	cmp	r3, #0
 800d098:	dd08      	ble.n	800d0ac <_dtoa_r+0x764>
 800d09a:	42bb      	cmp	r3, r7
 800d09c:	bfa8      	it	ge
 800d09e:	463b      	movge	r3, r7
 800d0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0a2:	eba9 0903 	sub.w	r9, r9, r3
 800d0a6:	1aff      	subs	r7, r7, r3
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ae:	b1f3      	cbz	r3, 800d0ee <_dtoa_r+0x7a6>
 800d0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f000 80a0 	beq.w	800d1f8 <_dtoa_r+0x8b0>
 800d0b8:	2c00      	cmp	r4, #0
 800d0ba:	dd10      	ble.n	800d0de <_dtoa_r+0x796>
 800d0bc:	4631      	mov	r1, r6
 800d0be:	4622      	mov	r2, r4
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f000 fd1f 	bl	800db04 <__pow5mult>
 800d0c6:	4652      	mov	r2, sl
 800d0c8:	4601      	mov	r1, r0
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f000 fc71 	bl	800d9b4 <__multiply>
 800d0d2:	4680      	mov	r8, r0
 800d0d4:	4651      	mov	r1, sl
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f000 fb56 	bl	800d788 <_Bfree>
 800d0dc:	46c2      	mov	sl, r8
 800d0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e0:	1b1a      	subs	r2, r3, r4
 800d0e2:	d004      	beq.n	800d0ee <_dtoa_r+0x7a6>
 800d0e4:	4651      	mov	r1, sl
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f000 fd0c 	bl	800db04 <__pow5mult>
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	2101      	movs	r1, #1
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	f000 fc49 	bl	800d988 <__i2b>
 800d0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f340 8082 	ble.w	800d204 <_dtoa_r+0x8bc>
 800d100:	461a      	mov	r2, r3
 800d102:	4601      	mov	r1, r0
 800d104:	4628      	mov	r0, r5
 800d106:	f000 fcfd 	bl	800db04 <__pow5mult>
 800d10a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d10c:	4604      	mov	r4, r0
 800d10e:	2b01      	cmp	r3, #1
 800d110:	dd7b      	ble.n	800d20a <_dtoa_r+0x8c2>
 800d112:	f04f 0800 	mov.w	r8, #0
 800d116:	6923      	ldr	r3, [r4, #16]
 800d118:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d11c:	6918      	ldr	r0, [r3, #16]
 800d11e:	f000 fbe5 	bl	800d8ec <__hi0bits>
 800d122:	f1c0 0020 	rsb	r0, r0, #32
 800d126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d128:	4418      	add	r0, r3
 800d12a:	f010 001f 	ands.w	r0, r0, #31
 800d12e:	f000 8092 	beq.w	800d256 <_dtoa_r+0x90e>
 800d132:	f1c0 0320 	rsb	r3, r0, #32
 800d136:	2b04      	cmp	r3, #4
 800d138:	f340 8085 	ble.w	800d246 <_dtoa_r+0x8fe>
 800d13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13e:	f1c0 001c 	rsb	r0, r0, #28
 800d142:	4403      	add	r3, r0
 800d144:	4481      	add	r9, r0
 800d146:	4407      	add	r7, r0
 800d148:	9309      	str	r3, [sp, #36]	; 0x24
 800d14a:	f1b9 0f00 	cmp.w	r9, #0
 800d14e:	dd05      	ble.n	800d15c <_dtoa_r+0x814>
 800d150:	4651      	mov	r1, sl
 800d152:	464a      	mov	r2, r9
 800d154:	4628      	mov	r0, r5
 800d156:	f000 fd2f 	bl	800dbb8 <__lshift>
 800d15a:	4682      	mov	sl, r0
 800d15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd05      	ble.n	800d16e <_dtoa_r+0x826>
 800d162:	4621      	mov	r1, r4
 800d164:	461a      	mov	r2, r3
 800d166:	4628      	mov	r0, r5
 800d168:	f000 fd26 	bl	800dbb8 <__lshift>
 800d16c:	4604      	mov	r4, r0
 800d16e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d170:	2b00      	cmp	r3, #0
 800d172:	d072      	beq.n	800d25a <_dtoa_r+0x912>
 800d174:	4621      	mov	r1, r4
 800d176:	4650      	mov	r0, sl
 800d178:	f000 fd8a 	bl	800dc90 <__mcmp>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	da6c      	bge.n	800d25a <_dtoa_r+0x912>
 800d180:	2300      	movs	r3, #0
 800d182:	4651      	mov	r1, sl
 800d184:	220a      	movs	r2, #10
 800d186:	4628      	mov	r0, r5
 800d188:	f000 fb20 	bl	800d7cc <__multadd>
 800d18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d18e:	4682      	mov	sl, r0
 800d190:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 81ac 	beq.w	800d4f2 <_dtoa_r+0xbaa>
 800d19a:	2300      	movs	r3, #0
 800d19c:	4631      	mov	r1, r6
 800d19e:	220a      	movs	r2, #10
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f000 fb13 	bl	800d7cc <__multadd>
 800d1a6:	9b06      	ldr	r3, [sp, #24]
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f300 8093 	bgt.w	800d2d6 <_dtoa_r+0x98e>
 800d1b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	dc59      	bgt.n	800d26a <_dtoa_r+0x922>
 800d1b6:	e08e      	b.n	800d2d6 <_dtoa_r+0x98e>
 800d1b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d1ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d1be:	e75d      	b.n	800d07c <_dtoa_r+0x734>
 800d1c0:	9b08      	ldr	r3, [sp, #32]
 800d1c2:	1e5c      	subs	r4, r3, #1
 800d1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	bfbf      	itttt	lt
 800d1ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d1cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d1ce:	1ae3      	sublt	r3, r4, r3
 800d1d0:	18d2      	addlt	r2, r2, r3
 800d1d2:	bfa8      	it	ge
 800d1d4:	1b1c      	subge	r4, r3, r4
 800d1d6:	9b08      	ldr	r3, [sp, #32]
 800d1d8:	bfbe      	ittt	lt
 800d1da:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d1dc:	920e      	strlt	r2, [sp, #56]	; 0x38
 800d1de:	2400      	movlt	r4, #0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	bfb5      	itete	lt
 800d1e4:	eba9 0703 	sublt.w	r7, r9, r3
 800d1e8:	464f      	movge	r7, r9
 800d1ea:	2300      	movlt	r3, #0
 800d1ec:	9b08      	ldrge	r3, [sp, #32]
 800d1ee:	e747      	b.n	800d080 <_dtoa_r+0x738>
 800d1f0:	464f      	mov	r7, r9
 800d1f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d1f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d1f6:	e74c      	b.n	800d092 <_dtoa_r+0x74a>
 800d1f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1fa:	e773      	b.n	800d0e4 <_dtoa_r+0x79c>
 800d1fc:	3fe00000 	.word	0x3fe00000
 800d200:	40240000 	.word	0x40240000
 800d204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d206:	2b01      	cmp	r3, #1
 800d208:	dc18      	bgt.n	800d23c <_dtoa_r+0x8f4>
 800d20a:	9b04      	ldr	r3, [sp, #16]
 800d20c:	b9b3      	cbnz	r3, 800d23c <_dtoa_r+0x8f4>
 800d20e:	9b05      	ldr	r3, [sp, #20]
 800d210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d214:	b993      	cbnz	r3, 800d23c <_dtoa_r+0x8f4>
 800d216:	9b05      	ldr	r3, [sp, #20]
 800d218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d21c:	0d1b      	lsrs	r3, r3, #20
 800d21e:	051b      	lsls	r3, r3, #20
 800d220:	b17b      	cbz	r3, 800d242 <_dtoa_r+0x8fa>
 800d222:	f04f 0801 	mov.w	r8, #1
 800d226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d228:	f109 0901 	add.w	r9, r9, #1
 800d22c:	3301      	adds	r3, #1
 800d22e:	9309      	str	r3, [sp, #36]	; 0x24
 800d230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d232:	2b00      	cmp	r3, #0
 800d234:	f47f af6f 	bne.w	800d116 <_dtoa_r+0x7ce>
 800d238:	2001      	movs	r0, #1
 800d23a:	e774      	b.n	800d126 <_dtoa_r+0x7de>
 800d23c:	f04f 0800 	mov.w	r8, #0
 800d240:	e7f6      	b.n	800d230 <_dtoa_r+0x8e8>
 800d242:	4698      	mov	r8, r3
 800d244:	e7f4      	b.n	800d230 <_dtoa_r+0x8e8>
 800d246:	d080      	beq.n	800d14a <_dtoa_r+0x802>
 800d248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d24a:	331c      	adds	r3, #28
 800d24c:	441a      	add	r2, r3
 800d24e:	4499      	add	r9, r3
 800d250:	441f      	add	r7, r3
 800d252:	9209      	str	r2, [sp, #36]	; 0x24
 800d254:	e779      	b.n	800d14a <_dtoa_r+0x802>
 800d256:	4603      	mov	r3, r0
 800d258:	e7f6      	b.n	800d248 <_dtoa_r+0x900>
 800d25a:	9b08      	ldr	r3, [sp, #32]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dc34      	bgt.n	800d2ca <_dtoa_r+0x982>
 800d260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d262:	2b02      	cmp	r3, #2
 800d264:	dd31      	ble.n	800d2ca <_dtoa_r+0x982>
 800d266:	9b08      	ldr	r3, [sp, #32]
 800d268:	9306      	str	r3, [sp, #24]
 800d26a:	9b06      	ldr	r3, [sp, #24]
 800d26c:	b963      	cbnz	r3, 800d288 <_dtoa_r+0x940>
 800d26e:	4621      	mov	r1, r4
 800d270:	2205      	movs	r2, #5
 800d272:	4628      	mov	r0, r5
 800d274:	f000 faaa 	bl	800d7cc <__multadd>
 800d278:	4601      	mov	r1, r0
 800d27a:	4604      	mov	r4, r0
 800d27c:	4650      	mov	r0, sl
 800d27e:	f000 fd07 	bl	800dc90 <__mcmp>
 800d282:	2800      	cmp	r0, #0
 800d284:	f73f adbf 	bgt.w	800ce06 <_dtoa_r+0x4be>
 800d288:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d28a:	9f03      	ldr	r7, [sp, #12]
 800d28c:	ea6f 0b03 	mvn.w	fp, r3
 800d290:	f04f 0800 	mov.w	r8, #0
 800d294:	4621      	mov	r1, r4
 800d296:	4628      	mov	r0, r5
 800d298:	f000 fa76 	bl	800d788 <_Bfree>
 800d29c:	2e00      	cmp	r6, #0
 800d29e:	f43f aead 	beq.w	800cffc <_dtoa_r+0x6b4>
 800d2a2:	f1b8 0f00 	cmp.w	r8, #0
 800d2a6:	d005      	beq.n	800d2b4 <_dtoa_r+0x96c>
 800d2a8:	45b0      	cmp	r8, r6
 800d2aa:	d003      	beq.n	800d2b4 <_dtoa_r+0x96c>
 800d2ac:	4641      	mov	r1, r8
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	f000 fa6a 	bl	800d788 <_Bfree>
 800d2b4:	4631      	mov	r1, r6
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f000 fa66 	bl	800d788 <_Bfree>
 800d2bc:	e69e      	b.n	800cffc <_dtoa_r+0x6b4>
 800d2be:	2400      	movs	r4, #0
 800d2c0:	4626      	mov	r6, r4
 800d2c2:	e7e1      	b.n	800d288 <_dtoa_r+0x940>
 800d2c4:	46c3      	mov	fp, r8
 800d2c6:	4626      	mov	r6, r4
 800d2c8:	e59d      	b.n	800ce06 <_dtoa_r+0x4be>
 800d2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 80c8 	beq.w	800d462 <_dtoa_r+0xb1a>
 800d2d2:	9b08      	ldr	r3, [sp, #32]
 800d2d4:	9306      	str	r3, [sp, #24]
 800d2d6:	2f00      	cmp	r7, #0
 800d2d8:	dd05      	ble.n	800d2e6 <_dtoa_r+0x99e>
 800d2da:	4631      	mov	r1, r6
 800d2dc:	463a      	mov	r2, r7
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f000 fc6a 	bl	800dbb8 <__lshift>
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	f1b8 0f00 	cmp.w	r8, #0
 800d2ea:	d05b      	beq.n	800d3a4 <_dtoa_r+0xa5c>
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	6871      	ldr	r1, [r6, #4]
 800d2f0:	f000 fa0a 	bl	800d708 <_Balloc>
 800d2f4:	4607      	mov	r7, r0
 800d2f6:	b928      	cbnz	r0, 800d304 <_dtoa_r+0x9bc>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d2fe:	4b81      	ldr	r3, [pc, #516]	; (800d504 <_dtoa_r+0xbbc>)
 800d300:	f7ff bb36 	b.w	800c970 <_dtoa_r+0x28>
 800d304:	6932      	ldr	r2, [r6, #16]
 800d306:	f106 010c 	add.w	r1, r6, #12
 800d30a:	3202      	adds	r2, #2
 800d30c:	0092      	lsls	r2, r2, #2
 800d30e:	300c      	adds	r0, #12
 800d310:	f7ff fa7c 	bl	800c80c <memcpy>
 800d314:	2201      	movs	r2, #1
 800d316:	4639      	mov	r1, r7
 800d318:	4628      	mov	r0, r5
 800d31a:	f000 fc4d 	bl	800dbb8 <__lshift>
 800d31e:	46b0      	mov	r8, r6
 800d320:	4606      	mov	r6, r0
 800d322:	9b03      	ldr	r3, [sp, #12]
 800d324:	9a03      	ldr	r2, [sp, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	9308      	str	r3, [sp, #32]
 800d32a:	9b06      	ldr	r3, [sp, #24]
 800d32c:	4413      	add	r3, r2
 800d32e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d330:	9b04      	ldr	r3, [sp, #16]
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	930a      	str	r3, [sp, #40]	; 0x28
 800d338:	9b08      	ldr	r3, [sp, #32]
 800d33a:	4621      	mov	r1, r4
 800d33c:	3b01      	subs	r3, #1
 800d33e:	4650      	mov	r0, sl
 800d340:	9304      	str	r3, [sp, #16]
 800d342:	f7ff fa75 	bl	800c830 <quorem>
 800d346:	4641      	mov	r1, r8
 800d348:	9006      	str	r0, [sp, #24]
 800d34a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d34e:	4650      	mov	r0, sl
 800d350:	f000 fc9e 	bl	800dc90 <__mcmp>
 800d354:	4632      	mov	r2, r6
 800d356:	9009      	str	r0, [sp, #36]	; 0x24
 800d358:	4621      	mov	r1, r4
 800d35a:	4628      	mov	r0, r5
 800d35c:	f000 fcb4 	bl	800dcc8 <__mdiff>
 800d360:	68c2      	ldr	r2, [r0, #12]
 800d362:	4607      	mov	r7, r0
 800d364:	bb02      	cbnz	r2, 800d3a8 <_dtoa_r+0xa60>
 800d366:	4601      	mov	r1, r0
 800d368:	4650      	mov	r0, sl
 800d36a:	f000 fc91 	bl	800dc90 <__mcmp>
 800d36e:	4602      	mov	r2, r0
 800d370:	4639      	mov	r1, r7
 800d372:	4628      	mov	r0, r5
 800d374:	920c      	str	r2, [sp, #48]	; 0x30
 800d376:	f000 fa07 	bl	800d788 <_Bfree>
 800d37a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d37e:	9f08      	ldr	r7, [sp, #32]
 800d380:	ea43 0102 	orr.w	r1, r3, r2
 800d384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d386:	4319      	orrs	r1, r3
 800d388:	d110      	bne.n	800d3ac <_dtoa_r+0xa64>
 800d38a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d38e:	d029      	beq.n	800d3e4 <_dtoa_r+0xa9c>
 800d390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d392:	2b00      	cmp	r3, #0
 800d394:	dd02      	ble.n	800d39c <_dtoa_r+0xa54>
 800d396:	9b06      	ldr	r3, [sp, #24]
 800d398:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d39c:	9b04      	ldr	r3, [sp, #16]
 800d39e:	f883 9000 	strb.w	r9, [r3]
 800d3a2:	e777      	b.n	800d294 <_dtoa_r+0x94c>
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	e7ba      	b.n	800d31e <_dtoa_r+0x9d6>
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	e7e1      	b.n	800d370 <_dtoa_r+0xa28>
 800d3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	db04      	blt.n	800d3bc <_dtoa_r+0xa74>
 800d3b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d3b8:	430b      	orrs	r3, r1
 800d3ba:	d120      	bne.n	800d3fe <_dtoa_r+0xab6>
 800d3bc:	2a00      	cmp	r2, #0
 800d3be:	dded      	ble.n	800d39c <_dtoa_r+0xa54>
 800d3c0:	4651      	mov	r1, sl
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	f000 fbf7 	bl	800dbb8 <__lshift>
 800d3ca:	4621      	mov	r1, r4
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	f000 fc5f 	bl	800dc90 <__mcmp>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	dc03      	bgt.n	800d3de <_dtoa_r+0xa96>
 800d3d6:	d1e1      	bne.n	800d39c <_dtoa_r+0xa54>
 800d3d8:	f019 0f01 	tst.w	r9, #1
 800d3dc:	d0de      	beq.n	800d39c <_dtoa_r+0xa54>
 800d3de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d3e2:	d1d8      	bne.n	800d396 <_dtoa_r+0xa4e>
 800d3e4:	2339      	movs	r3, #57	; 0x39
 800d3e6:	9a04      	ldr	r2, [sp, #16]
 800d3e8:	7013      	strb	r3, [r2, #0]
 800d3ea:	463b      	mov	r3, r7
 800d3ec:	461f      	mov	r7, r3
 800d3ee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	2a39      	cmp	r2, #57	; 0x39
 800d3f6:	d06b      	beq.n	800d4d0 <_dtoa_r+0xb88>
 800d3f8:	3201      	adds	r2, #1
 800d3fa:	701a      	strb	r2, [r3, #0]
 800d3fc:	e74a      	b.n	800d294 <_dtoa_r+0x94c>
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	dd07      	ble.n	800d412 <_dtoa_r+0xaca>
 800d402:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d406:	d0ed      	beq.n	800d3e4 <_dtoa_r+0xa9c>
 800d408:	9a04      	ldr	r2, [sp, #16]
 800d40a:	f109 0301 	add.w	r3, r9, #1
 800d40e:	7013      	strb	r3, [r2, #0]
 800d410:	e740      	b.n	800d294 <_dtoa_r+0x94c>
 800d412:	9b08      	ldr	r3, [sp, #32]
 800d414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d416:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d042      	beq.n	800d4a4 <_dtoa_r+0xb5c>
 800d41e:	4651      	mov	r1, sl
 800d420:	2300      	movs	r3, #0
 800d422:	220a      	movs	r2, #10
 800d424:	4628      	mov	r0, r5
 800d426:	f000 f9d1 	bl	800d7cc <__multadd>
 800d42a:	45b0      	cmp	r8, r6
 800d42c:	4682      	mov	sl, r0
 800d42e:	f04f 0300 	mov.w	r3, #0
 800d432:	f04f 020a 	mov.w	r2, #10
 800d436:	4641      	mov	r1, r8
 800d438:	4628      	mov	r0, r5
 800d43a:	d107      	bne.n	800d44c <_dtoa_r+0xb04>
 800d43c:	f000 f9c6 	bl	800d7cc <__multadd>
 800d440:	4680      	mov	r8, r0
 800d442:	4606      	mov	r6, r0
 800d444:	9b08      	ldr	r3, [sp, #32]
 800d446:	3301      	adds	r3, #1
 800d448:	9308      	str	r3, [sp, #32]
 800d44a:	e775      	b.n	800d338 <_dtoa_r+0x9f0>
 800d44c:	f000 f9be 	bl	800d7cc <__multadd>
 800d450:	4631      	mov	r1, r6
 800d452:	4680      	mov	r8, r0
 800d454:	2300      	movs	r3, #0
 800d456:	220a      	movs	r2, #10
 800d458:	4628      	mov	r0, r5
 800d45a:	f000 f9b7 	bl	800d7cc <__multadd>
 800d45e:	4606      	mov	r6, r0
 800d460:	e7f0      	b.n	800d444 <_dtoa_r+0xafc>
 800d462:	9b08      	ldr	r3, [sp, #32]
 800d464:	9306      	str	r3, [sp, #24]
 800d466:	9f03      	ldr	r7, [sp, #12]
 800d468:	4621      	mov	r1, r4
 800d46a:	4650      	mov	r0, sl
 800d46c:	f7ff f9e0 	bl	800c830 <quorem>
 800d470:	9b03      	ldr	r3, [sp, #12]
 800d472:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d476:	f807 9b01 	strb.w	r9, [r7], #1
 800d47a:	1afa      	subs	r2, r7, r3
 800d47c:	9b06      	ldr	r3, [sp, #24]
 800d47e:	4293      	cmp	r3, r2
 800d480:	dd07      	ble.n	800d492 <_dtoa_r+0xb4a>
 800d482:	4651      	mov	r1, sl
 800d484:	2300      	movs	r3, #0
 800d486:	220a      	movs	r2, #10
 800d488:	4628      	mov	r0, r5
 800d48a:	f000 f99f 	bl	800d7cc <__multadd>
 800d48e:	4682      	mov	sl, r0
 800d490:	e7ea      	b.n	800d468 <_dtoa_r+0xb20>
 800d492:	9b06      	ldr	r3, [sp, #24]
 800d494:	f04f 0800 	mov.w	r8, #0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	bfcc      	ite	gt
 800d49c:	461f      	movgt	r7, r3
 800d49e:	2701      	movle	r7, #1
 800d4a0:	9b03      	ldr	r3, [sp, #12]
 800d4a2:	441f      	add	r7, r3
 800d4a4:	4651      	mov	r1, sl
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f000 fb85 	bl	800dbb8 <__lshift>
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	f000 fbed 	bl	800dc90 <__mcmp>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	dc97      	bgt.n	800d3ea <_dtoa_r+0xaa2>
 800d4ba:	d102      	bne.n	800d4c2 <_dtoa_r+0xb7a>
 800d4bc:	f019 0f01 	tst.w	r9, #1
 800d4c0:	d193      	bne.n	800d3ea <_dtoa_r+0xaa2>
 800d4c2:	463b      	mov	r3, r7
 800d4c4:	461f      	mov	r7, r3
 800d4c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4ca:	2a30      	cmp	r2, #48	; 0x30
 800d4cc:	d0fa      	beq.n	800d4c4 <_dtoa_r+0xb7c>
 800d4ce:	e6e1      	b.n	800d294 <_dtoa_r+0x94c>
 800d4d0:	9a03      	ldr	r2, [sp, #12]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d18a      	bne.n	800d3ec <_dtoa_r+0xaa4>
 800d4d6:	2331      	movs	r3, #49	; 0x31
 800d4d8:	f10b 0b01 	add.w	fp, fp, #1
 800d4dc:	e797      	b.n	800d40e <_dtoa_r+0xac6>
 800d4de:	4b0a      	ldr	r3, [pc, #40]	; (800d508 <_dtoa_r+0xbc0>)
 800d4e0:	f7ff ba9f 	b.w	800ca22 <_dtoa_r+0xda>
 800d4e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f47f aa77 	bne.w	800c9da <_dtoa_r+0x92>
 800d4ec:	4b07      	ldr	r3, [pc, #28]	; (800d50c <_dtoa_r+0xbc4>)
 800d4ee:	f7ff ba98 	b.w	800ca22 <_dtoa_r+0xda>
 800d4f2:	9b06      	ldr	r3, [sp, #24]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	dcb6      	bgt.n	800d466 <_dtoa_r+0xb1e>
 800d4f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	f73f aeb5 	bgt.w	800d26a <_dtoa_r+0x922>
 800d500:	e7b1      	b.n	800d466 <_dtoa_r+0xb1e>
 800d502:	bf00      	nop
 800d504:	08010067 	.word	0x08010067
 800d508:	0800ffc2 	.word	0x0800ffc2
 800d50c:	0800ffeb 	.word	0x0800ffeb

0800d510 <_free_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4605      	mov	r5, r0
 800d514:	2900      	cmp	r1, #0
 800d516:	d040      	beq.n	800d59a <_free_r+0x8a>
 800d518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d51c:	1f0c      	subs	r4, r1, #4
 800d51e:	2b00      	cmp	r3, #0
 800d520:	bfb8      	it	lt
 800d522:	18e4      	addlt	r4, r4, r3
 800d524:	f000 f8e4 	bl	800d6f0 <__malloc_lock>
 800d528:	4a1c      	ldr	r2, [pc, #112]	; (800d59c <_free_r+0x8c>)
 800d52a:	6813      	ldr	r3, [r2, #0]
 800d52c:	b933      	cbnz	r3, 800d53c <_free_r+0x2c>
 800d52e:	6063      	str	r3, [r4, #4]
 800d530:	6014      	str	r4, [r2, #0]
 800d532:	4628      	mov	r0, r5
 800d534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d538:	f000 b8e0 	b.w	800d6fc <__malloc_unlock>
 800d53c:	42a3      	cmp	r3, r4
 800d53e:	d908      	bls.n	800d552 <_free_r+0x42>
 800d540:	6820      	ldr	r0, [r4, #0]
 800d542:	1821      	adds	r1, r4, r0
 800d544:	428b      	cmp	r3, r1
 800d546:	bf01      	itttt	eq
 800d548:	6819      	ldreq	r1, [r3, #0]
 800d54a:	685b      	ldreq	r3, [r3, #4]
 800d54c:	1809      	addeq	r1, r1, r0
 800d54e:	6021      	streq	r1, [r4, #0]
 800d550:	e7ed      	b.n	800d52e <_free_r+0x1e>
 800d552:	461a      	mov	r2, r3
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	b10b      	cbz	r3, 800d55c <_free_r+0x4c>
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d9fa      	bls.n	800d552 <_free_r+0x42>
 800d55c:	6811      	ldr	r1, [r2, #0]
 800d55e:	1850      	adds	r0, r2, r1
 800d560:	42a0      	cmp	r0, r4
 800d562:	d10b      	bne.n	800d57c <_free_r+0x6c>
 800d564:	6820      	ldr	r0, [r4, #0]
 800d566:	4401      	add	r1, r0
 800d568:	1850      	adds	r0, r2, r1
 800d56a:	4283      	cmp	r3, r0
 800d56c:	6011      	str	r1, [r2, #0]
 800d56e:	d1e0      	bne.n	800d532 <_free_r+0x22>
 800d570:	6818      	ldr	r0, [r3, #0]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	4408      	add	r0, r1
 800d576:	6010      	str	r0, [r2, #0]
 800d578:	6053      	str	r3, [r2, #4]
 800d57a:	e7da      	b.n	800d532 <_free_r+0x22>
 800d57c:	d902      	bls.n	800d584 <_free_r+0x74>
 800d57e:	230c      	movs	r3, #12
 800d580:	602b      	str	r3, [r5, #0]
 800d582:	e7d6      	b.n	800d532 <_free_r+0x22>
 800d584:	6820      	ldr	r0, [r4, #0]
 800d586:	1821      	adds	r1, r4, r0
 800d588:	428b      	cmp	r3, r1
 800d58a:	bf01      	itttt	eq
 800d58c:	6819      	ldreq	r1, [r3, #0]
 800d58e:	685b      	ldreq	r3, [r3, #4]
 800d590:	1809      	addeq	r1, r1, r0
 800d592:	6021      	streq	r1, [r4, #0]
 800d594:	6063      	str	r3, [r4, #4]
 800d596:	6054      	str	r4, [r2, #4]
 800d598:	e7cb      	b.n	800d532 <_free_r+0x22>
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	200045c4 	.word	0x200045c4

0800d5a0 <malloc>:
 800d5a0:	4b02      	ldr	r3, [pc, #8]	; (800d5ac <malloc+0xc>)
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	6818      	ldr	r0, [r3, #0]
 800d5a6:	f000 b823 	b.w	800d5f0 <_malloc_r>
 800d5aa:	bf00      	nop
 800d5ac:	20000074 	.word	0x20000074

0800d5b0 <sbrk_aligned>:
 800d5b0:	b570      	push	{r4, r5, r6, lr}
 800d5b2:	4e0e      	ldr	r6, [pc, #56]	; (800d5ec <sbrk_aligned+0x3c>)
 800d5b4:	460c      	mov	r4, r1
 800d5b6:	6831      	ldr	r1, [r6, #0]
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	b911      	cbnz	r1, 800d5c2 <sbrk_aligned+0x12>
 800d5bc:	f001 ffd2 	bl	800f564 <_sbrk_r>
 800d5c0:	6030      	str	r0, [r6, #0]
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f001 ffcd 	bl	800f564 <_sbrk_r>
 800d5ca:	1c43      	adds	r3, r0, #1
 800d5cc:	d00a      	beq.n	800d5e4 <sbrk_aligned+0x34>
 800d5ce:	1cc4      	adds	r4, r0, #3
 800d5d0:	f024 0403 	bic.w	r4, r4, #3
 800d5d4:	42a0      	cmp	r0, r4
 800d5d6:	d007      	beq.n	800d5e8 <sbrk_aligned+0x38>
 800d5d8:	1a21      	subs	r1, r4, r0
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f001 ffc2 	bl	800f564 <_sbrk_r>
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d101      	bne.n	800d5e8 <sbrk_aligned+0x38>
 800d5e4:	f04f 34ff 	mov.w	r4, #4294967295
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	200045c8 	.word	0x200045c8

0800d5f0 <_malloc_r>:
 800d5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f4:	1ccd      	adds	r5, r1, #3
 800d5f6:	f025 0503 	bic.w	r5, r5, #3
 800d5fa:	3508      	adds	r5, #8
 800d5fc:	2d0c      	cmp	r5, #12
 800d5fe:	bf38      	it	cc
 800d600:	250c      	movcc	r5, #12
 800d602:	2d00      	cmp	r5, #0
 800d604:	4607      	mov	r7, r0
 800d606:	db01      	blt.n	800d60c <_malloc_r+0x1c>
 800d608:	42a9      	cmp	r1, r5
 800d60a:	d905      	bls.n	800d618 <_malloc_r+0x28>
 800d60c:	230c      	movs	r3, #12
 800d60e:	2600      	movs	r6, #0
 800d610:	603b      	str	r3, [r7, #0]
 800d612:	4630      	mov	r0, r6
 800d614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d6ec <_malloc_r+0xfc>
 800d61c:	f000 f868 	bl	800d6f0 <__malloc_lock>
 800d620:	f8d8 3000 	ldr.w	r3, [r8]
 800d624:	461c      	mov	r4, r3
 800d626:	bb5c      	cbnz	r4, 800d680 <_malloc_r+0x90>
 800d628:	4629      	mov	r1, r5
 800d62a:	4638      	mov	r0, r7
 800d62c:	f7ff ffc0 	bl	800d5b0 <sbrk_aligned>
 800d630:	1c43      	adds	r3, r0, #1
 800d632:	4604      	mov	r4, r0
 800d634:	d155      	bne.n	800d6e2 <_malloc_r+0xf2>
 800d636:	f8d8 4000 	ldr.w	r4, [r8]
 800d63a:	4626      	mov	r6, r4
 800d63c:	2e00      	cmp	r6, #0
 800d63e:	d145      	bne.n	800d6cc <_malloc_r+0xdc>
 800d640:	2c00      	cmp	r4, #0
 800d642:	d048      	beq.n	800d6d6 <_malloc_r+0xe6>
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	4631      	mov	r1, r6
 800d648:	4638      	mov	r0, r7
 800d64a:	eb04 0903 	add.w	r9, r4, r3
 800d64e:	f001 ff89 	bl	800f564 <_sbrk_r>
 800d652:	4581      	cmp	r9, r0
 800d654:	d13f      	bne.n	800d6d6 <_malloc_r+0xe6>
 800d656:	6821      	ldr	r1, [r4, #0]
 800d658:	4638      	mov	r0, r7
 800d65a:	1a6d      	subs	r5, r5, r1
 800d65c:	4629      	mov	r1, r5
 800d65e:	f7ff ffa7 	bl	800d5b0 <sbrk_aligned>
 800d662:	3001      	adds	r0, #1
 800d664:	d037      	beq.n	800d6d6 <_malloc_r+0xe6>
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	442b      	add	r3, r5
 800d66a:	6023      	str	r3, [r4, #0]
 800d66c:	f8d8 3000 	ldr.w	r3, [r8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d038      	beq.n	800d6e6 <_malloc_r+0xf6>
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	42a2      	cmp	r2, r4
 800d678:	d12b      	bne.n	800d6d2 <_malloc_r+0xe2>
 800d67a:	2200      	movs	r2, #0
 800d67c:	605a      	str	r2, [r3, #4]
 800d67e:	e00f      	b.n	800d6a0 <_malloc_r+0xb0>
 800d680:	6822      	ldr	r2, [r4, #0]
 800d682:	1b52      	subs	r2, r2, r5
 800d684:	d41f      	bmi.n	800d6c6 <_malloc_r+0xd6>
 800d686:	2a0b      	cmp	r2, #11
 800d688:	d917      	bls.n	800d6ba <_malloc_r+0xca>
 800d68a:	1961      	adds	r1, r4, r5
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	6025      	str	r5, [r4, #0]
 800d690:	bf18      	it	ne
 800d692:	6059      	strne	r1, [r3, #4]
 800d694:	6863      	ldr	r3, [r4, #4]
 800d696:	bf08      	it	eq
 800d698:	f8c8 1000 	streq.w	r1, [r8]
 800d69c:	5162      	str	r2, [r4, r5]
 800d69e:	604b      	str	r3, [r1, #4]
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f104 060b 	add.w	r6, r4, #11
 800d6a6:	f000 f829 	bl	800d6fc <__malloc_unlock>
 800d6aa:	f026 0607 	bic.w	r6, r6, #7
 800d6ae:	1d23      	adds	r3, r4, #4
 800d6b0:	1af2      	subs	r2, r6, r3
 800d6b2:	d0ae      	beq.n	800d612 <_malloc_r+0x22>
 800d6b4:	1b9b      	subs	r3, r3, r6
 800d6b6:	50a3      	str	r3, [r4, r2]
 800d6b8:	e7ab      	b.n	800d612 <_malloc_r+0x22>
 800d6ba:	42a3      	cmp	r3, r4
 800d6bc:	6862      	ldr	r2, [r4, #4]
 800d6be:	d1dd      	bne.n	800d67c <_malloc_r+0x8c>
 800d6c0:	f8c8 2000 	str.w	r2, [r8]
 800d6c4:	e7ec      	b.n	800d6a0 <_malloc_r+0xb0>
 800d6c6:	4623      	mov	r3, r4
 800d6c8:	6864      	ldr	r4, [r4, #4]
 800d6ca:	e7ac      	b.n	800d626 <_malloc_r+0x36>
 800d6cc:	4634      	mov	r4, r6
 800d6ce:	6876      	ldr	r6, [r6, #4]
 800d6d0:	e7b4      	b.n	800d63c <_malloc_r+0x4c>
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	e7cc      	b.n	800d670 <_malloc_r+0x80>
 800d6d6:	230c      	movs	r3, #12
 800d6d8:	4638      	mov	r0, r7
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	f000 f80e 	bl	800d6fc <__malloc_unlock>
 800d6e0:	e797      	b.n	800d612 <_malloc_r+0x22>
 800d6e2:	6025      	str	r5, [r4, #0]
 800d6e4:	e7dc      	b.n	800d6a0 <_malloc_r+0xb0>
 800d6e6:	605b      	str	r3, [r3, #4]
 800d6e8:	deff      	udf	#255	; 0xff
 800d6ea:	bf00      	nop
 800d6ec:	200045c4 	.word	0x200045c4

0800d6f0 <__malloc_lock>:
 800d6f0:	4801      	ldr	r0, [pc, #4]	; (800d6f8 <__malloc_lock+0x8>)
 800d6f2:	f7ff b87b 	b.w	800c7ec <__retarget_lock_acquire_recursive>
 800d6f6:	bf00      	nop
 800d6f8:	200045c0 	.word	0x200045c0

0800d6fc <__malloc_unlock>:
 800d6fc:	4801      	ldr	r0, [pc, #4]	; (800d704 <__malloc_unlock+0x8>)
 800d6fe:	f7ff b876 	b.w	800c7ee <__retarget_lock_release_recursive>
 800d702:	bf00      	nop
 800d704:	200045c0 	.word	0x200045c0

0800d708 <_Balloc>:
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	69c6      	ldr	r6, [r0, #28]
 800d70c:	4604      	mov	r4, r0
 800d70e:	460d      	mov	r5, r1
 800d710:	b976      	cbnz	r6, 800d730 <_Balloc+0x28>
 800d712:	2010      	movs	r0, #16
 800d714:	f7ff ff44 	bl	800d5a0 <malloc>
 800d718:	4602      	mov	r2, r0
 800d71a:	61e0      	str	r0, [r4, #28]
 800d71c:	b920      	cbnz	r0, 800d728 <_Balloc+0x20>
 800d71e:	216b      	movs	r1, #107	; 0x6b
 800d720:	4b17      	ldr	r3, [pc, #92]	; (800d780 <_Balloc+0x78>)
 800d722:	4818      	ldr	r0, [pc, #96]	; (800d784 <_Balloc+0x7c>)
 800d724:	f001 ff34 	bl	800f590 <__assert_func>
 800d728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d72c:	6006      	str	r6, [r0, #0]
 800d72e:	60c6      	str	r6, [r0, #12]
 800d730:	69e6      	ldr	r6, [r4, #28]
 800d732:	68f3      	ldr	r3, [r6, #12]
 800d734:	b183      	cbz	r3, 800d758 <_Balloc+0x50>
 800d736:	69e3      	ldr	r3, [r4, #28]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d73e:	b9b8      	cbnz	r0, 800d770 <_Balloc+0x68>
 800d740:	2101      	movs	r1, #1
 800d742:	fa01 f605 	lsl.w	r6, r1, r5
 800d746:	1d72      	adds	r2, r6, #5
 800d748:	4620      	mov	r0, r4
 800d74a:	0092      	lsls	r2, r2, #2
 800d74c:	f001 ff3e 	bl	800f5cc <_calloc_r>
 800d750:	b160      	cbz	r0, 800d76c <_Balloc+0x64>
 800d752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d756:	e00e      	b.n	800d776 <_Balloc+0x6e>
 800d758:	2221      	movs	r2, #33	; 0x21
 800d75a:	2104      	movs	r1, #4
 800d75c:	4620      	mov	r0, r4
 800d75e:	f001 ff35 	bl	800f5cc <_calloc_r>
 800d762:	69e3      	ldr	r3, [r4, #28]
 800d764:	60f0      	str	r0, [r6, #12]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1e4      	bne.n	800d736 <_Balloc+0x2e>
 800d76c:	2000      	movs	r0, #0
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	6802      	ldr	r2, [r0, #0]
 800d772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d776:	2300      	movs	r3, #0
 800d778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d77c:	e7f7      	b.n	800d76e <_Balloc+0x66>
 800d77e:	bf00      	nop
 800d780:	0800fff8 	.word	0x0800fff8
 800d784:	08010078 	.word	0x08010078

0800d788 <_Bfree>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	69c6      	ldr	r6, [r0, #28]
 800d78c:	4605      	mov	r5, r0
 800d78e:	460c      	mov	r4, r1
 800d790:	b976      	cbnz	r6, 800d7b0 <_Bfree+0x28>
 800d792:	2010      	movs	r0, #16
 800d794:	f7ff ff04 	bl	800d5a0 <malloc>
 800d798:	4602      	mov	r2, r0
 800d79a:	61e8      	str	r0, [r5, #28]
 800d79c:	b920      	cbnz	r0, 800d7a8 <_Bfree+0x20>
 800d79e:	218f      	movs	r1, #143	; 0x8f
 800d7a0:	4b08      	ldr	r3, [pc, #32]	; (800d7c4 <_Bfree+0x3c>)
 800d7a2:	4809      	ldr	r0, [pc, #36]	; (800d7c8 <_Bfree+0x40>)
 800d7a4:	f001 fef4 	bl	800f590 <__assert_func>
 800d7a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7ac:	6006      	str	r6, [r0, #0]
 800d7ae:	60c6      	str	r6, [r0, #12]
 800d7b0:	b13c      	cbz	r4, 800d7c2 <_Bfree+0x3a>
 800d7b2:	69eb      	ldr	r3, [r5, #28]
 800d7b4:	6862      	ldr	r2, [r4, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7bc:	6021      	str	r1, [r4, #0]
 800d7be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7c2:	bd70      	pop	{r4, r5, r6, pc}
 800d7c4:	0800fff8 	.word	0x0800fff8
 800d7c8:	08010078 	.word	0x08010078

0800d7cc <__multadd>:
 800d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	461e      	mov	r6, r3
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	690d      	ldr	r5, [r1, #16]
 800d7da:	f101 0c14 	add.w	ip, r1, #20
 800d7de:	f8dc 3000 	ldr.w	r3, [ip]
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	b299      	uxth	r1, r3
 800d7e6:	fb02 6101 	mla	r1, r2, r1, r6
 800d7ea:	0c1e      	lsrs	r6, r3, #16
 800d7ec:	0c0b      	lsrs	r3, r1, #16
 800d7ee:	fb02 3306 	mla	r3, r2, r6, r3
 800d7f2:	b289      	uxth	r1, r1
 800d7f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7f8:	4285      	cmp	r5, r0
 800d7fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7fe:	f84c 1b04 	str.w	r1, [ip], #4
 800d802:	dcec      	bgt.n	800d7de <__multadd+0x12>
 800d804:	b30e      	cbz	r6, 800d84a <__multadd+0x7e>
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	42ab      	cmp	r3, r5
 800d80a:	dc19      	bgt.n	800d840 <__multadd+0x74>
 800d80c:	6861      	ldr	r1, [r4, #4]
 800d80e:	4638      	mov	r0, r7
 800d810:	3101      	adds	r1, #1
 800d812:	f7ff ff79 	bl	800d708 <_Balloc>
 800d816:	4680      	mov	r8, r0
 800d818:	b928      	cbnz	r0, 800d826 <__multadd+0x5a>
 800d81a:	4602      	mov	r2, r0
 800d81c:	21ba      	movs	r1, #186	; 0xba
 800d81e:	4b0c      	ldr	r3, [pc, #48]	; (800d850 <__multadd+0x84>)
 800d820:	480c      	ldr	r0, [pc, #48]	; (800d854 <__multadd+0x88>)
 800d822:	f001 feb5 	bl	800f590 <__assert_func>
 800d826:	6922      	ldr	r2, [r4, #16]
 800d828:	f104 010c 	add.w	r1, r4, #12
 800d82c:	3202      	adds	r2, #2
 800d82e:	0092      	lsls	r2, r2, #2
 800d830:	300c      	adds	r0, #12
 800d832:	f7fe ffeb 	bl	800c80c <memcpy>
 800d836:	4621      	mov	r1, r4
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff ffa5 	bl	800d788 <_Bfree>
 800d83e:	4644      	mov	r4, r8
 800d840:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d844:	3501      	adds	r5, #1
 800d846:	615e      	str	r6, [r3, #20]
 800d848:	6125      	str	r5, [r4, #16]
 800d84a:	4620      	mov	r0, r4
 800d84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d850:	08010067 	.word	0x08010067
 800d854:	08010078 	.word	0x08010078

0800d858 <__s2b>:
 800d858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d85c:	4615      	mov	r5, r2
 800d85e:	2209      	movs	r2, #9
 800d860:	461f      	mov	r7, r3
 800d862:	3308      	adds	r3, #8
 800d864:	460c      	mov	r4, r1
 800d866:	fb93 f3f2 	sdiv	r3, r3, r2
 800d86a:	4606      	mov	r6, r0
 800d86c:	2201      	movs	r2, #1
 800d86e:	2100      	movs	r1, #0
 800d870:	429a      	cmp	r2, r3
 800d872:	db09      	blt.n	800d888 <__s2b+0x30>
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff ff47 	bl	800d708 <_Balloc>
 800d87a:	b940      	cbnz	r0, 800d88e <__s2b+0x36>
 800d87c:	4602      	mov	r2, r0
 800d87e:	21d3      	movs	r1, #211	; 0xd3
 800d880:	4b18      	ldr	r3, [pc, #96]	; (800d8e4 <__s2b+0x8c>)
 800d882:	4819      	ldr	r0, [pc, #100]	; (800d8e8 <__s2b+0x90>)
 800d884:	f001 fe84 	bl	800f590 <__assert_func>
 800d888:	0052      	lsls	r2, r2, #1
 800d88a:	3101      	adds	r1, #1
 800d88c:	e7f0      	b.n	800d870 <__s2b+0x18>
 800d88e:	9b08      	ldr	r3, [sp, #32]
 800d890:	2d09      	cmp	r5, #9
 800d892:	6143      	str	r3, [r0, #20]
 800d894:	f04f 0301 	mov.w	r3, #1
 800d898:	6103      	str	r3, [r0, #16]
 800d89a:	dd16      	ble.n	800d8ca <__s2b+0x72>
 800d89c:	f104 0909 	add.w	r9, r4, #9
 800d8a0:	46c8      	mov	r8, r9
 800d8a2:	442c      	add	r4, r5
 800d8a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	220a      	movs	r2, #10
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	3b30      	subs	r3, #48	; 0x30
 800d8b0:	f7ff ff8c 	bl	800d7cc <__multadd>
 800d8b4:	45a0      	cmp	r8, r4
 800d8b6:	d1f5      	bne.n	800d8a4 <__s2b+0x4c>
 800d8b8:	f1a5 0408 	sub.w	r4, r5, #8
 800d8bc:	444c      	add	r4, r9
 800d8be:	1b2d      	subs	r5, r5, r4
 800d8c0:	1963      	adds	r3, r4, r5
 800d8c2:	42bb      	cmp	r3, r7
 800d8c4:	db04      	blt.n	800d8d0 <__s2b+0x78>
 800d8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8ca:	2509      	movs	r5, #9
 800d8cc:	340a      	adds	r4, #10
 800d8ce:	e7f6      	b.n	800d8be <__s2b+0x66>
 800d8d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8d4:	4601      	mov	r1, r0
 800d8d6:	220a      	movs	r2, #10
 800d8d8:	4630      	mov	r0, r6
 800d8da:	3b30      	subs	r3, #48	; 0x30
 800d8dc:	f7ff ff76 	bl	800d7cc <__multadd>
 800d8e0:	e7ee      	b.n	800d8c0 <__s2b+0x68>
 800d8e2:	bf00      	nop
 800d8e4:	08010067 	.word	0x08010067
 800d8e8:	08010078 	.word	0x08010078

0800d8ec <__hi0bits>:
 800d8ec:	0c02      	lsrs	r2, r0, #16
 800d8ee:	0412      	lsls	r2, r2, #16
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	b9ca      	cbnz	r2, 800d928 <__hi0bits+0x3c>
 800d8f4:	0403      	lsls	r3, r0, #16
 800d8f6:	2010      	movs	r0, #16
 800d8f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d8fc:	bf04      	itt	eq
 800d8fe:	021b      	lsleq	r3, r3, #8
 800d900:	3008      	addeq	r0, #8
 800d902:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d906:	bf04      	itt	eq
 800d908:	011b      	lsleq	r3, r3, #4
 800d90a:	3004      	addeq	r0, #4
 800d90c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d910:	bf04      	itt	eq
 800d912:	009b      	lsleq	r3, r3, #2
 800d914:	3002      	addeq	r0, #2
 800d916:	2b00      	cmp	r3, #0
 800d918:	db05      	blt.n	800d926 <__hi0bits+0x3a>
 800d91a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d91e:	f100 0001 	add.w	r0, r0, #1
 800d922:	bf08      	it	eq
 800d924:	2020      	moveq	r0, #32
 800d926:	4770      	bx	lr
 800d928:	2000      	movs	r0, #0
 800d92a:	e7e5      	b.n	800d8f8 <__hi0bits+0xc>

0800d92c <__lo0bits>:
 800d92c:	6803      	ldr	r3, [r0, #0]
 800d92e:	4602      	mov	r2, r0
 800d930:	f013 0007 	ands.w	r0, r3, #7
 800d934:	d00b      	beq.n	800d94e <__lo0bits+0x22>
 800d936:	07d9      	lsls	r1, r3, #31
 800d938:	d421      	bmi.n	800d97e <__lo0bits+0x52>
 800d93a:	0798      	lsls	r0, r3, #30
 800d93c:	bf49      	itett	mi
 800d93e:	085b      	lsrmi	r3, r3, #1
 800d940:	089b      	lsrpl	r3, r3, #2
 800d942:	2001      	movmi	r0, #1
 800d944:	6013      	strmi	r3, [r2, #0]
 800d946:	bf5c      	itt	pl
 800d948:	2002      	movpl	r0, #2
 800d94a:	6013      	strpl	r3, [r2, #0]
 800d94c:	4770      	bx	lr
 800d94e:	b299      	uxth	r1, r3
 800d950:	b909      	cbnz	r1, 800d956 <__lo0bits+0x2a>
 800d952:	2010      	movs	r0, #16
 800d954:	0c1b      	lsrs	r3, r3, #16
 800d956:	b2d9      	uxtb	r1, r3
 800d958:	b909      	cbnz	r1, 800d95e <__lo0bits+0x32>
 800d95a:	3008      	adds	r0, #8
 800d95c:	0a1b      	lsrs	r3, r3, #8
 800d95e:	0719      	lsls	r1, r3, #28
 800d960:	bf04      	itt	eq
 800d962:	091b      	lsreq	r3, r3, #4
 800d964:	3004      	addeq	r0, #4
 800d966:	0799      	lsls	r1, r3, #30
 800d968:	bf04      	itt	eq
 800d96a:	089b      	lsreq	r3, r3, #2
 800d96c:	3002      	addeq	r0, #2
 800d96e:	07d9      	lsls	r1, r3, #31
 800d970:	d403      	bmi.n	800d97a <__lo0bits+0x4e>
 800d972:	085b      	lsrs	r3, r3, #1
 800d974:	f100 0001 	add.w	r0, r0, #1
 800d978:	d003      	beq.n	800d982 <__lo0bits+0x56>
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	4770      	bx	lr
 800d97e:	2000      	movs	r0, #0
 800d980:	4770      	bx	lr
 800d982:	2020      	movs	r0, #32
 800d984:	4770      	bx	lr
	...

0800d988 <__i2b>:
 800d988:	b510      	push	{r4, lr}
 800d98a:	460c      	mov	r4, r1
 800d98c:	2101      	movs	r1, #1
 800d98e:	f7ff febb 	bl	800d708 <_Balloc>
 800d992:	4602      	mov	r2, r0
 800d994:	b928      	cbnz	r0, 800d9a2 <__i2b+0x1a>
 800d996:	f240 1145 	movw	r1, #325	; 0x145
 800d99a:	4b04      	ldr	r3, [pc, #16]	; (800d9ac <__i2b+0x24>)
 800d99c:	4804      	ldr	r0, [pc, #16]	; (800d9b0 <__i2b+0x28>)
 800d99e:	f001 fdf7 	bl	800f590 <__assert_func>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	6144      	str	r4, [r0, #20]
 800d9a6:	6103      	str	r3, [r0, #16]
 800d9a8:	bd10      	pop	{r4, pc}
 800d9aa:	bf00      	nop
 800d9ac:	08010067 	.word	0x08010067
 800d9b0:	08010078 	.word	0x08010078

0800d9b4 <__multiply>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	4691      	mov	r9, r2
 800d9ba:	690a      	ldr	r2, [r1, #16]
 800d9bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	bfbe      	ittt	lt
 800d9c6:	460b      	movlt	r3, r1
 800d9c8:	464c      	movlt	r4, r9
 800d9ca:	4699      	movlt	r9, r3
 800d9cc:	6927      	ldr	r7, [r4, #16]
 800d9ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d9d2:	68a3      	ldr	r3, [r4, #8]
 800d9d4:	6861      	ldr	r1, [r4, #4]
 800d9d6:	eb07 060a 	add.w	r6, r7, sl
 800d9da:	42b3      	cmp	r3, r6
 800d9dc:	b085      	sub	sp, #20
 800d9de:	bfb8      	it	lt
 800d9e0:	3101      	addlt	r1, #1
 800d9e2:	f7ff fe91 	bl	800d708 <_Balloc>
 800d9e6:	b930      	cbnz	r0, 800d9f6 <__multiply+0x42>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d9ee:	4b43      	ldr	r3, [pc, #268]	; (800dafc <__multiply+0x148>)
 800d9f0:	4843      	ldr	r0, [pc, #268]	; (800db00 <__multiply+0x14c>)
 800d9f2:	f001 fdcd 	bl	800f590 <__assert_func>
 800d9f6:	f100 0514 	add.w	r5, r0, #20
 800d9fa:	462b      	mov	r3, r5
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da02:	4543      	cmp	r3, r8
 800da04:	d321      	bcc.n	800da4a <__multiply+0x96>
 800da06:	f104 0314 	add.w	r3, r4, #20
 800da0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da0e:	f109 0314 	add.w	r3, r9, #20
 800da12:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da16:	9202      	str	r2, [sp, #8]
 800da18:	1b3a      	subs	r2, r7, r4
 800da1a:	3a15      	subs	r2, #21
 800da1c:	f022 0203 	bic.w	r2, r2, #3
 800da20:	3204      	adds	r2, #4
 800da22:	f104 0115 	add.w	r1, r4, #21
 800da26:	428f      	cmp	r7, r1
 800da28:	bf38      	it	cc
 800da2a:	2204      	movcc	r2, #4
 800da2c:	9201      	str	r2, [sp, #4]
 800da2e:	9a02      	ldr	r2, [sp, #8]
 800da30:	9303      	str	r3, [sp, #12]
 800da32:	429a      	cmp	r2, r3
 800da34:	d80c      	bhi.n	800da50 <__multiply+0x9c>
 800da36:	2e00      	cmp	r6, #0
 800da38:	dd03      	ble.n	800da42 <__multiply+0x8e>
 800da3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d05a      	beq.n	800daf8 <__multiply+0x144>
 800da42:	6106      	str	r6, [r0, #16]
 800da44:	b005      	add	sp, #20
 800da46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4a:	f843 2b04 	str.w	r2, [r3], #4
 800da4e:	e7d8      	b.n	800da02 <__multiply+0x4e>
 800da50:	f8b3 a000 	ldrh.w	sl, [r3]
 800da54:	f1ba 0f00 	cmp.w	sl, #0
 800da58:	d023      	beq.n	800daa2 <__multiply+0xee>
 800da5a:	46a9      	mov	r9, r5
 800da5c:	f04f 0c00 	mov.w	ip, #0
 800da60:	f104 0e14 	add.w	lr, r4, #20
 800da64:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da68:	f8d9 1000 	ldr.w	r1, [r9]
 800da6c:	fa1f fb82 	uxth.w	fp, r2
 800da70:	b289      	uxth	r1, r1
 800da72:	fb0a 110b 	mla	r1, sl, fp, r1
 800da76:	4461      	add	r1, ip
 800da78:	f8d9 c000 	ldr.w	ip, [r9]
 800da7c:	0c12      	lsrs	r2, r2, #16
 800da7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800da82:	fb0a c202 	mla	r2, sl, r2, ip
 800da86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da8a:	b289      	uxth	r1, r1
 800da8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da90:	4577      	cmp	r7, lr
 800da92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da96:	f849 1b04 	str.w	r1, [r9], #4
 800da9a:	d8e3      	bhi.n	800da64 <__multiply+0xb0>
 800da9c:	9a01      	ldr	r2, [sp, #4]
 800da9e:	f845 c002 	str.w	ip, [r5, r2]
 800daa2:	9a03      	ldr	r2, [sp, #12]
 800daa4:	3304      	adds	r3, #4
 800daa6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800daaa:	f1b9 0f00 	cmp.w	r9, #0
 800daae:	d021      	beq.n	800daf4 <__multiply+0x140>
 800dab0:	46ae      	mov	lr, r5
 800dab2:	f04f 0a00 	mov.w	sl, #0
 800dab6:	6829      	ldr	r1, [r5, #0]
 800dab8:	f104 0c14 	add.w	ip, r4, #20
 800dabc:	f8bc b000 	ldrh.w	fp, [ip]
 800dac0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dac4:	b289      	uxth	r1, r1
 800dac6:	fb09 220b 	mla	r2, r9, fp, r2
 800daca:	4452      	add	r2, sl
 800dacc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dad0:	f84e 1b04 	str.w	r1, [lr], #4
 800dad4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dad8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dadc:	f8be 1000 	ldrh.w	r1, [lr]
 800dae0:	4567      	cmp	r7, ip
 800dae2:	fb09 110a 	mla	r1, r9, sl, r1
 800dae6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800daea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800daee:	d8e5      	bhi.n	800dabc <__multiply+0x108>
 800daf0:	9a01      	ldr	r2, [sp, #4]
 800daf2:	50a9      	str	r1, [r5, r2]
 800daf4:	3504      	adds	r5, #4
 800daf6:	e79a      	b.n	800da2e <__multiply+0x7a>
 800daf8:	3e01      	subs	r6, #1
 800dafa:	e79c      	b.n	800da36 <__multiply+0x82>
 800dafc:	08010067 	.word	0x08010067
 800db00:	08010078 	.word	0x08010078

0800db04 <__pow5mult>:
 800db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db08:	4615      	mov	r5, r2
 800db0a:	f012 0203 	ands.w	r2, r2, #3
 800db0e:	4606      	mov	r6, r0
 800db10:	460f      	mov	r7, r1
 800db12:	d007      	beq.n	800db24 <__pow5mult+0x20>
 800db14:	4c25      	ldr	r4, [pc, #148]	; (800dbac <__pow5mult+0xa8>)
 800db16:	3a01      	subs	r2, #1
 800db18:	2300      	movs	r3, #0
 800db1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db1e:	f7ff fe55 	bl	800d7cc <__multadd>
 800db22:	4607      	mov	r7, r0
 800db24:	10ad      	asrs	r5, r5, #2
 800db26:	d03d      	beq.n	800dba4 <__pow5mult+0xa0>
 800db28:	69f4      	ldr	r4, [r6, #28]
 800db2a:	b97c      	cbnz	r4, 800db4c <__pow5mult+0x48>
 800db2c:	2010      	movs	r0, #16
 800db2e:	f7ff fd37 	bl	800d5a0 <malloc>
 800db32:	4602      	mov	r2, r0
 800db34:	61f0      	str	r0, [r6, #28]
 800db36:	b928      	cbnz	r0, 800db44 <__pow5mult+0x40>
 800db38:	f240 11b3 	movw	r1, #435	; 0x1b3
 800db3c:	4b1c      	ldr	r3, [pc, #112]	; (800dbb0 <__pow5mult+0xac>)
 800db3e:	481d      	ldr	r0, [pc, #116]	; (800dbb4 <__pow5mult+0xb0>)
 800db40:	f001 fd26 	bl	800f590 <__assert_func>
 800db44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db48:	6004      	str	r4, [r0, #0]
 800db4a:	60c4      	str	r4, [r0, #12]
 800db4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800db50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db54:	b94c      	cbnz	r4, 800db6a <__pow5mult+0x66>
 800db56:	f240 2171 	movw	r1, #625	; 0x271
 800db5a:	4630      	mov	r0, r6
 800db5c:	f7ff ff14 	bl	800d988 <__i2b>
 800db60:	2300      	movs	r3, #0
 800db62:	4604      	mov	r4, r0
 800db64:	f8c8 0008 	str.w	r0, [r8, #8]
 800db68:	6003      	str	r3, [r0, #0]
 800db6a:	f04f 0900 	mov.w	r9, #0
 800db6e:	07eb      	lsls	r3, r5, #31
 800db70:	d50a      	bpl.n	800db88 <__pow5mult+0x84>
 800db72:	4639      	mov	r1, r7
 800db74:	4622      	mov	r2, r4
 800db76:	4630      	mov	r0, r6
 800db78:	f7ff ff1c 	bl	800d9b4 <__multiply>
 800db7c:	4680      	mov	r8, r0
 800db7e:	4639      	mov	r1, r7
 800db80:	4630      	mov	r0, r6
 800db82:	f7ff fe01 	bl	800d788 <_Bfree>
 800db86:	4647      	mov	r7, r8
 800db88:	106d      	asrs	r5, r5, #1
 800db8a:	d00b      	beq.n	800dba4 <__pow5mult+0xa0>
 800db8c:	6820      	ldr	r0, [r4, #0]
 800db8e:	b938      	cbnz	r0, 800dba0 <__pow5mult+0x9c>
 800db90:	4622      	mov	r2, r4
 800db92:	4621      	mov	r1, r4
 800db94:	4630      	mov	r0, r6
 800db96:	f7ff ff0d 	bl	800d9b4 <__multiply>
 800db9a:	6020      	str	r0, [r4, #0]
 800db9c:	f8c0 9000 	str.w	r9, [r0]
 800dba0:	4604      	mov	r4, r0
 800dba2:	e7e4      	b.n	800db6e <__pow5mult+0x6a>
 800dba4:	4638      	mov	r0, r7
 800dba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbaa:	bf00      	nop
 800dbac:	080101c8 	.word	0x080101c8
 800dbb0:	0800fff8 	.word	0x0800fff8
 800dbb4:	08010078 	.word	0x08010078

0800dbb8 <__lshift>:
 800dbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbbc:	460c      	mov	r4, r1
 800dbbe:	4607      	mov	r7, r0
 800dbc0:	4691      	mov	r9, r2
 800dbc2:	6923      	ldr	r3, [r4, #16]
 800dbc4:	6849      	ldr	r1, [r1, #4]
 800dbc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbca:	68a3      	ldr	r3, [r4, #8]
 800dbcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbd0:	f108 0601 	add.w	r6, r8, #1
 800dbd4:	42b3      	cmp	r3, r6
 800dbd6:	db0b      	blt.n	800dbf0 <__lshift+0x38>
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f7ff fd95 	bl	800d708 <_Balloc>
 800dbde:	4605      	mov	r5, r0
 800dbe0:	b948      	cbnz	r0, 800dbf6 <__lshift+0x3e>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dbe8:	4b27      	ldr	r3, [pc, #156]	; (800dc88 <__lshift+0xd0>)
 800dbea:	4828      	ldr	r0, [pc, #160]	; (800dc8c <__lshift+0xd4>)
 800dbec:	f001 fcd0 	bl	800f590 <__assert_func>
 800dbf0:	3101      	adds	r1, #1
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	e7ee      	b.n	800dbd4 <__lshift+0x1c>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f100 0114 	add.w	r1, r0, #20
 800dbfc:	f100 0210 	add.w	r2, r0, #16
 800dc00:	4618      	mov	r0, r3
 800dc02:	4553      	cmp	r3, sl
 800dc04:	db33      	blt.n	800dc6e <__lshift+0xb6>
 800dc06:	6920      	ldr	r0, [r4, #16]
 800dc08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc0c:	f104 0314 	add.w	r3, r4, #20
 800dc10:	f019 091f 	ands.w	r9, r9, #31
 800dc14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc1c:	d02b      	beq.n	800dc76 <__lshift+0xbe>
 800dc1e:	468a      	mov	sl, r1
 800dc20:	2200      	movs	r2, #0
 800dc22:	f1c9 0e20 	rsb	lr, r9, #32
 800dc26:	6818      	ldr	r0, [r3, #0]
 800dc28:	fa00 f009 	lsl.w	r0, r0, r9
 800dc2c:	4310      	orrs	r0, r2
 800dc2e:	f84a 0b04 	str.w	r0, [sl], #4
 800dc32:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc36:	459c      	cmp	ip, r3
 800dc38:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc3c:	d8f3      	bhi.n	800dc26 <__lshift+0x6e>
 800dc3e:	ebac 0304 	sub.w	r3, ip, r4
 800dc42:	3b15      	subs	r3, #21
 800dc44:	f023 0303 	bic.w	r3, r3, #3
 800dc48:	3304      	adds	r3, #4
 800dc4a:	f104 0015 	add.w	r0, r4, #21
 800dc4e:	4584      	cmp	ip, r0
 800dc50:	bf38      	it	cc
 800dc52:	2304      	movcc	r3, #4
 800dc54:	50ca      	str	r2, [r1, r3]
 800dc56:	b10a      	cbz	r2, 800dc5c <__lshift+0xa4>
 800dc58:	f108 0602 	add.w	r6, r8, #2
 800dc5c:	3e01      	subs	r6, #1
 800dc5e:	4638      	mov	r0, r7
 800dc60:	4621      	mov	r1, r4
 800dc62:	612e      	str	r6, [r5, #16]
 800dc64:	f7ff fd90 	bl	800d788 <_Bfree>
 800dc68:	4628      	mov	r0, r5
 800dc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc72:	3301      	adds	r3, #1
 800dc74:	e7c5      	b.n	800dc02 <__lshift+0x4a>
 800dc76:	3904      	subs	r1, #4
 800dc78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc7c:	459c      	cmp	ip, r3
 800dc7e:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc82:	d8f9      	bhi.n	800dc78 <__lshift+0xc0>
 800dc84:	e7ea      	b.n	800dc5c <__lshift+0xa4>
 800dc86:	bf00      	nop
 800dc88:	08010067 	.word	0x08010067
 800dc8c:	08010078 	.word	0x08010078

0800dc90 <__mcmp>:
 800dc90:	4603      	mov	r3, r0
 800dc92:	690a      	ldr	r2, [r1, #16]
 800dc94:	6900      	ldr	r0, [r0, #16]
 800dc96:	b530      	push	{r4, r5, lr}
 800dc98:	1a80      	subs	r0, r0, r2
 800dc9a:	d10d      	bne.n	800dcb8 <__mcmp+0x28>
 800dc9c:	3314      	adds	r3, #20
 800dc9e:	3114      	adds	r1, #20
 800dca0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dca4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dcac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dcb0:	4295      	cmp	r5, r2
 800dcb2:	d002      	beq.n	800dcba <__mcmp+0x2a>
 800dcb4:	d304      	bcc.n	800dcc0 <__mcmp+0x30>
 800dcb6:	2001      	movs	r0, #1
 800dcb8:	bd30      	pop	{r4, r5, pc}
 800dcba:	42a3      	cmp	r3, r4
 800dcbc:	d3f4      	bcc.n	800dca8 <__mcmp+0x18>
 800dcbe:	e7fb      	b.n	800dcb8 <__mcmp+0x28>
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc4:	e7f8      	b.n	800dcb8 <__mcmp+0x28>
	...

0800dcc8 <__mdiff>:
 800dcc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dccc:	460d      	mov	r5, r1
 800dcce:	4607      	mov	r7, r0
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	4614      	mov	r4, r2
 800dcd6:	f7ff ffdb 	bl	800dc90 <__mcmp>
 800dcda:	1e06      	subs	r6, r0, #0
 800dcdc:	d111      	bne.n	800dd02 <__mdiff+0x3a>
 800dcde:	4631      	mov	r1, r6
 800dce0:	4638      	mov	r0, r7
 800dce2:	f7ff fd11 	bl	800d708 <_Balloc>
 800dce6:	4602      	mov	r2, r0
 800dce8:	b928      	cbnz	r0, 800dcf6 <__mdiff+0x2e>
 800dcea:	f240 2137 	movw	r1, #567	; 0x237
 800dcee:	4b3a      	ldr	r3, [pc, #232]	; (800ddd8 <__mdiff+0x110>)
 800dcf0:	483a      	ldr	r0, [pc, #232]	; (800dddc <__mdiff+0x114>)
 800dcf2:	f001 fc4d 	bl	800f590 <__assert_func>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd02:	bfa4      	itt	ge
 800dd04:	4623      	movge	r3, r4
 800dd06:	462c      	movge	r4, r5
 800dd08:	4638      	mov	r0, r7
 800dd0a:	6861      	ldr	r1, [r4, #4]
 800dd0c:	bfa6      	itte	ge
 800dd0e:	461d      	movge	r5, r3
 800dd10:	2600      	movge	r6, #0
 800dd12:	2601      	movlt	r6, #1
 800dd14:	f7ff fcf8 	bl	800d708 <_Balloc>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	b918      	cbnz	r0, 800dd24 <__mdiff+0x5c>
 800dd1c:	f240 2145 	movw	r1, #581	; 0x245
 800dd20:	4b2d      	ldr	r3, [pc, #180]	; (800ddd8 <__mdiff+0x110>)
 800dd22:	e7e5      	b.n	800dcf0 <__mdiff+0x28>
 800dd24:	f102 0814 	add.w	r8, r2, #20
 800dd28:	46c2      	mov	sl, r8
 800dd2a:	f04f 0c00 	mov.w	ip, #0
 800dd2e:	6927      	ldr	r7, [r4, #16]
 800dd30:	60c6      	str	r6, [r0, #12]
 800dd32:	692e      	ldr	r6, [r5, #16]
 800dd34:	f104 0014 	add.w	r0, r4, #20
 800dd38:	f105 0914 	add.w	r9, r5, #20
 800dd3c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800dd40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd44:	3410      	adds	r4, #16
 800dd46:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800dd4a:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd4e:	fa1f f18b 	uxth.w	r1, fp
 800dd52:	4461      	add	r1, ip
 800dd54:	fa1f fc83 	uxth.w	ip, r3
 800dd58:	0c1b      	lsrs	r3, r3, #16
 800dd5a:	eba1 010c 	sub.w	r1, r1, ip
 800dd5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dd66:	b289      	uxth	r1, r1
 800dd68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800dd6c:	454e      	cmp	r6, r9
 800dd6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800dd72:	f84a 1b04 	str.w	r1, [sl], #4
 800dd76:	d8e6      	bhi.n	800dd46 <__mdiff+0x7e>
 800dd78:	1b73      	subs	r3, r6, r5
 800dd7a:	3b15      	subs	r3, #21
 800dd7c:	f023 0303 	bic.w	r3, r3, #3
 800dd80:	3515      	adds	r5, #21
 800dd82:	3304      	adds	r3, #4
 800dd84:	42ae      	cmp	r6, r5
 800dd86:	bf38      	it	cc
 800dd88:	2304      	movcc	r3, #4
 800dd8a:	4418      	add	r0, r3
 800dd8c:	4443      	add	r3, r8
 800dd8e:	461e      	mov	r6, r3
 800dd90:	4605      	mov	r5, r0
 800dd92:	4575      	cmp	r5, lr
 800dd94:	d30e      	bcc.n	800ddb4 <__mdiff+0xec>
 800dd96:	f10e 0103 	add.w	r1, lr, #3
 800dd9a:	1a09      	subs	r1, r1, r0
 800dd9c:	f021 0103 	bic.w	r1, r1, #3
 800dda0:	3803      	subs	r0, #3
 800dda2:	4586      	cmp	lr, r0
 800dda4:	bf38      	it	cc
 800dda6:	2100      	movcc	r1, #0
 800dda8:	440b      	add	r3, r1
 800ddaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddae:	b189      	cbz	r1, 800ddd4 <__mdiff+0x10c>
 800ddb0:	6117      	str	r7, [r2, #16]
 800ddb2:	e7a3      	b.n	800dcfc <__mdiff+0x34>
 800ddb4:	f855 8b04 	ldr.w	r8, [r5], #4
 800ddb8:	fa1f f188 	uxth.w	r1, r8
 800ddbc:	4461      	add	r1, ip
 800ddbe:	140c      	asrs	r4, r1, #16
 800ddc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ddc4:	b289      	uxth	r1, r1
 800ddc6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ddca:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ddce:	f846 1b04 	str.w	r1, [r6], #4
 800ddd2:	e7de      	b.n	800dd92 <__mdiff+0xca>
 800ddd4:	3f01      	subs	r7, #1
 800ddd6:	e7e8      	b.n	800ddaa <__mdiff+0xe2>
 800ddd8:	08010067 	.word	0x08010067
 800dddc:	08010078 	.word	0x08010078

0800dde0 <__ulp>:
 800dde0:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <__ulp+0x3c>)
 800dde2:	400b      	ands	r3, r1
 800dde4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	dc08      	bgt.n	800ddfe <__ulp+0x1e>
 800ddec:	425b      	negs	r3, r3
 800ddee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ddf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddf6:	da04      	bge.n	800de02 <__ulp+0x22>
 800ddf8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ddfc:	4113      	asrs	r3, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	e008      	b.n	800de14 <__ulp+0x34>
 800de02:	f1a2 0314 	sub.w	r3, r2, #20
 800de06:	2b1e      	cmp	r3, #30
 800de08:	bfd6      	itet	le
 800de0a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800de0e:	2201      	movgt	r2, #1
 800de10:	40da      	lsrle	r2, r3
 800de12:	2300      	movs	r3, #0
 800de14:	4619      	mov	r1, r3
 800de16:	4610      	mov	r0, r2
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	7ff00000 	.word	0x7ff00000

0800de20 <__b2d>:
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	6905      	ldr	r5, [r0, #16]
 800de24:	f100 0714 	add.w	r7, r0, #20
 800de28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800de2c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800de30:	1f2e      	subs	r6, r5, #4
 800de32:	4620      	mov	r0, r4
 800de34:	f7ff fd5a 	bl	800d8ec <__hi0bits>
 800de38:	f1c0 0220 	rsb	r2, r0, #32
 800de3c:	280a      	cmp	r0, #10
 800de3e:	4603      	mov	r3, r0
 800de40:	f8df c068 	ldr.w	ip, [pc, #104]	; 800deac <__b2d+0x8c>
 800de44:	600a      	str	r2, [r1, #0]
 800de46:	dc12      	bgt.n	800de6e <__b2d+0x4e>
 800de48:	f1c0 0e0b 	rsb	lr, r0, #11
 800de4c:	fa24 f20e 	lsr.w	r2, r4, lr
 800de50:	42b7      	cmp	r7, r6
 800de52:	ea42 010c 	orr.w	r1, r2, ip
 800de56:	bf2c      	ite	cs
 800de58:	2200      	movcs	r2, #0
 800de5a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800de5e:	3315      	adds	r3, #21
 800de60:	fa04 f303 	lsl.w	r3, r4, r3
 800de64:	fa22 f20e 	lsr.w	r2, r2, lr
 800de68:	431a      	orrs	r2, r3
 800de6a:	4610      	mov	r0, r2
 800de6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de6e:	42b7      	cmp	r7, r6
 800de70:	bf2e      	itee	cs
 800de72:	2200      	movcs	r2, #0
 800de74:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800de78:	f1a5 0608 	subcc.w	r6, r5, #8
 800de7c:	3b0b      	subs	r3, #11
 800de7e:	d012      	beq.n	800dea6 <__b2d+0x86>
 800de80:	f1c3 0520 	rsb	r5, r3, #32
 800de84:	fa22 f105 	lsr.w	r1, r2, r5
 800de88:	409c      	lsls	r4, r3
 800de8a:	430c      	orrs	r4, r1
 800de8c:	42be      	cmp	r6, r7
 800de8e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800de92:	bf94      	ite	ls
 800de94:	2400      	movls	r4, #0
 800de96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800de9a:	409a      	lsls	r2, r3
 800de9c:	40ec      	lsrs	r4, r5
 800de9e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800dea2:	4322      	orrs	r2, r4
 800dea4:	e7e1      	b.n	800de6a <__b2d+0x4a>
 800dea6:	ea44 010c 	orr.w	r1, r4, ip
 800deaa:	e7de      	b.n	800de6a <__b2d+0x4a>
 800deac:	3ff00000 	.word	0x3ff00000

0800deb0 <__d2b>:
 800deb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deb2:	2101      	movs	r1, #1
 800deb4:	4617      	mov	r7, r2
 800deb6:	461c      	mov	r4, r3
 800deb8:	9e08      	ldr	r6, [sp, #32]
 800deba:	f7ff fc25 	bl	800d708 <_Balloc>
 800debe:	4605      	mov	r5, r0
 800dec0:	b930      	cbnz	r0, 800ded0 <__d2b+0x20>
 800dec2:	4602      	mov	r2, r0
 800dec4:	f240 310f 	movw	r1, #783	; 0x30f
 800dec8:	4b22      	ldr	r3, [pc, #136]	; (800df54 <__d2b+0xa4>)
 800deca:	4823      	ldr	r0, [pc, #140]	; (800df58 <__d2b+0xa8>)
 800decc:	f001 fb60 	bl	800f590 <__assert_func>
 800ded0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ded4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ded8:	bb24      	cbnz	r4, 800df24 <__d2b+0x74>
 800deda:	2f00      	cmp	r7, #0
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	d026      	beq.n	800df2e <__d2b+0x7e>
 800dee0:	4668      	mov	r0, sp
 800dee2:	9700      	str	r7, [sp, #0]
 800dee4:	f7ff fd22 	bl	800d92c <__lo0bits>
 800dee8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800deec:	b1e8      	cbz	r0, 800df2a <__d2b+0x7a>
 800deee:	f1c0 0320 	rsb	r3, r0, #32
 800def2:	fa02 f303 	lsl.w	r3, r2, r3
 800def6:	430b      	orrs	r3, r1
 800def8:	40c2      	lsrs	r2, r0
 800defa:	616b      	str	r3, [r5, #20]
 800defc:	9201      	str	r2, [sp, #4]
 800defe:	9b01      	ldr	r3, [sp, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	bf14      	ite	ne
 800df04:	2102      	movne	r1, #2
 800df06:	2101      	moveq	r1, #1
 800df08:	61ab      	str	r3, [r5, #24]
 800df0a:	6129      	str	r1, [r5, #16]
 800df0c:	b1bc      	cbz	r4, 800df3e <__d2b+0x8e>
 800df0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800df12:	4404      	add	r4, r0
 800df14:	6034      	str	r4, [r6, #0]
 800df16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df1c:	6018      	str	r0, [r3, #0]
 800df1e:	4628      	mov	r0, r5
 800df20:	b003      	add	sp, #12
 800df22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df28:	e7d7      	b.n	800deda <__d2b+0x2a>
 800df2a:	6169      	str	r1, [r5, #20]
 800df2c:	e7e7      	b.n	800defe <__d2b+0x4e>
 800df2e:	a801      	add	r0, sp, #4
 800df30:	f7ff fcfc 	bl	800d92c <__lo0bits>
 800df34:	9b01      	ldr	r3, [sp, #4]
 800df36:	2101      	movs	r1, #1
 800df38:	616b      	str	r3, [r5, #20]
 800df3a:	3020      	adds	r0, #32
 800df3c:	e7e5      	b.n	800df0a <__d2b+0x5a>
 800df3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df42:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800df46:	6030      	str	r0, [r6, #0]
 800df48:	6918      	ldr	r0, [r3, #16]
 800df4a:	f7ff fccf 	bl	800d8ec <__hi0bits>
 800df4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800df52:	e7e2      	b.n	800df1a <__d2b+0x6a>
 800df54:	08010067 	.word	0x08010067
 800df58:	08010078 	.word	0x08010078

0800df5c <__ratio>:
 800df5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	4688      	mov	r8, r1
 800df62:	4669      	mov	r1, sp
 800df64:	4681      	mov	r9, r0
 800df66:	f7ff ff5b 	bl	800de20 <__b2d>
 800df6a:	460f      	mov	r7, r1
 800df6c:	4604      	mov	r4, r0
 800df6e:	460d      	mov	r5, r1
 800df70:	4640      	mov	r0, r8
 800df72:	a901      	add	r1, sp, #4
 800df74:	f7ff ff54 	bl	800de20 <__b2d>
 800df78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800df80:	468b      	mov	fp, r1
 800df82:	eba3 0c02 	sub.w	ip, r3, r2
 800df86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df8a:	1a9b      	subs	r3, r3, r2
 800df8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800df90:	2b00      	cmp	r3, #0
 800df92:	bfd5      	itete	le
 800df94:	460a      	movle	r2, r1
 800df96:	462a      	movgt	r2, r5
 800df98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df9c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dfa0:	bfd8      	it	le
 800dfa2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dfa6:	465b      	mov	r3, fp
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	4639      	mov	r1, r7
 800dfac:	4620      	mov	r0, r4
 800dfae:	f7f2 fc29 	bl	8000804 <__aeabi_ddiv>
 800dfb2:	b003      	add	sp, #12
 800dfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfb8 <__copybits>:
 800dfb8:	3901      	subs	r1, #1
 800dfba:	b570      	push	{r4, r5, r6, lr}
 800dfbc:	1149      	asrs	r1, r1, #5
 800dfbe:	6914      	ldr	r4, [r2, #16]
 800dfc0:	3101      	adds	r1, #1
 800dfc2:	f102 0314 	add.w	r3, r2, #20
 800dfc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfce:	1f05      	subs	r5, r0, #4
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	d30c      	bcc.n	800dfee <__copybits+0x36>
 800dfd4:	1aa3      	subs	r3, r4, r2
 800dfd6:	3b11      	subs	r3, #17
 800dfd8:	f023 0303 	bic.w	r3, r3, #3
 800dfdc:	3211      	adds	r2, #17
 800dfde:	42a2      	cmp	r2, r4
 800dfe0:	bf88      	it	hi
 800dfe2:	2300      	movhi	r3, #0
 800dfe4:	4418      	add	r0, r3
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	4288      	cmp	r0, r1
 800dfea:	d305      	bcc.n	800dff8 <__copybits+0x40>
 800dfec:	bd70      	pop	{r4, r5, r6, pc}
 800dfee:	f853 6b04 	ldr.w	r6, [r3], #4
 800dff2:	f845 6f04 	str.w	r6, [r5, #4]!
 800dff6:	e7eb      	b.n	800dfd0 <__copybits+0x18>
 800dff8:	f840 3b04 	str.w	r3, [r0], #4
 800dffc:	e7f4      	b.n	800dfe8 <__copybits+0x30>

0800dffe <__any_on>:
 800dffe:	f100 0214 	add.w	r2, r0, #20
 800e002:	6900      	ldr	r0, [r0, #16]
 800e004:	114b      	asrs	r3, r1, #5
 800e006:	4298      	cmp	r0, r3
 800e008:	b510      	push	{r4, lr}
 800e00a:	db11      	blt.n	800e030 <__any_on+0x32>
 800e00c:	dd0a      	ble.n	800e024 <__any_on+0x26>
 800e00e:	f011 011f 	ands.w	r1, r1, #31
 800e012:	d007      	beq.n	800e024 <__any_on+0x26>
 800e014:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e018:	fa24 f001 	lsr.w	r0, r4, r1
 800e01c:	fa00 f101 	lsl.w	r1, r0, r1
 800e020:	428c      	cmp	r4, r1
 800e022:	d10b      	bne.n	800e03c <__any_on+0x3e>
 800e024:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e028:	4293      	cmp	r3, r2
 800e02a:	d803      	bhi.n	800e034 <__any_on+0x36>
 800e02c:	2000      	movs	r0, #0
 800e02e:	bd10      	pop	{r4, pc}
 800e030:	4603      	mov	r3, r0
 800e032:	e7f7      	b.n	800e024 <__any_on+0x26>
 800e034:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e038:	2900      	cmp	r1, #0
 800e03a:	d0f5      	beq.n	800e028 <__any_on+0x2a>
 800e03c:	2001      	movs	r0, #1
 800e03e:	e7f6      	b.n	800e02e <__any_on+0x30>

0800e040 <sulp>:
 800e040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e044:	460f      	mov	r7, r1
 800e046:	4690      	mov	r8, r2
 800e048:	f7ff feca 	bl	800dde0 <__ulp>
 800e04c:	4604      	mov	r4, r0
 800e04e:	460d      	mov	r5, r1
 800e050:	f1b8 0f00 	cmp.w	r8, #0
 800e054:	d011      	beq.n	800e07a <sulp+0x3a>
 800e056:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800e05a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e05e:	2b00      	cmp	r3, #0
 800e060:	dd0b      	ble.n	800e07a <sulp+0x3a>
 800e062:	2400      	movs	r4, #0
 800e064:	051b      	lsls	r3, r3, #20
 800e066:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e06a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e06e:	4622      	mov	r2, r4
 800e070:	462b      	mov	r3, r5
 800e072:	f7f2 fa9d 	bl	80005b0 <__aeabi_dmul>
 800e076:	4604      	mov	r4, r0
 800e078:	460d      	mov	r5, r1
 800e07a:	4620      	mov	r0, r4
 800e07c:	4629      	mov	r1, r5
 800e07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e082:	0000      	movs	r0, r0
 800e084:	0000      	movs	r0, r0
	...

0800e088 <_strtod_l>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	b09f      	sub	sp, #124	; 0x7c
 800e08e:	9217      	str	r2, [sp, #92]	; 0x5c
 800e090:	2200      	movs	r2, #0
 800e092:	4604      	mov	r4, r0
 800e094:	921a      	str	r2, [sp, #104]	; 0x68
 800e096:	460d      	mov	r5, r1
 800e098:	f04f 0800 	mov.w	r8, #0
 800e09c:	f04f 0900 	mov.w	r9, #0
 800e0a0:	460a      	mov	r2, r1
 800e0a2:	9219      	str	r2, [sp, #100]	; 0x64
 800e0a4:	7811      	ldrb	r1, [r2, #0]
 800e0a6:	292b      	cmp	r1, #43	; 0x2b
 800e0a8:	d04a      	beq.n	800e140 <_strtod_l+0xb8>
 800e0aa:	d838      	bhi.n	800e11e <_strtod_l+0x96>
 800e0ac:	290d      	cmp	r1, #13
 800e0ae:	d832      	bhi.n	800e116 <_strtod_l+0x8e>
 800e0b0:	2908      	cmp	r1, #8
 800e0b2:	d832      	bhi.n	800e11a <_strtod_l+0x92>
 800e0b4:	2900      	cmp	r1, #0
 800e0b6:	d03b      	beq.n	800e130 <_strtod_l+0xa8>
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	920e      	str	r2, [sp, #56]	; 0x38
 800e0bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800e0be:	7832      	ldrb	r2, [r6, #0]
 800e0c0:	2a30      	cmp	r2, #48	; 0x30
 800e0c2:	f040 80b2 	bne.w	800e22a <_strtod_l+0x1a2>
 800e0c6:	7872      	ldrb	r2, [r6, #1]
 800e0c8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e0cc:	2a58      	cmp	r2, #88	; 0x58
 800e0ce:	d16e      	bne.n	800e1ae <_strtod_l+0x126>
 800e0d0:	9302      	str	r3, [sp, #8]
 800e0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	9301      	str	r3, [sp, #4]
 800e0d8:	ab1a      	add	r3, sp, #104	; 0x68
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	4a8c      	ldr	r2, [pc, #560]	; (800e310 <_strtod_l+0x288>)
 800e0de:	ab1b      	add	r3, sp, #108	; 0x6c
 800e0e0:	a919      	add	r1, sp, #100	; 0x64
 800e0e2:	f001 faef 	bl	800f6c4 <__gethex>
 800e0e6:	f010 070f 	ands.w	r7, r0, #15
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	d005      	beq.n	800e0fa <_strtod_l+0x72>
 800e0ee:	2f06      	cmp	r7, #6
 800e0f0:	d128      	bne.n	800e144 <_strtod_l+0xbc>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	3601      	adds	r6, #1
 800e0f6:	9619      	str	r6, [sp, #100]	; 0x64
 800e0f8:	930e      	str	r3, [sp, #56]	; 0x38
 800e0fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f040 85a0 	bne.w	800ec42 <_strtod_l+0xbba>
 800e102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e104:	b1cb      	cbz	r3, 800e13a <_strtod_l+0xb2>
 800e106:	4642      	mov	r2, r8
 800e108:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e10c:	4610      	mov	r0, r2
 800e10e:	4619      	mov	r1, r3
 800e110:	b01f      	add	sp, #124	; 0x7c
 800e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	2920      	cmp	r1, #32
 800e118:	d1ce      	bne.n	800e0b8 <_strtod_l+0x30>
 800e11a:	3201      	adds	r2, #1
 800e11c:	e7c1      	b.n	800e0a2 <_strtod_l+0x1a>
 800e11e:	292d      	cmp	r1, #45	; 0x2d
 800e120:	d1ca      	bne.n	800e0b8 <_strtod_l+0x30>
 800e122:	2101      	movs	r1, #1
 800e124:	910e      	str	r1, [sp, #56]	; 0x38
 800e126:	1c51      	adds	r1, r2, #1
 800e128:	9119      	str	r1, [sp, #100]	; 0x64
 800e12a:	7852      	ldrb	r2, [r2, #1]
 800e12c:	2a00      	cmp	r2, #0
 800e12e:	d1c5      	bne.n	800e0bc <_strtod_l+0x34>
 800e130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e132:	9519      	str	r5, [sp, #100]	; 0x64
 800e134:	2b00      	cmp	r3, #0
 800e136:	f040 8582 	bne.w	800ec3e <_strtod_l+0xbb6>
 800e13a:	4642      	mov	r2, r8
 800e13c:	464b      	mov	r3, r9
 800e13e:	e7e5      	b.n	800e10c <_strtod_l+0x84>
 800e140:	2100      	movs	r1, #0
 800e142:	e7ef      	b.n	800e124 <_strtod_l+0x9c>
 800e144:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e146:	b13a      	cbz	r2, 800e158 <_strtod_l+0xd0>
 800e148:	2135      	movs	r1, #53	; 0x35
 800e14a:	a81c      	add	r0, sp, #112	; 0x70
 800e14c:	f7ff ff34 	bl	800dfb8 <__copybits>
 800e150:	4620      	mov	r0, r4
 800e152:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e154:	f7ff fb18 	bl	800d788 <_Bfree>
 800e158:	3f01      	subs	r7, #1
 800e15a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e15c:	2f04      	cmp	r7, #4
 800e15e:	d806      	bhi.n	800e16e <_strtod_l+0xe6>
 800e160:	e8df f007 	tbb	[pc, r7]
 800e164:	201d0314 	.word	0x201d0314
 800e168:	14          	.byte	0x14
 800e169:	00          	.byte	0x00
 800e16a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800e16e:	05e9      	lsls	r1, r5, #23
 800e170:	bf48      	it	mi
 800e172:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e17a:	0d1b      	lsrs	r3, r3, #20
 800e17c:	051b      	lsls	r3, r3, #20
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1bb      	bne.n	800e0fa <_strtod_l+0x72>
 800e182:	f7fe fb09 	bl	800c798 <__errno>
 800e186:	2322      	movs	r3, #34	; 0x22
 800e188:	6003      	str	r3, [r0, #0]
 800e18a:	e7b6      	b.n	800e0fa <_strtod_l+0x72>
 800e18c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e190:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800e194:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e198:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e19c:	e7e7      	b.n	800e16e <_strtod_l+0xe6>
 800e19e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800e314 <_strtod_l+0x28c>
 800e1a2:	e7e4      	b.n	800e16e <_strtod_l+0xe6>
 800e1a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e1a8:	f04f 38ff 	mov.w	r8, #4294967295
 800e1ac:	e7df      	b.n	800e16e <_strtod_l+0xe6>
 800e1ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	9219      	str	r2, [sp, #100]	; 0x64
 800e1b4:	785b      	ldrb	r3, [r3, #1]
 800e1b6:	2b30      	cmp	r3, #48	; 0x30
 800e1b8:	d0f9      	beq.n	800e1ae <_strtod_l+0x126>
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d09d      	beq.n	800e0fa <_strtod_l+0x72>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	f04f 0a00 	mov.w	sl, #0
 800e1c4:	220a      	movs	r2, #10
 800e1c6:	46d3      	mov	fp, sl
 800e1c8:	9305      	str	r3, [sp, #20]
 800e1ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1cc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800e1d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1d2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800e1d4:	7806      	ldrb	r6, [r0, #0]
 800e1d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e1da:	b2d9      	uxtb	r1, r3
 800e1dc:	2909      	cmp	r1, #9
 800e1de:	d926      	bls.n	800e22e <_strtod_l+0x1a6>
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	494d      	ldr	r1, [pc, #308]	; (800e318 <_strtod_l+0x290>)
 800e1e4:	f001 f989 	bl	800f4fa <strncmp>
 800e1e8:	2800      	cmp	r0, #0
 800e1ea:	d030      	beq.n	800e24e <_strtod_l+0x1c6>
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	4632      	mov	r2, r6
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	465e      	mov	r6, fp
 800e1f4:	9008      	str	r0, [sp, #32]
 800e1f6:	2a65      	cmp	r2, #101	; 0x65
 800e1f8:	d001      	beq.n	800e1fe <_strtod_l+0x176>
 800e1fa:	2a45      	cmp	r2, #69	; 0x45
 800e1fc:	d113      	bne.n	800e226 <_strtod_l+0x19e>
 800e1fe:	b91e      	cbnz	r6, 800e208 <_strtod_l+0x180>
 800e200:	9a05      	ldr	r2, [sp, #20]
 800e202:	4302      	orrs	r2, r0
 800e204:	d094      	beq.n	800e130 <_strtod_l+0xa8>
 800e206:	2600      	movs	r6, #0
 800e208:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800e20a:	1c6a      	adds	r2, r5, #1
 800e20c:	9219      	str	r2, [sp, #100]	; 0x64
 800e20e:	786a      	ldrb	r2, [r5, #1]
 800e210:	2a2b      	cmp	r2, #43	; 0x2b
 800e212:	d074      	beq.n	800e2fe <_strtod_l+0x276>
 800e214:	2a2d      	cmp	r2, #45	; 0x2d
 800e216:	d078      	beq.n	800e30a <_strtod_l+0x282>
 800e218:	f04f 0c00 	mov.w	ip, #0
 800e21c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e220:	2909      	cmp	r1, #9
 800e222:	d97f      	bls.n	800e324 <_strtod_l+0x29c>
 800e224:	9519      	str	r5, [sp, #100]	; 0x64
 800e226:	2700      	movs	r7, #0
 800e228:	e09e      	b.n	800e368 <_strtod_l+0x2e0>
 800e22a:	2300      	movs	r3, #0
 800e22c:	e7c8      	b.n	800e1c0 <_strtod_l+0x138>
 800e22e:	f1bb 0f08 	cmp.w	fp, #8
 800e232:	bfd8      	it	le
 800e234:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800e236:	f100 0001 	add.w	r0, r0, #1
 800e23a:	bfd6      	itet	le
 800e23c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e240:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e244:	930a      	strle	r3, [sp, #40]	; 0x28
 800e246:	f10b 0b01 	add.w	fp, fp, #1
 800e24a:	9019      	str	r0, [sp, #100]	; 0x64
 800e24c:	e7c1      	b.n	800e1d2 <_strtod_l+0x14a>
 800e24e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e250:	1c5a      	adds	r2, r3, #1
 800e252:	9219      	str	r2, [sp, #100]	; 0x64
 800e254:	785a      	ldrb	r2, [r3, #1]
 800e256:	f1bb 0f00 	cmp.w	fp, #0
 800e25a:	d037      	beq.n	800e2cc <_strtod_l+0x244>
 800e25c:	465e      	mov	r6, fp
 800e25e:	9008      	str	r0, [sp, #32]
 800e260:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e264:	2b09      	cmp	r3, #9
 800e266:	d912      	bls.n	800e28e <_strtod_l+0x206>
 800e268:	2301      	movs	r3, #1
 800e26a:	e7c4      	b.n	800e1f6 <_strtod_l+0x16e>
 800e26c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e26e:	3001      	adds	r0, #1
 800e270:	1c5a      	adds	r2, r3, #1
 800e272:	9219      	str	r2, [sp, #100]	; 0x64
 800e274:	785a      	ldrb	r2, [r3, #1]
 800e276:	2a30      	cmp	r2, #48	; 0x30
 800e278:	d0f8      	beq.n	800e26c <_strtod_l+0x1e4>
 800e27a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e27e:	2b08      	cmp	r3, #8
 800e280:	f200 84e4 	bhi.w	800ec4c <_strtod_l+0xbc4>
 800e284:	9008      	str	r0, [sp, #32]
 800e286:	2000      	movs	r0, #0
 800e288:	4606      	mov	r6, r0
 800e28a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e28c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e28e:	3a30      	subs	r2, #48	; 0x30
 800e290:	f100 0301 	add.w	r3, r0, #1
 800e294:	d014      	beq.n	800e2c0 <_strtod_l+0x238>
 800e296:	9908      	ldr	r1, [sp, #32]
 800e298:	eb00 0c06 	add.w	ip, r0, r6
 800e29c:	4419      	add	r1, r3
 800e29e:	9108      	str	r1, [sp, #32]
 800e2a0:	4633      	mov	r3, r6
 800e2a2:	210a      	movs	r1, #10
 800e2a4:	4563      	cmp	r3, ip
 800e2a6:	d113      	bne.n	800e2d0 <_strtod_l+0x248>
 800e2a8:	1833      	adds	r3, r6, r0
 800e2aa:	2b08      	cmp	r3, #8
 800e2ac:	f106 0601 	add.w	r6, r6, #1
 800e2b0:	4406      	add	r6, r0
 800e2b2:	dc1a      	bgt.n	800e2ea <_strtod_l+0x262>
 800e2b4:	230a      	movs	r3, #10
 800e2b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e2b8:	fb03 2301 	mla	r3, r3, r1, r2
 800e2bc:	930a      	str	r3, [sp, #40]	; 0x28
 800e2be:	2300      	movs	r3, #0
 800e2c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	1c51      	adds	r1, r2, #1
 800e2c6:	9119      	str	r1, [sp, #100]	; 0x64
 800e2c8:	7852      	ldrb	r2, [r2, #1]
 800e2ca:	e7c9      	b.n	800e260 <_strtod_l+0x1d8>
 800e2cc:	4658      	mov	r0, fp
 800e2ce:	e7d2      	b.n	800e276 <_strtod_l+0x1ee>
 800e2d0:	2b08      	cmp	r3, #8
 800e2d2:	f103 0301 	add.w	r3, r3, #1
 800e2d6:	dc03      	bgt.n	800e2e0 <_strtod_l+0x258>
 800e2d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800e2da:	434f      	muls	r7, r1
 800e2dc:	970a      	str	r7, [sp, #40]	; 0x28
 800e2de:	e7e1      	b.n	800e2a4 <_strtod_l+0x21c>
 800e2e0:	2b10      	cmp	r3, #16
 800e2e2:	bfd8      	it	le
 800e2e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e2e8:	e7dc      	b.n	800e2a4 <_strtod_l+0x21c>
 800e2ea:	2e10      	cmp	r6, #16
 800e2ec:	bfdc      	itt	le
 800e2ee:	230a      	movle	r3, #10
 800e2f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e2f4:	e7e3      	b.n	800e2be <_strtod_l+0x236>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	9308      	str	r3, [sp, #32]
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e780      	b.n	800e200 <_strtod_l+0x178>
 800e2fe:	f04f 0c00 	mov.w	ip, #0
 800e302:	1caa      	adds	r2, r5, #2
 800e304:	9219      	str	r2, [sp, #100]	; 0x64
 800e306:	78aa      	ldrb	r2, [r5, #2]
 800e308:	e788      	b.n	800e21c <_strtod_l+0x194>
 800e30a:	f04f 0c01 	mov.w	ip, #1
 800e30e:	e7f8      	b.n	800e302 <_strtod_l+0x27a>
 800e310:	080101d8 	.word	0x080101d8
 800e314:	7ff00000 	.word	0x7ff00000
 800e318:	080101d4 	.word	0x080101d4
 800e31c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e31e:	1c51      	adds	r1, r2, #1
 800e320:	9119      	str	r1, [sp, #100]	; 0x64
 800e322:	7852      	ldrb	r2, [r2, #1]
 800e324:	2a30      	cmp	r2, #48	; 0x30
 800e326:	d0f9      	beq.n	800e31c <_strtod_l+0x294>
 800e328:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e32c:	2908      	cmp	r1, #8
 800e32e:	f63f af7a 	bhi.w	800e226 <_strtod_l+0x19e>
 800e332:	3a30      	subs	r2, #48	; 0x30
 800e334:	9209      	str	r2, [sp, #36]	; 0x24
 800e336:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e338:	920c      	str	r2, [sp, #48]	; 0x30
 800e33a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e33c:	1c57      	adds	r7, r2, #1
 800e33e:	9719      	str	r7, [sp, #100]	; 0x64
 800e340:	7852      	ldrb	r2, [r2, #1]
 800e342:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e346:	f1be 0f09 	cmp.w	lr, #9
 800e34a:	d938      	bls.n	800e3be <_strtod_l+0x336>
 800e34c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e34e:	1a7f      	subs	r7, r7, r1
 800e350:	2f08      	cmp	r7, #8
 800e352:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e356:	dc03      	bgt.n	800e360 <_strtod_l+0x2d8>
 800e358:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e35a:	428f      	cmp	r7, r1
 800e35c:	bfa8      	it	ge
 800e35e:	460f      	movge	r7, r1
 800e360:	f1bc 0f00 	cmp.w	ip, #0
 800e364:	d000      	beq.n	800e368 <_strtod_l+0x2e0>
 800e366:	427f      	negs	r7, r7
 800e368:	2e00      	cmp	r6, #0
 800e36a:	d14f      	bne.n	800e40c <_strtod_l+0x384>
 800e36c:	9905      	ldr	r1, [sp, #20]
 800e36e:	4301      	orrs	r1, r0
 800e370:	f47f aec3 	bne.w	800e0fa <_strtod_l+0x72>
 800e374:	2b00      	cmp	r3, #0
 800e376:	f47f aedb 	bne.w	800e130 <_strtod_l+0xa8>
 800e37a:	2a69      	cmp	r2, #105	; 0x69
 800e37c:	d029      	beq.n	800e3d2 <_strtod_l+0x34a>
 800e37e:	dc26      	bgt.n	800e3ce <_strtod_l+0x346>
 800e380:	2a49      	cmp	r2, #73	; 0x49
 800e382:	d026      	beq.n	800e3d2 <_strtod_l+0x34a>
 800e384:	2a4e      	cmp	r2, #78	; 0x4e
 800e386:	f47f aed3 	bne.w	800e130 <_strtod_l+0xa8>
 800e38a:	499a      	ldr	r1, [pc, #616]	; (800e5f4 <_strtod_l+0x56c>)
 800e38c:	a819      	add	r0, sp, #100	; 0x64
 800e38e:	f001 fbdb 	bl	800fb48 <__match>
 800e392:	2800      	cmp	r0, #0
 800e394:	f43f aecc 	beq.w	800e130 <_strtod_l+0xa8>
 800e398:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b28      	cmp	r3, #40	; 0x28
 800e39e:	d12f      	bne.n	800e400 <_strtod_l+0x378>
 800e3a0:	4995      	ldr	r1, [pc, #596]	; (800e5f8 <_strtod_l+0x570>)
 800e3a2:	aa1c      	add	r2, sp, #112	; 0x70
 800e3a4:	a819      	add	r0, sp, #100	; 0x64
 800e3a6:	f001 fbe3 	bl	800fb70 <__hexnan>
 800e3aa:	2805      	cmp	r0, #5
 800e3ac:	d128      	bne.n	800e400 <_strtod_l+0x378>
 800e3ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e3b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e3b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e3b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e3bc:	e69d      	b.n	800e0fa <_strtod_l+0x72>
 800e3be:	210a      	movs	r1, #10
 800e3c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e3c2:	fb01 2107 	mla	r1, r1, r7, r2
 800e3c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e3ca:	9209      	str	r2, [sp, #36]	; 0x24
 800e3cc:	e7b5      	b.n	800e33a <_strtod_l+0x2b2>
 800e3ce:	2a6e      	cmp	r2, #110	; 0x6e
 800e3d0:	e7d9      	b.n	800e386 <_strtod_l+0x2fe>
 800e3d2:	498a      	ldr	r1, [pc, #552]	; (800e5fc <_strtod_l+0x574>)
 800e3d4:	a819      	add	r0, sp, #100	; 0x64
 800e3d6:	f001 fbb7 	bl	800fb48 <__match>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	f43f aea8 	beq.w	800e130 <_strtod_l+0xa8>
 800e3e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e3e2:	4987      	ldr	r1, [pc, #540]	; (800e600 <_strtod_l+0x578>)
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	a819      	add	r0, sp, #100	; 0x64
 800e3e8:	9319      	str	r3, [sp, #100]	; 0x64
 800e3ea:	f001 fbad 	bl	800fb48 <__match>
 800e3ee:	b910      	cbnz	r0, 800e3f6 <_strtod_l+0x36e>
 800e3f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	9319      	str	r3, [sp, #100]	; 0x64
 800e3f6:	f04f 0800 	mov.w	r8, #0
 800e3fa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800e604 <_strtod_l+0x57c>
 800e3fe:	e67c      	b.n	800e0fa <_strtod_l+0x72>
 800e400:	4881      	ldr	r0, [pc, #516]	; (800e608 <_strtod_l+0x580>)
 800e402:	f001 f8bf 	bl	800f584 <nan>
 800e406:	4680      	mov	r8, r0
 800e408:	4689      	mov	r9, r1
 800e40a:	e676      	b.n	800e0fa <_strtod_l+0x72>
 800e40c:	9b08      	ldr	r3, [sp, #32]
 800e40e:	f1bb 0f00 	cmp.w	fp, #0
 800e412:	bf08      	it	eq
 800e414:	46b3      	moveq	fp, r6
 800e416:	1afb      	subs	r3, r7, r3
 800e418:	2e10      	cmp	r6, #16
 800e41a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e41c:	4635      	mov	r5, r6
 800e41e:	9309      	str	r3, [sp, #36]	; 0x24
 800e420:	bfa8      	it	ge
 800e422:	2510      	movge	r5, #16
 800e424:	f7f2 f84a 	bl	80004bc <__aeabi_ui2d>
 800e428:	2e09      	cmp	r6, #9
 800e42a:	4680      	mov	r8, r0
 800e42c:	4689      	mov	r9, r1
 800e42e:	dd13      	ble.n	800e458 <_strtod_l+0x3d0>
 800e430:	4b76      	ldr	r3, [pc, #472]	; (800e60c <_strtod_l+0x584>)
 800e432:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e436:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e43a:	f7f2 f8b9 	bl	80005b0 <__aeabi_dmul>
 800e43e:	4680      	mov	r8, r0
 800e440:	4650      	mov	r0, sl
 800e442:	4689      	mov	r9, r1
 800e444:	f7f2 f83a 	bl	80004bc <__aeabi_ui2d>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4640      	mov	r0, r8
 800e44e:	4649      	mov	r1, r9
 800e450:	f7f1 fef8 	bl	8000244 <__adddf3>
 800e454:	4680      	mov	r8, r0
 800e456:	4689      	mov	r9, r1
 800e458:	2e0f      	cmp	r6, #15
 800e45a:	dc36      	bgt.n	800e4ca <_strtod_l+0x442>
 800e45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f43f ae4b 	beq.w	800e0fa <_strtod_l+0x72>
 800e464:	dd22      	ble.n	800e4ac <_strtod_l+0x424>
 800e466:	2b16      	cmp	r3, #22
 800e468:	dc09      	bgt.n	800e47e <_strtod_l+0x3f6>
 800e46a:	4968      	ldr	r1, [pc, #416]	; (800e60c <_strtod_l+0x584>)
 800e46c:	4642      	mov	r2, r8
 800e46e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e472:	464b      	mov	r3, r9
 800e474:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e478:	f7f2 f89a 	bl	80005b0 <__aeabi_dmul>
 800e47c:	e7c3      	b.n	800e406 <_strtod_l+0x37e>
 800e47e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e480:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e484:	4293      	cmp	r3, r2
 800e486:	db20      	blt.n	800e4ca <_strtod_l+0x442>
 800e488:	4c60      	ldr	r4, [pc, #384]	; (800e60c <_strtod_l+0x584>)
 800e48a:	f1c6 060f 	rsb	r6, r6, #15
 800e48e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e492:	4642      	mov	r2, r8
 800e494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e498:	464b      	mov	r3, r9
 800e49a:	f7f2 f889 	bl	80005b0 <__aeabi_dmul>
 800e49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a0:	1b9e      	subs	r6, r3, r6
 800e4a2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e4a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e4aa:	e7e5      	b.n	800e478 <_strtod_l+0x3f0>
 800e4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ae:	3316      	adds	r3, #22
 800e4b0:	db0b      	blt.n	800e4ca <_strtod_l+0x442>
 800e4b2:	9b08      	ldr	r3, [sp, #32]
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	1bdf      	subs	r7, r3, r7
 800e4b8:	4b54      	ldr	r3, [pc, #336]	; (800e60c <_strtod_l+0x584>)
 800e4ba:	4649      	mov	r1, r9
 800e4bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c4:	f7f2 f99e 	bl	8000804 <__aeabi_ddiv>
 800e4c8:	e79d      	b.n	800e406 <_strtod_l+0x37e>
 800e4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4cc:	1b75      	subs	r5, r6, r5
 800e4ce:	441d      	add	r5, r3
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	dd70      	ble.n	800e5b6 <_strtod_l+0x52e>
 800e4d4:	f015 030f 	ands.w	r3, r5, #15
 800e4d8:	d00a      	beq.n	800e4f0 <_strtod_l+0x468>
 800e4da:	494c      	ldr	r1, [pc, #304]	; (800e60c <_strtod_l+0x584>)
 800e4dc:	4642      	mov	r2, r8
 800e4de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4e6:	464b      	mov	r3, r9
 800e4e8:	f7f2 f862 	bl	80005b0 <__aeabi_dmul>
 800e4ec:	4680      	mov	r8, r0
 800e4ee:	4689      	mov	r9, r1
 800e4f0:	f035 050f 	bics.w	r5, r5, #15
 800e4f4:	d04d      	beq.n	800e592 <_strtod_l+0x50a>
 800e4f6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e4fa:	dd22      	ble.n	800e542 <_strtod_l+0x4ba>
 800e4fc:	2600      	movs	r6, #0
 800e4fe:	46b3      	mov	fp, r6
 800e500:	960b      	str	r6, [sp, #44]	; 0x2c
 800e502:	9608      	str	r6, [sp, #32]
 800e504:	2322      	movs	r3, #34	; 0x22
 800e506:	f04f 0800 	mov.w	r8, #0
 800e50a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800e604 <_strtod_l+0x57c>
 800e50e:	6023      	str	r3, [r4, #0]
 800e510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e512:	2b00      	cmp	r3, #0
 800e514:	f43f adf1 	beq.w	800e0fa <_strtod_l+0x72>
 800e518:	4620      	mov	r0, r4
 800e51a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e51c:	f7ff f934 	bl	800d788 <_Bfree>
 800e520:	4620      	mov	r0, r4
 800e522:	9908      	ldr	r1, [sp, #32]
 800e524:	f7ff f930 	bl	800d788 <_Bfree>
 800e528:	4659      	mov	r1, fp
 800e52a:	4620      	mov	r0, r4
 800e52c:	f7ff f92c 	bl	800d788 <_Bfree>
 800e530:	4620      	mov	r0, r4
 800e532:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e534:	f7ff f928 	bl	800d788 <_Bfree>
 800e538:	4631      	mov	r1, r6
 800e53a:	4620      	mov	r0, r4
 800e53c:	f7ff f924 	bl	800d788 <_Bfree>
 800e540:	e5db      	b.n	800e0fa <_strtod_l+0x72>
 800e542:	4b33      	ldr	r3, [pc, #204]	; (800e610 <_strtod_l+0x588>)
 800e544:	4640      	mov	r0, r8
 800e546:	9305      	str	r3, [sp, #20]
 800e548:	2300      	movs	r3, #0
 800e54a:	4649      	mov	r1, r9
 800e54c:	469a      	mov	sl, r3
 800e54e:	112d      	asrs	r5, r5, #4
 800e550:	2d01      	cmp	r5, #1
 800e552:	dc21      	bgt.n	800e598 <_strtod_l+0x510>
 800e554:	b10b      	cbz	r3, 800e55a <_strtod_l+0x4d2>
 800e556:	4680      	mov	r8, r0
 800e558:	4689      	mov	r9, r1
 800e55a:	492d      	ldr	r1, [pc, #180]	; (800e610 <_strtod_l+0x588>)
 800e55c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e560:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e564:	4642      	mov	r2, r8
 800e566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e56a:	464b      	mov	r3, r9
 800e56c:	f7f2 f820 	bl	80005b0 <__aeabi_dmul>
 800e570:	4b24      	ldr	r3, [pc, #144]	; (800e604 <_strtod_l+0x57c>)
 800e572:	460a      	mov	r2, r1
 800e574:	400b      	ands	r3, r1
 800e576:	4927      	ldr	r1, [pc, #156]	; (800e614 <_strtod_l+0x58c>)
 800e578:	4680      	mov	r8, r0
 800e57a:	428b      	cmp	r3, r1
 800e57c:	d8be      	bhi.n	800e4fc <_strtod_l+0x474>
 800e57e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e582:	428b      	cmp	r3, r1
 800e584:	bf86      	itte	hi
 800e586:	f04f 38ff 	movhi.w	r8, #4294967295
 800e58a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800e618 <_strtod_l+0x590>
 800e58e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e592:	2300      	movs	r3, #0
 800e594:	9305      	str	r3, [sp, #20]
 800e596:	e07b      	b.n	800e690 <_strtod_l+0x608>
 800e598:	07ea      	lsls	r2, r5, #31
 800e59a:	d505      	bpl.n	800e5a8 <_strtod_l+0x520>
 800e59c:	9b05      	ldr	r3, [sp, #20]
 800e59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a2:	f7f2 f805 	bl	80005b0 <__aeabi_dmul>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	9a05      	ldr	r2, [sp, #20]
 800e5aa:	f10a 0a01 	add.w	sl, sl, #1
 800e5ae:	3208      	adds	r2, #8
 800e5b0:	106d      	asrs	r5, r5, #1
 800e5b2:	9205      	str	r2, [sp, #20]
 800e5b4:	e7cc      	b.n	800e550 <_strtod_l+0x4c8>
 800e5b6:	d0ec      	beq.n	800e592 <_strtod_l+0x50a>
 800e5b8:	426d      	negs	r5, r5
 800e5ba:	f015 020f 	ands.w	r2, r5, #15
 800e5be:	d00a      	beq.n	800e5d6 <_strtod_l+0x54e>
 800e5c0:	4b12      	ldr	r3, [pc, #72]	; (800e60c <_strtod_l+0x584>)
 800e5c2:	4640      	mov	r0, r8
 800e5c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5c8:	4649      	mov	r1, r9
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	f7f2 f919 	bl	8000804 <__aeabi_ddiv>
 800e5d2:	4680      	mov	r8, r0
 800e5d4:	4689      	mov	r9, r1
 800e5d6:	112d      	asrs	r5, r5, #4
 800e5d8:	d0db      	beq.n	800e592 <_strtod_l+0x50a>
 800e5da:	2d1f      	cmp	r5, #31
 800e5dc:	dd1e      	ble.n	800e61c <_strtod_l+0x594>
 800e5de:	2600      	movs	r6, #0
 800e5e0:	46b3      	mov	fp, r6
 800e5e2:	960b      	str	r6, [sp, #44]	; 0x2c
 800e5e4:	9608      	str	r6, [sp, #32]
 800e5e6:	2322      	movs	r3, #34	; 0x22
 800e5e8:	f04f 0800 	mov.w	r8, #0
 800e5ec:	f04f 0900 	mov.w	r9, #0
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	e78d      	b.n	800e510 <_strtod_l+0x488>
 800e5f4:	0800ffbf 	.word	0x0800ffbf
 800e5f8:	080101ec 	.word	0x080101ec
 800e5fc:	0800ffb7 	.word	0x0800ffb7
 800e600:	0800ffee 	.word	0x0800ffee
 800e604:	7ff00000 	.word	0x7ff00000
 800e608:	0801037d 	.word	0x0801037d
 800e60c:	08010100 	.word	0x08010100
 800e610:	080100d8 	.word	0x080100d8
 800e614:	7ca00000 	.word	0x7ca00000
 800e618:	7fefffff 	.word	0x7fefffff
 800e61c:	f015 0310 	ands.w	r3, r5, #16
 800e620:	bf18      	it	ne
 800e622:	236a      	movne	r3, #106	; 0x6a
 800e624:	4640      	mov	r0, r8
 800e626:	9305      	str	r3, [sp, #20]
 800e628:	4649      	mov	r1, r9
 800e62a:	2300      	movs	r3, #0
 800e62c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800e8f8 <_strtod_l+0x870>
 800e630:	07ea      	lsls	r2, r5, #31
 800e632:	d504      	bpl.n	800e63e <_strtod_l+0x5b6>
 800e634:	e9da 2300 	ldrd	r2, r3, [sl]
 800e638:	f7f1 ffba 	bl	80005b0 <__aeabi_dmul>
 800e63c:	2301      	movs	r3, #1
 800e63e:	106d      	asrs	r5, r5, #1
 800e640:	f10a 0a08 	add.w	sl, sl, #8
 800e644:	d1f4      	bne.n	800e630 <_strtod_l+0x5a8>
 800e646:	b10b      	cbz	r3, 800e64c <_strtod_l+0x5c4>
 800e648:	4680      	mov	r8, r0
 800e64a:	4689      	mov	r9, r1
 800e64c:	9b05      	ldr	r3, [sp, #20]
 800e64e:	b1bb      	cbz	r3, 800e680 <_strtod_l+0x5f8>
 800e650:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e654:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e658:	2b00      	cmp	r3, #0
 800e65a:	4649      	mov	r1, r9
 800e65c:	dd10      	ble.n	800e680 <_strtod_l+0x5f8>
 800e65e:	2b1f      	cmp	r3, #31
 800e660:	f340 8128 	ble.w	800e8b4 <_strtod_l+0x82c>
 800e664:	2b34      	cmp	r3, #52	; 0x34
 800e666:	bfd8      	it	le
 800e668:	f04f 33ff 	movle.w	r3, #4294967295
 800e66c:	f04f 0800 	mov.w	r8, #0
 800e670:	bfcf      	iteee	gt
 800e672:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e676:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e67a:	4093      	lslle	r3, r2
 800e67c:	ea03 0901 	andle.w	r9, r3, r1
 800e680:	2200      	movs	r2, #0
 800e682:	2300      	movs	r3, #0
 800e684:	4640      	mov	r0, r8
 800e686:	4649      	mov	r1, r9
 800e688:	f7f2 f9fa 	bl	8000a80 <__aeabi_dcmpeq>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d1a6      	bne.n	800e5de <_strtod_l+0x556>
 800e690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e692:	465a      	mov	r2, fp
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	4620      	mov	r0, r4
 800e698:	4633      	mov	r3, r6
 800e69a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e69c:	f7ff f8dc 	bl	800d858 <__s2b>
 800e6a0:	900b      	str	r0, [sp, #44]	; 0x2c
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	f43f af2a 	beq.w	800e4fc <_strtod_l+0x474>
 800e6a8:	2600      	movs	r6, #0
 800e6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6ac:	9b08      	ldr	r3, [sp, #32]
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	eba3 0307 	sub.w	r3, r3, r7
 800e6b4:	bfa8      	it	ge
 800e6b6:	2300      	movge	r3, #0
 800e6b8:	46b3      	mov	fp, r6
 800e6ba:	9312      	str	r3, [sp, #72]	; 0x48
 800e6bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e6c0:	9316      	str	r3, [sp, #88]	; 0x58
 800e6c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	6859      	ldr	r1, [r3, #4]
 800e6c8:	f7ff f81e 	bl	800d708 <_Balloc>
 800e6cc:	9008      	str	r0, [sp, #32]
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	f43f af18 	beq.w	800e504 <_strtod_l+0x47c>
 800e6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6d6:	300c      	adds	r0, #12
 800e6d8:	691a      	ldr	r2, [r3, #16]
 800e6da:	f103 010c 	add.w	r1, r3, #12
 800e6de:	3202      	adds	r2, #2
 800e6e0:	0092      	lsls	r2, r2, #2
 800e6e2:	f7fe f893 	bl	800c80c <memcpy>
 800e6e6:	ab1c      	add	r3, sp, #112	; 0x70
 800e6e8:	9301      	str	r3, [sp, #4]
 800e6ea:	ab1b      	add	r3, sp, #108	; 0x6c
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	4642      	mov	r2, r8
 800e6f0:	464b      	mov	r3, r9
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800e6f8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800e6fc:	f7ff fbd8 	bl	800deb0 <__d2b>
 800e700:	901a      	str	r0, [sp, #104]	; 0x68
 800e702:	2800      	cmp	r0, #0
 800e704:	f43f aefe 	beq.w	800e504 <_strtod_l+0x47c>
 800e708:	2101      	movs	r1, #1
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff f93c 	bl	800d988 <__i2b>
 800e710:	4683      	mov	fp, r0
 800e712:	2800      	cmp	r0, #0
 800e714:	f43f aef6 	beq.w	800e504 <_strtod_l+0x47c>
 800e718:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e71a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e71c:	2f00      	cmp	r7, #0
 800e71e:	bfab      	itete	ge
 800e720:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800e722:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800e724:	eb07 0a03 	addge.w	sl, r7, r3
 800e728:	1bdd      	sublt	r5, r3, r7
 800e72a:	9b05      	ldr	r3, [sp, #20]
 800e72c:	bfa8      	it	ge
 800e72e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800e730:	eba7 0703 	sub.w	r7, r7, r3
 800e734:	4417      	add	r7, r2
 800e736:	4b71      	ldr	r3, [pc, #452]	; (800e8fc <_strtod_l+0x874>)
 800e738:	f107 37ff 	add.w	r7, r7, #4294967295
 800e73c:	bfb8      	it	lt
 800e73e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800e742:	429f      	cmp	r7, r3
 800e744:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e748:	f280 80c7 	bge.w	800e8da <_strtod_l+0x852>
 800e74c:	1bdb      	subs	r3, r3, r7
 800e74e:	2b1f      	cmp	r3, #31
 800e750:	f04f 0101 	mov.w	r1, #1
 800e754:	eba2 0203 	sub.w	r2, r2, r3
 800e758:	f300 80b3 	bgt.w	800e8c2 <_strtod_l+0x83a>
 800e75c:	fa01 f303 	lsl.w	r3, r1, r3
 800e760:	9313      	str	r3, [sp, #76]	; 0x4c
 800e762:	2300      	movs	r3, #0
 800e764:	9310      	str	r3, [sp, #64]	; 0x40
 800e766:	eb0a 0702 	add.w	r7, sl, r2
 800e76a:	9b05      	ldr	r3, [sp, #20]
 800e76c:	45ba      	cmp	sl, r7
 800e76e:	4415      	add	r5, r2
 800e770:	441d      	add	r5, r3
 800e772:	4653      	mov	r3, sl
 800e774:	bfa8      	it	ge
 800e776:	463b      	movge	r3, r7
 800e778:	42ab      	cmp	r3, r5
 800e77a:	bfa8      	it	ge
 800e77c:	462b      	movge	r3, r5
 800e77e:	2b00      	cmp	r3, #0
 800e780:	bfc2      	ittt	gt
 800e782:	1aff      	subgt	r7, r7, r3
 800e784:	1aed      	subgt	r5, r5, r3
 800e786:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e78a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	dd17      	ble.n	800e7c0 <_strtod_l+0x738>
 800e790:	4659      	mov	r1, fp
 800e792:	461a      	mov	r2, r3
 800e794:	4620      	mov	r0, r4
 800e796:	f7ff f9b5 	bl	800db04 <__pow5mult>
 800e79a:	4683      	mov	fp, r0
 800e79c:	2800      	cmp	r0, #0
 800e79e:	f43f aeb1 	beq.w	800e504 <_strtod_l+0x47c>
 800e7a2:	4601      	mov	r1, r0
 800e7a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f7ff f904 	bl	800d9b4 <__multiply>
 800e7ac:	900a      	str	r0, [sp, #40]	; 0x28
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	f43f aea8 	beq.w	800e504 <_strtod_l+0x47c>
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e7b8:	f7fe ffe6 	bl	800d788 <_Bfree>
 800e7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7be:	931a      	str	r3, [sp, #104]	; 0x68
 800e7c0:	2f00      	cmp	r7, #0
 800e7c2:	f300 808f 	bgt.w	800e8e4 <_strtod_l+0x85c>
 800e7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	dd08      	ble.n	800e7de <_strtod_l+0x756>
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7d0:	9908      	ldr	r1, [sp, #32]
 800e7d2:	f7ff f997 	bl	800db04 <__pow5mult>
 800e7d6:	9008      	str	r0, [sp, #32]
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	f43f ae93 	beq.w	800e504 <_strtod_l+0x47c>
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	dd08      	ble.n	800e7f4 <_strtod_l+0x76c>
 800e7e2:	462a      	mov	r2, r5
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	9908      	ldr	r1, [sp, #32]
 800e7e8:	f7ff f9e6 	bl	800dbb8 <__lshift>
 800e7ec:	9008      	str	r0, [sp, #32]
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	f43f ae88 	beq.w	800e504 <_strtod_l+0x47c>
 800e7f4:	f1ba 0f00 	cmp.w	sl, #0
 800e7f8:	dd08      	ble.n	800e80c <_strtod_l+0x784>
 800e7fa:	4659      	mov	r1, fp
 800e7fc:	4652      	mov	r2, sl
 800e7fe:	4620      	mov	r0, r4
 800e800:	f7ff f9da 	bl	800dbb8 <__lshift>
 800e804:	4683      	mov	fp, r0
 800e806:	2800      	cmp	r0, #0
 800e808:	f43f ae7c 	beq.w	800e504 <_strtod_l+0x47c>
 800e80c:	4620      	mov	r0, r4
 800e80e:	9a08      	ldr	r2, [sp, #32]
 800e810:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e812:	f7ff fa59 	bl	800dcc8 <__mdiff>
 800e816:	4606      	mov	r6, r0
 800e818:	2800      	cmp	r0, #0
 800e81a:	f43f ae73 	beq.w	800e504 <_strtod_l+0x47c>
 800e81e:	2500      	movs	r5, #0
 800e820:	68c3      	ldr	r3, [r0, #12]
 800e822:	4659      	mov	r1, fp
 800e824:	60c5      	str	r5, [r0, #12]
 800e826:	930a      	str	r3, [sp, #40]	; 0x28
 800e828:	f7ff fa32 	bl	800dc90 <__mcmp>
 800e82c:	42a8      	cmp	r0, r5
 800e82e:	da6b      	bge.n	800e908 <_strtod_l+0x880>
 800e830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e832:	ea53 0308 	orrs.w	r3, r3, r8
 800e836:	f040 808f 	bne.w	800e958 <_strtod_l+0x8d0>
 800e83a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f040 808a 	bne.w	800e958 <_strtod_l+0x8d0>
 800e844:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e848:	0d1b      	lsrs	r3, r3, #20
 800e84a:	051b      	lsls	r3, r3, #20
 800e84c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e850:	f240 8082 	bls.w	800e958 <_strtod_l+0x8d0>
 800e854:	6973      	ldr	r3, [r6, #20]
 800e856:	b913      	cbnz	r3, 800e85e <_strtod_l+0x7d6>
 800e858:	6933      	ldr	r3, [r6, #16]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	dd7c      	ble.n	800e958 <_strtod_l+0x8d0>
 800e85e:	4631      	mov	r1, r6
 800e860:	2201      	movs	r2, #1
 800e862:	4620      	mov	r0, r4
 800e864:	f7ff f9a8 	bl	800dbb8 <__lshift>
 800e868:	4659      	mov	r1, fp
 800e86a:	4606      	mov	r6, r0
 800e86c:	f7ff fa10 	bl	800dc90 <__mcmp>
 800e870:	2800      	cmp	r0, #0
 800e872:	dd71      	ble.n	800e958 <_strtod_l+0x8d0>
 800e874:	9905      	ldr	r1, [sp, #20]
 800e876:	464b      	mov	r3, r9
 800e878:	4a21      	ldr	r2, [pc, #132]	; (800e900 <_strtod_l+0x878>)
 800e87a:	2900      	cmp	r1, #0
 800e87c:	f000 808d 	beq.w	800e99a <_strtod_l+0x912>
 800e880:	ea02 0109 	and.w	r1, r2, r9
 800e884:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e888:	f300 8087 	bgt.w	800e99a <_strtod_l+0x912>
 800e88c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e890:	f77f aea9 	ble.w	800e5e6 <_strtod_l+0x55e>
 800e894:	4640      	mov	r0, r8
 800e896:	4649      	mov	r1, r9
 800e898:	4b1a      	ldr	r3, [pc, #104]	; (800e904 <_strtod_l+0x87c>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	f7f1 fe88 	bl	80005b0 <__aeabi_dmul>
 800e8a0:	4b17      	ldr	r3, [pc, #92]	; (800e900 <_strtod_l+0x878>)
 800e8a2:	4680      	mov	r8, r0
 800e8a4:	400b      	ands	r3, r1
 800e8a6:	4689      	mov	r9, r1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f47f ae35 	bne.w	800e518 <_strtod_l+0x490>
 800e8ae:	2322      	movs	r3, #34	; 0x22
 800e8b0:	6023      	str	r3, [r4, #0]
 800e8b2:	e631      	b.n	800e518 <_strtod_l+0x490>
 800e8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8bc:	ea03 0808 	and.w	r8, r3, r8
 800e8c0:	e6de      	b.n	800e680 <_strtod_l+0x5f8>
 800e8c2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800e8c6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800e8ca:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800e8ce:	37e2      	adds	r7, #226	; 0xe2
 800e8d0:	fa01 f307 	lsl.w	r3, r1, r7
 800e8d4:	9310      	str	r3, [sp, #64]	; 0x40
 800e8d6:	9113      	str	r1, [sp, #76]	; 0x4c
 800e8d8:	e745      	b.n	800e766 <_strtod_l+0x6de>
 800e8da:	2300      	movs	r3, #0
 800e8dc:	9310      	str	r3, [sp, #64]	; 0x40
 800e8de:	2301      	movs	r3, #1
 800e8e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8e2:	e740      	b.n	800e766 <_strtod_l+0x6de>
 800e8e4:	463a      	mov	r2, r7
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e8ea:	f7ff f965 	bl	800dbb8 <__lshift>
 800e8ee:	901a      	str	r0, [sp, #104]	; 0x68
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	f47f af68 	bne.w	800e7c6 <_strtod_l+0x73e>
 800e8f6:	e605      	b.n	800e504 <_strtod_l+0x47c>
 800e8f8:	08010200 	.word	0x08010200
 800e8fc:	fffffc02 	.word	0xfffffc02
 800e900:	7ff00000 	.word	0x7ff00000
 800e904:	39500000 	.word	0x39500000
 800e908:	46ca      	mov	sl, r9
 800e90a:	d165      	bne.n	800e9d8 <_strtod_l+0x950>
 800e90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e90e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e912:	b352      	cbz	r2, 800e96a <_strtod_l+0x8e2>
 800e914:	4a9e      	ldr	r2, [pc, #632]	; (800eb90 <_strtod_l+0xb08>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d12a      	bne.n	800e970 <_strtod_l+0x8e8>
 800e91a:	9b05      	ldr	r3, [sp, #20]
 800e91c:	4641      	mov	r1, r8
 800e91e:	b1fb      	cbz	r3, 800e960 <_strtod_l+0x8d8>
 800e920:	4b9c      	ldr	r3, [pc, #624]	; (800eb94 <_strtod_l+0xb0c>)
 800e922:	f04f 32ff 	mov.w	r2, #4294967295
 800e926:	ea09 0303 	and.w	r3, r9, r3
 800e92a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e92e:	d81a      	bhi.n	800e966 <_strtod_l+0x8de>
 800e930:	0d1b      	lsrs	r3, r3, #20
 800e932:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e936:	fa02 f303 	lsl.w	r3, r2, r3
 800e93a:	4299      	cmp	r1, r3
 800e93c:	d118      	bne.n	800e970 <_strtod_l+0x8e8>
 800e93e:	4b96      	ldr	r3, [pc, #600]	; (800eb98 <_strtod_l+0xb10>)
 800e940:	459a      	cmp	sl, r3
 800e942:	d102      	bne.n	800e94a <_strtod_l+0x8c2>
 800e944:	3101      	adds	r1, #1
 800e946:	f43f addd 	beq.w	800e504 <_strtod_l+0x47c>
 800e94a:	f04f 0800 	mov.w	r8, #0
 800e94e:	4b91      	ldr	r3, [pc, #580]	; (800eb94 <_strtod_l+0xb0c>)
 800e950:	ea0a 0303 	and.w	r3, sl, r3
 800e954:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e958:	9b05      	ldr	r3, [sp, #20]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d19a      	bne.n	800e894 <_strtod_l+0x80c>
 800e95e:	e5db      	b.n	800e518 <_strtod_l+0x490>
 800e960:	f04f 33ff 	mov.w	r3, #4294967295
 800e964:	e7e9      	b.n	800e93a <_strtod_l+0x8b2>
 800e966:	4613      	mov	r3, r2
 800e968:	e7e7      	b.n	800e93a <_strtod_l+0x8b2>
 800e96a:	ea53 0308 	orrs.w	r3, r3, r8
 800e96e:	d081      	beq.n	800e874 <_strtod_l+0x7ec>
 800e970:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e972:	b1e3      	cbz	r3, 800e9ae <_strtod_l+0x926>
 800e974:	ea13 0f0a 	tst.w	r3, sl
 800e978:	d0ee      	beq.n	800e958 <_strtod_l+0x8d0>
 800e97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e97c:	4640      	mov	r0, r8
 800e97e:	4649      	mov	r1, r9
 800e980:	9a05      	ldr	r2, [sp, #20]
 800e982:	b1c3      	cbz	r3, 800e9b6 <_strtod_l+0x92e>
 800e984:	f7ff fb5c 	bl	800e040 <sulp>
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e98e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e990:	f7f1 fc58 	bl	8000244 <__adddf3>
 800e994:	4680      	mov	r8, r0
 800e996:	4689      	mov	r9, r1
 800e998:	e7de      	b.n	800e958 <_strtod_l+0x8d0>
 800e99a:	4013      	ands	r3, r2
 800e99c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e9a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e9a4:	f04f 38ff 	mov.w	r8, #4294967295
 800e9a8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e9ac:	e7d4      	b.n	800e958 <_strtod_l+0x8d0>
 800e9ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9b0:	ea13 0f08 	tst.w	r3, r8
 800e9b4:	e7e0      	b.n	800e978 <_strtod_l+0x8f0>
 800e9b6:	f7ff fb43 	bl	800e040 <sulp>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e9c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e9c2:	f7f1 fc3d 	bl	8000240 <__aeabi_dsub>
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4680      	mov	r8, r0
 800e9cc:	4689      	mov	r9, r1
 800e9ce:	f7f2 f857 	bl	8000a80 <__aeabi_dcmpeq>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d0c0      	beq.n	800e958 <_strtod_l+0x8d0>
 800e9d6:	e606      	b.n	800e5e6 <_strtod_l+0x55e>
 800e9d8:	4659      	mov	r1, fp
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7ff fabe 	bl	800df5c <__ratio>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9ee:	f7f2 f85b 	bl	8000aa8 <__aeabi_dcmple>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d06f      	beq.n	800ead6 <_strtod_l+0xa4e>
 800e9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d17c      	bne.n	800eaf6 <_strtod_l+0xa6e>
 800e9fc:	f1b8 0f00 	cmp.w	r8, #0
 800ea00:	d159      	bne.n	800eab6 <_strtod_l+0xa2e>
 800ea02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d17b      	bne.n	800eb02 <_strtod_l+0xa7a>
 800ea0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea0e:	2200      	movs	r2, #0
 800ea10:	4b62      	ldr	r3, [pc, #392]	; (800eb9c <_strtod_l+0xb14>)
 800ea12:	f7f2 f83f 	bl	8000a94 <__aeabi_dcmplt>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d15a      	bne.n	800ead0 <_strtod_l+0xa48>
 800ea1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea1e:	2200      	movs	r2, #0
 800ea20:	4b5f      	ldr	r3, [pc, #380]	; (800eba0 <_strtod_l+0xb18>)
 800ea22:	f7f1 fdc5 	bl	80005b0 <__aeabi_dmul>
 800ea26:	4605      	mov	r5, r0
 800ea28:	460f      	mov	r7, r1
 800ea2a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ea2e:	9506      	str	r5, [sp, #24]
 800ea30:	9307      	str	r3, [sp, #28]
 800ea32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ea3a:	4b56      	ldr	r3, [pc, #344]	; (800eb94 <_strtod_l+0xb0c>)
 800ea3c:	4a55      	ldr	r2, [pc, #340]	; (800eb94 <_strtod_l+0xb0c>)
 800ea3e:	ea0a 0303 	and.w	r3, sl, r3
 800ea42:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea44:	4b57      	ldr	r3, [pc, #348]	; (800eba4 <_strtod_l+0xb1c>)
 800ea46:	ea0a 0202 	and.w	r2, sl, r2
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	f040 80b0 	bne.w	800ebb0 <_strtod_l+0xb28>
 800ea50:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ea54:	4640      	mov	r0, r8
 800ea56:	4649      	mov	r1, r9
 800ea58:	f7ff f9c2 	bl	800dde0 <__ulp>
 800ea5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea60:	f7f1 fda6 	bl	80005b0 <__aeabi_dmul>
 800ea64:	4642      	mov	r2, r8
 800ea66:	464b      	mov	r3, r9
 800ea68:	f7f1 fbec 	bl	8000244 <__adddf3>
 800ea6c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800eb94 <_strtod_l+0xb0c>
 800ea70:	4a4d      	ldr	r2, [pc, #308]	; (800eba8 <_strtod_l+0xb20>)
 800ea72:	ea01 0a0a 	and.w	sl, r1, sl
 800ea76:	4592      	cmp	sl, r2
 800ea78:	4680      	mov	r8, r0
 800ea7a:	d948      	bls.n	800eb0e <_strtod_l+0xa86>
 800ea7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea7e:	4b46      	ldr	r3, [pc, #280]	; (800eb98 <_strtod_l+0xb10>)
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d103      	bne.n	800ea8c <_strtod_l+0xa04>
 800ea84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea86:	3301      	adds	r3, #1
 800ea88:	f43f ad3c 	beq.w	800e504 <_strtod_l+0x47c>
 800ea8c:	f04f 38ff 	mov.w	r8, #4294967295
 800ea90:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800eb98 <_strtod_l+0xb10>
 800ea94:	4620      	mov	r0, r4
 800ea96:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ea98:	f7fe fe76 	bl	800d788 <_Bfree>
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	9908      	ldr	r1, [sp, #32]
 800eaa0:	f7fe fe72 	bl	800d788 <_Bfree>
 800eaa4:	4659      	mov	r1, fp
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f7fe fe6e 	bl	800d788 <_Bfree>
 800eaac:	4631      	mov	r1, r6
 800eaae:	4620      	mov	r0, r4
 800eab0:	f7fe fe6a 	bl	800d788 <_Bfree>
 800eab4:	e605      	b.n	800e6c2 <_strtod_l+0x63a>
 800eab6:	f1b8 0f01 	cmp.w	r8, #1
 800eaba:	d103      	bne.n	800eac4 <_strtod_l+0xa3c>
 800eabc:	f1b9 0f00 	cmp.w	r9, #0
 800eac0:	f43f ad91 	beq.w	800e5e6 <_strtod_l+0x55e>
 800eac4:	2200      	movs	r2, #0
 800eac6:	4b39      	ldr	r3, [pc, #228]	; (800ebac <_strtod_l+0xb24>)
 800eac8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800eaca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eace:	e016      	b.n	800eafe <_strtod_l+0xa76>
 800ead0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ead2:	4f33      	ldr	r7, [pc, #204]	; (800eba0 <_strtod_l+0xb18>)
 800ead4:	e7a9      	b.n	800ea2a <_strtod_l+0x9a2>
 800ead6:	4b32      	ldr	r3, [pc, #200]	; (800eba0 <_strtod_l+0xb18>)
 800ead8:	2200      	movs	r2, #0
 800eada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eade:	f7f1 fd67 	bl	80005b0 <__aeabi_dmul>
 800eae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eae4:	4605      	mov	r5, r0
 800eae6:	460f      	mov	r7, r1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d09e      	beq.n	800ea2a <_strtod_l+0x9a2>
 800eaec:	4602      	mov	r2, r0
 800eaee:	460b      	mov	r3, r1
 800eaf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eaf4:	e79d      	b.n	800ea32 <_strtod_l+0x9aa>
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	4b28      	ldr	r3, [pc, #160]	; (800eb9c <_strtod_l+0xb14>)
 800eafa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eafe:	4f27      	ldr	r7, [pc, #156]	; (800eb9c <_strtod_l+0xb14>)
 800eb00:	e797      	b.n	800ea32 <_strtod_l+0x9aa>
 800eb02:	2200      	movs	r2, #0
 800eb04:	4b29      	ldr	r3, [pc, #164]	; (800ebac <_strtod_l+0xb24>)
 800eb06:	4645      	mov	r5, r8
 800eb08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb0c:	e7f7      	b.n	800eafe <_strtod_l+0xa76>
 800eb0e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800eb12:	9b05      	ldr	r3, [sp, #20]
 800eb14:	46ca      	mov	sl, r9
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1bc      	bne.n	800ea94 <_strtod_l+0xa0c>
 800eb1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eb20:	0d1b      	lsrs	r3, r3, #20
 800eb22:	051b      	lsls	r3, r3, #20
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d1b5      	bne.n	800ea94 <_strtod_l+0xa0c>
 800eb28:	4628      	mov	r0, r5
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	f7f2 fb94 	bl	8001258 <__aeabi_d2lz>
 800eb30:	f7f1 fd10 	bl	8000554 <__aeabi_l2d>
 800eb34:	4602      	mov	r2, r0
 800eb36:	460b      	mov	r3, r1
 800eb38:	4628      	mov	r0, r5
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	f7f1 fb80 	bl	8000240 <__aeabi_dsub>
 800eb40:	460b      	mov	r3, r1
 800eb42:	4602      	mov	r2, r0
 800eb44:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800eb48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800eb4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb4e:	ea4a 0a08 	orr.w	sl, sl, r8
 800eb52:	ea5a 0a03 	orrs.w	sl, sl, r3
 800eb56:	d06c      	beq.n	800ec32 <_strtod_l+0xbaa>
 800eb58:	a309      	add	r3, pc, #36	; (adr r3, 800eb80 <_strtod_l+0xaf8>)
 800eb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5e:	f7f1 ff99 	bl	8000a94 <__aeabi_dcmplt>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	f47f acd8 	bne.w	800e518 <_strtod_l+0x490>
 800eb68:	a307      	add	r3, pc, #28	; (adr r3, 800eb88 <_strtod_l+0xb00>)
 800eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb72:	f7f1 ffad 	bl	8000ad0 <__aeabi_dcmpgt>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	d08c      	beq.n	800ea94 <_strtod_l+0xa0c>
 800eb7a:	e4cd      	b.n	800e518 <_strtod_l+0x490>
 800eb7c:	f3af 8000 	nop.w
 800eb80:	94a03595 	.word	0x94a03595
 800eb84:	3fdfffff 	.word	0x3fdfffff
 800eb88:	35afe535 	.word	0x35afe535
 800eb8c:	3fe00000 	.word	0x3fe00000
 800eb90:	000fffff 	.word	0x000fffff
 800eb94:	7ff00000 	.word	0x7ff00000
 800eb98:	7fefffff 	.word	0x7fefffff
 800eb9c:	3ff00000 	.word	0x3ff00000
 800eba0:	3fe00000 	.word	0x3fe00000
 800eba4:	7fe00000 	.word	0x7fe00000
 800eba8:	7c9fffff 	.word	0x7c9fffff
 800ebac:	bff00000 	.word	0xbff00000
 800ebb0:	9b05      	ldr	r3, [sp, #20]
 800ebb2:	b333      	cbz	r3, 800ec02 <_strtod_l+0xb7a>
 800ebb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ebba:	d822      	bhi.n	800ec02 <_strtod_l+0xb7a>
 800ebbc:	a328      	add	r3, pc, #160	; (adr r3, 800ec60 <_strtod_l+0xbd8>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	f7f1 ff6f 	bl	8000aa8 <__aeabi_dcmple>
 800ebca:	b1a0      	cbz	r0, 800ebf6 <_strtod_l+0xb6e>
 800ebcc:	4639      	mov	r1, r7
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f7f1 ffc6 	bl	8000b60 <__aeabi_d2uiz>
 800ebd4:	2801      	cmp	r0, #1
 800ebd6:	bf38      	it	cc
 800ebd8:	2001      	movcc	r0, #1
 800ebda:	f7f1 fc6f 	bl	80004bc <__aeabi_ui2d>
 800ebde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	460f      	mov	r7, r1
 800ebe4:	bb03      	cbnz	r3, 800ec28 <_strtod_l+0xba0>
 800ebe6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebea:	9014      	str	r0, [sp, #80]	; 0x50
 800ebec:	9315      	str	r3, [sp, #84]	; 0x54
 800ebee:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ebf2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ebf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ebfa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ebfe:	1a9b      	subs	r3, r3, r2
 800ec00:	9311      	str	r3, [sp, #68]	; 0x44
 800ec02:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ec04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ec06:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800ec0a:	f7ff f8e9 	bl	800dde0 <__ulp>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	460b      	mov	r3, r1
 800ec12:	4640      	mov	r0, r8
 800ec14:	4649      	mov	r1, r9
 800ec16:	f7f1 fccb 	bl	80005b0 <__aeabi_dmul>
 800ec1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec1e:	f7f1 fb11 	bl	8000244 <__adddf3>
 800ec22:	4680      	mov	r8, r0
 800ec24:	4689      	mov	r9, r1
 800ec26:	e774      	b.n	800eb12 <_strtod_l+0xa8a>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ec30:	e7dd      	b.n	800ebee <_strtod_l+0xb66>
 800ec32:	a30d      	add	r3, pc, #52	; (adr r3, 800ec68 <_strtod_l+0xbe0>)
 800ec34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec38:	f7f1 ff2c 	bl	8000a94 <__aeabi_dcmplt>
 800ec3c:	e79b      	b.n	800eb76 <_strtod_l+0xaee>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	930e      	str	r3, [sp, #56]	; 0x38
 800ec42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ec46:	6013      	str	r3, [r2, #0]
 800ec48:	f7ff ba5b 	b.w	800e102 <_strtod_l+0x7a>
 800ec4c:	2a65      	cmp	r2, #101	; 0x65
 800ec4e:	f43f ab52 	beq.w	800e2f6 <_strtod_l+0x26e>
 800ec52:	2a45      	cmp	r2, #69	; 0x45
 800ec54:	f43f ab4f 	beq.w	800e2f6 <_strtod_l+0x26e>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	f7ff bb87 	b.w	800e36c <_strtod_l+0x2e4>
 800ec5e:	bf00      	nop
 800ec60:	ffc00000 	.word	0xffc00000
 800ec64:	41dfffff 	.word	0x41dfffff
 800ec68:	94a03595 	.word	0x94a03595
 800ec6c:	3fcfffff 	.word	0x3fcfffff

0800ec70 <_strtod_r>:
 800ec70:	4b01      	ldr	r3, [pc, #4]	; (800ec78 <_strtod_r+0x8>)
 800ec72:	f7ff ba09 	b.w	800e088 <_strtod_l>
 800ec76:	bf00      	nop
 800ec78:	20000078 	.word	0x20000078

0800ec7c <_strtol_l.constprop.0>:
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec82:	4686      	mov	lr, r0
 800ec84:	4690      	mov	r8, r2
 800ec86:	d001      	beq.n	800ec8c <_strtol_l.constprop.0+0x10>
 800ec88:	2b24      	cmp	r3, #36	; 0x24
 800ec8a:	d906      	bls.n	800ec9a <_strtol_l.constprop.0+0x1e>
 800ec8c:	f7fd fd84 	bl	800c798 <__errno>
 800ec90:	2316      	movs	r3, #22
 800ec92:	6003      	str	r3, [r0, #0]
 800ec94:	2000      	movs	r0, #0
 800ec96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec9a:	460d      	mov	r5, r1
 800ec9c:	4835      	ldr	r0, [pc, #212]	; (800ed74 <_strtol_l.constprop.0+0xf8>)
 800ec9e:	462a      	mov	r2, r5
 800eca0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eca4:	5d06      	ldrb	r6, [r0, r4]
 800eca6:	f016 0608 	ands.w	r6, r6, #8
 800ecaa:	d1f8      	bne.n	800ec9e <_strtol_l.constprop.0+0x22>
 800ecac:	2c2d      	cmp	r4, #45	; 0x2d
 800ecae:	d12e      	bne.n	800ed0e <_strtol_l.constprop.0+0x92>
 800ecb0:	2601      	movs	r6, #1
 800ecb2:	782c      	ldrb	r4, [r5, #0]
 800ecb4:	1c95      	adds	r5, r2, #2
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d057      	beq.n	800ed6a <_strtol_l.constprop.0+0xee>
 800ecba:	2b10      	cmp	r3, #16
 800ecbc:	d109      	bne.n	800ecd2 <_strtol_l.constprop.0+0x56>
 800ecbe:	2c30      	cmp	r4, #48	; 0x30
 800ecc0:	d107      	bne.n	800ecd2 <_strtol_l.constprop.0+0x56>
 800ecc2:	782a      	ldrb	r2, [r5, #0]
 800ecc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ecc8:	2a58      	cmp	r2, #88	; 0x58
 800ecca:	d149      	bne.n	800ed60 <_strtol_l.constprop.0+0xe4>
 800eccc:	2310      	movs	r3, #16
 800ecce:	786c      	ldrb	r4, [r5, #1]
 800ecd0:	3502      	adds	r5, #2
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800ecd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ecdc:	fbbc f9f3 	udiv	r9, ip, r3
 800ece0:	4610      	mov	r0, r2
 800ece2:	fb03 ca19 	mls	sl, r3, r9, ip
 800ece6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ecea:	2f09      	cmp	r7, #9
 800ecec:	d814      	bhi.n	800ed18 <_strtol_l.constprop.0+0x9c>
 800ecee:	463c      	mov	r4, r7
 800ecf0:	42a3      	cmp	r3, r4
 800ecf2:	dd20      	ble.n	800ed36 <_strtol_l.constprop.0+0xba>
 800ecf4:	1c57      	adds	r7, r2, #1
 800ecf6:	d007      	beq.n	800ed08 <_strtol_l.constprop.0+0x8c>
 800ecf8:	4581      	cmp	r9, r0
 800ecfa:	d319      	bcc.n	800ed30 <_strtol_l.constprop.0+0xb4>
 800ecfc:	d101      	bne.n	800ed02 <_strtol_l.constprop.0+0x86>
 800ecfe:	45a2      	cmp	sl, r4
 800ed00:	db16      	blt.n	800ed30 <_strtol_l.constprop.0+0xb4>
 800ed02:	2201      	movs	r2, #1
 800ed04:	fb00 4003 	mla	r0, r0, r3, r4
 800ed08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed0c:	e7eb      	b.n	800ece6 <_strtol_l.constprop.0+0x6a>
 800ed0e:	2c2b      	cmp	r4, #43	; 0x2b
 800ed10:	bf04      	itt	eq
 800ed12:	782c      	ldrbeq	r4, [r5, #0]
 800ed14:	1c95      	addeq	r5, r2, #2
 800ed16:	e7ce      	b.n	800ecb6 <_strtol_l.constprop.0+0x3a>
 800ed18:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ed1c:	2f19      	cmp	r7, #25
 800ed1e:	d801      	bhi.n	800ed24 <_strtol_l.constprop.0+0xa8>
 800ed20:	3c37      	subs	r4, #55	; 0x37
 800ed22:	e7e5      	b.n	800ecf0 <_strtol_l.constprop.0+0x74>
 800ed24:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ed28:	2f19      	cmp	r7, #25
 800ed2a:	d804      	bhi.n	800ed36 <_strtol_l.constprop.0+0xba>
 800ed2c:	3c57      	subs	r4, #87	; 0x57
 800ed2e:	e7df      	b.n	800ecf0 <_strtol_l.constprop.0+0x74>
 800ed30:	f04f 32ff 	mov.w	r2, #4294967295
 800ed34:	e7e8      	b.n	800ed08 <_strtol_l.constprop.0+0x8c>
 800ed36:	1c53      	adds	r3, r2, #1
 800ed38:	d108      	bne.n	800ed4c <_strtol_l.constprop.0+0xd0>
 800ed3a:	2322      	movs	r3, #34	; 0x22
 800ed3c:	4660      	mov	r0, ip
 800ed3e:	f8ce 3000 	str.w	r3, [lr]
 800ed42:	f1b8 0f00 	cmp.w	r8, #0
 800ed46:	d0a6      	beq.n	800ec96 <_strtol_l.constprop.0+0x1a>
 800ed48:	1e69      	subs	r1, r5, #1
 800ed4a:	e006      	b.n	800ed5a <_strtol_l.constprop.0+0xde>
 800ed4c:	b106      	cbz	r6, 800ed50 <_strtol_l.constprop.0+0xd4>
 800ed4e:	4240      	negs	r0, r0
 800ed50:	f1b8 0f00 	cmp.w	r8, #0
 800ed54:	d09f      	beq.n	800ec96 <_strtol_l.constprop.0+0x1a>
 800ed56:	2a00      	cmp	r2, #0
 800ed58:	d1f6      	bne.n	800ed48 <_strtol_l.constprop.0+0xcc>
 800ed5a:	f8c8 1000 	str.w	r1, [r8]
 800ed5e:	e79a      	b.n	800ec96 <_strtol_l.constprop.0+0x1a>
 800ed60:	2430      	movs	r4, #48	; 0x30
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1b5      	bne.n	800ecd2 <_strtol_l.constprop.0+0x56>
 800ed66:	2308      	movs	r3, #8
 800ed68:	e7b3      	b.n	800ecd2 <_strtol_l.constprop.0+0x56>
 800ed6a:	2c30      	cmp	r4, #48	; 0x30
 800ed6c:	d0a9      	beq.n	800ecc2 <_strtol_l.constprop.0+0x46>
 800ed6e:	230a      	movs	r3, #10
 800ed70:	e7af      	b.n	800ecd2 <_strtol_l.constprop.0+0x56>
 800ed72:	bf00      	nop
 800ed74:	08010229 	.word	0x08010229

0800ed78 <_strtol_r>:
 800ed78:	f7ff bf80 	b.w	800ec7c <_strtol_l.constprop.0>

0800ed7c <__ssputs_r>:
 800ed7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed80:	461f      	mov	r7, r3
 800ed82:	688e      	ldr	r6, [r1, #8]
 800ed84:	4682      	mov	sl, r0
 800ed86:	42be      	cmp	r6, r7
 800ed88:	460c      	mov	r4, r1
 800ed8a:	4690      	mov	r8, r2
 800ed8c:	680b      	ldr	r3, [r1, #0]
 800ed8e:	d82c      	bhi.n	800edea <__ssputs_r+0x6e>
 800ed90:	898a      	ldrh	r2, [r1, #12]
 800ed92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed96:	d026      	beq.n	800ede6 <__ssputs_r+0x6a>
 800ed98:	6965      	ldr	r5, [r4, #20]
 800ed9a:	6909      	ldr	r1, [r1, #16]
 800ed9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eda0:	eba3 0901 	sub.w	r9, r3, r1
 800eda4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eda8:	1c7b      	adds	r3, r7, #1
 800edaa:	444b      	add	r3, r9
 800edac:	106d      	asrs	r5, r5, #1
 800edae:	429d      	cmp	r5, r3
 800edb0:	bf38      	it	cc
 800edb2:	461d      	movcc	r5, r3
 800edb4:	0553      	lsls	r3, r2, #21
 800edb6:	d527      	bpl.n	800ee08 <__ssputs_r+0x8c>
 800edb8:	4629      	mov	r1, r5
 800edba:	f7fe fc19 	bl	800d5f0 <_malloc_r>
 800edbe:	4606      	mov	r6, r0
 800edc0:	b360      	cbz	r0, 800ee1c <__ssputs_r+0xa0>
 800edc2:	464a      	mov	r2, r9
 800edc4:	6921      	ldr	r1, [r4, #16]
 800edc6:	f7fd fd21 	bl	800c80c <memcpy>
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800edd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edd4:	81a3      	strh	r3, [r4, #12]
 800edd6:	6126      	str	r6, [r4, #16]
 800edd8:	444e      	add	r6, r9
 800edda:	6026      	str	r6, [r4, #0]
 800eddc:	463e      	mov	r6, r7
 800edde:	6165      	str	r5, [r4, #20]
 800ede0:	eba5 0509 	sub.w	r5, r5, r9
 800ede4:	60a5      	str	r5, [r4, #8]
 800ede6:	42be      	cmp	r6, r7
 800ede8:	d900      	bls.n	800edec <__ssputs_r+0x70>
 800edea:	463e      	mov	r6, r7
 800edec:	4632      	mov	r2, r6
 800edee:	4641      	mov	r1, r8
 800edf0:	6820      	ldr	r0, [r4, #0]
 800edf2:	f000 fb68 	bl	800f4c6 <memmove>
 800edf6:	2000      	movs	r0, #0
 800edf8:	68a3      	ldr	r3, [r4, #8]
 800edfa:	1b9b      	subs	r3, r3, r6
 800edfc:	60a3      	str	r3, [r4, #8]
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	4433      	add	r3, r6
 800ee02:	6023      	str	r3, [r4, #0]
 800ee04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee08:	462a      	mov	r2, r5
 800ee0a:	f000 ff5e 	bl	800fcca <_realloc_r>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d1e0      	bne.n	800edd6 <__ssputs_r+0x5a>
 800ee14:	4650      	mov	r0, sl
 800ee16:	6921      	ldr	r1, [r4, #16]
 800ee18:	f7fe fb7a 	bl	800d510 <_free_r>
 800ee1c:	230c      	movs	r3, #12
 800ee1e:	f8ca 3000 	str.w	r3, [sl]
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	f04f 30ff 	mov.w	r0, #4294967295
 800ee28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee2c:	81a3      	strh	r3, [r4, #12]
 800ee2e:	e7e9      	b.n	800ee04 <__ssputs_r+0x88>

0800ee30 <_svfiprintf_r>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	4698      	mov	r8, r3
 800ee36:	898b      	ldrh	r3, [r1, #12]
 800ee38:	4607      	mov	r7, r0
 800ee3a:	061b      	lsls	r3, r3, #24
 800ee3c:	460d      	mov	r5, r1
 800ee3e:	4614      	mov	r4, r2
 800ee40:	b09d      	sub	sp, #116	; 0x74
 800ee42:	d50e      	bpl.n	800ee62 <_svfiprintf_r+0x32>
 800ee44:	690b      	ldr	r3, [r1, #16]
 800ee46:	b963      	cbnz	r3, 800ee62 <_svfiprintf_r+0x32>
 800ee48:	2140      	movs	r1, #64	; 0x40
 800ee4a:	f7fe fbd1 	bl	800d5f0 <_malloc_r>
 800ee4e:	6028      	str	r0, [r5, #0]
 800ee50:	6128      	str	r0, [r5, #16]
 800ee52:	b920      	cbnz	r0, 800ee5e <_svfiprintf_r+0x2e>
 800ee54:	230c      	movs	r3, #12
 800ee56:	603b      	str	r3, [r7, #0]
 800ee58:	f04f 30ff 	mov.w	r0, #4294967295
 800ee5c:	e0d0      	b.n	800f000 <_svfiprintf_r+0x1d0>
 800ee5e:	2340      	movs	r3, #64	; 0x40
 800ee60:	616b      	str	r3, [r5, #20]
 800ee62:	2300      	movs	r3, #0
 800ee64:	9309      	str	r3, [sp, #36]	; 0x24
 800ee66:	2320      	movs	r3, #32
 800ee68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee6c:	2330      	movs	r3, #48	; 0x30
 800ee6e:	f04f 0901 	mov.w	r9, #1
 800ee72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee76:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800f018 <_svfiprintf_r+0x1e8>
 800ee7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee7e:	4623      	mov	r3, r4
 800ee80:	469a      	mov	sl, r3
 800ee82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee86:	b10a      	cbz	r2, 800ee8c <_svfiprintf_r+0x5c>
 800ee88:	2a25      	cmp	r2, #37	; 0x25
 800ee8a:	d1f9      	bne.n	800ee80 <_svfiprintf_r+0x50>
 800ee8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ee90:	d00b      	beq.n	800eeaa <_svfiprintf_r+0x7a>
 800ee92:	465b      	mov	r3, fp
 800ee94:	4622      	mov	r2, r4
 800ee96:	4629      	mov	r1, r5
 800ee98:	4638      	mov	r0, r7
 800ee9a:	f7ff ff6f 	bl	800ed7c <__ssputs_r>
 800ee9e:	3001      	adds	r0, #1
 800eea0:	f000 80a9 	beq.w	800eff6 <_svfiprintf_r+0x1c6>
 800eea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eea6:	445a      	add	r2, fp
 800eea8:	9209      	str	r2, [sp, #36]	; 0x24
 800eeaa:	f89a 3000 	ldrb.w	r3, [sl]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f000 80a1 	beq.w	800eff6 <_svfiprintf_r+0x1c6>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eebe:	f10a 0a01 	add.w	sl, sl, #1
 800eec2:	9304      	str	r3, [sp, #16]
 800eec4:	9307      	str	r3, [sp, #28]
 800eec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eeca:	931a      	str	r3, [sp, #104]	; 0x68
 800eecc:	4654      	mov	r4, sl
 800eece:	2205      	movs	r2, #5
 800eed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed4:	4850      	ldr	r0, [pc, #320]	; (800f018 <_svfiprintf_r+0x1e8>)
 800eed6:	f7fd fc8b 	bl	800c7f0 <memchr>
 800eeda:	9a04      	ldr	r2, [sp, #16]
 800eedc:	b9d8      	cbnz	r0, 800ef16 <_svfiprintf_r+0xe6>
 800eede:	06d0      	lsls	r0, r2, #27
 800eee0:	bf44      	itt	mi
 800eee2:	2320      	movmi	r3, #32
 800eee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eee8:	0711      	lsls	r1, r2, #28
 800eeea:	bf44      	itt	mi
 800eeec:	232b      	movmi	r3, #43	; 0x2b
 800eeee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef2:	f89a 3000 	ldrb.w	r3, [sl]
 800eef6:	2b2a      	cmp	r3, #42	; 0x2a
 800eef8:	d015      	beq.n	800ef26 <_svfiprintf_r+0xf6>
 800eefa:	4654      	mov	r4, sl
 800eefc:	2000      	movs	r0, #0
 800eefe:	f04f 0c0a 	mov.w	ip, #10
 800ef02:	9a07      	ldr	r2, [sp, #28]
 800ef04:	4621      	mov	r1, r4
 800ef06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef0a:	3b30      	subs	r3, #48	; 0x30
 800ef0c:	2b09      	cmp	r3, #9
 800ef0e:	d94d      	bls.n	800efac <_svfiprintf_r+0x17c>
 800ef10:	b1b0      	cbz	r0, 800ef40 <_svfiprintf_r+0x110>
 800ef12:	9207      	str	r2, [sp, #28]
 800ef14:	e014      	b.n	800ef40 <_svfiprintf_r+0x110>
 800ef16:	eba0 0308 	sub.w	r3, r0, r8
 800ef1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	46a2      	mov	sl, r4
 800ef22:	9304      	str	r3, [sp, #16]
 800ef24:	e7d2      	b.n	800eecc <_svfiprintf_r+0x9c>
 800ef26:	9b03      	ldr	r3, [sp, #12]
 800ef28:	1d19      	adds	r1, r3, #4
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	9103      	str	r1, [sp, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	bfbb      	ittet	lt
 800ef32:	425b      	neglt	r3, r3
 800ef34:	f042 0202 	orrlt.w	r2, r2, #2
 800ef38:	9307      	strge	r3, [sp, #28]
 800ef3a:	9307      	strlt	r3, [sp, #28]
 800ef3c:	bfb8      	it	lt
 800ef3e:	9204      	strlt	r2, [sp, #16]
 800ef40:	7823      	ldrb	r3, [r4, #0]
 800ef42:	2b2e      	cmp	r3, #46	; 0x2e
 800ef44:	d10c      	bne.n	800ef60 <_svfiprintf_r+0x130>
 800ef46:	7863      	ldrb	r3, [r4, #1]
 800ef48:	2b2a      	cmp	r3, #42	; 0x2a
 800ef4a:	d134      	bne.n	800efb6 <_svfiprintf_r+0x186>
 800ef4c:	9b03      	ldr	r3, [sp, #12]
 800ef4e:	3402      	adds	r4, #2
 800ef50:	1d1a      	adds	r2, r3, #4
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	9203      	str	r2, [sp, #12]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	bfb8      	it	lt
 800ef5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef5e:	9305      	str	r3, [sp, #20]
 800ef60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800f01c <_svfiprintf_r+0x1ec>
 800ef64:	2203      	movs	r2, #3
 800ef66:	4650      	mov	r0, sl
 800ef68:	7821      	ldrb	r1, [r4, #0]
 800ef6a:	f7fd fc41 	bl	800c7f0 <memchr>
 800ef6e:	b138      	cbz	r0, 800ef80 <_svfiprintf_r+0x150>
 800ef70:	2240      	movs	r2, #64	; 0x40
 800ef72:	9b04      	ldr	r3, [sp, #16]
 800ef74:	eba0 000a 	sub.w	r0, r0, sl
 800ef78:	4082      	lsls	r2, r0
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	3401      	adds	r4, #1
 800ef7e:	9304      	str	r3, [sp, #16]
 800ef80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef84:	2206      	movs	r2, #6
 800ef86:	4826      	ldr	r0, [pc, #152]	; (800f020 <_svfiprintf_r+0x1f0>)
 800ef88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef8c:	f7fd fc30 	bl	800c7f0 <memchr>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d038      	beq.n	800f006 <_svfiprintf_r+0x1d6>
 800ef94:	4b23      	ldr	r3, [pc, #140]	; (800f024 <_svfiprintf_r+0x1f4>)
 800ef96:	bb1b      	cbnz	r3, 800efe0 <_svfiprintf_r+0x1b0>
 800ef98:	9b03      	ldr	r3, [sp, #12]
 800ef9a:	3307      	adds	r3, #7
 800ef9c:	f023 0307 	bic.w	r3, r3, #7
 800efa0:	3308      	adds	r3, #8
 800efa2:	9303      	str	r3, [sp, #12]
 800efa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa6:	4433      	add	r3, r6
 800efa8:	9309      	str	r3, [sp, #36]	; 0x24
 800efaa:	e768      	b.n	800ee7e <_svfiprintf_r+0x4e>
 800efac:	460c      	mov	r4, r1
 800efae:	2001      	movs	r0, #1
 800efb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb4:	e7a6      	b.n	800ef04 <_svfiprintf_r+0xd4>
 800efb6:	2300      	movs	r3, #0
 800efb8:	f04f 0c0a 	mov.w	ip, #10
 800efbc:	4619      	mov	r1, r3
 800efbe:	3401      	adds	r4, #1
 800efc0:	9305      	str	r3, [sp, #20]
 800efc2:	4620      	mov	r0, r4
 800efc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efc8:	3a30      	subs	r2, #48	; 0x30
 800efca:	2a09      	cmp	r2, #9
 800efcc:	d903      	bls.n	800efd6 <_svfiprintf_r+0x1a6>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0c6      	beq.n	800ef60 <_svfiprintf_r+0x130>
 800efd2:	9105      	str	r1, [sp, #20]
 800efd4:	e7c4      	b.n	800ef60 <_svfiprintf_r+0x130>
 800efd6:	4604      	mov	r4, r0
 800efd8:	2301      	movs	r3, #1
 800efda:	fb0c 2101 	mla	r1, ip, r1, r2
 800efde:	e7f0      	b.n	800efc2 <_svfiprintf_r+0x192>
 800efe0:	ab03      	add	r3, sp, #12
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	462a      	mov	r2, r5
 800efe6:	4638      	mov	r0, r7
 800efe8:	4b0f      	ldr	r3, [pc, #60]	; (800f028 <_svfiprintf_r+0x1f8>)
 800efea:	a904      	add	r1, sp, #16
 800efec:	f7fc fb9c 	bl	800b728 <_printf_float>
 800eff0:	1c42      	adds	r2, r0, #1
 800eff2:	4606      	mov	r6, r0
 800eff4:	d1d6      	bne.n	800efa4 <_svfiprintf_r+0x174>
 800eff6:	89ab      	ldrh	r3, [r5, #12]
 800eff8:	065b      	lsls	r3, r3, #25
 800effa:	f53f af2d 	bmi.w	800ee58 <_svfiprintf_r+0x28>
 800effe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f000:	b01d      	add	sp, #116	; 0x74
 800f002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f006:	ab03      	add	r3, sp, #12
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	462a      	mov	r2, r5
 800f00c:	4638      	mov	r0, r7
 800f00e:	4b06      	ldr	r3, [pc, #24]	; (800f028 <_svfiprintf_r+0x1f8>)
 800f010:	a904      	add	r1, sp, #16
 800f012:	f7fc fe29 	bl	800bc68 <_printf_i>
 800f016:	e7eb      	b.n	800eff0 <_svfiprintf_r+0x1c0>
 800f018:	08010329 	.word	0x08010329
 800f01c:	0801032f 	.word	0x0801032f
 800f020:	08010333 	.word	0x08010333
 800f024:	0800b729 	.word	0x0800b729
 800f028:	0800ed7d 	.word	0x0800ed7d

0800f02c <__sfputc_r>:
 800f02c:	6893      	ldr	r3, [r2, #8]
 800f02e:	b410      	push	{r4}
 800f030:	3b01      	subs	r3, #1
 800f032:	2b00      	cmp	r3, #0
 800f034:	6093      	str	r3, [r2, #8]
 800f036:	da07      	bge.n	800f048 <__sfputc_r+0x1c>
 800f038:	6994      	ldr	r4, [r2, #24]
 800f03a:	42a3      	cmp	r3, r4
 800f03c:	db01      	blt.n	800f042 <__sfputc_r+0x16>
 800f03e:	290a      	cmp	r1, #10
 800f040:	d102      	bne.n	800f048 <__sfputc_r+0x1c>
 800f042:	bc10      	pop	{r4}
 800f044:	f7fd bac1 	b.w	800c5ca <__swbuf_r>
 800f048:	6813      	ldr	r3, [r2, #0]
 800f04a:	1c58      	adds	r0, r3, #1
 800f04c:	6010      	str	r0, [r2, #0]
 800f04e:	7019      	strb	r1, [r3, #0]
 800f050:	4608      	mov	r0, r1
 800f052:	bc10      	pop	{r4}
 800f054:	4770      	bx	lr

0800f056 <__sfputs_r>:
 800f056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f058:	4606      	mov	r6, r0
 800f05a:	460f      	mov	r7, r1
 800f05c:	4614      	mov	r4, r2
 800f05e:	18d5      	adds	r5, r2, r3
 800f060:	42ac      	cmp	r4, r5
 800f062:	d101      	bne.n	800f068 <__sfputs_r+0x12>
 800f064:	2000      	movs	r0, #0
 800f066:	e007      	b.n	800f078 <__sfputs_r+0x22>
 800f068:	463a      	mov	r2, r7
 800f06a:	4630      	mov	r0, r6
 800f06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f070:	f7ff ffdc 	bl	800f02c <__sfputc_r>
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	d1f3      	bne.n	800f060 <__sfputs_r+0xa>
 800f078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f07c <_vfiprintf_r>:
 800f07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f080:	460d      	mov	r5, r1
 800f082:	4614      	mov	r4, r2
 800f084:	4698      	mov	r8, r3
 800f086:	4606      	mov	r6, r0
 800f088:	b09d      	sub	sp, #116	; 0x74
 800f08a:	b118      	cbz	r0, 800f094 <_vfiprintf_r+0x18>
 800f08c:	6a03      	ldr	r3, [r0, #32]
 800f08e:	b90b      	cbnz	r3, 800f094 <_vfiprintf_r+0x18>
 800f090:	f7fd f994 	bl	800c3bc <__sinit>
 800f094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f096:	07d9      	lsls	r1, r3, #31
 800f098:	d405      	bmi.n	800f0a6 <_vfiprintf_r+0x2a>
 800f09a:	89ab      	ldrh	r3, [r5, #12]
 800f09c:	059a      	lsls	r2, r3, #22
 800f09e:	d402      	bmi.n	800f0a6 <_vfiprintf_r+0x2a>
 800f0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0a2:	f7fd fba3 	bl	800c7ec <__retarget_lock_acquire_recursive>
 800f0a6:	89ab      	ldrh	r3, [r5, #12]
 800f0a8:	071b      	lsls	r3, r3, #28
 800f0aa:	d501      	bpl.n	800f0b0 <_vfiprintf_r+0x34>
 800f0ac:	692b      	ldr	r3, [r5, #16]
 800f0ae:	b99b      	cbnz	r3, 800f0d8 <_vfiprintf_r+0x5c>
 800f0b0:	4629      	mov	r1, r5
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	f7fd fac6 	bl	800c644 <__swsetup_r>
 800f0b8:	b170      	cbz	r0, 800f0d8 <_vfiprintf_r+0x5c>
 800f0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0bc:	07dc      	lsls	r4, r3, #31
 800f0be:	d504      	bpl.n	800f0ca <_vfiprintf_r+0x4e>
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	b01d      	add	sp, #116	; 0x74
 800f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	0598      	lsls	r0, r3, #22
 800f0ce:	d4f7      	bmi.n	800f0c0 <_vfiprintf_r+0x44>
 800f0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0d2:	f7fd fb8c 	bl	800c7ee <__retarget_lock_release_recursive>
 800f0d6:	e7f3      	b.n	800f0c0 <_vfiprintf_r+0x44>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	9309      	str	r3, [sp, #36]	; 0x24
 800f0dc:	2320      	movs	r3, #32
 800f0de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0e2:	2330      	movs	r3, #48	; 0x30
 800f0e4:	f04f 0901 	mov.w	r9, #1
 800f0e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800f29c <_vfiprintf_r+0x220>
 800f0f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0f4:	4623      	mov	r3, r4
 800f0f6:	469a      	mov	sl, r3
 800f0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0fc:	b10a      	cbz	r2, 800f102 <_vfiprintf_r+0x86>
 800f0fe:	2a25      	cmp	r2, #37	; 0x25
 800f100:	d1f9      	bne.n	800f0f6 <_vfiprintf_r+0x7a>
 800f102:	ebba 0b04 	subs.w	fp, sl, r4
 800f106:	d00b      	beq.n	800f120 <_vfiprintf_r+0xa4>
 800f108:	465b      	mov	r3, fp
 800f10a:	4622      	mov	r2, r4
 800f10c:	4629      	mov	r1, r5
 800f10e:	4630      	mov	r0, r6
 800f110:	f7ff ffa1 	bl	800f056 <__sfputs_r>
 800f114:	3001      	adds	r0, #1
 800f116:	f000 80a9 	beq.w	800f26c <_vfiprintf_r+0x1f0>
 800f11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f11c:	445a      	add	r2, fp
 800f11e:	9209      	str	r2, [sp, #36]	; 0x24
 800f120:	f89a 3000 	ldrb.w	r3, [sl]
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 80a1 	beq.w	800f26c <_vfiprintf_r+0x1f0>
 800f12a:	2300      	movs	r3, #0
 800f12c:	f04f 32ff 	mov.w	r2, #4294967295
 800f130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f134:	f10a 0a01 	add.w	sl, sl, #1
 800f138:	9304      	str	r3, [sp, #16]
 800f13a:	9307      	str	r3, [sp, #28]
 800f13c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f140:	931a      	str	r3, [sp, #104]	; 0x68
 800f142:	4654      	mov	r4, sl
 800f144:	2205      	movs	r2, #5
 800f146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14a:	4854      	ldr	r0, [pc, #336]	; (800f29c <_vfiprintf_r+0x220>)
 800f14c:	f7fd fb50 	bl	800c7f0 <memchr>
 800f150:	9a04      	ldr	r2, [sp, #16]
 800f152:	b9d8      	cbnz	r0, 800f18c <_vfiprintf_r+0x110>
 800f154:	06d1      	lsls	r1, r2, #27
 800f156:	bf44      	itt	mi
 800f158:	2320      	movmi	r3, #32
 800f15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f15e:	0713      	lsls	r3, r2, #28
 800f160:	bf44      	itt	mi
 800f162:	232b      	movmi	r3, #43	; 0x2b
 800f164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f168:	f89a 3000 	ldrb.w	r3, [sl]
 800f16c:	2b2a      	cmp	r3, #42	; 0x2a
 800f16e:	d015      	beq.n	800f19c <_vfiprintf_r+0x120>
 800f170:	4654      	mov	r4, sl
 800f172:	2000      	movs	r0, #0
 800f174:	f04f 0c0a 	mov.w	ip, #10
 800f178:	9a07      	ldr	r2, [sp, #28]
 800f17a:	4621      	mov	r1, r4
 800f17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f180:	3b30      	subs	r3, #48	; 0x30
 800f182:	2b09      	cmp	r3, #9
 800f184:	d94d      	bls.n	800f222 <_vfiprintf_r+0x1a6>
 800f186:	b1b0      	cbz	r0, 800f1b6 <_vfiprintf_r+0x13a>
 800f188:	9207      	str	r2, [sp, #28]
 800f18a:	e014      	b.n	800f1b6 <_vfiprintf_r+0x13a>
 800f18c:	eba0 0308 	sub.w	r3, r0, r8
 800f190:	fa09 f303 	lsl.w	r3, r9, r3
 800f194:	4313      	orrs	r3, r2
 800f196:	46a2      	mov	sl, r4
 800f198:	9304      	str	r3, [sp, #16]
 800f19a:	e7d2      	b.n	800f142 <_vfiprintf_r+0xc6>
 800f19c:	9b03      	ldr	r3, [sp, #12]
 800f19e:	1d19      	adds	r1, r3, #4
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	9103      	str	r1, [sp, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	bfbb      	ittet	lt
 800f1a8:	425b      	neglt	r3, r3
 800f1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f1ae:	9307      	strge	r3, [sp, #28]
 800f1b0:	9307      	strlt	r3, [sp, #28]
 800f1b2:	bfb8      	it	lt
 800f1b4:	9204      	strlt	r2, [sp, #16]
 800f1b6:	7823      	ldrb	r3, [r4, #0]
 800f1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ba:	d10c      	bne.n	800f1d6 <_vfiprintf_r+0x15a>
 800f1bc:	7863      	ldrb	r3, [r4, #1]
 800f1be:	2b2a      	cmp	r3, #42	; 0x2a
 800f1c0:	d134      	bne.n	800f22c <_vfiprintf_r+0x1b0>
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	3402      	adds	r4, #2
 800f1c6:	1d1a      	adds	r2, r3, #4
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	9203      	str	r2, [sp, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	bfb8      	it	lt
 800f1d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1d4:	9305      	str	r3, [sp, #20]
 800f1d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2a0 <_vfiprintf_r+0x224>
 800f1da:	2203      	movs	r2, #3
 800f1dc:	4650      	mov	r0, sl
 800f1de:	7821      	ldrb	r1, [r4, #0]
 800f1e0:	f7fd fb06 	bl	800c7f0 <memchr>
 800f1e4:	b138      	cbz	r0, 800f1f6 <_vfiprintf_r+0x17a>
 800f1e6:	2240      	movs	r2, #64	; 0x40
 800f1e8:	9b04      	ldr	r3, [sp, #16]
 800f1ea:	eba0 000a 	sub.w	r0, r0, sl
 800f1ee:	4082      	lsls	r2, r0
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	3401      	adds	r4, #1
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1fa:	2206      	movs	r2, #6
 800f1fc:	4829      	ldr	r0, [pc, #164]	; (800f2a4 <_vfiprintf_r+0x228>)
 800f1fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f202:	f7fd faf5 	bl	800c7f0 <memchr>
 800f206:	2800      	cmp	r0, #0
 800f208:	d03f      	beq.n	800f28a <_vfiprintf_r+0x20e>
 800f20a:	4b27      	ldr	r3, [pc, #156]	; (800f2a8 <_vfiprintf_r+0x22c>)
 800f20c:	bb1b      	cbnz	r3, 800f256 <_vfiprintf_r+0x1da>
 800f20e:	9b03      	ldr	r3, [sp, #12]
 800f210:	3307      	adds	r3, #7
 800f212:	f023 0307 	bic.w	r3, r3, #7
 800f216:	3308      	adds	r3, #8
 800f218:	9303      	str	r3, [sp, #12]
 800f21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f21c:	443b      	add	r3, r7
 800f21e:	9309      	str	r3, [sp, #36]	; 0x24
 800f220:	e768      	b.n	800f0f4 <_vfiprintf_r+0x78>
 800f222:	460c      	mov	r4, r1
 800f224:	2001      	movs	r0, #1
 800f226:	fb0c 3202 	mla	r2, ip, r2, r3
 800f22a:	e7a6      	b.n	800f17a <_vfiprintf_r+0xfe>
 800f22c:	2300      	movs	r3, #0
 800f22e:	f04f 0c0a 	mov.w	ip, #10
 800f232:	4619      	mov	r1, r3
 800f234:	3401      	adds	r4, #1
 800f236:	9305      	str	r3, [sp, #20]
 800f238:	4620      	mov	r0, r4
 800f23a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f23e:	3a30      	subs	r2, #48	; 0x30
 800f240:	2a09      	cmp	r2, #9
 800f242:	d903      	bls.n	800f24c <_vfiprintf_r+0x1d0>
 800f244:	2b00      	cmp	r3, #0
 800f246:	d0c6      	beq.n	800f1d6 <_vfiprintf_r+0x15a>
 800f248:	9105      	str	r1, [sp, #20]
 800f24a:	e7c4      	b.n	800f1d6 <_vfiprintf_r+0x15a>
 800f24c:	4604      	mov	r4, r0
 800f24e:	2301      	movs	r3, #1
 800f250:	fb0c 2101 	mla	r1, ip, r1, r2
 800f254:	e7f0      	b.n	800f238 <_vfiprintf_r+0x1bc>
 800f256:	ab03      	add	r3, sp, #12
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	462a      	mov	r2, r5
 800f25c:	4630      	mov	r0, r6
 800f25e:	4b13      	ldr	r3, [pc, #76]	; (800f2ac <_vfiprintf_r+0x230>)
 800f260:	a904      	add	r1, sp, #16
 800f262:	f7fc fa61 	bl	800b728 <_printf_float>
 800f266:	4607      	mov	r7, r0
 800f268:	1c78      	adds	r0, r7, #1
 800f26a:	d1d6      	bne.n	800f21a <_vfiprintf_r+0x19e>
 800f26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f26e:	07d9      	lsls	r1, r3, #31
 800f270:	d405      	bmi.n	800f27e <_vfiprintf_r+0x202>
 800f272:	89ab      	ldrh	r3, [r5, #12]
 800f274:	059a      	lsls	r2, r3, #22
 800f276:	d402      	bmi.n	800f27e <_vfiprintf_r+0x202>
 800f278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f27a:	f7fd fab8 	bl	800c7ee <__retarget_lock_release_recursive>
 800f27e:	89ab      	ldrh	r3, [r5, #12]
 800f280:	065b      	lsls	r3, r3, #25
 800f282:	f53f af1d 	bmi.w	800f0c0 <_vfiprintf_r+0x44>
 800f286:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f288:	e71c      	b.n	800f0c4 <_vfiprintf_r+0x48>
 800f28a:	ab03      	add	r3, sp, #12
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	462a      	mov	r2, r5
 800f290:	4630      	mov	r0, r6
 800f292:	4b06      	ldr	r3, [pc, #24]	; (800f2ac <_vfiprintf_r+0x230>)
 800f294:	a904      	add	r1, sp, #16
 800f296:	f7fc fce7 	bl	800bc68 <_printf_i>
 800f29a:	e7e4      	b.n	800f266 <_vfiprintf_r+0x1ea>
 800f29c:	08010329 	.word	0x08010329
 800f2a0:	0801032f 	.word	0x0801032f
 800f2a4:	08010333 	.word	0x08010333
 800f2a8:	0800b729 	.word	0x0800b729
 800f2ac:	0800f057 	.word	0x0800f057

0800f2b0 <__sflush_r>:
 800f2b0:	898a      	ldrh	r2, [r1, #12]
 800f2b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b4:	4605      	mov	r5, r0
 800f2b6:	0710      	lsls	r0, r2, #28
 800f2b8:	460c      	mov	r4, r1
 800f2ba:	d457      	bmi.n	800f36c <__sflush_r+0xbc>
 800f2bc:	684b      	ldr	r3, [r1, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	dc04      	bgt.n	800f2cc <__sflush_r+0x1c>
 800f2c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	dc01      	bgt.n	800f2cc <__sflush_r+0x1c>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2ce:	2e00      	cmp	r6, #0
 800f2d0:	d0fa      	beq.n	800f2c8 <__sflush_r+0x18>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2d8:	682f      	ldr	r7, [r5, #0]
 800f2da:	6a21      	ldr	r1, [r4, #32]
 800f2dc:	602b      	str	r3, [r5, #0]
 800f2de:	d032      	beq.n	800f346 <__sflush_r+0x96>
 800f2e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2e2:	89a3      	ldrh	r3, [r4, #12]
 800f2e4:	075a      	lsls	r2, r3, #29
 800f2e6:	d505      	bpl.n	800f2f4 <__sflush_r+0x44>
 800f2e8:	6863      	ldr	r3, [r4, #4]
 800f2ea:	1ac0      	subs	r0, r0, r3
 800f2ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2ee:	b10b      	cbz	r3, 800f2f4 <__sflush_r+0x44>
 800f2f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2f2:	1ac0      	subs	r0, r0, r3
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	6a21      	ldr	r1, [r4, #32]
 800f2fe:	47b0      	blx	r6
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	d106      	bne.n	800f314 <__sflush_r+0x64>
 800f306:	6829      	ldr	r1, [r5, #0]
 800f308:	291d      	cmp	r1, #29
 800f30a:	d82b      	bhi.n	800f364 <__sflush_r+0xb4>
 800f30c:	4a28      	ldr	r2, [pc, #160]	; (800f3b0 <__sflush_r+0x100>)
 800f30e:	410a      	asrs	r2, r1
 800f310:	07d6      	lsls	r6, r2, #31
 800f312:	d427      	bmi.n	800f364 <__sflush_r+0xb4>
 800f314:	2200      	movs	r2, #0
 800f316:	6062      	str	r2, [r4, #4]
 800f318:	6922      	ldr	r2, [r4, #16]
 800f31a:	04d9      	lsls	r1, r3, #19
 800f31c:	6022      	str	r2, [r4, #0]
 800f31e:	d504      	bpl.n	800f32a <__sflush_r+0x7a>
 800f320:	1c42      	adds	r2, r0, #1
 800f322:	d101      	bne.n	800f328 <__sflush_r+0x78>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	b903      	cbnz	r3, 800f32a <__sflush_r+0x7a>
 800f328:	6560      	str	r0, [r4, #84]	; 0x54
 800f32a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f32c:	602f      	str	r7, [r5, #0]
 800f32e:	2900      	cmp	r1, #0
 800f330:	d0ca      	beq.n	800f2c8 <__sflush_r+0x18>
 800f332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f336:	4299      	cmp	r1, r3
 800f338:	d002      	beq.n	800f340 <__sflush_r+0x90>
 800f33a:	4628      	mov	r0, r5
 800f33c:	f7fe f8e8 	bl	800d510 <_free_r>
 800f340:	2000      	movs	r0, #0
 800f342:	6360      	str	r0, [r4, #52]	; 0x34
 800f344:	e7c1      	b.n	800f2ca <__sflush_r+0x1a>
 800f346:	2301      	movs	r3, #1
 800f348:	4628      	mov	r0, r5
 800f34a:	47b0      	blx	r6
 800f34c:	1c41      	adds	r1, r0, #1
 800f34e:	d1c8      	bne.n	800f2e2 <__sflush_r+0x32>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0c5      	beq.n	800f2e2 <__sflush_r+0x32>
 800f356:	2b1d      	cmp	r3, #29
 800f358:	d001      	beq.n	800f35e <__sflush_r+0xae>
 800f35a:	2b16      	cmp	r3, #22
 800f35c:	d101      	bne.n	800f362 <__sflush_r+0xb2>
 800f35e:	602f      	str	r7, [r5, #0]
 800f360:	e7b2      	b.n	800f2c8 <__sflush_r+0x18>
 800f362:	89a3      	ldrh	r3, [r4, #12]
 800f364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f368:	81a3      	strh	r3, [r4, #12]
 800f36a:	e7ae      	b.n	800f2ca <__sflush_r+0x1a>
 800f36c:	690f      	ldr	r7, [r1, #16]
 800f36e:	2f00      	cmp	r7, #0
 800f370:	d0aa      	beq.n	800f2c8 <__sflush_r+0x18>
 800f372:	0793      	lsls	r3, r2, #30
 800f374:	bf18      	it	ne
 800f376:	2300      	movne	r3, #0
 800f378:	680e      	ldr	r6, [r1, #0]
 800f37a:	bf08      	it	eq
 800f37c:	694b      	ldreq	r3, [r1, #20]
 800f37e:	1bf6      	subs	r6, r6, r7
 800f380:	600f      	str	r7, [r1, #0]
 800f382:	608b      	str	r3, [r1, #8]
 800f384:	2e00      	cmp	r6, #0
 800f386:	dd9f      	ble.n	800f2c8 <__sflush_r+0x18>
 800f388:	4633      	mov	r3, r6
 800f38a:	463a      	mov	r2, r7
 800f38c:	4628      	mov	r0, r5
 800f38e:	6a21      	ldr	r1, [r4, #32]
 800f390:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f394:	47e0      	blx	ip
 800f396:	2800      	cmp	r0, #0
 800f398:	dc06      	bgt.n	800f3a8 <__sflush_r+0xf8>
 800f39a:	89a3      	ldrh	r3, [r4, #12]
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a4:	81a3      	strh	r3, [r4, #12]
 800f3a6:	e790      	b.n	800f2ca <__sflush_r+0x1a>
 800f3a8:	4407      	add	r7, r0
 800f3aa:	1a36      	subs	r6, r6, r0
 800f3ac:	e7ea      	b.n	800f384 <__sflush_r+0xd4>
 800f3ae:	bf00      	nop
 800f3b0:	dfbffffe 	.word	0xdfbffffe

0800f3b4 <_fflush_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	690b      	ldr	r3, [r1, #16]
 800f3b8:	4605      	mov	r5, r0
 800f3ba:	460c      	mov	r4, r1
 800f3bc:	b913      	cbnz	r3, 800f3c4 <_fflush_r+0x10>
 800f3be:	2500      	movs	r5, #0
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	bd38      	pop	{r3, r4, r5, pc}
 800f3c4:	b118      	cbz	r0, 800f3ce <_fflush_r+0x1a>
 800f3c6:	6a03      	ldr	r3, [r0, #32]
 800f3c8:	b90b      	cbnz	r3, 800f3ce <_fflush_r+0x1a>
 800f3ca:	f7fc fff7 	bl	800c3bc <__sinit>
 800f3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d0f3      	beq.n	800f3be <_fflush_r+0xa>
 800f3d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3d8:	07d0      	lsls	r0, r2, #31
 800f3da:	d404      	bmi.n	800f3e6 <_fflush_r+0x32>
 800f3dc:	0599      	lsls	r1, r3, #22
 800f3de:	d402      	bmi.n	800f3e6 <_fflush_r+0x32>
 800f3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3e2:	f7fd fa03 	bl	800c7ec <__retarget_lock_acquire_recursive>
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	f7ff ff61 	bl	800f2b0 <__sflush_r>
 800f3ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3f0:	4605      	mov	r5, r0
 800f3f2:	07da      	lsls	r2, r3, #31
 800f3f4:	d4e4      	bmi.n	800f3c0 <_fflush_r+0xc>
 800f3f6:	89a3      	ldrh	r3, [r4, #12]
 800f3f8:	059b      	lsls	r3, r3, #22
 800f3fa:	d4e1      	bmi.n	800f3c0 <_fflush_r+0xc>
 800f3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3fe:	f7fd f9f6 	bl	800c7ee <__retarget_lock_release_recursive>
 800f402:	e7dd      	b.n	800f3c0 <_fflush_r+0xc>

0800f404 <__swhatbuf_r>:
 800f404:	b570      	push	{r4, r5, r6, lr}
 800f406:	460c      	mov	r4, r1
 800f408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f40c:	4615      	mov	r5, r2
 800f40e:	2900      	cmp	r1, #0
 800f410:	461e      	mov	r6, r3
 800f412:	b096      	sub	sp, #88	; 0x58
 800f414:	da0c      	bge.n	800f430 <__swhatbuf_r+0x2c>
 800f416:	89a3      	ldrh	r3, [r4, #12]
 800f418:	2100      	movs	r1, #0
 800f41a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f41e:	bf0c      	ite	eq
 800f420:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f424:	2340      	movne	r3, #64	; 0x40
 800f426:	2000      	movs	r0, #0
 800f428:	6031      	str	r1, [r6, #0]
 800f42a:	602b      	str	r3, [r5, #0]
 800f42c:	b016      	add	sp, #88	; 0x58
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	466a      	mov	r2, sp
 800f432:	f000 f875 	bl	800f520 <_fstat_r>
 800f436:	2800      	cmp	r0, #0
 800f438:	dbed      	blt.n	800f416 <__swhatbuf_r+0x12>
 800f43a:	9901      	ldr	r1, [sp, #4]
 800f43c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f440:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f444:	4259      	negs	r1, r3
 800f446:	4159      	adcs	r1, r3
 800f448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f44c:	e7eb      	b.n	800f426 <__swhatbuf_r+0x22>

0800f44e <__smakebuf_r>:
 800f44e:	898b      	ldrh	r3, [r1, #12]
 800f450:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f452:	079d      	lsls	r5, r3, #30
 800f454:	4606      	mov	r6, r0
 800f456:	460c      	mov	r4, r1
 800f458:	d507      	bpl.n	800f46a <__smakebuf_r+0x1c>
 800f45a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	6123      	str	r3, [r4, #16]
 800f462:	2301      	movs	r3, #1
 800f464:	6163      	str	r3, [r4, #20]
 800f466:	b002      	add	sp, #8
 800f468:	bd70      	pop	{r4, r5, r6, pc}
 800f46a:	466a      	mov	r2, sp
 800f46c:	ab01      	add	r3, sp, #4
 800f46e:	f7ff ffc9 	bl	800f404 <__swhatbuf_r>
 800f472:	9900      	ldr	r1, [sp, #0]
 800f474:	4605      	mov	r5, r0
 800f476:	4630      	mov	r0, r6
 800f478:	f7fe f8ba 	bl	800d5f0 <_malloc_r>
 800f47c:	b948      	cbnz	r0, 800f492 <__smakebuf_r+0x44>
 800f47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f482:	059a      	lsls	r2, r3, #22
 800f484:	d4ef      	bmi.n	800f466 <__smakebuf_r+0x18>
 800f486:	f023 0303 	bic.w	r3, r3, #3
 800f48a:	f043 0302 	orr.w	r3, r3, #2
 800f48e:	81a3      	strh	r3, [r4, #12]
 800f490:	e7e3      	b.n	800f45a <__smakebuf_r+0xc>
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	6020      	str	r0, [r4, #0]
 800f496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f49a:	81a3      	strh	r3, [r4, #12]
 800f49c:	9b00      	ldr	r3, [sp, #0]
 800f49e:	6120      	str	r0, [r4, #16]
 800f4a0:	6163      	str	r3, [r4, #20]
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	b15b      	cbz	r3, 800f4be <__smakebuf_r+0x70>
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4ac:	f000 f84a 	bl	800f544 <_isatty_r>
 800f4b0:	b128      	cbz	r0, 800f4be <__smakebuf_r+0x70>
 800f4b2:	89a3      	ldrh	r3, [r4, #12]
 800f4b4:	f023 0303 	bic.w	r3, r3, #3
 800f4b8:	f043 0301 	orr.w	r3, r3, #1
 800f4bc:	81a3      	strh	r3, [r4, #12]
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	431d      	orrs	r5, r3
 800f4c2:	81a5      	strh	r5, [r4, #12]
 800f4c4:	e7cf      	b.n	800f466 <__smakebuf_r+0x18>

0800f4c6 <memmove>:
 800f4c6:	4288      	cmp	r0, r1
 800f4c8:	b510      	push	{r4, lr}
 800f4ca:	eb01 0402 	add.w	r4, r1, r2
 800f4ce:	d902      	bls.n	800f4d6 <memmove+0x10>
 800f4d0:	4284      	cmp	r4, r0
 800f4d2:	4623      	mov	r3, r4
 800f4d4:	d807      	bhi.n	800f4e6 <memmove+0x20>
 800f4d6:	1e43      	subs	r3, r0, #1
 800f4d8:	42a1      	cmp	r1, r4
 800f4da:	d008      	beq.n	800f4ee <memmove+0x28>
 800f4dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4e4:	e7f8      	b.n	800f4d8 <memmove+0x12>
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	4402      	add	r2, r0
 800f4ea:	428a      	cmp	r2, r1
 800f4ec:	d100      	bne.n	800f4f0 <memmove+0x2a>
 800f4ee:	bd10      	pop	{r4, pc}
 800f4f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4f8:	e7f7      	b.n	800f4ea <memmove+0x24>

0800f4fa <strncmp>:
 800f4fa:	b510      	push	{r4, lr}
 800f4fc:	b16a      	cbz	r2, 800f51a <strncmp+0x20>
 800f4fe:	3901      	subs	r1, #1
 800f500:	1884      	adds	r4, r0, r2
 800f502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f506:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d103      	bne.n	800f516 <strncmp+0x1c>
 800f50e:	42a0      	cmp	r0, r4
 800f510:	d001      	beq.n	800f516 <strncmp+0x1c>
 800f512:	2a00      	cmp	r2, #0
 800f514:	d1f5      	bne.n	800f502 <strncmp+0x8>
 800f516:	1ad0      	subs	r0, r2, r3
 800f518:	bd10      	pop	{r4, pc}
 800f51a:	4610      	mov	r0, r2
 800f51c:	e7fc      	b.n	800f518 <strncmp+0x1e>
	...

0800f520 <_fstat_r>:
 800f520:	b538      	push	{r3, r4, r5, lr}
 800f522:	2300      	movs	r3, #0
 800f524:	4d06      	ldr	r5, [pc, #24]	; (800f540 <_fstat_r+0x20>)
 800f526:	4604      	mov	r4, r0
 800f528:	4608      	mov	r0, r1
 800f52a:	4611      	mov	r1, r2
 800f52c:	602b      	str	r3, [r5, #0]
 800f52e:	f7f7 fb6c 	bl	8006c0a <_fstat>
 800f532:	1c43      	adds	r3, r0, #1
 800f534:	d102      	bne.n	800f53c <_fstat_r+0x1c>
 800f536:	682b      	ldr	r3, [r5, #0]
 800f538:	b103      	cbz	r3, 800f53c <_fstat_r+0x1c>
 800f53a:	6023      	str	r3, [r4, #0]
 800f53c:	bd38      	pop	{r3, r4, r5, pc}
 800f53e:	bf00      	nop
 800f540:	200045bc 	.word	0x200045bc

0800f544 <_isatty_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	2300      	movs	r3, #0
 800f548:	4d05      	ldr	r5, [pc, #20]	; (800f560 <_isatty_r+0x1c>)
 800f54a:	4604      	mov	r4, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	602b      	str	r3, [r5, #0]
 800f550:	f7f7 fb6a 	bl	8006c28 <_isatty>
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	d102      	bne.n	800f55e <_isatty_r+0x1a>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	b103      	cbz	r3, 800f55e <_isatty_r+0x1a>
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	bd38      	pop	{r3, r4, r5, pc}
 800f560:	200045bc 	.word	0x200045bc

0800f564 <_sbrk_r>:
 800f564:	b538      	push	{r3, r4, r5, lr}
 800f566:	2300      	movs	r3, #0
 800f568:	4d05      	ldr	r5, [pc, #20]	; (800f580 <_sbrk_r+0x1c>)
 800f56a:	4604      	mov	r4, r0
 800f56c:	4608      	mov	r0, r1
 800f56e:	602b      	str	r3, [r5, #0]
 800f570:	f7f7 fb70 	bl	8006c54 <_sbrk>
 800f574:	1c43      	adds	r3, r0, #1
 800f576:	d102      	bne.n	800f57e <_sbrk_r+0x1a>
 800f578:	682b      	ldr	r3, [r5, #0]
 800f57a:	b103      	cbz	r3, 800f57e <_sbrk_r+0x1a>
 800f57c:	6023      	str	r3, [r4, #0]
 800f57e:	bd38      	pop	{r3, r4, r5, pc}
 800f580:	200045bc 	.word	0x200045bc

0800f584 <nan>:
 800f584:	2000      	movs	r0, #0
 800f586:	4901      	ldr	r1, [pc, #4]	; (800f58c <nan+0x8>)
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	7ff80000 	.word	0x7ff80000

0800f590 <__assert_func>:
 800f590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f592:	4614      	mov	r4, r2
 800f594:	461a      	mov	r2, r3
 800f596:	4b09      	ldr	r3, [pc, #36]	; (800f5bc <__assert_func+0x2c>)
 800f598:	4605      	mov	r5, r0
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68d8      	ldr	r0, [r3, #12]
 800f59e:	b14c      	cbz	r4, 800f5b4 <__assert_func+0x24>
 800f5a0:	4b07      	ldr	r3, [pc, #28]	; (800f5c0 <__assert_func+0x30>)
 800f5a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f5a6:	9100      	str	r1, [sp, #0]
 800f5a8:	462b      	mov	r3, r5
 800f5aa:	4906      	ldr	r1, [pc, #24]	; (800f5c4 <__assert_func+0x34>)
 800f5ac:	f000 fbca 	bl	800fd44 <fiprintf>
 800f5b0:	f000 fbda 	bl	800fd68 <abort>
 800f5b4:	4b04      	ldr	r3, [pc, #16]	; (800f5c8 <__assert_func+0x38>)
 800f5b6:	461c      	mov	r4, r3
 800f5b8:	e7f3      	b.n	800f5a2 <__assert_func+0x12>
 800f5ba:	bf00      	nop
 800f5bc:	20000074 	.word	0x20000074
 800f5c0:	08010342 	.word	0x08010342
 800f5c4:	0801034f 	.word	0x0801034f
 800f5c8:	0801037d 	.word	0x0801037d

0800f5cc <_calloc_r>:
 800f5cc:	b570      	push	{r4, r5, r6, lr}
 800f5ce:	fba1 5402 	umull	r5, r4, r1, r2
 800f5d2:	b934      	cbnz	r4, 800f5e2 <_calloc_r+0x16>
 800f5d4:	4629      	mov	r1, r5
 800f5d6:	f7fe f80b 	bl	800d5f0 <_malloc_r>
 800f5da:	4606      	mov	r6, r0
 800f5dc:	b928      	cbnz	r0, 800f5ea <_calloc_r+0x1e>
 800f5de:	4630      	mov	r0, r6
 800f5e0:	bd70      	pop	{r4, r5, r6, pc}
 800f5e2:	220c      	movs	r2, #12
 800f5e4:	2600      	movs	r6, #0
 800f5e6:	6002      	str	r2, [r0, #0]
 800f5e8:	e7f9      	b.n	800f5de <_calloc_r+0x12>
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	f7fd f881 	bl	800c6f4 <memset>
 800f5f2:	e7f4      	b.n	800f5de <_calloc_r+0x12>

0800f5f4 <rshift>:
 800f5f4:	6903      	ldr	r3, [r0, #16]
 800f5f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f5fe:	f100 0414 	add.w	r4, r0, #20
 800f602:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f606:	dd46      	ble.n	800f696 <rshift+0xa2>
 800f608:	f011 011f 	ands.w	r1, r1, #31
 800f60c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f610:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f614:	d10c      	bne.n	800f630 <rshift+0x3c>
 800f616:	4629      	mov	r1, r5
 800f618:	f100 0710 	add.w	r7, r0, #16
 800f61c:	42b1      	cmp	r1, r6
 800f61e:	d335      	bcc.n	800f68c <rshift+0x98>
 800f620:	1a9b      	subs	r3, r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	1eea      	subs	r2, r5, #3
 800f626:	4296      	cmp	r6, r2
 800f628:	bf38      	it	cc
 800f62a:	2300      	movcc	r3, #0
 800f62c:	4423      	add	r3, r4
 800f62e:	e015      	b.n	800f65c <rshift+0x68>
 800f630:	46a1      	mov	r9, r4
 800f632:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f636:	f1c1 0820 	rsb	r8, r1, #32
 800f63a:	40cf      	lsrs	r7, r1
 800f63c:	f105 0e04 	add.w	lr, r5, #4
 800f640:	4576      	cmp	r6, lr
 800f642:	46f4      	mov	ip, lr
 800f644:	d816      	bhi.n	800f674 <rshift+0x80>
 800f646:	1a9a      	subs	r2, r3, r2
 800f648:	0092      	lsls	r2, r2, #2
 800f64a:	3a04      	subs	r2, #4
 800f64c:	3501      	adds	r5, #1
 800f64e:	42ae      	cmp	r6, r5
 800f650:	bf38      	it	cc
 800f652:	2200      	movcc	r2, #0
 800f654:	18a3      	adds	r3, r4, r2
 800f656:	50a7      	str	r7, [r4, r2]
 800f658:	b107      	cbz	r7, 800f65c <rshift+0x68>
 800f65a:	3304      	adds	r3, #4
 800f65c:	42a3      	cmp	r3, r4
 800f65e:	eba3 0204 	sub.w	r2, r3, r4
 800f662:	bf08      	it	eq
 800f664:	2300      	moveq	r3, #0
 800f666:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f66a:	6102      	str	r2, [r0, #16]
 800f66c:	bf08      	it	eq
 800f66e:	6143      	streq	r3, [r0, #20]
 800f670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f674:	f8dc c000 	ldr.w	ip, [ip]
 800f678:	fa0c fc08 	lsl.w	ip, ip, r8
 800f67c:	ea4c 0707 	orr.w	r7, ip, r7
 800f680:	f849 7b04 	str.w	r7, [r9], #4
 800f684:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f688:	40cf      	lsrs	r7, r1
 800f68a:	e7d9      	b.n	800f640 <rshift+0x4c>
 800f68c:	f851 cb04 	ldr.w	ip, [r1], #4
 800f690:	f847 cf04 	str.w	ip, [r7, #4]!
 800f694:	e7c2      	b.n	800f61c <rshift+0x28>
 800f696:	4623      	mov	r3, r4
 800f698:	e7e0      	b.n	800f65c <rshift+0x68>

0800f69a <__hexdig_fun>:
 800f69a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f69e:	2b09      	cmp	r3, #9
 800f6a0:	d802      	bhi.n	800f6a8 <__hexdig_fun+0xe>
 800f6a2:	3820      	subs	r0, #32
 800f6a4:	b2c0      	uxtb	r0, r0
 800f6a6:	4770      	bx	lr
 800f6a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f6ac:	2b05      	cmp	r3, #5
 800f6ae:	d801      	bhi.n	800f6b4 <__hexdig_fun+0x1a>
 800f6b0:	3847      	subs	r0, #71	; 0x47
 800f6b2:	e7f7      	b.n	800f6a4 <__hexdig_fun+0xa>
 800f6b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f6b8:	2b05      	cmp	r3, #5
 800f6ba:	d801      	bhi.n	800f6c0 <__hexdig_fun+0x26>
 800f6bc:	3827      	subs	r0, #39	; 0x27
 800f6be:	e7f1      	b.n	800f6a4 <__hexdig_fun+0xa>
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	4770      	bx	lr

0800f6c4 <__gethex>:
 800f6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c8:	4681      	mov	r9, r0
 800f6ca:	468a      	mov	sl, r1
 800f6cc:	4617      	mov	r7, r2
 800f6ce:	680a      	ldr	r2, [r1, #0]
 800f6d0:	b085      	sub	sp, #20
 800f6d2:	f102 0b02 	add.w	fp, r2, #2
 800f6d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f6da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f6de:	9302      	str	r3, [sp, #8]
 800f6e0:	32fe      	adds	r2, #254	; 0xfe
 800f6e2:	eb02 030b 	add.w	r3, r2, fp
 800f6e6:	46d8      	mov	r8, fp
 800f6e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f6ec:	9301      	str	r3, [sp, #4]
 800f6ee:	2830      	cmp	r0, #48	; 0x30
 800f6f0:	d0f7      	beq.n	800f6e2 <__gethex+0x1e>
 800f6f2:	f7ff ffd2 	bl	800f69a <__hexdig_fun>
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d138      	bne.n	800f76e <__gethex+0xaa>
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	4640      	mov	r0, r8
 800f700:	49a7      	ldr	r1, [pc, #668]	; (800f9a0 <__gethex+0x2dc>)
 800f702:	f7ff fefa 	bl	800f4fa <strncmp>
 800f706:	4606      	mov	r6, r0
 800f708:	2800      	cmp	r0, #0
 800f70a:	d169      	bne.n	800f7e0 <__gethex+0x11c>
 800f70c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f710:	465d      	mov	r5, fp
 800f712:	f7ff ffc2 	bl	800f69a <__hexdig_fun>
 800f716:	2800      	cmp	r0, #0
 800f718:	d064      	beq.n	800f7e4 <__gethex+0x120>
 800f71a:	465a      	mov	r2, fp
 800f71c:	7810      	ldrb	r0, [r2, #0]
 800f71e:	4690      	mov	r8, r2
 800f720:	2830      	cmp	r0, #48	; 0x30
 800f722:	f102 0201 	add.w	r2, r2, #1
 800f726:	d0f9      	beq.n	800f71c <__gethex+0x58>
 800f728:	f7ff ffb7 	bl	800f69a <__hexdig_fun>
 800f72c:	2301      	movs	r3, #1
 800f72e:	fab0 f480 	clz	r4, r0
 800f732:	465e      	mov	r6, fp
 800f734:	0964      	lsrs	r4, r4, #5
 800f736:	9301      	str	r3, [sp, #4]
 800f738:	4642      	mov	r2, r8
 800f73a:	4615      	mov	r5, r2
 800f73c:	7828      	ldrb	r0, [r5, #0]
 800f73e:	3201      	adds	r2, #1
 800f740:	f7ff ffab 	bl	800f69a <__hexdig_fun>
 800f744:	2800      	cmp	r0, #0
 800f746:	d1f8      	bne.n	800f73a <__gethex+0x76>
 800f748:	2201      	movs	r2, #1
 800f74a:	4628      	mov	r0, r5
 800f74c:	4994      	ldr	r1, [pc, #592]	; (800f9a0 <__gethex+0x2dc>)
 800f74e:	f7ff fed4 	bl	800f4fa <strncmp>
 800f752:	b978      	cbnz	r0, 800f774 <__gethex+0xb0>
 800f754:	b946      	cbnz	r6, 800f768 <__gethex+0xa4>
 800f756:	1c6e      	adds	r6, r5, #1
 800f758:	4632      	mov	r2, r6
 800f75a:	4615      	mov	r5, r2
 800f75c:	7828      	ldrb	r0, [r5, #0]
 800f75e:	3201      	adds	r2, #1
 800f760:	f7ff ff9b 	bl	800f69a <__hexdig_fun>
 800f764:	2800      	cmp	r0, #0
 800f766:	d1f8      	bne.n	800f75a <__gethex+0x96>
 800f768:	1b73      	subs	r3, r6, r5
 800f76a:	009e      	lsls	r6, r3, #2
 800f76c:	e004      	b.n	800f778 <__gethex+0xb4>
 800f76e:	2400      	movs	r4, #0
 800f770:	4626      	mov	r6, r4
 800f772:	e7e1      	b.n	800f738 <__gethex+0x74>
 800f774:	2e00      	cmp	r6, #0
 800f776:	d1f7      	bne.n	800f768 <__gethex+0xa4>
 800f778:	782b      	ldrb	r3, [r5, #0]
 800f77a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f77e:	2b50      	cmp	r3, #80	; 0x50
 800f780:	d13d      	bne.n	800f7fe <__gethex+0x13a>
 800f782:	786b      	ldrb	r3, [r5, #1]
 800f784:	2b2b      	cmp	r3, #43	; 0x2b
 800f786:	d02f      	beq.n	800f7e8 <__gethex+0x124>
 800f788:	2b2d      	cmp	r3, #45	; 0x2d
 800f78a:	d031      	beq.n	800f7f0 <__gethex+0x12c>
 800f78c:	f04f 0b00 	mov.w	fp, #0
 800f790:	1c69      	adds	r1, r5, #1
 800f792:	7808      	ldrb	r0, [r1, #0]
 800f794:	f7ff ff81 	bl	800f69a <__hexdig_fun>
 800f798:	1e42      	subs	r2, r0, #1
 800f79a:	b2d2      	uxtb	r2, r2
 800f79c:	2a18      	cmp	r2, #24
 800f79e:	d82e      	bhi.n	800f7fe <__gethex+0x13a>
 800f7a0:	f1a0 0210 	sub.w	r2, r0, #16
 800f7a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f7a8:	f7ff ff77 	bl	800f69a <__hexdig_fun>
 800f7ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800f7b0:	fa5f fc8c 	uxtb.w	ip, ip
 800f7b4:	f1bc 0f18 	cmp.w	ip, #24
 800f7b8:	d91d      	bls.n	800f7f6 <__gethex+0x132>
 800f7ba:	f1bb 0f00 	cmp.w	fp, #0
 800f7be:	d000      	beq.n	800f7c2 <__gethex+0xfe>
 800f7c0:	4252      	negs	r2, r2
 800f7c2:	4416      	add	r6, r2
 800f7c4:	f8ca 1000 	str.w	r1, [sl]
 800f7c8:	b1dc      	cbz	r4, 800f802 <__gethex+0x13e>
 800f7ca:	9b01      	ldr	r3, [sp, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	bf14      	ite	ne
 800f7d0:	f04f 0800 	movne.w	r8, #0
 800f7d4:	f04f 0806 	moveq.w	r8, #6
 800f7d8:	4640      	mov	r0, r8
 800f7da:	b005      	add	sp, #20
 800f7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e0:	4645      	mov	r5, r8
 800f7e2:	4626      	mov	r6, r4
 800f7e4:	2401      	movs	r4, #1
 800f7e6:	e7c7      	b.n	800f778 <__gethex+0xb4>
 800f7e8:	f04f 0b00 	mov.w	fp, #0
 800f7ec:	1ca9      	adds	r1, r5, #2
 800f7ee:	e7d0      	b.n	800f792 <__gethex+0xce>
 800f7f0:	f04f 0b01 	mov.w	fp, #1
 800f7f4:	e7fa      	b.n	800f7ec <__gethex+0x128>
 800f7f6:	230a      	movs	r3, #10
 800f7f8:	fb03 0002 	mla	r0, r3, r2, r0
 800f7fc:	e7d0      	b.n	800f7a0 <__gethex+0xdc>
 800f7fe:	4629      	mov	r1, r5
 800f800:	e7e0      	b.n	800f7c4 <__gethex+0x100>
 800f802:	4621      	mov	r1, r4
 800f804:	eba5 0308 	sub.w	r3, r5, r8
 800f808:	3b01      	subs	r3, #1
 800f80a:	2b07      	cmp	r3, #7
 800f80c:	dc0a      	bgt.n	800f824 <__gethex+0x160>
 800f80e:	4648      	mov	r0, r9
 800f810:	f7fd ff7a 	bl	800d708 <_Balloc>
 800f814:	4604      	mov	r4, r0
 800f816:	b940      	cbnz	r0, 800f82a <__gethex+0x166>
 800f818:	4602      	mov	r2, r0
 800f81a:	21e4      	movs	r1, #228	; 0xe4
 800f81c:	4b61      	ldr	r3, [pc, #388]	; (800f9a4 <__gethex+0x2e0>)
 800f81e:	4862      	ldr	r0, [pc, #392]	; (800f9a8 <__gethex+0x2e4>)
 800f820:	f7ff feb6 	bl	800f590 <__assert_func>
 800f824:	3101      	adds	r1, #1
 800f826:	105b      	asrs	r3, r3, #1
 800f828:	e7ef      	b.n	800f80a <__gethex+0x146>
 800f82a:	2300      	movs	r3, #0
 800f82c:	469b      	mov	fp, r3
 800f82e:	f100 0a14 	add.w	sl, r0, #20
 800f832:	f8cd a004 	str.w	sl, [sp, #4]
 800f836:	45a8      	cmp	r8, r5
 800f838:	d344      	bcc.n	800f8c4 <__gethex+0x200>
 800f83a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f83e:	4658      	mov	r0, fp
 800f840:	f848 bb04 	str.w	fp, [r8], #4
 800f844:	eba8 080a 	sub.w	r8, r8, sl
 800f848:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800f84c:	6122      	str	r2, [r4, #16]
 800f84e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800f852:	f7fe f84b 	bl	800d8ec <__hi0bits>
 800f856:	683d      	ldr	r5, [r7, #0]
 800f858:	eba8 0800 	sub.w	r8, r8, r0
 800f85c:	45a8      	cmp	r8, r5
 800f85e:	dd59      	ble.n	800f914 <__gethex+0x250>
 800f860:	eba8 0805 	sub.w	r8, r8, r5
 800f864:	4641      	mov	r1, r8
 800f866:	4620      	mov	r0, r4
 800f868:	f7fe fbc9 	bl	800dffe <__any_on>
 800f86c:	4683      	mov	fp, r0
 800f86e:	b1b8      	cbz	r0, 800f8a0 <__gethex+0x1dc>
 800f870:	f04f 0b01 	mov.w	fp, #1
 800f874:	f108 33ff 	add.w	r3, r8, #4294967295
 800f878:	1159      	asrs	r1, r3, #5
 800f87a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f87e:	f003 021f 	and.w	r2, r3, #31
 800f882:	fa0b f202 	lsl.w	r2, fp, r2
 800f886:	420a      	tst	r2, r1
 800f888:	d00a      	beq.n	800f8a0 <__gethex+0x1dc>
 800f88a:	455b      	cmp	r3, fp
 800f88c:	dd06      	ble.n	800f89c <__gethex+0x1d8>
 800f88e:	4620      	mov	r0, r4
 800f890:	f1a8 0102 	sub.w	r1, r8, #2
 800f894:	f7fe fbb3 	bl	800dffe <__any_on>
 800f898:	2800      	cmp	r0, #0
 800f89a:	d138      	bne.n	800f90e <__gethex+0x24a>
 800f89c:	f04f 0b02 	mov.w	fp, #2
 800f8a0:	4641      	mov	r1, r8
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f7ff fea6 	bl	800f5f4 <rshift>
 800f8a8:	4446      	add	r6, r8
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	42b3      	cmp	r3, r6
 800f8ae:	da41      	bge.n	800f934 <__gethex+0x270>
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	4648      	mov	r0, r9
 800f8b4:	f7fd ff68 	bl	800d788 <_Bfree>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8bc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f8c0:	6013      	str	r3, [r2, #0]
 800f8c2:	e789      	b.n	800f7d8 <__gethex+0x114>
 800f8c4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f8c8:	2a2e      	cmp	r2, #46	; 0x2e
 800f8ca:	d014      	beq.n	800f8f6 <__gethex+0x232>
 800f8cc:	2b20      	cmp	r3, #32
 800f8ce:	d106      	bne.n	800f8de <__gethex+0x21a>
 800f8d0:	9b01      	ldr	r3, [sp, #4]
 800f8d2:	f843 bb04 	str.w	fp, [r3], #4
 800f8d6:	f04f 0b00 	mov.w	fp, #0
 800f8da:	9301      	str	r3, [sp, #4]
 800f8dc:	465b      	mov	r3, fp
 800f8de:	7828      	ldrb	r0, [r5, #0]
 800f8e0:	9303      	str	r3, [sp, #12]
 800f8e2:	f7ff feda 	bl	800f69a <__hexdig_fun>
 800f8e6:	9b03      	ldr	r3, [sp, #12]
 800f8e8:	f000 000f 	and.w	r0, r0, #15
 800f8ec:	4098      	lsls	r0, r3
 800f8ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	e79f      	b.n	800f836 <__gethex+0x172>
 800f8f6:	45a8      	cmp	r8, r5
 800f8f8:	d8e8      	bhi.n	800f8cc <__gethex+0x208>
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	4928      	ldr	r1, [pc, #160]	; (800f9a0 <__gethex+0x2dc>)
 800f900:	9303      	str	r3, [sp, #12]
 800f902:	f7ff fdfa 	bl	800f4fa <strncmp>
 800f906:	9b03      	ldr	r3, [sp, #12]
 800f908:	2800      	cmp	r0, #0
 800f90a:	d1df      	bne.n	800f8cc <__gethex+0x208>
 800f90c:	e793      	b.n	800f836 <__gethex+0x172>
 800f90e:	f04f 0b03 	mov.w	fp, #3
 800f912:	e7c5      	b.n	800f8a0 <__gethex+0x1dc>
 800f914:	da0b      	bge.n	800f92e <__gethex+0x26a>
 800f916:	eba5 0808 	sub.w	r8, r5, r8
 800f91a:	4621      	mov	r1, r4
 800f91c:	4642      	mov	r2, r8
 800f91e:	4648      	mov	r0, r9
 800f920:	f7fe f94a 	bl	800dbb8 <__lshift>
 800f924:	4604      	mov	r4, r0
 800f926:	eba6 0608 	sub.w	r6, r6, r8
 800f92a:	f100 0a14 	add.w	sl, r0, #20
 800f92e:	f04f 0b00 	mov.w	fp, #0
 800f932:	e7ba      	b.n	800f8aa <__gethex+0x1e6>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	42b3      	cmp	r3, r6
 800f938:	dd74      	ble.n	800fa24 <__gethex+0x360>
 800f93a:	1b9e      	subs	r6, r3, r6
 800f93c:	42b5      	cmp	r5, r6
 800f93e:	dc35      	bgt.n	800f9ac <__gethex+0x2e8>
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2b02      	cmp	r3, #2
 800f944:	d023      	beq.n	800f98e <__gethex+0x2ca>
 800f946:	2b03      	cmp	r3, #3
 800f948:	d025      	beq.n	800f996 <__gethex+0x2d2>
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d115      	bne.n	800f97a <__gethex+0x2b6>
 800f94e:	42b5      	cmp	r5, r6
 800f950:	d113      	bne.n	800f97a <__gethex+0x2b6>
 800f952:	2d01      	cmp	r5, #1
 800f954:	d10b      	bne.n	800f96e <__gethex+0x2aa>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	9a02      	ldr	r2, [sp, #8]
 800f95a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f95e:	6013      	str	r3, [r2, #0]
 800f960:	2301      	movs	r3, #1
 800f962:	6123      	str	r3, [r4, #16]
 800f964:	f8ca 3000 	str.w	r3, [sl]
 800f968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f96a:	601c      	str	r4, [r3, #0]
 800f96c:	e734      	b.n	800f7d8 <__gethex+0x114>
 800f96e:	4620      	mov	r0, r4
 800f970:	1e69      	subs	r1, r5, #1
 800f972:	f7fe fb44 	bl	800dffe <__any_on>
 800f976:	2800      	cmp	r0, #0
 800f978:	d1ed      	bne.n	800f956 <__gethex+0x292>
 800f97a:	4621      	mov	r1, r4
 800f97c:	4648      	mov	r0, r9
 800f97e:	f7fd ff03 	bl	800d788 <_Bfree>
 800f982:	2300      	movs	r3, #0
 800f984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f986:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f98a:	6013      	str	r3, [r2, #0]
 800f98c:	e724      	b.n	800f7d8 <__gethex+0x114>
 800f98e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f990:	2b00      	cmp	r3, #0
 800f992:	d1f2      	bne.n	800f97a <__gethex+0x2b6>
 800f994:	e7df      	b.n	800f956 <__gethex+0x292>
 800f996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1dc      	bne.n	800f956 <__gethex+0x292>
 800f99c:	e7ed      	b.n	800f97a <__gethex+0x2b6>
 800f99e:	bf00      	nop
 800f9a0:	080101d4 	.word	0x080101d4
 800f9a4:	08010067 	.word	0x08010067
 800f9a8:	0801037e 	.word	0x0801037e
 800f9ac:	f106 38ff 	add.w	r8, r6, #4294967295
 800f9b0:	f1bb 0f00 	cmp.w	fp, #0
 800f9b4:	d133      	bne.n	800fa1e <__gethex+0x35a>
 800f9b6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ba:	d004      	beq.n	800f9c6 <__gethex+0x302>
 800f9bc:	4641      	mov	r1, r8
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f7fe fb1d 	bl	800dffe <__any_on>
 800f9c4:	4683      	mov	fp, r0
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f9cc:	f008 081f 	and.w	r8, r8, #31
 800f9d0:	fa03 f308 	lsl.w	r3, r3, r8
 800f9d4:	f04f 0802 	mov.w	r8, #2
 800f9d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f9dc:	4631      	mov	r1, r6
 800f9de:	4213      	tst	r3, r2
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	bf18      	it	ne
 800f9e4:	f04b 0b02 	orrne.w	fp, fp, #2
 800f9e8:	1bad      	subs	r5, r5, r6
 800f9ea:	f7ff fe03 	bl	800f5f4 <rshift>
 800f9ee:	687e      	ldr	r6, [r7, #4]
 800f9f0:	f1bb 0f00 	cmp.w	fp, #0
 800f9f4:	d04a      	beq.n	800fa8c <__gethex+0x3c8>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2b02      	cmp	r3, #2
 800f9fa:	d016      	beq.n	800fa2a <__gethex+0x366>
 800f9fc:	2b03      	cmp	r3, #3
 800f9fe:	d018      	beq.n	800fa32 <__gethex+0x36e>
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d109      	bne.n	800fa18 <__gethex+0x354>
 800fa04:	f01b 0f02 	tst.w	fp, #2
 800fa08:	d006      	beq.n	800fa18 <__gethex+0x354>
 800fa0a:	f8da 3000 	ldr.w	r3, [sl]
 800fa0e:	ea4b 0b03 	orr.w	fp, fp, r3
 800fa12:	f01b 0f01 	tst.w	fp, #1
 800fa16:	d10f      	bne.n	800fa38 <__gethex+0x374>
 800fa18:	f048 0810 	orr.w	r8, r8, #16
 800fa1c:	e036      	b.n	800fa8c <__gethex+0x3c8>
 800fa1e:	f04f 0b01 	mov.w	fp, #1
 800fa22:	e7d0      	b.n	800f9c6 <__gethex+0x302>
 800fa24:	f04f 0801 	mov.w	r8, #1
 800fa28:	e7e2      	b.n	800f9f0 <__gethex+0x32c>
 800fa2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa2c:	f1c3 0301 	rsb	r3, r3, #1
 800fa30:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d0ef      	beq.n	800fa18 <__gethex+0x354>
 800fa38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fa3c:	f104 0214 	add.w	r2, r4, #20
 800fa40:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fa44:	9301      	str	r3, [sp, #4]
 800fa46:	2300      	movs	r3, #0
 800fa48:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fa4c:	4694      	mov	ip, r2
 800fa4e:	f852 1b04 	ldr.w	r1, [r2], #4
 800fa52:	f1b1 3fff 	cmp.w	r1, #4294967295
 800fa56:	d01e      	beq.n	800fa96 <__gethex+0x3d2>
 800fa58:	3101      	adds	r1, #1
 800fa5a:	f8cc 1000 	str.w	r1, [ip]
 800fa5e:	f1b8 0f02 	cmp.w	r8, #2
 800fa62:	f104 0214 	add.w	r2, r4, #20
 800fa66:	d13d      	bne.n	800fae4 <__gethex+0x420>
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	42ab      	cmp	r3, r5
 800fa6e:	d10b      	bne.n	800fa88 <__gethex+0x3c4>
 800fa70:	2301      	movs	r3, #1
 800fa72:	1169      	asrs	r1, r5, #5
 800fa74:	f005 051f 	and.w	r5, r5, #31
 800fa78:	fa03 f505 	lsl.w	r5, r3, r5
 800fa7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa80:	421d      	tst	r5, r3
 800fa82:	bf18      	it	ne
 800fa84:	f04f 0801 	movne.w	r8, #1
 800fa88:	f048 0820 	orr.w	r8, r8, #32
 800fa8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa8e:	601c      	str	r4, [r3, #0]
 800fa90:	9b02      	ldr	r3, [sp, #8]
 800fa92:	601e      	str	r6, [r3, #0]
 800fa94:	e6a0      	b.n	800f7d8 <__gethex+0x114>
 800fa96:	4290      	cmp	r0, r2
 800fa98:	f842 3c04 	str.w	r3, [r2, #-4]
 800fa9c:	d8d6      	bhi.n	800fa4c <__gethex+0x388>
 800fa9e:	68a2      	ldr	r2, [r4, #8]
 800faa0:	4593      	cmp	fp, r2
 800faa2:	db17      	blt.n	800fad4 <__gethex+0x410>
 800faa4:	6861      	ldr	r1, [r4, #4]
 800faa6:	4648      	mov	r0, r9
 800faa8:	3101      	adds	r1, #1
 800faaa:	f7fd fe2d 	bl	800d708 <_Balloc>
 800faae:	4682      	mov	sl, r0
 800fab0:	b918      	cbnz	r0, 800faba <__gethex+0x3f6>
 800fab2:	4602      	mov	r2, r0
 800fab4:	2184      	movs	r1, #132	; 0x84
 800fab6:	4b1a      	ldr	r3, [pc, #104]	; (800fb20 <__gethex+0x45c>)
 800fab8:	e6b1      	b.n	800f81e <__gethex+0x15a>
 800faba:	6922      	ldr	r2, [r4, #16]
 800fabc:	f104 010c 	add.w	r1, r4, #12
 800fac0:	3202      	adds	r2, #2
 800fac2:	0092      	lsls	r2, r2, #2
 800fac4:	300c      	adds	r0, #12
 800fac6:	f7fc fea1 	bl	800c80c <memcpy>
 800faca:	4621      	mov	r1, r4
 800facc:	4648      	mov	r0, r9
 800face:	f7fd fe5b 	bl	800d788 <_Bfree>
 800fad2:	4654      	mov	r4, sl
 800fad4:	6922      	ldr	r2, [r4, #16]
 800fad6:	1c51      	adds	r1, r2, #1
 800fad8:	6121      	str	r1, [r4, #16]
 800fada:	2101      	movs	r1, #1
 800fadc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fae0:	6151      	str	r1, [r2, #20]
 800fae2:	e7bc      	b.n	800fa5e <__gethex+0x39a>
 800fae4:	6921      	ldr	r1, [r4, #16]
 800fae6:	4559      	cmp	r1, fp
 800fae8:	dd0b      	ble.n	800fb02 <__gethex+0x43e>
 800faea:	2101      	movs	r1, #1
 800faec:	4620      	mov	r0, r4
 800faee:	f7ff fd81 	bl	800f5f4 <rshift>
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	3601      	adds	r6, #1
 800faf6:	42b3      	cmp	r3, r6
 800faf8:	f6ff aeda 	blt.w	800f8b0 <__gethex+0x1ec>
 800fafc:	f04f 0801 	mov.w	r8, #1
 800fb00:	e7c2      	b.n	800fa88 <__gethex+0x3c4>
 800fb02:	f015 051f 	ands.w	r5, r5, #31
 800fb06:	d0f9      	beq.n	800fafc <__gethex+0x438>
 800fb08:	9b01      	ldr	r3, [sp, #4]
 800fb0a:	f1c5 0520 	rsb	r5, r5, #32
 800fb0e:	441a      	add	r2, r3
 800fb10:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800fb14:	f7fd feea 	bl	800d8ec <__hi0bits>
 800fb18:	42a8      	cmp	r0, r5
 800fb1a:	dbe6      	blt.n	800faea <__gethex+0x426>
 800fb1c:	e7ee      	b.n	800fafc <__gethex+0x438>
 800fb1e:	bf00      	nop
 800fb20:	08010067 	.word	0x08010067

0800fb24 <L_shift>:
 800fb24:	f1c2 0208 	rsb	r2, r2, #8
 800fb28:	0092      	lsls	r2, r2, #2
 800fb2a:	b570      	push	{r4, r5, r6, lr}
 800fb2c:	f1c2 0620 	rsb	r6, r2, #32
 800fb30:	6843      	ldr	r3, [r0, #4]
 800fb32:	6804      	ldr	r4, [r0, #0]
 800fb34:	fa03 f506 	lsl.w	r5, r3, r6
 800fb38:	432c      	orrs	r4, r5
 800fb3a:	40d3      	lsrs	r3, r2
 800fb3c:	6004      	str	r4, [r0, #0]
 800fb3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fb42:	4288      	cmp	r0, r1
 800fb44:	d3f4      	bcc.n	800fb30 <L_shift+0xc>
 800fb46:	bd70      	pop	{r4, r5, r6, pc}

0800fb48 <__match>:
 800fb48:	b530      	push	{r4, r5, lr}
 800fb4a:	6803      	ldr	r3, [r0, #0]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb52:	b914      	cbnz	r4, 800fb5a <__match+0x12>
 800fb54:	6003      	str	r3, [r0, #0]
 800fb56:	2001      	movs	r0, #1
 800fb58:	bd30      	pop	{r4, r5, pc}
 800fb5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fb62:	2d19      	cmp	r5, #25
 800fb64:	bf98      	it	ls
 800fb66:	3220      	addls	r2, #32
 800fb68:	42a2      	cmp	r2, r4
 800fb6a:	d0f0      	beq.n	800fb4e <__match+0x6>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	e7f3      	b.n	800fb58 <__match+0x10>

0800fb70 <__hexnan>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	2500      	movs	r5, #0
 800fb76:	680b      	ldr	r3, [r1, #0]
 800fb78:	4682      	mov	sl, r0
 800fb7a:	115e      	asrs	r6, r3, #5
 800fb7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fb80:	f013 031f 	ands.w	r3, r3, #31
 800fb84:	bf18      	it	ne
 800fb86:	3604      	addne	r6, #4
 800fb88:	1f37      	subs	r7, r6, #4
 800fb8a:	4690      	mov	r8, r2
 800fb8c:	46b9      	mov	r9, r7
 800fb8e:	463c      	mov	r4, r7
 800fb90:	46ab      	mov	fp, r5
 800fb92:	b087      	sub	sp, #28
 800fb94:	6801      	ldr	r1, [r0, #0]
 800fb96:	9301      	str	r3, [sp, #4]
 800fb98:	f846 5c04 	str.w	r5, [r6, #-4]
 800fb9c:	9502      	str	r5, [sp, #8]
 800fb9e:	784a      	ldrb	r2, [r1, #1]
 800fba0:	1c4b      	adds	r3, r1, #1
 800fba2:	9303      	str	r3, [sp, #12]
 800fba4:	b342      	cbz	r2, 800fbf8 <__hexnan+0x88>
 800fba6:	4610      	mov	r0, r2
 800fba8:	9105      	str	r1, [sp, #20]
 800fbaa:	9204      	str	r2, [sp, #16]
 800fbac:	f7ff fd75 	bl	800f69a <__hexdig_fun>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d14f      	bne.n	800fc54 <__hexnan+0xe4>
 800fbb4:	9a04      	ldr	r2, [sp, #16]
 800fbb6:	9905      	ldr	r1, [sp, #20]
 800fbb8:	2a20      	cmp	r2, #32
 800fbba:	d818      	bhi.n	800fbee <__hexnan+0x7e>
 800fbbc:	9b02      	ldr	r3, [sp, #8]
 800fbbe:	459b      	cmp	fp, r3
 800fbc0:	dd13      	ble.n	800fbea <__hexnan+0x7a>
 800fbc2:	454c      	cmp	r4, r9
 800fbc4:	d206      	bcs.n	800fbd4 <__hexnan+0x64>
 800fbc6:	2d07      	cmp	r5, #7
 800fbc8:	dc04      	bgt.n	800fbd4 <__hexnan+0x64>
 800fbca:	462a      	mov	r2, r5
 800fbcc:	4649      	mov	r1, r9
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7ff ffa8 	bl	800fb24 <L_shift>
 800fbd4:	4544      	cmp	r4, r8
 800fbd6:	d950      	bls.n	800fc7a <__hexnan+0x10a>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	f1a4 0904 	sub.w	r9, r4, #4
 800fbde:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbe2:	461d      	mov	r5, r3
 800fbe4:	464c      	mov	r4, r9
 800fbe6:	f8cd b008 	str.w	fp, [sp, #8]
 800fbea:	9903      	ldr	r1, [sp, #12]
 800fbec:	e7d7      	b.n	800fb9e <__hexnan+0x2e>
 800fbee:	2a29      	cmp	r2, #41	; 0x29
 800fbf0:	d155      	bne.n	800fc9e <__hexnan+0x12e>
 800fbf2:	3102      	adds	r1, #2
 800fbf4:	f8ca 1000 	str.w	r1, [sl]
 800fbf8:	f1bb 0f00 	cmp.w	fp, #0
 800fbfc:	d04f      	beq.n	800fc9e <__hexnan+0x12e>
 800fbfe:	454c      	cmp	r4, r9
 800fc00:	d206      	bcs.n	800fc10 <__hexnan+0xa0>
 800fc02:	2d07      	cmp	r5, #7
 800fc04:	dc04      	bgt.n	800fc10 <__hexnan+0xa0>
 800fc06:	462a      	mov	r2, r5
 800fc08:	4649      	mov	r1, r9
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	f7ff ff8a 	bl	800fb24 <L_shift>
 800fc10:	4544      	cmp	r4, r8
 800fc12:	d934      	bls.n	800fc7e <__hexnan+0x10e>
 800fc14:	4623      	mov	r3, r4
 800fc16:	f1a8 0204 	sub.w	r2, r8, #4
 800fc1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fc1e:	429f      	cmp	r7, r3
 800fc20:	f842 1f04 	str.w	r1, [r2, #4]!
 800fc24:	d2f9      	bcs.n	800fc1a <__hexnan+0xaa>
 800fc26:	1b3b      	subs	r3, r7, r4
 800fc28:	f023 0303 	bic.w	r3, r3, #3
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	3e03      	subs	r6, #3
 800fc30:	3401      	adds	r4, #1
 800fc32:	42a6      	cmp	r6, r4
 800fc34:	bf38      	it	cc
 800fc36:	2304      	movcc	r3, #4
 800fc38:	2200      	movs	r2, #0
 800fc3a:	4443      	add	r3, r8
 800fc3c:	f843 2b04 	str.w	r2, [r3], #4
 800fc40:	429f      	cmp	r7, r3
 800fc42:	d2fb      	bcs.n	800fc3c <__hexnan+0xcc>
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	b91b      	cbnz	r3, 800fc50 <__hexnan+0xe0>
 800fc48:	4547      	cmp	r7, r8
 800fc4a:	d126      	bne.n	800fc9a <__hexnan+0x12a>
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	603b      	str	r3, [r7, #0]
 800fc50:	2005      	movs	r0, #5
 800fc52:	e025      	b.n	800fca0 <__hexnan+0x130>
 800fc54:	3501      	adds	r5, #1
 800fc56:	2d08      	cmp	r5, #8
 800fc58:	f10b 0b01 	add.w	fp, fp, #1
 800fc5c:	dd06      	ble.n	800fc6c <__hexnan+0xfc>
 800fc5e:	4544      	cmp	r4, r8
 800fc60:	d9c3      	bls.n	800fbea <__hexnan+0x7a>
 800fc62:	2300      	movs	r3, #0
 800fc64:	2501      	movs	r5, #1
 800fc66:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc6a:	3c04      	subs	r4, #4
 800fc6c:	6822      	ldr	r2, [r4, #0]
 800fc6e:	f000 000f 	and.w	r0, r0, #15
 800fc72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fc76:	6020      	str	r0, [r4, #0]
 800fc78:	e7b7      	b.n	800fbea <__hexnan+0x7a>
 800fc7a:	2508      	movs	r5, #8
 800fc7c:	e7b5      	b.n	800fbea <__hexnan+0x7a>
 800fc7e:	9b01      	ldr	r3, [sp, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d0df      	beq.n	800fc44 <__hexnan+0xd4>
 800fc84:	f04f 32ff 	mov.w	r2, #4294967295
 800fc88:	f1c3 0320 	rsb	r3, r3, #32
 800fc8c:	40da      	lsrs	r2, r3
 800fc8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fc92:	4013      	ands	r3, r2
 800fc94:	f846 3c04 	str.w	r3, [r6, #-4]
 800fc98:	e7d4      	b.n	800fc44 <__hexnan+0xd4>
 800fc9a:	3f04      	subs	r7, #4
 800fc9c:	e7d2      	b.n	800fc44 <__hexnan+0xd4>
 800fc9e:	2004      	movs	r0, #4
 800fca0:	b007      	add	sp, #28
 800fca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fca6 <__ascii_mbtowc>:
 800fca6:	b082      	sub	sp, #8
 800fca8:	b901      	cbnz	r1, 800fcac <__ascii_mbtowc+0x6>
 800fcaa:	a901      	add	r1, sp, #4
 800fcac:	b142      	cbz	r2, 800fcc0 <__ascii_mbtowc+0x1a>
 800fcae:	b14b      	cbz	r3, 800fcc4 <__ascii_mbtowc+0x1e>
 800fcb0:	7813      	ldrb	r3, [r2, #0]
 800fcb2:	600b      	str	r3, [r1, #0]
 800fcb4:	7812      	ldrb	r2, [r2, #0]
 800fcb6:	1e10      	subs	r0, r2, #0
 800fcb8:	bf18      	it	ne
 800fcba:	2001      	movne	r0, #1
 800fcbc:	b002      	add	sp, #8
 800fcbe:	4770      	bx	lr
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	e7fb      	b.n	800fcbc <__ascii_mbtowc+0x16>
 800fcc4:	f06f 0001 	mvn.w	r0, #1
 800fcc8:	e7f8      	b.n	800fcbc <__ascii_mbtowc+0x16>

0800fcca <_realloc_r>:
 800fcca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcce:	4680      	mov	r8, r0
 800fcd0:	4614      	mov	r4, r2
 800fcd2:	460e      	mov	r6, r1
 800fcd4:	b921      	cbnz	r1, 800fce0 <_realloc_r+0x16>
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcdc:	f7fd bc88 	b.w	800d5f0 <_malloc_r>
 800fce0:	b92a      	cbnz	r2, 800fcee <_realloc_r+0x24>
 800fce2:	f7fd fc15 	bl	800d510 <_free_r>
 800fce6:	4625      	mov	r5, r4
 800fce8:	4628      	mov	r0, r5
 800fcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcee:	f000 f842 	bl	800fd76 <_malloc_usable_size_r>
 800fcf2:	4284      	cmp	r4, r0
 800fcf4:	4607      	mov	r7, r0
 800fcf6:	d802      	bhi.n	800fcfe <_realloc_r+0x34>
 800fcf8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcfc:	d812      	bhi.n	800fd24 <_realloc_r+0x5a>
 800fcfe:	4621      	mov	r1, r4
 800fd00:	4640      	mov	r0, r8
 800fd02:	f7fd fc75 	bl	800d5f0 <_malloc_r>
 800fd06:	4605      	mov	r5, r0
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d0ed      	beq.n	800fce8 <_realloc_r+0x1e>
 800fd0c:	42bc      	cmp	r4, r7
 800fd0e:	4622      	mov	r2, r4
 800fd10:	4631      	mov	r1, r6
 800fd12:	bf28      	it	cs
 800fd14:	463a      	movcs	r2, r7
 800fd16:	f7fc fd79 	bl	800c80c <memcpy>
 800fd1a:	4631      	mov	r1, r6
 800fd1c:	4640      	mov	r0, r8
 800fd1e:	f7fd fbf7 	bl	800d510 <_free_r>
 800fd22:	e7e1      	b.n	800fce8 <_realloc_r+0x1e>
 800fd24:	4635      	mov	r5, r6
 800fd26:	e7df      	b.n	800fce8 <_realloc_r+0x1e>

0800fd28 <__ascii_wctomb>:
 800fd28:	4603      	mov	r3, r0
 800fd2a:	4608      	mov	r0, r1
 800fd2c:	b141      	cbz	r1, 800fd40 <__ascii_wctomb+0x18>
 800fd2e:	2aff      	cmp	r2, #255	; 0xff
 800fd30:	d904      	bls.n	800fd3c <__ascii_wctomb+0x14>
 800fd32:	228a      	movs	r2, #138	; 0x8a
 800fd34:	f04f 30ff 	mov.w	r0, #4294967295
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	4770      	bx	lr
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	700a      	strb	r2, [r1, #0]
 800fd40:	4770      	bx	lr
	...

0800fd44 <fiprintf>:
 800fd44:	b40e      	push	{r1, r2, r3}
 800fd46:	b503      	push	{r0, r1, lr}
 800fd48:	4601      	mov	r1, r0
 800fd4a:	ab03      	add	r3, sp, #12
 800fd4c:	4805      	ldr	r0, [pc, #20]	; (800fd64 <fiprintf+0x20>)
 800fd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd52:	6800      	ldr	r0, [r0, #0]
 800fd54:	9301      	str	r3, [sp, #4]
 800fd56:	f7ff f991 	bl	800f07c <_vfiprintf_r>
 800fd5a:	b002      	add	sp, #8
 800fd5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd60:	b003      	add	sp, #12
 800fd62:	4770      	bx	lr
 800fd64:	20000074 	.word	0x20000074

0800fd68 <abort>:
 800fd68:	2006      	movs	r0, #6
 800fd6a:	b508      	push	{r3, lr}
 800fd6c:	f000 f834 	bl	800fdd8 <raise>
 800fd70:	2001      	movs	r0, #1
 800fd72:	f7f6 ff18 	bl	8006ba6 <_exit>

0800fd76 <_malloc_usable_size_r>:
 800fd76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd7a:	1f18      	subs	r0, r3, #4
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	bfbc      	itt	lt
 800fd80:	580b      	ldrlt	r3, [r1, r0]
 800fd82:	18c0      	addlt	r0, r0, r3
 800fd84:	4770      	bx	lr

0800fd86 <_raise_r>:
 800fd86:	291f      	cmp	r1, #31
 800fd88:	b538      	push	{r3, r4, r5, lr}
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	460d      	mov	r5, r1
 800fd8e:	d904      	bls.n	800fd9a <_raise_r+0x14>
 800fd90:	2316      	movs	r3, #22
 800fd92:	6003      	str	r3, [r0, #0]
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295
 800fd98:	bd38      	pop	{r3, r4, r5, pc}
 800fd9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fd9c:	b112      	cbz	r2, 800fda4 <_raise_r+0x1e>
 800fd9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fda2:	b94b      	cbnz	r3, 800fdb8 <_raise_r+0x32>
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 f831 	bl	800fe0c <_getpid_r>
 800fdaa:	462a      	mov	r2, r5
 800fdac:	4601      	mov	r1, r0
 800fdae:	4620      	mov	r0, r4
 800fdb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdb4:	f000 b818 	b.w	800fde8 <_kill_r>
 800fdb8:	2b01      	cmp	r3, #1
 800fdba:	d00a      	beq.n	800fdd2 <_raise_r+0x4c>
 800fdbc:	1c59      	adds	r1, r3, #1
 800fdbe:	d103      	bne.n	800fdc8 <_raise_r+0x42>
 800fdc0:	2316      	movs	r3, #22
 800fdc2:	6003      	str	r3, [r0, #0]
 800fdc4:	2001      	movs	r0, #1
 800fdc6:	e7e7      	b.n	800fd98 <_raise_r+0x12>
 800fdc8:	2400      	movs	r4, #0
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fdd0:	4798      	blx	r3
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	e7e0      	b.n	800fd98 <_raise_r+0x12>
	...

0800fdd8 <raise>:
 800fdd8:	4b02      	ldr	r3, [pc, #8]	; (800fde4 <raise+0xc>)
 800fdda:	4601      	mov	r1, r0
 800fddc:	6818      	ldr	r0, [r3, #0]
 800fdde:	f7ff bfd2 	b.w	800fd86 <_raise_r>
 800fde2:	bf00      	nop
 800fde4:	20000074 	.word	0x20000074

0800fde8 <_kill_r>:
 800fde8:	b538      	push	{r3, r4, r5, lr}
 800fdea:	2300      	movs	r3, #0
 800fdec:	4d06      	ldr	r5, [pc, #24]	; (800fe08 <_kill_r+0x20>)
 800fdee:	4604      	mov	r4, r0
 800fdf0:	4608      	mov	r0, r1
 800fdf2:	4611      	mov	r1, r2
 800fdf4:	602b      	str	r3, [r5, #0]
 800fdf6:	f7f6 fec6 	bl	8006b86 <_kill>
 800fdfa:	1c43      	adds	r3, r0, #1
 800fdfc:	d102      	bne.n	800fe04 <_kill_r+0x1c>
 800fdfe:	682b      	ldr	r3, [r5, #0]
 800fe00:	b103      	cbz	r3, 800fe04 <_kill_r+0x1c>
 800fe02:	6023      	str	r3, [r4, #0]
 800fe04:	bd38      	pop	{r3, r4, r5, pc}
 800fe06:	bf00      	nop
 800fe08:	200045bc 	.word	0x200045bc

0800fe0c <_getpid_r>:
 800fe0c:	f7f6 beb4 	b.w	8006b78 <_getpid>

0800fe10 <_init>:
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	bf00      	nop
 800fe14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe16:	bc08      	pop	{r3}
 800fe18:	469e      	mov	lr, r3
 800fe1a:	4770      	bx	lr

0800fe1c <_fini>:
 800fe1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1e:	bf00      	nop
 800fe20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe22:	bc08      	pop	{r3}
 800fe24:	469e      	mov	lr, r3
 800fe26:	4770      	bx	lr
