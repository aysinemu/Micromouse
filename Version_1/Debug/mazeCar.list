
mazeCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800b3f0  0800b3f0  0001b3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8cc  0800b8cc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8cc  0800b8cc  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8cc  0800b8cc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8cc  0800b8cc  0001b8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8d0  0800b8d0  0001b8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b8d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200001d8  0800baa8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800baa8  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000110eb  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f4  00000000  00000000  0003132b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00033820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d66  00000000  00000000  00034918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003015  00000000  00000000  0003567e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014343  00000000  00000000  00038693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000949b1  00000000  00000000  0004c9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f00  00000000  00000000  000e1388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e7288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b3d8 	.word	0x0800b3d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b3d8 	.word	0x0800b3d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2lz>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4605      	mov	r5, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fd9d 	bl	80009bc <__aeabi_dcmplt>
 8000e82:	b928      	cbnz	r0, 8000e90 <__aeabi_d2lz+0x20>
 8000e84:	4628      	mov	r0, r5
 8000e86:	4621      	mov	r1, r4
 8000e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e8c:	f000 b80a 	b.w	8000ea4 <__aeabi_d2ulz>
 8000e90:	4628      	mov	r0, r5
 8000e92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e96:	f000 f805 	bl	8000ea4 <__aeabi_d2ulz>
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea0:	bd38      	pop	{r3, r4, r5, pc}
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_d2ulz>:
 8000ea4:	b5d0      	push	{r4, r6, r7, lr}
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <__aeabi_d2ulz+0x34>)
 8000eaa:	4606      	mov	r6, r0
 8000eac:	460f      	mov	r7, r1
 8000eae:	f7ff fb13 	bl	80004d8 <__aeabi_dmul>
 8000eb2:	f7ff fde9 	bl	8000a88 <__aeabi_d2uiz>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	f7ff fa94 	bl	80003e4 <__aeabi_ui2d>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <__aeabi_d2ulz+0x38>)
 8000ec0:	f7ff fb0a 	bl	80004d8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4630      	mov	r0, r6
 8000eca:	4639      	mov	r1, r7
 8000ecc:	f7ff f94c 	bl	8000168 <__aeabi_dsub>
 8000ed0:	f7ff fdda 	bl	8000a88 <__aeabi_d2uiz>
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed8:	3df00000 	.word	0x3df00000
 8000edc:	41f00000 	.word	0x41f00000

08000ee0 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	2301      	movs	r3, #1
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	f107 030f 	add.w	r3, r7, #15
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	2275      	movs	r2, #117	; 0x75
 8000efa:	21d0      	movs	r1, #208	; 0xd0
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f003 f803 	bl	8003f08 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b68      	cmp	r3, #104	; 0x68
 8000f06:	d13d      	bne.n	8000f84 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	f107 030e 	add.w	r3, r7, #14
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	226b      	movs	r2, #107	; 0x6b
 8000f1e:	21d0      	movs	r1, #208	; 0xd0
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f002 fef7 	bl	8003d14 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000f26:	2307      	movs	r3, #7
 8000f28:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 030e 	add.w	r3, r7, #14
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2219      	movs	r2, #25
 8000f3c:	21d0      	movs	r1, #208	; 0xd0
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f002 fee8 	bl	8003d14 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	f107 030e 	add.w	r3, r7, #14
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	221c      	movs	r2, #28
 8000f5a:	21d0      	movs	r1, #208	; 0xd0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f002 fed9 	bl	8003d14 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000f66:	2364      	movs	r3, #100	; 0x64
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 030e 	add.w	r3, r7, #14
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	221b      	movs	r2, #27
 8000f78:	21d0      	movs	r1, #208	; 0xd0
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f002 feca 	bl	8003d14 <HAL_I2C_Mem_Write>
        return 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e000      	b.n	8000f86 <MPU6050_Init+0xa6>
    }
    return 1;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2243      	movs	r2, #67	; 0x43
 8000fac:	21d0      	movs	r1, #208	; 0xd0
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f002 ffaa 	bl	8003f08 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000fb4:	7a3b      	ldrb	r3, [r7, #8]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7a7b      	ldrb	r3, [r7, #9]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000fc6:	7abb      	ldrb	r3, [r7, #10]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	7afb      	ldrb	r3, [r7, #11]
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000fd8:	7b3b      	ldrb	r3, [r7, #12]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	849a      	strh	r2, [r3, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fa07 	bl	8000404 <__aeabi_i2d>
 8000ff6:	a318      	add	r3, pc, #96	; (adr r3, 8001058 <MPU6050_Read_Gyro+0xc8>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fb96 	bl	800072c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f9f7 	bl	8000404 <__aeabi_i2d>
 8001016:	a310      	add	r3, pc, #64	; (adr r3, 8001058 <MPU6050_Read_Gyro+0xc8>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fb86 	bl	800072c <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f9e7 	bl	8000404 <__aeabi_i2d>
 8001036:	a308      	add	r3, pc, #32	; (adr r3, 8001058 <MPU6050_Read_Gyro+0xc8>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fb76 	bl	800072c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	6839      	ldr	r1, [r7, #0]
 8001046:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	00000000 	.word	0x00000000
 800105c:	40606000 	.word	0x40606000

08001060 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <_write+0x28>)
 8001078:	f005 fbe3 	bl	8006842 <HAL_UART_Transmit>
    return len;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200003c8 	.word	0x200003c8

0800108c <ADC_Select_CH1>:
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	{
	  Error_Handler();
	}
}
void ADC_Select_CH1(void){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_1;
 800109c:	2301      	movs	r3, #1
 800109e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80010a4:	2306      	movs	r3, #6
 80010a6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <ADC_Select_CH1+0x38>)
 80010ae:	f002 f8af 	bl	8003210 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <ADC_Select_CH1+0x30>
	{
	  Error_Handler();
 80010b8:	f001 f9fc 	bl	80024b4 <Error_Handler>
	}
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200001f4 	.word	0x200001f4

080010c8 <ADC_Select_CH2>:
void ADC_Select_CH2(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_2;
 80010d8:	2302      	movs	r3, #2
 80010da:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010dc:	2301      	movs	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80010e0:	2306      	movs	r3, #6
 80010e2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <ADC_Select_CH2+0x38>)
 80010ea:	f002 f891 	bl	8003210 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <ADC_Select_CH2+0x30>
	{
	  Error_Handler();
 80010f4:	f001 f9de 	bl	80024b4 <Error_Handler>
	}
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f4 	.word	0x200001f4

08001104 <HAL_TIM_IC_CaptureCallback>:

void filter_gyro();

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d114      	bne.n	8001140 <HAL_TIM_IC_CaptureCallback+0x3c>
    {
        counterTim2 = __HAL_TIM_GET_COUNTER(htim);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_TIM_IC_CaptureCallback+0x78>)
 800111e:	6013      	str	r3, [r2, #0]
        countTim2 = (int16_t)counterTim2;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_TIM_IC_CaptureCallback+0x78>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001128:	801a      	strh	r2, [r3, #0]
        right_wheel = countTim2 / 4;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	da00      	bge.n	8001136 <HAL_TIM_IC_CaptureCallback+0x32>
 8001134:	3303      	adds	r3, #3
 8001136:	109b      	asrs	r3, r3, #2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x80>)
 800113c:	801a      	strh	r2, [r3, #0]
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
        countTim3 = (int16_t)counterTim3;
        left_wheel = countTim3 / 4;
        // Process count for TIM3
    }
}
 800113e:	e018      	b.n	8001172 <HAL_TIM_IC_CaptureCallback+0x6e>
    else if (htim->Instance == TIM3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d113      	bne.n	8001172 <HAL_TIM_IC_CaptureCallback+0x6e>
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001152:	6013      	str	r3, [r2, #0]
        countTim3 = (int16_t)counterTim3;
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x8c>)
 800115c:	801a      	strh	r2, [r3, #0]
        left_wheel = countTim3 / 4;
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da00      	bge.n	800116a <HAL_TIM_IC_CaptureCallback+0x66>
 8001168:	3303      	adds	r3, #3
 800116a:	109b      	asrs	r3, r3, #2
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001170:	801a      	strh	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	200004a0 	.word	0x200004a0
 8001180:	200004a4 	.word	0x200004a4
 8001184:	200004a6 	.word	0x200004a6
 8001188:	40000400 	.word	0x40000400
 800118c:	200004a8 	.word	0x200004a8
 8001190:	200004ac 	.word	0x200004ac
 8001194:	200004ae 	.word	0x200004ae

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f001 fced 	bl	8002b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 fd9d 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f001 f871 	bl	800228c <MX_GPIO_Init>
  MX_ADC1_Init();
 80011aa:	f000 fdf5 	bl	8001d98 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011ae:	f001 f843 	bl	8002238 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80011b2:	f000 fe57 	bl	8001e64 <MX_I2C1_Init>
  MX_TIM2_Init();
 80011b6:	f000 ff21 	bl	8001ffc <MX_TIM2_Init>
  MX_TIM1_Init();
 80011ba:	f000 fe81 	bl	8001ec0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011be:	f000 ff71 	bl	80020a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011c2:	f000 ffc3 	bl	800214c <MX_TIM4_Init>
  MX_ADC2_Init();
 80011c6:	f000 fe0f 	bl	8001de8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  printf("hello world\r\n");
 80011ca:	48af      	ldr	r0, [pc, #700]	; (8001488 <main+0x2f0>)
 80011cc:	f007 fa60 	bl	8008690 <puts>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80011d0:	213c      	movs	r1, #60	; 0x3c
 80011d2:	48ae      	ldr	r0, [pc, #696]	; (800148c <main+0x2f4>)
 80011d4:	f004 fc1c 	bl	8005a10 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80011d8:	213c      	movs	r1, #60	; 0x3c
 80011da:	48ad      	ldr	r0, [pc, #692]	; (8001490 <main+0x2f8>)
 80011dc:	f004 fc18 	bl	8005a10 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011e0:	210c      	movs	r1, #12
 80011e2:	48ac      	ldr	r0, [pc, #688]	; (8001494 <main+0x2fc>)
 80011e4:	f004 fad0 	bl	8005788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80011e8:	2108      	movs	r1, #8
 80011ea:	48ab      	ldr	r0, [pc, #684]	; (8001498 <main+0x300>)
 80011ec:	f004 facc 	bl	8005788 <HAL_TIM_PWM_Start>

  while (MPU6050_Init(&hi2c1) == 1);
 80011f0:	bf00      	nop
 80011f2:	48aa      	ldr	r0, [pc, #680]	; (800149c <main+0x304>)
 80011f4:	f7ff fe74 	bl	8000ee0 <MPU6050_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d0f9      	beq.n	80011f2 <main+0x5a>
  printf("init success\r\n");
 80011fe:	48a8      	ldr	r0, [pc, #672]	; (80014a0 <main+0x308>)
 8001200:	f007 fa46 	bl	8008690 <puts>
  filter_gyro();
 8001204:	f001 f8b0 	bl	8002368 <filter_gyro>
//	  currentTime = HAL_GetTick();
//	  elapsedTime = currentTime - previousTime;
//	  dt = ((double) elapsedTime) / 1000;
//	  printf("GX: %d GY: %d GZ: %d dt: %f\r\n",(int)MPU6050.Gx, (int)MPU6050.Gy, (int)MPU6050.Gz,dt);

	HAL_ADC_Start(&hadc2);
 8001208:	48a6      	ldr	r0, [pc, #664]	; (80014a4 <main+0x30c>)
 800120a:	f001 fe15 	bl	8002e38 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 800120e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001212:	48a4      	ldr	r0, [pc, #656]	; (80014a4 <main+0x30c>)
 8001214:	f001 feea 	bl	8002fec <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc2);
 8001218:	48a2      	ldr	r0, [pc, #648]	; (80014a4 <main+0x30c>)
 800121a:	f001 ffed 	bl	80031f8 <HAL_ADC_GetValue>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	4ba1      	ldr	r3, [pc, #644]	; (80014a8 <main+0x310>)
 8001224:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8001226:	489f      	ldr	r0, [pc, #636]	; (80014a4 <main+0x30c>)
 8001228:	f001 feb4 	bl	8002f94 <HAL_ADC_Stop>
	HAL_Delay(20);
 800122c:	2014      	movs	r0, #20
 800122e:	f001 fd07 	bl	8002c40 <HAL_Delay>
	vol1 = (ADC_VAL[0]*3.3)/4095;
 8001232:	4b9d      	ldr	r3, [pc, #628]	; (80014a8 <main+0x310>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8e4 	bl	8000404 <__aeabi_i2d>
 800123c:	a38e      	add	r3, pc, #568	; (adr r3, 8001478 <main+0x2e0>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f949 	bl	80004d8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a38c      	add	r3, pc, #560	; (adr r3, 8001480 <main+0x2e8>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff fa6a 	bl	800072c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc32 	bl	8000ac8 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	4a91      	ldr	r2, [pc, #580]	; (80014ac <main+0x314>)
 8001268:	6013      	str	r3, [r2, #0]
	front_sensor = 13 * pow(vol1, -1);
 800126a:	4b90      	ldr	r3, [pc, #576]	; (80014ac <main+0x314>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8da 	bl	8000428 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	f04f 0000 	mov.w	r0, #0
 800127c:	498c      	ldr	r1, [pc, #560]	; (80014b0 <main+0x318>)
 800127e:	f7ff fa55 	bl	800072c <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <main+0x31c>)
 8001290:	f7ff f922 	bl	80004d8 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fc14 	bl	8000ac8 <__aeabi_d2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a85      	ldr	r2, [pc, #532]	; (80014b8 <main+0x320>)
 80012a4:	6013      	str	r3, [r2, #0]

	ADC_Select_CH1();
 80012a6:	f7ff fef1 	bl	800108c <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 80012aa:	4884      	ldr	r0, [pc, #528]	; (80014bc <main+0x324>)
 80012ac:	f001 fdc4 	bl	8002e38 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80012b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b4:	4881      	ldr	r0, [pc, #516]	; (80014bc <main+0x324>)
 80012b6:	f001 fe99 	bl	8002fec <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 80012ba:	4880      	ldr	r0, [pc, #512]	; (80014bc <main+0x324>)
 80012bc:	f001 ff9c 	bl	80031f8 <HAL_ADC_GetValue>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <main+0x310>)
 80012c6:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 80012c8:	487c      	ldr	r0, [pc, #496]	; (80014bc <main+0x324>)
 80012ca:	f001 fe63 	bl	8002f94 <HAL_ADC_Stop>
	HAL_Delay(20);
 80012ce:	2014      	movs	r0, #20
 80012d0:	f001 fcb6 	bl	8002c40 <HAL_Delay>
	vol2 = (ADC_VAL[1]*3.3)/4095;
 80012d4:	4b74      	ldr	r3, [pc, #464]	; (80014a8 <main+0x310>)
 80012d6:	885b      	ldrh	r3, [r3, #2]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f893 	bl	8000404 <__aeabi_i2d>
 80012de:	a366      	add	r3, pc, #408	; (adr r3, 8001478 <main+0x2e0>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff f8f8 	bl	80004d8 <__aeabi_dmul>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	a363      	add	r3, pc, #396	; (adr r3, 8001480 <main+0x2e8>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff fa19 	bl	800072c <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fbe1 	bl	8000ac8 <__aeabi_d2f>
 8001306:	4603      	mov	r3, r0
 8001308:	4a6d      	ldr	r2, [pc, #436]	; (80014c0 <main+0x328>)
 800130a:	6013      	str	r3, [r2, #0]
	left_sensor =  13 * pow(vol2, -1);
 800130c:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <main+0x328>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f889 	bl	8000428 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	4964      	ldr	r1, [pc, #400]	; (80014b0 <main+0x318>)
 8001320:	f7ff fa04 	bl	800072c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <main+0x31c>)
 8001332:	f7ff f8d1 	bl	80004d8 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbc3 	bl	8000ac8 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a5f      	ldr	r2, [pc, #380]	; (80014c4 <main+0x32c>)
 8001346:	6013      	str	r3, [r2, #0]

	ADC_Select_CH2();
 8001348:	f7ff febe 	bl	80010c8 <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 800134c:	485b      	ldr	r0, [pc, #364]	; (80014bc <main+0x324>)
 800134e:	f001 fd73 	bl	8002e38 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001356:	4859      	ldr	r0, [pc, #356]	; (80014bc <main+0x324>)
 8001358:	f001 fe48 	bl	8002fec <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 800135c:	4857      	ldr	r0, [pc, #348]	; (80014bc <main+0x324>)
 800135e:	f001 ff4b 	bl	80031f8 <HAL_ADC_GetValue>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <main+0x310>)
 8001368:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 800136a:	4854      	ldr	r0, [pc, #336]	; (80014bc <main+0x324>)
 800136c:	f001 fe12 	bl	8002f94 <HAL_ADC_Stop>
	HAL_Delay(20);
 8001370:	2014      	movs	r0, #20
 8001372:	f001 fc65 	bl	8002c40 <HAL_Delay>
	vol3 = (ADC_VAL[2]*3.3)/4095;
 8001376:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <main+0x310>)
 8001378:	889b      	ldrh	r3, [r3, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f842 	bl	8000404 <__aeabi_i2d>
 8001380:	a33d      	add	r3, pc, #244	; (adr r3, 8001478 <main+0x2e0>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f8a7 	bl	80004d8 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	a33b      	add	r3, pc, #236	; (adr r3, 8001480 <main+0x2e8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f9c8 	bl	800072c <__aeabi_ddiv>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fb90 	bl	8000ac8 <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <main+0x330>)
 80013ac:	6013      	str	r3, [r2, #0]
	right_sensor =  13 * pow(vol3, -1);
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <main+0x330>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f838 	bl	8000428 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	f04f 0000 	mov.w	r0, #0
 80013c0:	493b      	ldr	r1, [pc, #236]	; (80014b0 <main+0x318>)
 80013c2:	f7ff f9b3 	bl	800072c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <main+0x31c>)
 80013d4:	f7ff f880 	bl	80004d8 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fb72 	bl	8000ac8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a39      	ldr	r2, [pc, #228]	; (80014cc <main+0x334>)
 80013e8:	6013      	str	r3, [r2, #0]
//	5000L - 5150R
//	  forward(); //670 = 18cm
//	  turn_right(); //320 = 90 degree
//	  turn_left(); //300
	float t = 5.66;
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <main+0x338>)
 80013ec:	60fb      	str	r3, [r7, #12]
	float t1 = 5.94;
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <main+0x33c>)
 80013f0:	60bb      	str	r3, [r7, #8]
	float t2 = 6;
 80013f2:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <main+0x340>)
 80013f4:	607b      	str	r3, [r7, #4]
	float ss = 1;
 80013f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013fa:	603b      	str	r3, [r7, #0]
	if (left_sensor < t && right_sensor > t1  && front_sensor > t2){
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <main+0x32c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f7ff fd2a 	bl	8000e5c <__aeabi_fcmpgt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d014      	beq.n	8001438 <main+0x2a0>
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <main+0x334>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f7ff fd03 	bl	8000e20 <__aeabi_fcmplt>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <main+0x2a0>
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <main+0x320>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fcfa 	bl	8000e20 <__aeabi_fcmplt>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <main+0x2a0>
		turn_right();
 8001432:	f000 fb69 	bl	8001b08 <turn_right>
	if (left_sensor < t && right_sensor > t1  && front_sensor > t2){
 8001436:	e32a      	b.n	8001a8e <main+0x8f6>
	}else if (right_sensor < t && left_sensor > t1 && front_sensor > t2){
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <main+0x334>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fd0c 	bl	8000e5c <__aeabi_fcmpgt>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d048      	beq.n	80014dc <main+0x344>
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <main+0x32c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f7ff fce5 	bl	8000e20 <__aeabi_fcmplt>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03f      	beq.n	80014dc <main+0x344>
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <main+0x320>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fcdc 	bl	8000e20 <__aeabi_fcmplt>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d036      	beq.n	80014dc <main+0x344>
		turn_left();
 800146e:	f000 fb7d 	bl	8001b6c <turn_left>
	}else if (right_sensor < t && left_sensor > t1 && front_sensor > t2){
 8001472:	e30c      	b.n	8001a8e <main+0x8f6>
 8001474:	f3af 8000 	nop.w
 8001478:	66666666 	.word	0x66666666
 800147c:	400a6666 	.word	0x400a6666
 8001480:	00000000 	.word	0x00000000
 8001484:	40affe00 	.word	0x40affe00
 8001488:	0800b3f0 	.word	0x0800b3f0
 800148c:	200002f0 	.word	0x200002f0
 8001490:	20000338 	.word	0x20000338
 8001494:	200002a8 	.word	0x200002a8
 8001498:	20000380 	.word	0x20000380
 800149c:	20000254 	.word	0x20000254
 80014a0:	0800b400 	.word	0x0800b400
 80014a4:	20000224 	.word	0x20000224
 80014a8:	20000410 	.word	0x20000410
 80014ac:	20000418 	.word	0x20000418
 80014b0:	3ff00000 	.word	0x3ff00000
 80014b4:	402a0000 	.word	0x402a0000
 80014b8:	20000424 	.word	0x20000424
 80014bc:	200001f4 	.word	0x200001f4
 80014c0:	2000041c 	.word	0x2000041c
 80014c4:	20000428 	.word	0x20000428
 80014c8:	20000420 	.word	0x20000420
 80014cc:	2000042c 	.word	0x2000042c
 80014d0:	40b51eb8 	.word	0x40b51eb8
 80014d4:	40be147b 	.word	0x40be147b
 80014d8:	40c00000 	.word	0x40c00000
	}else{
		if (front_sensor < t2 && left_sensor >= t-ss && left_sensor <= t1+ss && right_sensor >= t-ss && right_sensor <= t1+ss ){
 80014dc:	4b93      	ldr	r3, [pc, #588]	; (800172c <main+0x594>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fcba 	bl	8000e5c <__aeabi_fcmpgt>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d042      	beq.n	8001574 <main+0x3dc>
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fb3d 	bl	8000b70 <__aeabi_fsub>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b8d      	ldr	r3, [pc, #564]	; (8001730 <main+0x598>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f7ff fc97 	bl	8000e34 <__aeabi_fcmple>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d033      	beq.n	8001574 <main+0x3dc>
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	68b8      	ldr	r0, [r7, #8]
 8001510:	f7ff fb30 	bl	8000b74 <__addsf3>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b85      	ldr	r3, [pc, #532]	; (8001730 <main+0x598>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f7ff fc92 	bl	8000e48 <__aeabi_fcmpge>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d024      	beq.n	8001574 <main+0x3dc>
 800152a:	6839      	ldr	r1, [r7, #0]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fb1f 	bl	8000b70 <__aeabi_fsub>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <main+0x59c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	4610      	mov	r0, r2
 800153e:	f7ff fc79 	bl	8000e34 <__aeabi_fcmple>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <main+0x3dc>
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f7ff fb12 	bl	8000b74 <__addsf3>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b77      	ldr	r3, [pc, #476]	; (8001734 <main+0x59c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f7ff fc74 	bl	8000e48 <__aeabi_fcmpge>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <main+0x3dc>
			turn_right90();
 8001566:	f000 fb33 	bl	8001bd0 <turn_right90>
			HAL_Delay(470); //180 degree
 800156a:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800156e:	f001 fb67 	bl	8002c40 <HAL_Delay>
		if (front_sensor < t2 && left_sensor >= t-ss && left_sensor <= t1+ss && right_sensor >= t-ss && right_sensor <= t1+ss ){
 8001572:	e28c      	b.n	8001a8e <main+0x8f6>
		}else if ( front_sensor > t2 && left_sensor >= t-ss && left_sensor <= t1+ss && right_sensor >= t-ss && right_sensor <= t1+ss ){
 8001574:	4b6d      	ldr	r3, [pc, #436]	; (800172c <main+0x594>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fc50 	bl	8000e20 <__aeabi_fcmplt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d03e      	beq.n	8001604 <main+0x46c>
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff faf1 	bl	8000b70 <__aeabi_fsub>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	4b67      	ldr	r3, [pc, #412]	; (8001730 <main+0x598>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff fc4b 	bl	8000e34 <__aeabi_fcmple>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d02f      	beq.n	8001604 <main+0x46c>
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff fae4 	bl	8000b74 <__addsf3>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <main+0x598>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f7ff fc46 	bl	8000e48 <__aeabi_fcmpge>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d020      	beq.n	8001604 <main+0x46c>
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fad3 	bl	8000b70 <__aeabi_fsub>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <main+0x59c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7ff fc2d 	bl	8000e34 <__aeabi_fcmple>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d011      	beq.n	8001604 <main+0x46c>
 80015e0:	6839      	ldr	r1, [r7, #0]
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f7ff fac6 	bl	8000b74 <__addsf3>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b51      	ldr	r3, [pc, #324]	; (8001734 <main+0x59c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f7ff fc28 	bl	8000e48 <__aeabi_fcmpge>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <main+0x46c>
			forward();
 80015fe:	f000 fa51 	bl	8001aa4 <forward>
		}else if ( front_sensor > t2 && left_sensor >= t-ss && left_sensor <= t1+ss && right_sensor >= t-ss && right_sensor <= t1+ss ){
 8001602:	e244      	b.n	8001a8e <main+0x8f6>
		}

		else if ( front_sensor > t2 && left_sensor >= t-ss && left_sensor <= t1+ss+6 && right_sensor >= t-ss ){
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <main+0x594>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fc08 	bl	8000e20 <__aeabi_fcmplt>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8092 	beq.w	800173c <main+0x5a4>
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff faa8 	bl	8000b70 <__aeabi_fsub>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <main+0x598>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f7ff fc02 	bl	8000e34 <__aeabi_fcmple>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8082 	beq.w	800173c <main+0x5a4>
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	68b8      	ldr	r0, [r7, #8]
 800163c:	f7ff fa9a 	bl	8000b74 <__addsf3>
 8001640:	4603      	mov	r3, r0
 8001642:	493d      	ldr	r1, [pc, #244]	; (8001738 <main+0x5a0>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fa95 	bl	8000b74 <__addsf3>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <main+0x598>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	4610      	mov	r0, r2
 8001656:	f7ff fbf7 	bl	8000e48 <__aeabi_fcmpge>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06d      	beq.n	800173c <main+0x5a4>
 8001660:	6839      	ldr	r1, [r7, #0]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fa84 	bl	8000b70 <__aeabi_fsub>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b31      	ldr	r3, [pc, #196]	; (8001734 <main+0x59c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f7ff fbde 	bl	8000e34 <__aeabi_fcmple>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d05e      	beq.n	800173c <main+0x5a4>
			if (front_sensor < t2+8 && left_sensor >= t-ss && left_sensor <= t1+ss+6 && right_sensor >= t-ss ){
 800167e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fa76 	bl	8000b74 <__addsf3>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <main+0x594>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f7ff fbe2 	bl	8000e5c <__aeabi_fcmpgt>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 81f7 	beq.w	8001a8e <main+0x8f6>
 80016a0:	6839      	ldr	r1, [r7, #0]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7ff fa64 	bl	8000b70 <__aeabi_fsub>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <main+0x598>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f7ff fbbe 	bl	8000e34 <__aeabi_fcmple>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d100      	bne.n	80016c0 <main+0x528>
 80016be:	e1e6      	b.n	8001a8e <main+0x8f6>
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	68b8      	ldr	r0, [r7, #8]
 80016c4:	f7ff fa56 	bl	8000b74 <__addsf3>
 80016c8:	4603      	mov	r3, r0
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <main+0x5a0>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fa51 	bl	8000b74 <__addsf3>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <main+0x598>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff fbb3 	bl	8000e48 <__aeabi_fcmpge>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d100      	bne.n	80016ea <main+0x552>
 80016e8:	e1d1      	b.n	8001a8e <main+0x8f6>
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fa3f 	bl	8000b70 <__aeabi_fsub>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <main+0x59c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff fb99 	bl	8000e34 <__aeabi_fcmple>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d100      	bne.n	800170a <main+0x572>
 8001708:	e1c1      	b.n	8001a8e <main+0x8f6>
				forward();
 800170a:	f000 f9cb 	bl	8001aa4 <forward>
				HAL_Delay(140);
 800170e:	208c      	movs	r0, #140	; 0x8c
 8001710:	f001 fa96 	bl	8002c40 <HAL_Delay>
				turn_right90();
 8001714:	f000 fa5c 	bl	8001bd0 <turn_right90>
				HAL_Delay(230);
 8001718:	20e6      	movs	r0, #230	; 0xe6
 800171a:	f001 fa91 	bl	8002c40 <HAL_Delay>
				forward();
 800171e:	f000 f9c1 	bl	8001aa4 <forward>
				HAL_Delay(140);
 8001722:	208c      	movs	r0, #140	; 0x8c
 8001724:	f001 fa8c 	bl	8002c40 <HAL_Delay>
			if (front_sensor < t2+8 && left_sensor >= t-ss && left_sensor <= t1+ss+6 && right_sensor >= t-ss ){
 8001728:	e1b1      	b.n	8001a8e <main+0x8f6>
 800172a:	bf00      	nop
 800172c:	20000424 	.word	0x20000424
 8001730:	20000428 	.word	0x20000428
 8001734:	2000042c 	.word	0x2000042c
 8001738:	40c00000 	.word	0x40c00000
			}else{
//				forward();
			}
		}else if ( front_sensor > t2 && left_sensor >= t-ss && right_sensor >= t-ss && right_sensor <= t1+ss+6 ){
 800173c:	4b8b      	ldr	r3, [pc, #556]	; (800196c <main+0x7d4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fb6c 	bl	8000e20 <__aeabi_fcmplt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8088 	beq.w	8001860 <main+0x6c8>
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff fa0c 	bl	8000b70 <__aeabi_fsub>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b84      	ldr	r3, [pc, #528]	; (8001970 <main+0x7d8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f7ff fb66 	bl	8000e34 <__aeabi_fcmple>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d078      	beq.n	8001860 <main+0x6c8>
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff f9fd 	bl	8000b70 <__aeabi_fsub>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b7e      	ldr	r3, [pc, #504]	; (8001974 <main+0x7dc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff fb57 	bl	8000e34 <__aeabi_fcmple>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d069      	beq.n	8001860 <main+0x6c8>
 800178c:	6839      	ldr	r1, [r7, #0]
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f7ff f9f0 	bl	8000b74 <__addsf3>
 8001794:	4603      	mov	r3, r0
 8001796:	4978      	ldr	r1, [pc, #480]	; (8001978 <main+0x7e0>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f9eb 	bl	8000b74 <__addsf3>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b74      	ldr	r3, [pc, #464]	; (8001974 <main+0x7dc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4610      	mov	r0, r2
 80017aa:	f7ff fb4d 	bl	8000e48 <__aeabi_fcmpge>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d055      	beq.n	8001860 <main+0x6c8>
			if (front_sensor < t2+8 && left_sensor >= t-ss && right_sensor >= t-ss && right_sensor <= t1+ss+6 ){
 80017b4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff f9db 	bl	8000b74 <__addsf3>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b6a      	ldr	r3, [pc, #424]	; (800196c <main+0x7d4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f7ff fb47 	bl	8000e5c <__aeabi_fcmpgt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 815c 	beq.w	8001a8e <main+0x8f6>
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff f9c9 	bl	8000b70 <__aeabi_fsub>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <main+0x7d8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4610      	mov	r0, r2
 80017ea:	f7ff fb23 	bl	8000e34 <__aeabi_fcmple>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d100      	bne.n	80017f6 <main+0x65e>
 80017f4:	e14b      	b.n	8001a8e <main+0x8f6>
 80017f6:	6839      	ldr	r1, [r7, #0]
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff f9b9 	bl	8000b70 <__aeabi_fsub>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <main+0x7dc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7ff fb13 	bl	8000e34 <__aeabi_fcmple>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d100      	bne.n	8001816 <main+0x67e>
 8001814:	e13b      	b.n	8001a8e <main+0x8f6>
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	68b8      	ldr	r0, [r7, #8]
 800181a:	f7ff f9ab 	bl	8000b74 <__addsf3>
 800181e:	4603      	mov	r3, r0
 8001820:	4955      	ldr	r1, [pc, #340]	; (8001978 <main+0x7e0>)
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f9a6 	bl	8000b74 <__addsf3>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	4b51      	ldr	r3, [pc, #324]	; (8001974 <main+0x7dc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f7ff fb08 	bl	8000e48 <__aeabi_fcmpge>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <main+0x6a8>
 800183e:	e126      	b.n	8001a8e <main+0x8f6>
				forward();
 8001840:	f000 f930 	bl	8001aa4 <forward>
				HAL_Delay(140);
 8001844:	208c      	movs	r0, #140	; 0x8c
 8001846:	f001 f9fb 	bl	8002c40 <HAL_Delay>
				turn_left90();
 800184a:	f000 f9f3 	bl	8001c34 <turn_left90>
				HAL_Delay(230);
 800184e:	20e6      	movs	r0, #230	; 0xe6
 8001850:	f001 f9f6 	bl	8002c40 <HAL_Delay>
				forward();
 8001854:	f000 f926 	bl	8001aa4 <forward>
				HAL_Delay(140);
 8001858:	208c      	movs	r0, #140	; 0x8c
 800185a:	f001 f9f1 	bl	8002c40 <HAL_Delay>
			if (front_sensor < t2+8 && left_sensor >= t-ss && right_sensor >= t-ss && right_sensor <= t1+ss+6 ){
 800185e:	e116      	b.n	8001a8e <main+0x8f6>
			}else{
//				forward();
			}
		}else if(front_sensor < t2+6 && left_sensor >= t+6 && right_sensor >= t+6 ){
 8001860:	4945      	ldr	r1, [pc, #276]	; (8001978 <main+0x7e0>)
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff f986 	bl	8000b74 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <main+0x7d4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff faf2 	bl	8000e5c <__aeabi_fcmpgt>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d028      	beq.n	80018d0 <main+0x738>
 800187e:	493e      	ldr	r1, [pc, #248]	; (8001978 <main+0x7e0>)
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7ff f977 	bl	8000b74 <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <main+0x7d8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff facf 	bl	8000e34 <__aeabi_fcmple>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d019      	beq.n	80018d0 <main+0x738>
 800189c:	4936      	ldr	r1, [pc, #216]	; (8001978 <main+0x7e0>)
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff f968 	bl	8000b74 <__addsf3>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <main+0x7dc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff fac0 	bl	8000e34 <__aeabi_fcmple>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <main+0x738>
			forward();
 80018ba:	f000 f8f3 	bl	8001aa4 <forward>
			HAL_Delay(50);
 80018be:	2032      	movs	r0, #50	; 0x32
 80018c0:	f001 f9be 	bl	8002c40 <HAL_Delay>
			turn_left90();
 80018c4:	f000 f9b6 	bl	8001c34 <turn_left90>
			HAL_Delay(230);
 80018c8:	20e6      	movs	r0, #230	; 0xe6
 80018ca:	f001 f9b9 	bl	8002c40 <HAL_Delay>
		}else if(front_sensor < t2+6 && left_sensor >= t+6 && right_sensor >= t+6 ){
 80018ce:	e0de      	b.n	8001a8e <main+0x8f6>
		}else if(front_sensor > t2+10 && left_sensor >= t+10 && right_sensor >= t-ss && right_sensor <= t1+ss+8 ){
 80018d0:	492a      	ldr	r1, [pc, #168]	; (800197c <main+0x7e4>)
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff f94e 	bl	8000b74 <__addsf3>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <main+0x7d4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f7ff fa9c 	bl	8000e20 <__aeabi_fcmplt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d048      	beq.n	8001980 <main+0x7e8>
 80018ee:	4923      	ldr	r1, [pc, #140]	; (800197c <main+0x7e4>)
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff f93f 	bl	8000b74 <__addsf3>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <main+0x7d8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff fa97 	bl	8000e34 <__aeabi_fcmple>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d039      	beq.n	8001980 <main+0x7e8>
 800190c:	6839      	ldr	r1, [r7, #0]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff f92e 	bl	8000b70 <__aeabi_fsub>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <main+0x7dc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fa88 	bl	8000e34 <__aeabi_fcmple>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02a      	beq.n	8001980 <main+0x7e8>
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f7ff f921 	bl	8000b74 <__addsf3>
 8001932:	4603      	mov	r3, r0
 8001934:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f91b 	bl	8000b74 <__addsf3>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <main+0x7dc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff fa7d 	bl	8000e48 <__aeabi_fcmpge>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d015      	beq.n	8001980 <main+0x7e8>
			forward();
 8001954:	f000 f8a6 	bl	8001aa4 <forward>
			HAL_Delay(100);
 8001958:	2064      	movs	r0, #100	; 0x64
 800195a:	f001 f971 	bl	8002c40 <HAL_Delay>
			turn_left90();
 800195e:	f000 f969 	bl	8001c34 <turn_left90>
			HAL_Delay(230);
 8001962:	20e6      	movs	r0, #230	; 0xe6
 8001964:	f001 f96c 	bl	8002c40 <HAL_Delay>
		}else if(front_sensor > t2+10 && left_sensor >= t+10 && right_sensor >= t-ss && right_sensor <= t1+ss+8 ){
 8001968:	e091      	b.n	8001a8e <main+0x8f6>
 800196a:	bf00      	nop
 800196c:	20000424 	.word	0x20000424
 8001970:	20000428 	.word	0x20000428
 8001974:	2000042c 	.word	0x2000042c
 8001978:	40c00000 	.word	0x40c00000
 800197c:	41200000 	.word	0x41200000
		}else if(front_sensor > t2+10 && right_sensor >= t+10 && left_sensor >= t-ss && left_sensor <= t1+ss+8 ){
 8001980:	4944      	ldr	r1, [pc, #272]	; (8001a94 <main+0x8fc>)
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff f8f6 	bl	8000b74 <__addsf3>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <main+0x900>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f7ff fa44 	bl	8000e20 <__aeabi_fcmplt>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03d      	beq.n	8001a1a <main+0x882>
 800199e:	493d      	ldr	r1, [pc, #244]	; (8001a94 <main+0x8fc>)
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff f8e7 	bl	8000b74 <__addsf3>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <main+0x904>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4610      	mov	r0, r2
 80019b2:	f7ff fa3f 	bl	8000e34 <__aeabi_fcmple>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d02e      	beq.n	8001a1a <main+0x882>
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f7ff f8d6 	bl	8000b70 <__aeabi_fsub>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <main+0x908>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f7ff fa30 	bl	8000e34 <__aeabi_fcmple>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01f      	beq.n	8001a1a <main+0x882>
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	68b8      	ldr	r0, [r7, #8]
 80019de:	f7ff f8c9 	bl	8000b74 <__addsf3>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f8c3 	bl	8000b74 <__addsf3>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <main+0x908>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff fa25 	bl	8000e48 <__aeabi_fcmpge>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <main+0x882>
			forward();
 8001a04:	f000 f84e 	bl	8001aa4 <forward>
			HAL_Delay(100);
 8001a08:	2064      	movs	r0, #100	; 0x64
 8001a0a:	f001 f919 	bl	8002c40 <HAL_Delay>
			turn_right90();
 8001a0e:	f000 f8df 	bl	8001bd0 <turn_right90>
			HAL_Delay(230);
 8001a12:	20e6      	movs	r0, #230	; 0xe6
 8001a14:	f001 f914 	bl	8002c40 <HAL_Delay>
		}else if(front_sensor > t2+10 && right_sensor >= t+10 && left_sensor >= t-ss && left_sensor <= t1+ss+8 ){
 8001a18:	e039      	b.n	8001a8e <main+0x8f6>
		}else if(front_sensor > t2+10 && right_sensor >= t+10 && left_sensor >= t+10 ){
 8001a1a:	491e      	ldr	r1, [pc, #120]	; (8001a94 <main+0x8fc>)
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff f8a9 	bl	8000b74 <__addsf3>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <main+0x900>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f7ff f9f7 	bl	8000e20 <__aeabi_fcmplt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d028      	beq.n	8001a8a <main+0x8f2>
 8001a38:	4916      	ldr	r1, [pc, #88]	; (8001a94 <main+0x8fc>)
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff f89a 	bl	8000b74 <__addsf3>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <main+0x904>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f7ff f9f2 	bl	8000e34 <__aeabi_fcmple>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <main+0x8f2>
 8001a56:	490f      	ldr	r1, [pc, #60]	; (8001a94 <main+0x8fc>)
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff f88b 	bl	8000b74 <__addsf3>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <main+0x908>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f7ff f9e3 	bl	8000e34 <__aeabi_fcmple>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00a      	beq.n	8001a8a <main+0x8f2>
			forward();
 8001a74:	f000 f816 	bl	8001aa4 <forward>
			HAL_Delay(100);
 8001a78:	2064      	movs	r0, #100	; 0x64
 8001a7a:	f001 f8e1 	bl	8002c40 <HAL_Delay>
			turn_right90();
 8001a7e:	f000 f8a7 	bl	8001bd0 <turn_right90>
			HAL_Delay(230);
 8001a82:	20e6      	movs	r0, #230	; 0xe6
 8001a84:	f001 f8dc 	bl	8002c40 <HAL_Delay>
		}else if(front_sensor > t2+10 && right_sensor >= t+10 && left_sensor >= t+10 ){
 8001a88:	e001      	b.n	8001a8e <main+0x8f6>
		}

		else{
			stop();
 8001a8a:	f000 f905 	bl	8001c98 <stop>
  {
 8001a8e:	f7ff bbbb 	b.w	8001208 <main+0x70>
 8001a92:	bf00      	nop
 8001a94:	41200000 	.word	0x41200000
 8001a98:	20000424 	.word	0x20000424
 8001a9c:	2000042c 	.word	0x2000042c
 8001aa0:	20000428 	.word	0x20000428

08001aa4 <forward>:
		}
	}
  }
  /* USER CODE END 3 */
}
void forward(){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,5000); //left
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <forward+0x54>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,5150); // right
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <forward+0x58>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f241 421e 	movw	r2, #5150	; 0x141e
 8001aba:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2120      	movs	r1, #32
 8001ac0:	480f      	ldr	r0, [pc, #60]	; (8001b00 <forward+0x5c>)
 8001ac2:	f001 ffcb 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2101      	movs	r1, #1
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <forward+0x60>)
 8001acc:	f001 ffc6 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	480b      	ldr	r0, [pc, #44]	; (8001b04 <forward+0x60>)
 8001ad6:	f001 ffc1 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <forward+0x60>)
 8001ae2:	f001 ffbb 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <forward+0x60>)
 8001aee:	f001 ffb5 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200002a8 	.word	0x200002a8
 8001afc:	20000380 	.word	0x20000380
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00

08001b08 <turn_right>:
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
}
void turn_right(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,2000); //left
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <turn_right+0x54>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000); // right
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <turn_right+0x58>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2120      	movs	r1, #32
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <turn_right+0x5c>)
 8001b26:	f001 ff99 	bl	8003a5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <turn_right+0x60>)
 8001b30:	f001 ff94 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2102      	movs	r1, #2
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <turn_right+0x60>)
 8001b3a:	f001 ff8f 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	4808      	ldr	r0, [pc, #32]	; (8001b68 <turn_right+0x60>)
 8001b46:	f001 ff89 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <turn_right+0x60>)
 8001b52:	f001 ff83 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002a8 	.word	0x200002a8
 8001b60:	20000380 	.word	0x20000380
 8001b64:	40010800 	.word	0x40010800
 8001b68:	40010c00 	.word	0x40010c00

08001b6c <turn_left>:
void turn_left(){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,2000); //left
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <turn_left+0x54>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000); // right
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <turn_left+0x58>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2120      	movs	r1, #32
 8001b88:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <turn_left+0x5c>)
 8001b8a:	f001 ff67 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <turn_left+0x60>)
 8001b94:	f001 ff62 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <turn_left+0x60>)
 8001b9e:	f001 ff5d 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba8:	4808      	ldr	r0, [pc, #32]	; (8001bcc <turn_left+0x60>)
 8001baa:	f001 ff57 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <turn_left+0x60>)
 8001bb6:	f001 ff51 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200002a8 	.word	0x200002a8
 8001bc4:	20000380 	.word	0x20000380
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40010c00 	.word	0x40010c00

08001bd0 <turn_right90>:
void turn_right90(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,5000); //left
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <turn_right90+0x54>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,5150); // right
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <turn_right90+0x58>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f241 421e 	movw	r2, #5150	; 0x141e
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2120      	movs	r1, #32
 8001bec:	480f      	ldr	r0, [pc, #60]	; (8001c2c <turn_right90+0x5c>)
 8001bee:	f001 ff35 	bl	8003a5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <turn_right90+0x60>)
 8001bf8:	f001 ff30 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2102      	movs	r1, #2
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <turn_right90+0x60>)
 8001c02:	f001 ff2b 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c0c:	4808      	ldr	r0, [pc, #32]	; (8001c30 <turn_right90+0x60>)
 8001c0e:	f001 ff25 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <turn_right90+0x60>)
 8001c1a:	f001 ff1f 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002a8 	.word	0x200002a8
 8001c28:	20000380 	.word	0x20000380
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	40010c00 	.word	0x40010c00

08001c34 <turn_left90>:
void turn_left90(){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,5000); //left
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <turn_left90+0x54>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,5150); // right
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <turn_left90+0x58>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f241 421e 	movw	r2, #5150	; 0x141e
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2120      	movs	r1, #32
 8001c50:	480f      	ldr	r0, [pc, #60]	; (8001c90 <turn_left90+0x5c>)
 8001c52:	f001 ff03 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2101      	movs	r1, #1
 8001c5a:	480e      	ldr	r0, [pc, #56]	; (8001c94 <turn_left90+0x60>)
 8001c5c:	f001 fefe 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	2102      	movs	r1, #2
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <turn_left90+0x60>)
 8001c66:	f001 fef9 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c70:	4808      	ldr	r0, [pc, #32]	; (8001c94 <turn_left90+0x60>)
 8001c72:	f001 fef3 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <turn_left90+0x60>)
 8001c7e:	f001 feed 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200002a8 	.word	0x200002a8
 8001c8c:	20000380 	.word	0x20000380
 8001c90:	40010800 	.word	0x40010800
 8001c94:	40010c00 	.word	0x40010c00

08001c98 <stop>:
void stop(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <stop+0x40>)
 8001ca2:	f001 fedb 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2101      	movs	r1, #1
 8001caa:	480c      	ldr	r0, [pc, #48]	; (8001cdc <stop+0x44>)
 8001cac:	f001 fed6 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <stop+0x44>)
 8001cb6:	f001 fed1 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc0:	4806      	ldr	r0, [pc, #24]	; (8001cdc <stop+0x44>)
 8001cc2:	f001 fecb 	bl	8003a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <stop+0x44>)
 8001cce:	f001 fec5 	bl	8003a5c <HAL_GPIO_WritePin>
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40010c00 	.word	0x40010c00

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	; 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cea:	2228      	movs	r2, #40	; 0x28
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 fdce 	bl	8008890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d22:	2302      	movs	r3, #2
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 ff02 	bl	8004b40 <HAL_RCC_OscConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d42:	f000 fbb7 	bl	80024b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d46:	230f      	movs	r3, #15
 8001d48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001d52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2102      	movs	r1, #2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 f96e 	bl	8005044 <HAL_RCC_ClockConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d6e:	f000 fba1 	bl	80024b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d72:	2302      	movs	r3, #2
 8001d74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d7a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 faee 	bl	8005360 <HAL_RCCEx_PeriphCLKConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d8a:	f000 fb93 	bl	80024b4 <Error_Handler>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3750      	adds	r7, #80	; 0x50
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <MX_ADC1_Init+0x4c>)
 8001da0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001da8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001db8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_ADC1_Init+0x48>)
 8001dcc:	f000 ff5c 	bl	8002c88 <HAL_ADC_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8001dd6:	f000 fb6d 	bl	80024b4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200001f4 	.word	0x200001f4
 8001de4:	40012400 	.word	0x40012400

08001de8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001dfa:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <MX_ADC2_Init+0x78>)
 8001dfc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e12:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e26:	f000 ff2f 	bl	8002c88 <HAL_ADC_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001e30:	f000 fb40 	bl	80024b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_ADC2_Init+0x74>)
 8001e46:	f001 f9e3 	bl	8003210 <HAL_ADC_ConfigChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001e50:	f000 fb30 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000224 	.word	0x20000224
 8001e60:	40012800 	.word	0x40012800

08001e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e6a:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <MX_I2C1_Init+0x54>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <MX_I2C1_Init+0x58>)
 8001e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea0:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <MX_I2C1_Init+0x50>)
 8001ea2:	f001 fdf3 	bl	8003a8c <HAL_I2C_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eac:	f000 fb02 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000254 	.word	0x20000254
 8001eb8:	40005400 	.word	0x40005400
 8001ebc:	000186a0 	.word	0x000186a0

08001ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b096      	sub	sp, #88	; 0x58
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f006 fcc9 	bl	8008890 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f00:	4a3d      	ldr	r2, [pc, #244]	; (8001ff8 <MX_TIM1_Init+0x138>)
 8001f02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8001f04:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f06:	2211      	movs	r2, #17
 8001f08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f12:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f18:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f24:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f2a:	4832      	ldr	r0, [pc, #200]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f2c:	f003 fb84 	bl	8005638 <HAL_TIM_Base_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f36:	f000 fabd 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f44:	4619      	mov	r1, r3
 8001f46:	482b      	ldr	r0, [pc, #172]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f48:	f003 ffda 	bl	8005f00 <HAL_TIM_ConfigClockSource>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f52:	f000 faaf 	bl	80024b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f56:	4827      	ldr	r0, [pc, #156]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f58:	f003 fbbd 	bl	80056d6 <HAL_TIM_PWM_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f62:	f000 faa7 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f72:	4619      	mov	r1, r3
 8001f74:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001f76:	f004 fb53 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f80:	f000 fa98 	bl	80024b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f84:	2360      	movs	r3, #96	; 0x60
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001fa6:	f003 fee9 	bl	8005d7c <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001fb0:	f000 fa80 	bl	80024b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001fd8:	f004 fb80 	bl	80066dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001fe2:	f000 fa67 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <MX_TIM1_Init+0x134>)
 8001fe8:	f000 fc1a 	bl	8002820 <HAL_TIM_MspPostInit>

}
 8001fec:	bf00      	nop
 8001fee:	3758      	adds	r7, #88	; 0x58
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200002a8 	.word	0x200002a8
 8001ff8:	40012c00 	.word	0x40012c00

08001ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f006 fc40 	bl	8008890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <MX_TIM2_Init+0xa4>)
 800201a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800201e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <MX_TIM2_Init+0xa4>)
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <MX_TIM2_Init+0xa4>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <MX_TIM2_Init+0xa4>)
 800202e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_TIM2_Init+0xa4>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_TIM2_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002040:	2301      	movs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002048:	2301      	movs	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002058:	2301      	movs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4619      	mov	r1, r3
 800206a:	480d      	ldr	r0, [pc, #52]	; (80020a0 <MX_TIM2_Init+0xa4>)
 800206c:	f003 fc2e 	bl	80058cc <HAL_TIM_Encoder_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002076:	f000 fa1d 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	4619      	mov	r1, r3
 8002086:	4806      	ldr	r0, [pc, #24]	; (80020a0 <MX_TIM2_Init+0xa4>)
 8002088:	f004 faca 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002092:	f000 fa0f 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	3730      	adds	r7, #48	; 0x30
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200002f0 	.word	0x200002f0

080020a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	2224      	movs	r2, #36	; 0x24
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f006 fbec 	bl	8008890 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <MX_TIM3_Init+0xa0>)
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <MX_TIM3_Init+0xa4>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_TIM3_Init+0xa0>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_TIM3_Init+0xa0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <MX_TIM3_Init+0xa0>)
 80020d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MX_TIM3_Init+0xa0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_TIM3_Init+0xa0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ee:	2301      	movs	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020fe:	2301      	movs	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <MX_TIM3_Init+0xa0>)
 8002112:	f003 fbdb 	bl	80058cc <HAL_TIM_Encoder_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800211c:	f000 f9ca 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	4805      	ldr	r0, [pc, #20]	; (8002144 <MX_TIM3_Init+0xa0>)
 800212e:	f004 fa77 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002138:	f000 f9bc 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000338 	.word	0x20000338
 8002148:	40000400 	.word	0x40000400

0800214c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08e      	sub	sp, #56	; 0x38
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	f107 0320 	add.w	r3, r7, #32
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	615a      	str	r2, [r3, #20]
 800217a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <MX_TIM4_Init+0xe4>)
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <MX_TIM4_Init+0xe8>)
 8002180:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <MX_TIM4_Init+0xe4>)
 8002184:	2211      	movs	r2, #17
 8002186:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <MX_TIM4_Init+0xe4>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <MX_TIM4_Init+0xe4>)
 8002190:	f242 720f 	movw	r2, #9999	; 0x270f
 8002194:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <MX_TIM4_Init+0xe4>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <MX_TIM4_Init+0xe4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021a2:	4823      	ldr	r0, [pc, #140]	; (8002230 <MX_TIM4_Init+0xe4>)
 80021a4:	f003 fa48 	bl	8005638 <HAL_TIM_Base_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80021ae:	f000 f981 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021bc:	4619      	mov	r1, r3
 80021be:	481c      	ldr	r0, [pc, #112]	; (8002230 <MX_TIM4_Init+0xe4>)
 80021c0:	f003 fe9e 	bl	8005f00 <HAL_TIM_ConfigClockSource>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80021ca:	f000 f973 	bl	80024b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021ce:	4818      	ldr	r0, [pc, #96]	; (8002230 <MX_TIM4_Init+0xe4>)
 80021d0:	f003 fa81 	bl	80056d6 <HAL_TIM_PWM_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80021da:	f000 f96b 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e6:	f107 0320 	add.w	r3, r7, #32
 80021ea:	4619      	mov	r1, r3
 80021ec:	4810      	ldr	r0, [pc, #64]	; (8002230 <MX_TIM4_Init+0xe4>)
 80021ee:	f004 fa17 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80021f8:	f000 f95c 	bl	80024b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fc:	2360      	movs	r3, #96	; 0x60
 80021fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2208      	movs	r2, #8
 8002210:	4619      	mov	r1, r3
 8002212:	4807      	ldr	r0, [pc, #28]	; (8002230 <MX_TIM4_Init+0xe4>)
 8002214:	f003 fdb2 	bl	8005d7c <HAL_TIM_PWM_ConfigChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800221e:	f000 f949 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002222:	4803      	ldr	r0, [pc, #12]	; (8002230 <MX_TIM4_Init+0xe4>)
 8002224:	f000 fafc 	bl	8002820 <HAL_TIM_MspPostInit>

}
 8002228:	bf00      	nop
 800222a:	3738      	adds	r7, #56	; 0x38
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000380 	.word	0x20000380
 8002234:	40000800 	.word	0x40000800

08002238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_USART1_UART_Init+0x50>)
 8002240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002270:	f004 fa97 	bl	80067a2 <HAL_UART_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800227a:	f000 f91b 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200003c8 	.word	0x200003c8
 8002288:	40013800 	.word	0x40013800

0800228c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	f107 0310 	add.w	r3, r7, #16
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <MX_GPIO_Init+0xd0>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a2d      	ldr	r2, [pc, #180]	; (800235c <MX_GPIO_Init+0xd0>)
 80022a6:	f043 0320 	orr.w	r3, r3, #32
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <MX_GPIO_Init+0xd0>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <MX_GPIO_Init+0xd0>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <MX_GPIO_Init+0xd0>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <MX_GPIO_Init+0xd0>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <MX_GPIO_Init+0xd0>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a21      	ldr	r2, [pc, #132]	; (800235c <MX_GPIO_Init+0xd0>)
 80022d6:	f043 0308 	orr.w	r3, r3, #8
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <MX_GPIO_Init+0xd0>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2138      	movs	r1, #56	; 0x38
 80022ec:	481c      	ldr	r0, [pc, #112]	; (8002360 <MX_GPIO_Init+0xd4>)
 80022ee:	f001 fbb5 	bl	8003a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 80022f2:	2200      	movs	r2, #0
 80022f4:	f64c 4133 	movw	r1, #52275	; 0xcc33
 80022f8:	481a      	ldr	r0, [pc, #104]	; (8002364 <MX_GPIO_Init+0xd8>)
 80022fa:	f001 fbaf 	bl	8003a5c <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_Pin LED1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|STBY_Pin;
 80022fe:	2338      	movs	r3, #56	; 0x38
 8002300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	4812      	ldr	r0, [pc, #72]	; (8002360 <MX_GPIO_Init+0xd4>)
 8002316:	f001 fa1d 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI2_Pin AI1_Pin BI1_Pin BI2_Pin
                           LED5_Pin LED6_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 800231a:	f64c 4333 	movw	r3, #52275	; 0xcc33
 800231e:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2302      	movs	r3, #2
 800232a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	480c      	ldr	r0, [pc, #48]	; (8002364 <MX_GPIO_Init+0xd8>)
 8002334:	f001 fa0e 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002338:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800233c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_GPIO_Init+0xd8>)
 800234e:	f001 fa01 	bl	8003754 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002352:	bf00      	nop
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40010800 	.word	0x40010800
 8002364:	40010c00 	.word	0x40010c00

08002368 <filter_gyro>:

/* USER CODE BEGIN 4 */
void filter_gyro(){
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af04      	add	r7, sp, #16
	printf("Start probe filter\r\n");
 800236e:	4847      	ldr	r0, [pc, #284]	; (800248c <filter_gyro+0x124>)
 8002370:	f006 f98e 	bl	8008690 <puts>
	HAL_Delay(500);
 8002374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002378:	f000 fc62 	bl	8002c40 <HAL_Delay>
	for(uint8_t x = 0; x < 10; x++){
 800237c:	2300      	movs	r3, #0
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	e008      	b.n	8002394 <filter_gyro+0x2c>
		printf("*");
 8002382:	202a      	movs	r0, #42	; 0x2a
 8002384:	f006 f928 	bl	80085d8 <putchar>
	    HAL_Delay(100);
 8002388:	2064      	movs	r0, #100	; 0x64
 800238a:	f000 fc59 	bl	8002c40 <HAL_Delay>
	for(uint8_t x = 0; x < 10; x++){
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	3301      	adds	r3, #1
 8002392:	71fb      	strb	r3, [r7, #7]
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b09      	cmp	r3, #9
 8002398:	d9f3      	bls.n	8002382 <filter_gyro+0x1a>
	}
	printf("*\r\n");
 800239a:	483d      	ldr	r0, [pc, #244]	; (8002490 <filter_gyro+0x128>)
 800239c:	f006 f978 	bl	8008690 <puts>
	for(int x = 0; x < 1000; x++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	e02d      	b.n	8002402 <filter_gyro+0x9a>
		MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 80023a6:	493b      	ldr	r1, [pc, #236]	; (8002494 <filter_gyro+0x12c>)
 80023a8:	483b      	ldr	r0, [pc, #236]	; (8002498 <filter_gyro+0x130>)
 80023aa:	f7fe fdf1 	bl	8000f90 <MPU6050_Read_Gyro>
		froll += MPU6050.Gx;
 80023ae:	4b39      	ldr	r3, [pc, #228]	; (8002494 <filter_gyro+0x12c>)
 80023b0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <filter_gyro+0x134>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f7fd fed7 	bl	800016c <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4936      	ldr	r1, [pc, #216]	; (800249c <filter_gyro+0x134>)
 80023c4:	e9c1 2300 	strd	r2, r3, [r1]
		fpitch += MPU6050.Gy;
 80023c8:	4b32      	ldr	r3, [pc, #200]	; (8002494 <filter_gyro+0x12c>)
 80023ca:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <filter_gyro+0x138>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fd feca 	bl	800016c <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4930      	ldr	r1, [pc, #192]	; (80024a0 <filter_gyro+0x138>)
 80023de:	e9c1 2300 	strd	r2, r3, [r1]
		fyaw += MPU6050.Gz;
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <filter_gyro+0x12c>)
 80023e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <filter_gyro+0x13c>)
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	f7fd febd 	bl	800016c <__adddf3>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	492b      	ldr	r1, [pc, #172]	; (80024a4 <filter_gyro+0x13c>)
 80023f8:	e9c1 2300 	strd	r2, r3, [r1]
	for(int x = 0; x < 1000; x++){
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002408:	dbcd      	blt.n	80023a6 <filter_gyro+0x3e>
	}
	froll = froll / 1000;
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <filter_gyro+0x134>)
 800240c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <filter_gyro+0x140>)
 8002416:	f7fe f989 	bl	800072c <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	491f      	ldr	r1, [pc, #124]	; (800249c <filter_gyro+0x134>)
 8002420:	e9c1 2300 	strd	r2, r3, [r1]
	fpitch = fpitch /1000;
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <filter_gyro+0x138>)
 8002426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <filter_gyro+0x140>)
 8002430:	f7fe f97c 	bl	800072c <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4919      	ldr	r1, [pc, #100]	; (80024a0 <filter_gyro+0x138>)
 800243a:	e9c1 2300 	strd	r2, r3, [r1]
	fyaw = fyaw/1000;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <filter_gyro+0x13c>)
 8002440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <filter_gyro+0x140>)
 800244a:	f7fe f96f 	bl	800072c <__aeabi_ddiv>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4914      	ldr	r1, [pc, #80]	; (80024a4 <filter_gyro+0x13c>)
 8002454:	e9c1 2300 	strd	r2, r3, [r1]
	printf("froll: %.2f fpitch: %.2f fyaw: %.2f\r\n",froll, fpitch, fyaw);
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <filter_gyro+0x134>)
 800245a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <filter_gyro+0x138>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	490f      	ldr	r1, [pc, #60]	; (80024a4 <filter_gyro+0x13c>)
 8002466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800246a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800246e:	e9cd 2300 	strd	r2, r3, [sp]
 8002472:	4622      	mov	r2, r4
 8002474:	462b      	mov	r3, r5
 8002476:	480d      	ldr	r0, [pc, #52]	; (80024ac <filter_gyro+0x144>)
 8002478:	f006 f89c 	bl	80085b4 <iprintf>
	printf("Prove filter done!\r\n");
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <filter_gyro+0x148>)
 800247e:	f006 f907 	bl	8008690 <puts>

}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	bf00      	nop
 800248c:	0800b410 	.word	0x0800b410
 8002490:	0800b424 	.word	0x0800b424
 8002494:	20000430 	.word	0x20000430
 8002498:	20000254 	.word	0x20000254
 800249c:	20000488 	.word	0x20000488
 80024a0:	20000490 	.word	0x20000490
 80024a4:	20000498 	.word	0x20000498
 80024a8:	408f4000 	.word	0x408f4000
 80024ac:	0800b428 	.word	0x0800b428
 80024b0:	0800b450 	.word	0x0800b450

080024b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b8:	b672      	cpsid	i
}
 80024ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024bc:	e7fe      	b.n	80024bc <Error_Handler+0x8>
	...

080024c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_MspInit+0x5c>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_MspInit+0x5c>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6193      	str	r3, [r2, #24]
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_MspInit+0x5c>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_MspInit+0x5c>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a0e      	ldr	r2, [pc, #56]	; (800251c <HAL_MspInit+0x5c>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	61d3      	str	r3, [r2, #28]
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_MspInit+0x5c>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_MspInit+0x60>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_MspInit+0x60>)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	40021000 	.word	0x40021000
 8002520:	40010000 	.word	0x40010000

08002524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_ADC_MspInit+0xbc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d122      	bne.n	800258a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 800254a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_CB2_Pin|ADC_CB3_Pin;
 8002574:	2306      	movs	r3, #6
 8002576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002578:	2303      	movs	r3, #3
 800257a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 0318 	add.w	r3, r7, #24
 8002580:	4619      	mov	r1, r3
 8002582:	4819      	ldr	r0, [pc, #100]	; (80025e8 <HAL_ADC_MspInit+0xc4>)
 8002584:	f001 f8e6 	bl	8003754 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002588:	e026      	b.n	80025d8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a17      	ldr	r2, [pc, #92]	; (80025ec <HAL_ADC_MspInit+0xc8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d121      	bne.n	80025d8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_ADC_MspInit+0xc0>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c8:	2303      	movs	r3, #3
 80025ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4619      	mov	r1, r3
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <HAL_ADC_MspInit+0xc4>)
 80025d4:	f001 f8be 	bl	8003754 <HAL_GPIO_Init>
}
 80025d8:	bf00      	nop
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40012400 	.word	0x40012400
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010800 	.word	0x40010800
 80025ec:	40012800 	.word	0x40012800

080025f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_I2C_MspInit+0x70>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d123      	bne.n	8002658 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_I2C_MspInit+0x74>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <HAL_I2C_MspInit+0x74>)
 8002616:	f043 0308 	orr.w	r3, r3, #8
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_I2C_MspInit+0x74>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002628:	23c0      	movs	r3, #192	; 0xc0
 800262a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262c:	2312      	movs	r3, #18
 800262e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	4619      	mov	r1, r3
 800263a:	480b      	ldr	r0, [pc, #44]	; (8002668 <HAL_I2C_MspInit+0x78>)
 800263c:	f001 f88a 	bl	8003754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_I2C_MspInit+0x74>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_I2C_MspInit+0x74>)
 8002646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264a:	61d3      	str	r3, [r2, #28]
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_I2C_MspInit+0x74>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40005400 	.word	0x40005400
 8002664:	40021000 	.word	0x40021000
 8002668:	40010c00 	.word	0x40010c00

0800266c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <HAL_TIM_Base_MspInit+0x58>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10c      	bne.n	8002698 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_TIM_Base_MspInit+0x5c>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_TIM_Base_MspInit+0x5c>)
 8002684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002688:	6193      	str	r3, [r2, #24]
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_TIM_Base_MspInit+0x5c>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002696:	e010      	b.n	80026ba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <HAL_TIM_Base_MspInit+0x60>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10b      	bne.n	80026ba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_TIM_Base_MspInit+0x5c>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_TIM_Base_MspInit+0x5c>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_TIM_Base_MspInit+0x5c>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40000800 	.word	0x40000800

080026d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d157      	bne.n	80027a0 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026f0:	4b46      	ldr	r3, [pc, #280]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4a45      	ldr	r2, [pc, #276]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	61d3      	str	r3, [r2, #28]
 80026fc:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a3f      	ldr	r2, [pc, #252]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a39      	ldr	r2, [pc, #228]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 8002726:	f043 0308 	orr.w	r3, r3, #8
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	4830      	ldr	r0, [pc, #192]	; (8002810 <HAL_TIM_Encoder_MspInit+0x140>)
 800274e:	f001 f801 	bl	8003754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002752:	2308      	movs	r3, #8
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	4619      	mov	r1, r3
 8002764:	482b      	ldr	r0, [pc, #172]	; (8002814 <HAL_TIM_Encoder_MspInit+0x144>)
 8002766:	f000 fff5 	bl	8003754 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_TIM_Encoder_MspInit+0x148>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002788:	4a23      	ldr	r2, [pc, #140]	; (8002818 <HAL_TIM_Encoder_MspInit+0x148>)
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	201c      	movs	r0, #28
 8002794:	f000 ffa7 	bl	80036e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002798:	201c      	movs	r0, #28
 800279a:	f000 ffc0 	bl	800371e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800279e:	e030      	b.n	8002802 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_TIM_Encoder_MspInit+0x14c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d12b      	bne.n	8002802 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4a11      	ldr	r2, [pc, #68]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6193      	str	r3, [r2, #24]
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_TIM_Encoder_MspInit+0x13c>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027da:	23c0      	movs	r3, #192	; 0xc0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	4808      	ldr	r0, [pc, #32]	; (8002810 <HAL_TIM_Encoder_MspInit+0x140>)
 80027ee:	f000 ffb1 	bl	8003754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	201d      	movs	r0, #29
 80027f8:	f000 ff75 	bl	80036e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027fc:	201d      	movs	r0, #29
 80027fe:	f000 ff8e 	bl	800371e <HAL_NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3730      	adds	r7, #48	; 0x30
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40010800 	.word	0x40010800
 8002814:	40010c00 	.word	0x40010c00
 8002818:	40010000 	.word	0x40010000
 800281c:	40000400 	.word	0x40000400

08002820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_TIM_MspPostInit+0x98>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d119      	bne.n	8002874 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_TIM_MspPostInit+0x9c>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_TIM_MspPostInit+0x9c>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_TIM_MspPostInit+0x9c>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002858:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800285c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2302      	movs	r3, #2
 8002864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0310 	add.w	r3, r7, #16
 800286a:	4619      	mov	r1, r3
 800286c:	4814      	ldr	r0, [pc, #80]	; (80028c0 <HAL_TIM_MspPostInit+0xa0>)
 800286e:	f000 ff71 	bl	8003754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002872:	e01d      	b.n	80028b0 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <HAL_TIM_MspPostInit+0xa4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d118      	bne.n	80028b0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_TIM_MspPostInit+0x9c>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <HAL_TIM_MspPostInit+0x9c>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <HAL_TIM_MspPostInit+0x9c>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4619      	mov	r1, r3
 80028aa:	4807      	ldr	r0, [pc, #28]	; (80028c8 <HAL_TIM_MspPostInit+0xa8>)
 80028ac:	f000 ff52 	bl	8003754 <HAL_GPIO_Init>
}
 80028b0:	bf00      	nop
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010800 	.word	0x40010800
 80028c4:	40000800 	.word	0x40000800
 80028c8:	40010c00 	.word	0x40010c00

080028cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_UART_MspInit+0x8c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d131      	bne.n	8002950 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_UART_MspInit+0x90>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_UART_MspInit+0x90>)
 80028f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_UART_MspInit+0x90>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_UART_MspInit+0x90>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_UART_MspInit+0x90>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_UART_MspInit+0x90>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800291c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0310 	add.w	r3, r7, #16
 800292e:	4619      	mov	r1, r3
 8002930:	480b      	ldr	r0, [pc, #44]	; (8002960 <HAL_UART_MspInit+0x94>)
 8002932:	f000 ff0f 	bl	8003754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	4619      	mov	r1, r3
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_UART_MspInit+0x94>)
 800294c:	f000 ff02 	bl	8003754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002950:	bf00      	nop
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40013800 	.word	0x40013800
 800295c:	40021000 	.word	0x40021000
 8002960:	40010800 	.word	0x40010800

08002964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <NMI_Handler+0x4>

0800296a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <HardFault_Handler+0x4>

08002970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <MemManage_Handler+0x4>

08002976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <BusFault_Handler+0x4>

0800297c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <UsageFault_Handler+0x4>

08002982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029aa:	f000 f92d 	bl	8002c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <TIM2_IRQHandler+0x10>)
 80029ba:	f003 f8d7 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200002f0 	.word	0x200002f0

080029c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <TIM3_IRQHandler+0x10>)
 80029ce:	f003 f8cd 	bl	8005b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000338 	.word	0x20000338

080029dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return 1;
 80029e0:	2301      	movs	r3, #1
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <_kill>:

int _kill(int pid, int sig)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029f4:	f005 ffb0 	bl	8008958 <__errno>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2216      	movs	r2, #22
 80029fc:	601a      	str	r2, [r3, #0]
  return -1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_exit>:

void _exit (int status)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a12:	f04f 31ff 	mov.w	r1, #4294967295
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffe7 	bl	80029ea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a1c:	e7fe      	b.n	8002a1c <_exit+0x12>

08002a1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e00a      	b.n	8002a46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a30:	f3af 8000 	nop.w
 8002a34:	4601      	mov	r1, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	60ba      	str	r2, [r7, #8]
 8002a3c:	b2ca      	uxtb	r2, r1
 8002a3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	dbf0      	blt.n	8002a30 <_read+0x12>
  }

  return len;
 8002a4e:	687b      	ldr	r3, [r7, #4]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <_isatty>:

int _isatty(int file)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <_sbrk+0x5c>)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <_sbrk+0x60>)
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <_sbrk+0x64>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <_sbrk+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae8:	f005 ff36 	bl	8008958 <__errno>
 8002aec:	4603      	mov	r3, r0
 8002aee:	220c      	movs	r2, #12
 8002af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	e009      	b.n	8002b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <_sbrk+0x64>)
 8002b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20005000 	.word	0x20005000
 8002b18:	00000400 	.word	0x00000400
 8002b1c:	200004b0 	.word	0x200004b0
 8002b20:	20000608 	.word	0x20000608

08002b24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b30:	f7ff fff8 	bl	8002b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b34:	480b      	ldr	r0, [pc, #44]	; (8002b64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b36:	490c      	ldr	r1, [pc, #48]	; (8002b68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b38:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b3c:	e002      	b.n	8002b44 <LoopCopyDataInit>

08002b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b42:	3304      	adds	r3, #4

08002b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b48:	d3f9      	bcc.n	8002b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b4c:	4c09      	ldr	r4, [pc, #36]	; (8002b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b50:	e001      	b.n	8002b56 <LoopFillZerobss>

08002b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b54:	3204      	adds	r2, #4

08002b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b58:	d3fb      	bcc.n	8002b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f005 ff03 	bl	8008964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b5e:	f7fe fb1b 	bl	8001198 <main>
  bx lr
 8002b62:	4770      	bx	lr
  ldr r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b68:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002b6c:	0800b8d4 	.word	0x0800b8d4
  ldr r2, =_sbss
 8002b70:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002b74:	20000604 	.word	0x20000604

08002b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b78:	e7fe      	b.n	8002b78 <ADC1_2_IRQHandler>
	...

08002b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_Init+0x28>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <HAL_Init+0x28>)
 8002b86:	f043 0310 	orr.w	r3, r3, #16
 8002b8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 fd9f 	bl	80036d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b92:	200f      	movs	r0, #15
 8002b94:	f000 f808 	bl	8002ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b98:	f7ff fc92 	bl	80024c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000

08002ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_InitTick+0x54>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_InitTick+0x58>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fdb7 	bl	800373a <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00e      	b.n	8002bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d80a      	bhi.n	8002bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f000 fd7f 	bl	80036e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_InitTick+0x5c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000008 	.word	0x20000008
 8002c04:	20000004 	.word	0x20000004

08002c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_IncTick+0x1c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_IncTick+0x20>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a03      	ldr	r2, [pc, #12]	; (8002c28 <HAL_IncTick+0x20>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	20000008 	.word	0x20000008
 8002c28:	200004b4 	.word	0x200004b4

08002c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <HAL_GetTick+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	200004b4 	.word	0x200004b4

08002c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff fff0 	bl	8002c2c <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d005      	beq.n	8002c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_Delay+0x44>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c66:	bf00      	nop
 8002c68:	f7ff ffe0 	bl	8002c2c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d8f7      	bhi.n	8002c68 <HAL_Delay+0x28>
  {
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000008 	.word	0x20000008

08002c88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0be      	b.n	8002e28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fc2c 	bl	8002524 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fbf1 	bl	80034b4 <ADC_ConversionStop_Disable>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8099 	bne.w	8002e16 <HAL_ADC_Init+0x18e>
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8095 	bne.w	8002e16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf4:	f023 0302 	bic.w	r3, r3, #2
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7b1b      	ldrb	r3, [r3, #12]
 8002d0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d003      	beq.n	8002d2a <HAL_ADC_Init+0xa2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_ADC_Init+0xa8>
 8002d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_Init+0xaa>
 8002d30:	2300      	movs	r3, #0
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7d1b      	ldrb	r3, [r3, #20]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d119      	bne.n	8002d74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7b1b      	ldrb	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	035a      	lsls	r2, r3, #13
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e00b      	b.n	8002d74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_ADC_Init+0x1a8>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da4:	d003      	beq.n	8002dae <HAL_ADC_Init+0x126>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d104      	bne.n	8002db8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	051b      	lsls	r3, r3, #20
 8002db6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */

    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_ADC_Init+0x1ac>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d10b      	bne.n	8002df4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002df2:	e018      	b.n	8002e26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f023 0312 	bic.w	r3, r3, #18
 8002dfc:	f043 0210 	orr.w	r2, r3, #16
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e14:	e007      	b.n	8002e26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	ffe1f7fd 	.word	0xffe1f7fd
 8002e34:	ff1f0efe 	.word	0xff1f0efe

08002e38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Start+0x1a>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e098      	b.n	8002f84 <HAL_ADC_Start+0x14c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fad0 	bl	8003400 <ADC_Enable>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 8087 	bne.w	8002f7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a41      	ldr	r2, [pc, #260]	; (8002f8c <HAL_ADC_Start+0x154>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_Start+0x5e>
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_ADC_Start+0x158>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d115      	bne.n	8002ec2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d026      	beq.n	8002efe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ec0:	e01d      	b.n	8002efe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <HAL_ADC_Start+0x158>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_Start+0xaa>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2b      	ldr	r2, [pc, #172]	; (8002f8c <HAL_ADC_Start+0x154>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10d      	bne.n	8002efe <HAL_ADC_Start+0xc6>
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_ADC_Start+0x158>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ef6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f023 0206 	bic.w	r2, r3, #6
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f16:	e002      	b.n	8002f1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f06f 0202 	mvn.w	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f3e:	d113      	bne.n	8002f68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_ADC_Start+0x154>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_ADC_Start+0x158>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d108      	bne.n	8002f68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	e00c      	b.n	8002f82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	e003      	b.n	8002f82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40012800 	.word	0x40012800
 8002f90:	40012400 	.word	0x40012400

08002f94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Stop+0x1a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e01a      	b.n	8002fe4 <HAL_ADC_Stop+0x50>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa7c 	bl	80034b4 <ADC_ConversionStop_Disable>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003002:	f7ff fe13 	bl	8002c2c <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0d3      	b.n	80031d6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d131      	bne.n	80030a0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003046:	2b00      	cmp	r3, #0
 8003048:	d12a      	bne.n	80030a0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800304a:	e021      	b.n	8003090 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d01d      	beq.n	8003090 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_ADC_PollForConversion+0x7e>
 800305a:	f7ff fde7 	bl	8002c2c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d212      	bcs.n	8003090 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0a2      	b.n	80031d6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0d6      	beq.n	800304c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800309e:	e070      	b.n	8003182 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80030a0:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_ADC_PollForConversion+0x1f4>)
 80030a2:	681c      	ldr	r4, [r3, #0]
 80030a4:	2002      	movs	r0, #2
 80030a6:	f002 fa11 	bl	80054cc <HAL_RCCEx_GetPeriphCLKFreq>
 80030aa:	4603      	mov	r3, r0
 80030ac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_ADC_PollForConversion+0x1f8>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_ADC_PollForConversion+0x104>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68d9      	ldr	r1, [r3, #12]
 80030c4:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <HAL_ADC_PollForConversion+0x1fc>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <HAL_ADC_PollForConversion+0x104>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	4b46      	ldr	r3, [pc, #280]	; (80031ec <HAL_ADC_PollForConversion+0x200>)
 80030d4:	400b      	ands	r3, r1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_ADC_PollForConversion+0x100>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <HAL_ADC_PollForConversion+0x204>)
 80030e2:	400b      	ands	r3, r1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_PollForConversion+0x100>
 80030e8:	2314      	movs	r3, #20
 80030ea:	e020      	b.n	800312e <HAL_ADC_PollForConversion+0x142>
 80030ec:	2329      	movs	r3, #41	; 0x29
 80030ee:	e01e      	b.n	800312e <HAL_ADC_PollForConversion+0x142>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6919      	ldr	r1, [r3, #16]
 80030f6:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_ADC_PollForConversion+0x200>)
 80030f8:	400b      	ands	r3, r1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_ADC_PollForConversion+0x120>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68d9      	ldr	r1, [r3, #12]
 8003104:	4b3a      	ldr	r3, [pc, #232]	; (80031f0 <HAL_ADC_PollForConversion+0x204>)
 8003106:	400b      	ands	r3, r1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_ADC_PollForConversion+0x13c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6919      	ldr	r1, [r3, #16]
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_ADC_PollForConversion+0x208>)
 8003114:	400b      	ands	r3, r1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_ADC_PollForConversion+0x140>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68d9      	ldr	r1, [r3, #12]
 8003120:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <HAL_ADC_PollForConversion+0x208>)
 8003122:	400b      	ands	r3, r1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_ADC_PollForConversion+0x140>
 8003128:	2354      	movs	r3, #84	; 0x54
 800312a:	e000      	b.n	800312e <HAL_ADC_PollForConversion+0x142>
 800312c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003134:	e021      	b.n	800317a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d01a      	beq.n	8003174 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_ADC_PollForConversion+0x168>
 8003144:	f7ff fd72 	bl	8002c2c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d20f      	bcs.n	8003174 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d90b      	bls.n	8003174 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e030      	b.n	80031d6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	429a      	cmp	r2, r3
 8003180:	d8d9      	bhi.n	8003136 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0212 	mvn.w	r2, #18
 800318a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031a6:	d115      	bne.n	80031d4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d111      	bne.n	80031d4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000
 80031e4:	24924924 	.word	0x24924924
 80031e8:	00924924 	.word	0x00924924
 80031ec:	12492492 	.word	0x12492492
 80031f0:	00492492 	.word	0x00492492
 80031f4:	00249249 	.word	0x00249249

080031f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x20>
 800322c:	2302      	movs	r3, #2
 800322e:	e0dc      	b.n	80033ea <HAL_ADC_ConfigChannel+0x1da>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d81c      	bhi.n	800327a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	3b05      	subs	r3, #5
 8003252:	221f      	movs	r2, #31
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	4019      	ands	r1, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	3b05      	subs	r3, #5
 800326c:	fa00 f203 	lsl.w	r2, r0, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	635a      	str	r2, [r3, #52]	; 0x34
 8003278:	e03c      	b.n	80032f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d81c      	bhi.n	80032bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b23      	subs	r3, #35	; 0x23
 8003294:	221f      	movs	r2, #31
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	4019      	ands	r1, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	3b23      	subs	r3, #35	; 0x23
 80032ae:	fa00 f203 	lsl.w	r2, r0, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ba:	e01b      	b.n	80032f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b41      	subs	r3, #65	; 0x41
 80032ce:	221f      	movs	r2, #31
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4019      	ands	r1, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b41      	subs	r3, #65	; 0x41
 80032e8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b09      	cmp	r3, #9
 80032fa:	d91c      	bls.n	8003336 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68d9      	ldr	r1, [r3, #12]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	3b1e      	subs	r3, #30
 800330e:	2207      	movs	r2, #7
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	4019      	ands	r1, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6898      	ldr	r0, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	3b1e      	subs	r3, #30
 8003328:	fa00 f203 	lsl.w	r2, r0, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	e019      	b.n	800336a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6919      	ldr	r1, [r3, #16]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	2207      	movs	r2, #7
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	4019      	ands	r1, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6898      	ldr	r0, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	fa00 f203 	lsl.w	r2, r0, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b10      	cmp	r3, #16
 8003370:	d003      	beq.n	800337a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003376:	2b11      	cmp	r3, #17
 8003378:	d132      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d125      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d126      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d11a      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a13      	ldr	r2, [pc, #76]	; (80033fc <HAL_ADC_ConfigChannel+0x1ec>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	0c9a      	lsrs	r2, r3, #18
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c0:	e002      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f9      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x1b2>
 80033ce:	e007      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	40012400 	.word	0x40012400
 80033f8:	20000000 	.word	0x20000000
 80033fc:	431bde83 	.word	0x431bde83

08003400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b01      	cmp	r3, #1
 800341c:	d040      	beq.n	80034a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800342e:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <ADC_Enable+0xac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <ADC_Enable+0xb0>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800343c:	e002      	b.n	8003444 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3b01      	subs	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f9      	bne.n	800343e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800344a:	f7ff fbef 	bl	8002c2c <HAL_GetTick>
 800344e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003450:	e01f      	b.n	8003492 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003452:	f7ff fbeb 	bl	8002c2c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d918      	bls.n	8003492 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d011      	beq.n	8003492 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e007      	b.n	80034a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d1d8      	bne.n	8003452 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000000 	.word	0x20000000
 80034b0:	431bde83 	.word	0x431bde83

080034b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d12e      	bne.n	800352c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034de:	f7ff fba5 	bl	8002c2c <HAL_GetTick>
 80034e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034e4:	e01b      	b.n	800351e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034e6:	f7ff fba1 	bl	8002c2c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d914      	bls.n	800351e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d10d      	bne.n	800351e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e007      	b.n	800352e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d0dc      	beq.n	80034e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003554:	4013      	ands	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	60d3      	str	r3, [r2, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <__NVIC_GetPriorityGrouping+0x18>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0307 	and.w	r3, r3, #7
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db0b      	blt.n	80035c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	f003 021f 	and.w	r2, r3, #31
 80035b4:	4906      	ldr	r1, [pc, #24]	; (80035d0 <__NVIC_EnableIRQ+0x34>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2001      	movs	r0, #1
 80035be:	fa00 f202 	lsl.w	r2, r0, r2
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db0a      	blt.n	80035fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	490c      	ldr	r1, [pc, #48]	; (8003620 <__NVIC_SetPriority+0x4c>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	440b      	add	r3, r1
 80035f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035fc:	e00a      	b.n	8003614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4908      	ldr	r1, [pc, #32]	; (8003624 <__NVIC_SetPriority+0x50>)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3b04      	subs	r3, #4
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	440b      	add	r3, r1
 8003612:	761a      	strb	r2, [r3, #24]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e100 	.word	0xe000e100
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f1c3 0307 	rsb	r3, r3, #7
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf28      	it	cs
 8003646:	2304      	movcs	r3, #4
 8003648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3304      	adds	r3, #4
 800364e:	2b06      	cmp	r3, #6
 8003650:	d902      	bls.n	8003658 <NVIC_EncodePriority+0x30>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3b03      	subs	r3, #3
 8003656:	e000      	b.n	800365a <NVIC_EncodePriority+0x32>
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	401a      	ands	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003670:	f04f 31ff 	mov.w	r1, #4294967295
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43d9      	mvns	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	4313      	orrs	r3, r2
         );
}
 8003682:	4618      	mov	r0, r3
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3b01      	subs	r3, #1
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d301      	bcc.n	80036a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800369e:	2301      	movs	r3, #1
 80036a0:	e00f      	b.n	80036c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <SysTick_Config+0x40>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036aa:	210f      	movs	r1, #15
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	f7ff ff90 	bl	80035d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <SysTick_Config+0x40>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <SysTick_Config+0x40>)
 80036bc:	2207      	movs	r2, #7
 80036be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000e010 	.word	0xe000e010

080036d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff2d 	bl	8003538 <__NVIC_SetPriorityGrouping>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f8:	f7ff ff42 	bl	8003580 <__NVIC_GetPriorityGrouping>
 80036fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6978      	ldr	r0, [r7, #20]
 8003704:	f7ff ff90 	bl	8003628 <NVIC_EncodePriority>
 8003708:	4602      	mov	r2, r0
 800370a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff5f 	bl	80035d4 <__NVIC_SetPriority>
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff35 	bl	800359c <__NVIC_EnableIRQ>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ffa2 	bl	800368c <SysTick_Config>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b08b      	sub	sp, #44	; 0x2c
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003766:	e169      	b.n	8003a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003768:	2201      	movs	r2, #1
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	429a      	cmp	r2, r3
 8003782:	f040 8158 	bne.w	8003a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a9a      	ldr	r2, [pc, #616]	; (80039f4 <HAL_GPIO_Init+0x2a0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d05e      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 8003790:	4a98      	ldr	r2, [pc, #608]	; (80039f4 <HAL_GPIO_Init+0x2a0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d875      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 8003796:	4a98      	ldr	r2, [pc, #608]	; (80039f8 <HAL_GPIO_Init+0x2a4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d058      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 800379c:	4a96      	ldr	r2, [pc, #600]	; (80039f8 <HAL_GPIO_Init+0x2a4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d86f      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037a2:	4a96      	ldr	r2, [pc, #600]	; (80039fc <HAL_GPIO_Init+0x2a8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d052      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037a8:	4a94      	ldr	r2, [pc, #592]	; (80039fc <HAL_GPIO_Init+0x2a8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d869      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ae:	4a94      	ldr	r2, [pc, #592]	; (8003a00 <HAL_GPIO_Init+0x2ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d04c      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037b4:	4a92      	ldr	r2, [pc, #584]	; (8003a00 <HAL_GPIO_Init+0x2ac>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d863      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ba:	4a92      	ldr	r2, [pc, #584]	; (8003a04 <HAL_GPIO_Init+0x2b0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d046      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037c0:	4a90      	ldr	r2, [pc, #576]	; (8003a04 <HAL_GPIO_Init+0x2b0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d85d      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037c6:	2b12      	cmp	r3, #18
 80037c8:	d82a      	bhi.n	8003820 <HAL_GPIO_Init+0xcc>
 80037ca:	2b12      	cmp	r3, #18
 80037cc:	d859      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <HAL_GPIO_Init+0x80>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	0800384f 	.word	0x0800384f
 80037d8:	08003829 	.word	0x08003829
 80037dc:	0800383b 	.word	0x0800383b
 80037e0:	0800387d 	.word	0x0800387d
 80037e4:	08003883 	.word	0x08003883
 80037e8:	08003883 	.word	0x08003883
 80037ec:	08003883 	.word	0x08003883
 80037f0:	08003883 	.word	0x08003883
 80037f4:	08003883 	.word	0x08003883
 80037f8:	08003883 	.word	0x08003883
 80037fc:	08003883 	.word	0x08003883
 8003800:	08003883 	.word	0x08003883
 8003804:	08003883 	.word	0x08003883
 8003808:	08003883 	.word	0x08003883
 800380c:	08003883 	.word	0x08003883
 8003810:	08003883 	.word	0x08003883
 8003814:	08003883 	.word	0x08003883
 8003818:	08003831 	.word	0x08003831
 800381c:	08003845 	.word	0x08003845
 8003820:	4a79      	ldr	r2, [pc, #484]	; (8003a08 <HAL_GPIO_Init+0x2b4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003826:	e02c      	b.n	8003882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	623b      	str	r3, [r7, #32]
          break;
 800382e:	e029      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	623b      	str	r3, [r7, #32]
          break;
 8003838:	e024      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	3308      	adds	r3, #8
 8003840:	623b      	str	r3, [r7, #32]
          break;
 8003842:	e01f      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	330c      	adds	r3, #12
 800384a:	623b      	str	r3, [r7, #32]
          break;
 800384c:	e01a      	b.n	8003884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003856:	2304      	movs	r3, #4
 8003858:	623b      	str	r3, [r7, #32]
          break;
 800385a:	e013      	b.n	8003884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003864:	2308      	movs	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	611a      	str	r2, [r3, #16]
          break;
 800386e:	e009      	b.n	8003884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003870:	2308      	movs	r3, #8
 8003872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	615a      	str	r2, [r3, #20]
          break;
 800387a:	e003      	b.n	8003884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
          break;
 8003880:	e000      	b.n	8003884 <HAL_GPIO_Init+0x130>
          break;
 8003882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2bff      	cmp	r3, #255	; 0xff
 8003888:	d801      	bhi.n	800388e <HAL_GPIO_Init+0x13a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	e001      	b.n	8003892 <HAL_GPIO_Init+0x13e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d802      	bhi.n	80038a0 <HAL_GPIO_Init+0x14c>
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	e002      	b.n	80038a6 <HAL_GPIO_Init+0x152>
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	3b08      	subs	r3, #8
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	210f      	movs	r1, #15
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	6a39      	ldr	r1, [r7, #32]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	431a      	orrs	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80b1 	beq.w	8003a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038d4:	4b4d      	ldr	r3, [pc, #308]	; (8003a0c <HAL_GPIO_Init+0x2b8>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	4a4c      	ldr	r2, [pc, #304]	; (8003a0c <HAL_GPIO_Init+0x2b8>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6193      	str	r3, [r2, #24]
 80038e0:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <HAL_GPIO_Init+0x2b8>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038ec:	4a48      	ldr	r2, [pc, #288]	; (8003a10 <HAL_GPIO_Init+0x2bc>)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	3302      	adds	r3, #2
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a40      	ldr	r2, [pc, #256]	; (8003a14 <HAL_GPIO_Init+0x2c0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d013      	beq.n	8003940 <HAL_GPIO_Init+0x1ec>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3f      	ldr	r2, [pc, #252]	; (8003a18 <HAL_GPIO_Init+0x2c4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00d      	beq.n	800393c <HAL_GPIO_Init+0x1e8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3e      	ldr	r2, [pc, #248]	; (8003a1c <HAL_GPIO_Init+0x2c8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <HAL_GPIO_Init+0x1e4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3d      	ldr	r2, [pc, #244]	; (8003a20 <HAL_GPIO_Init+0x2cc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_GPIO_Init+0x1e0>
 8003930:	2303      	movs	r3, #3
 8003932:	e006      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003934:	2304      	movs	r3, #4
 8003936:	e004      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003938:	2302      	movs	r3, #2
 800393a:	e002      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_GPIO_Init+0x1ee>
 8003940:	2300      	movs	r3, #0
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	f002 0203 	and.w	r2, r2, #3
 8003948:	0092      	lsls	r2, r2, #2
 800394a:	4093      	lsls	r3, r2
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003952:	492f      	ldr	r1, [pc, #188]	; (8003a10 <HAL_GPIO_Init+0x2bc>)
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	492c      	ldr	r1, [pc, #176]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]
 8003978:	e006      	b.n	8003988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	43db      	mvns	r3, r3
 8003982:	4928      	ldr	r1, [pc, #160]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 8003984:	4013      	ands	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d006      	beq.n	80039a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4922      	ldr	r1, [pc, #136]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
 80039a0:	e006      	b.n	80039b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	491e      	ldr	r1, [pc, #120]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4918      	ldr	r1, [pc, #96]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	e006      	b.n	80039d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039ca:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	4914      	ldr	r1, [pc, #80]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d021      	beq.n	8003a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039e4:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e021      	b.n	8003a36 <HAL_GPIO_Init+0x2e2>
 80039f2:	bf00      	nop
 80039f4:	10320000 	.word	0x10320000
 80039f8:	10310000 	.word	0x10310000
 80039fc:	10220000 	.word	0x10220000
 8003a00:	10210000 	.word	0x10210000
 8003a04:	10120000 	.word	0x10120000
 8003a08:	10110000 	.word	0x10110000
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40010000 	.word	0x40010000
 8003a14:	40010800 	.word	0x40010800
 8003a18:	40010c00 	.word	0x40010c00
 8003a1c:	40011000 	.word	0x40011000
 8003a20:	40011400 	.word	0x40011400
 8003a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_GPIO_Init+0x304>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	4909      	ldr	r1, [pc, #36]	; (8003a58 <HAL_GPIO_Init+0x304>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	3301      	adds	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f47f ae8e 	bne.w	8003768 <HAL_GPIO_Init+0x14>
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	372c      	adds	r7, #44	; 0x2c
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	40010400 	.word	0x40010400

08003a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a6c:	787b      	ldrb	r3, [r7, #1]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a78:	e003      	b.n	8003a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	041a      	lsls	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	611a      	str	r2, [r3, #16]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e12b      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fe fd9c 	bl	80025f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af0:	f001 fbf0 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8003af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a81      	ldr	r2, [pc, #516]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d807      	bhi.n	8003b10 <HAL_I2C_Init+0x84>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a80      	ldr	r2, [pc, #512]	; (8003d04 <HAL_I2C_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e006      	b.n	8003b1e <HAL_I2C_Init+0x92>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a7d      	ldr	r2, [pc, #500]	; (8003d08 <HAL_I2C_Init+0x27c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf94      	ite	ls
 8003b18:	2301      	movls	r3, #1
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e7      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a78      	ldr	r2, [pc, #480]	; (8003d0c <HAL_I2C_Init+0x280>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0c9b      	lsrs	r3, r3, #18
 8003b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <HAL_I2C_Init+0xd4>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e009      	b.n	8003b74 <HAL_I2C_Init+0xe8>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_I2C_Init+0x284>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	3301      	adds	r3, #1
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	495c      	ldr	r1, [pc, #368]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d819      	bhi.n	8003bc8 <HAL_I2C_Init+0x13c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e59      	subs	r1, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ba8:	400b      	ands	r3, r1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_I2C_Init+0x138>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e59      	subs	r1, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	e051      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e04f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <HAL_I2C_Init+0x168>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e012      	b.n	8003c1a <HAL_I2C_Init+0x18e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e58      	subs	r0, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	0099      	lsls	r1, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x196>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_I2C_Init+0x1bc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e58      	subs	r0, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	6809      	ldr	r1, [r1, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6911      	ldr	r1, [r2, #16]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	000186a0 	.word	0x000186a0
 8003d04:	001e847f 	.word	0x001e847f
 8003d08:	003d08ff 	.word	0x003d08ff
 8003d0c:	431bde83 	.word	0x431bde83
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d2e:	f7fe ff7d 	bl	8002c2c <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	f040 80d9 	bne.w	8003ef4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2319      	movs	r3, #25
 8003d48:	2201      	movs	r2, #1
 8003d4a:	496d      	ldr	r1, [pc, #436]	; (8003f00 <HAL_I2C_Mem_Write+0x1ec>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fcc1 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0cc      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_I2C_Mem_Write+0x56>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0c5      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d007      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2221      	movs	r2, #33	; 0x21
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a3a      	ldr	r2, [r7, #32]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a4d      	ldr	r2, [pc, #308]	; (8003f04 <HAL_I2C_Mem_Write+0x1f0>)
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dd2:	88f8      	ldrh	r0, [r7, #6]
 8003dd4:	893a      	ldrh	r2, [r7, #8]
 8003dd6:	8979      	ldrh	r1, [r7, #10]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4603      	mov	r3, r0
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 faf8 	bl	80043d8 <I2C_RequestMemoryWrite>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d052      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e081      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fd86 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d107      	bne.n	8003e1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06b      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d11b      	bne.n	8003e94 <HAL_I2C_Mem_Write+0x180>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1aa      	bne.n	8003df2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fd79 	bl	8004998 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d107      	bne.n	8003ec4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e016      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	00100002 	.word	0x00100002
 8003f04:	ffff0000 	.word	0xffff0000

08003f08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	; 0x30
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	817b      	strh	r3, [r7, #10]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	813b      	strh	r3, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f26:	f7fe fe81 	bl	8002c2c <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	f040 8244 	bne.w	80043c2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2319      	movs	r3, #25
 8003f40:	2201      	movs	r2, #1
 8003f42:	4982      	ldr	r1, [pc, #520]	; (800414c <HAL_I2C_Mem_Read+0x244>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fbc5 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
 8003f52:	e237      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Mem_Read+0x5a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e230      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d007      	beq.n	8003f88 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2222      	movs	r2, #34	; 0x22
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a62      	ldr	r2, [pc, #392]	; (8004150 <HAL_I2C_Mem_Read+0x248>)
 8003fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fca:	88f8      	ldrh	r0, [r7, #6]
 8003fcc:	893a      	ldrh	r2, [r7, #8]
 8003fce:	8979      	ldrh	r1, [r7, #10]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4603      	mov	r3, r0
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa92 	bl	8004504 <I2C_RequestMemoryRead>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1ec      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e1c0      	b.n	800439c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	2b01      	cmp	r3, #1
 8004020:	d11e      	bne.n	8004060 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004032:	b672      	cpsid	i
}
 8004034:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800405c:	b662      	cpsie	i
}
 800405e:	e035      	b.n	80040cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	2b02      	cmp	r3, #2
 8004066:	d11e      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004076:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004078:	b672      	cpsid	i
}
 800407a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040a2:	b662      	cpsie	i
}
 80040a4:	e012      	b.n	80040cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040cc:	e166      	b.n	800439c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	f200 811f 	bhi.w	8004316 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d123      	bne.n	8004128 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fc9f 	bl	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e167      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004126:	e139      	b.n	800439c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	2b02      	cmp	r3, #2
 800412e:	d152      	bne.n	80041d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	2200      	movs	r2, #0
 8004138:	4906      	ldr	r1, [pc, #24]	; (8004154 <HAL_I2C_Mem_Read+0x24c>)
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 faca 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e13c      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
 800414a:	bf00      	nop
 800414c:	00100002 	.word	0x00100002
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004158:	b672      	cpsid	i
}
 800415a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800419e:	b662      	cpsie	i
}
 80041a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d4:	e0e2      	b.n	800439c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	2200      	movs	r2, #0
 80041de:	497b      	ldr	r1, [pc, #492]	; (80043cc <HAL_I2C_Mem_Read+0x4c4>)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fa77 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0e9      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004200:	b672      	cpsid	i
}
 8004202:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004236:	4b66      	ldr	r3, [pc, #408]	; (80043d0 <HAL_I2C_Mem_Read+0x4c8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <HAL_I2C_Mem_Read+0x4cc>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	0a1a      	lsrs	r2, r3, #8
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	00da      	lsls	r2, r3, #3
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	3b01      	subs	r3, #1
 8004254:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d118      	bne.n	800428e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800427e:	b662      	cpsie	i
}
 8004280:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e09a      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d1d9      	bne.n	8004250 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042de:	b662      	cpsie	i
}
 80042e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004314:	e042      	b.n	800439c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fb84 	bl	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e04c      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d118      	bne.n	800439c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f ae94 	bne.w	80040ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	00010004 	.word	0x00010004
 80043d0:	20000000 	.word	0x20000000
 80043d4:	14f8b589 	.word	0x14f8b589

080043d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	460b      	mov	r3, r1
 80043ec:	813b      	strh	r3, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	2200      	movs	r2, #0
 800440a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f960 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00d      	beq.n	8004436 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004428:	d103      	bne.n	8004432 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e05f      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004436:	897b      	ldrh	r3, [r7, #10]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	492d      	ldr	r1, [pc, #180]	; (8004500 <I2C_RequestMemoryWrite+0x128>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f9bb 	bl	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04c      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fa46 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02b      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]
 80044ae:	e021      	b.n	80044f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	6a39      	ldr	r1, [r7, #32]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fa20 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d107      	bne.n	80044e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e005      	b.n	80044f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ea:	893b      	ldrh	r3, [r7, #8]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	00010002 	.word	0x00010002

08004504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	461a      	mov	r2, r3
 8004512:	4603      	mov	r3, r0
 8004514:	817b      	strh	r3, [r7, #10]
 8004516:	460b      	mov	r3, r1
 8004518:	813b      	strh	r3, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800452c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2200      	movs	r2, #0
 8004546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f8c2 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00d      	beq.n	8004572 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004564:	d103      	bne.n	800456e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e0aa      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	6a3a      	ldr	r2, [r7, #32]
 8004586:	4952      	ldr	r1, [pc, #328]	; (80046d0 <I2C_RequestMemoryRead+0x1cc>)
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f91d 	bl	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e097      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b0:	6a39      	ldr	r1, [r7, #32]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f9a8 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d107      	bne.n	80045d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e076      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d105      	bne.n	80045ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e0:	893b      	ldrh	r3, [r7, #8]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	611a      	str	r2, [r3, #16]
 80045ea:	e021      	b.n	8004630 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045ec:	893b      	ldrh	r3, [r7, #8]
 80045ee:	0a1b      	lsrs	r3, r3, #8
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fc:	6a39      	ldr	r1, [r7, #32]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f982 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b04      	cmp	r3, #4
 8004610:	d107      	bne.n	8004622 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e050      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004626:	893b      	ldrh	r3, [r7, #8]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	6a39      	ldr	r1, [r7, #32]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f967 	bl	8004908 <I2C_WaitOnTXEFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	2b04      	cmp	r3, #4
 8004646:	d107      	bne.n	8004658 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004656:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e035      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	2200      	movs	r2, #0
 8004674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f82b 	bl	80046d4 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00d      	beq.n	80046a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004692:	d103      	bne.n	800469c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e013      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046a0:	897b      	ldrh	r3, [r7, #10]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	6a3a      	ldr	r2, [r7, #32]
 80046b4:	4906      	ldr	r1, [pc, #24]	; (80046d0 <I2C_RequestMemoryRead+0x1cc>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f886 	bl	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	00010002 	.word	0x00010002

080046d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e4:	e048      	b.n	8004778 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d044      	beq.n	8004778 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fe fa9d 	bl	8002c2c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d302      	bcc.n	8004704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d139      	bne.n	8004778 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10d      	bne.n	800472a <I2C_WaitOnFlagUntilTimeout+0x56>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	43da      	mvns	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	e00c      	b.n	8004744 <I2C_WaitOnFlagUntilTimeout+0x70>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	43da      	mvns	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4013      	ands	r3, r2
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	429a      	cmp	r2, r3
 8004748:	d116      	bne.n	8004778 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e023      	b.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	0c1b      	lsrs	r3, r3, #16
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10d      	bne.n	800479e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	43da      	mvns	r2, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	e00c      	b.n	80047b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	43da      	mvns	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d093      	beq.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d6:	e071      	b.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e6:	d123      	bne.n	8004830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	f043 0204 	orr.w	r2, r3, #4
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e067      	b.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004836:	d041      	beq.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004838:	f7fe f9f8 	bl	8002c2c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d302      	bcc.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d136      	bne.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10c      	bne.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e00b      	b.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d016      	beq.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e021      	b.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	0c1b      	lsrs	r3, r3, #16
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d10c      	bne.n	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	43da      	mvns	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4013      	ands	r3, r2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e00b      	b.n	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f47f af6d 	bne.w	80047d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004914:	e034      	b.n	8004980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f8e3 	bl	8004ae2 <I2C_IsAcknowledgeFailed>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e034      	b.n	8004990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d028      	beq.n	8004980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fe f97d 	bl	8002c2c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11d      	bne.n	8004980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d016      	beq.n	8004980 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e007      	b.n	8004990 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b80      	cmp	r3, #128	; 0x80
 800498c:	d1c3      	bne.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a4:	e034      	b.n	8004a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f89b 	bl	8004ae2 <I2C_IsAcknowledgeFailed>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e034      	b.n	8004a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d028      	beq.n	8004a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fe f935 	bl	8002c2c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11d      	bne.n	8004a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d016      	beq.n	8004a10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e007      	b.n	8004a20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d1c3      	bne.n	80049a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a34:	e049      	b.n	8004aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d119      	bne.n	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0210 	mvn.w	r2, #16
 8004a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e030      	b.n	8004ada <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a78:	f7fe f8d8 	bl	8002c2c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11d      	bne.n	8004aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d016      	beq.n	8004aca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e007      	b.n	8004ada <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b40      	cmp	r3, #64	; 0x40
 8004ad6:	d1ae      	bne.n	8004a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d11b      	bne.n	8004b32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e272      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8087 	beq.w	8004c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b60:	4b92      	ldr	r3, [pc, #584]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d00c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b6c:	4b8f      	ldr	r3, [pc, #572]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 030c 	and.w	r3, r3, #12
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d112      	bne.n	8004b9e <HAL_RCC_OscConfig+0x5e>
 8004b78:	4b8c      	ldr	r3, [pc, #560]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b84:	d10b      	bne.n	8004b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b86:	4b89      	ldr	r3, [pc, #548]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d06c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x12c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d168      	bne.n	8004c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e24c      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x76>
 8004ba8:	4b80      	ldr	r3, [pc, #512]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a7f      	ldr	r2, [pc, #508]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	e02e      	b.n	8004c14 <HAL_RCC_OscConfig+0xd4>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x98>
 8004bbe:	4b7b      	ldr	r3, [pc, #492]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7a      	ldr	r2, [pc, #488]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4b78      	ldr	r3, [pc, #480]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a77      	ldr	r2, [pc, #476]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	e01d      	b.n	8004c14 <HAL_RCC_OscConfig+0xd4>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0xbc>
 8004be2:	4b72      	ldr	r3, [pc, #456]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a71      	ldr	r2, [pc, #452]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4b6f      	ldr	r3, [pc, #444]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a6e      	ldr	r2, [pc, #440]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e00b      	b.n	8004c14 <HAL_RCC_OscConfig+0xd4>
 8004bfc:	4b6b      	ldr	r3, [pc, #428]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a6a      	ldr	r2, [pc, #424]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4b68      	ldr	r3, [pc, #416]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a67      	ldr	r2, [pc, #412]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fe f806 	bl	8002c2c <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c24:	f7fe f802 	bl	8002c2c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e200      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c36:	4b5d      	ldr	r3, [pc, #372]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0xe4>
 8004c42:	e014      	b.n	8004c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fd fff2 	bl	8002c2c <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7fd ffee 	bl	8002c2c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1ec      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5e:	4b53      	ldr	r3, [pc, #332]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x10c>
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d063      	beq.n	8004d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c7a:	4b4c      	ldr	r3, [pc, #304]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c86:	4b49      	ldr	r3, [pc, #292]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d11c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x18c>
 8004c92:	4b46      	ldr	r3, [pc, #280]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d116      	bne.n	8004ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9e:	4b43      	ldr	r3, [pc, #268]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x176>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e1c0      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb6:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4939      	ldr	r1, [pc, #228]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cca:	e03a      	b.n	8004d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd4:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fd ffa7 	bl	8002c2c <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce2:	f7fd ffa3 	bl	8002c2c <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e1a1      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d00:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4927      	ldr	r1, [pc, #156]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]
 8004d14:	e015      	b.n	8004d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <HAL_RCC_OscConfig+0x270>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fd ff86 	bl	8002c2c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d24:	f7fd ff82 	bl	8002c2c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e180      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d03a      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d019      	beq.n	8004d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d56:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5c:	f7fd ff66 	bl	8002c2c <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fd ff62 	bl	8002c2c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e160      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <HAL_RCC_OscConfig+0x26c>)
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f000 face 	bl	8005324 <RCC_Delay>
 8004d88:	e01c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d90:	f7fd ff4c 	bl	8002c2c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d96:	e00f      	b.n	8004db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d98:	f7fd ff48 	bl	8002c2c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d908      	bls.n	8004db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e146      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	42420000 	.word	0x42420000
 8004db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db8:	4b92      	ldr	r3, [pc, #584]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e9      	bne.n	8004d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80a6 	beq.w	8004f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd6:	4b8b      	ldr	r3, [pc, #556]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10d      	bne.n	8004dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de2:	4b88      	ldr	r3, [pc, #544]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4a87      	ldr	r2, [pc, #540]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dec:	61d3      	str	r3, [r2, #28]
 8004dee:	4b85      	ldr	r3, [pc, #532]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfe:	4b82      	ldr	r3, [pc, #520]	; (8005008 <HAL_RCC_OscConfig+0x4c8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d118      	bne.n	8004e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e0a:	4b7f      	ldr	r3, [pc, #508]	; (8005008 <HAL_RCC_OscConfig+0x4c8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7e      	ldr	r2, [pc, #504]	; (8005008 <HAL_RCC_OscConfig+0x4c8>)
 8004e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e16:	f7fd ff09 	bl	8002c2c <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e1e:	f7fd ff05 	bl	8002c2c <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b64      	cmp	r3, #100	; 0x64
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e103      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e30:	4b75      	ldr	r3, [pc, #468]	; (8005008 <HAL_RCC_OscConfig+0x4c8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d106      	bne.n	8004e52 <HAL_RCC_OscConfig+0x312>
 8004e44:	4b6f      	ldr	r3, [pc, #444]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4a6e      	ldr	r2, [pc, #440]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	6213      	str	r3, [r2, #32]
 8004e50:	e02d      	b.n	8004eae <HAL_RCC_OscConfig+0x36e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10c      	bne.n	8004e74 <HAL_RCC_OscConfig+0x334>
 8004e5a:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4a69      	ldr	r2, [pc, #420]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	4b67      	ldr	r3, [pc, #412]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a66      	ldr	r2, [pc, #408]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	f023 0304 	bic.w	r3, r3, #4
 8004e70:	6213      	str	r3, [r2, #32]
 8004e72:	e01c      	b.n	8004eae <HAL_RCC_OscConfig+0x36e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCC_OscConfig+0x356>
 8004e7c:	4b61      	ldr	r3, [pc, #388]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4a60      	ldr	r2, [pc, #384]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	f043 0304 	orr.w	r3, r3, #4
 8004e86:	6213      	str	r3, [r2, #32]
 8004e88:	4b5e      	ldr	r3, [pc, #376]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4a5d      	ldr	r2, [pc, #372]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6213      	str	r3, [r2, #32]
 8004e94:	e00b      	b.n	8004eae <HAL_RCC_OscConfig+0x36e>
 8004e96:	4b5b      	ldr	r3, [pc, #364]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	4a5a      	ldr	r2, [pc, #360]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6213      	str	r3, [r2, #32]
 8004ea2:	4b58      	ldr	r3, [pc, #352]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	4a57      	ldr	r2, [pc, #348]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d015      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb6:	f7fd feb9 	bl	8002c2c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fd feb5 	bl	8002c2c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0b1      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ee      	beq.n	8004ebe <HAL_RCC_OscConfig+0x37e>
 8004ee0:	e014      	b.n	8004f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee2:	f7fd fea3 	bl	8002c2c <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fd fe9f 	bl	8002c2c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e09b      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f00:	4b40      	ldr	r3, [pc, #256]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ee      	bne.n	8004eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f12:	4b3c      	ldr	r3, [pc, #240]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	4a3b      	ldr	r2, [pc, #236]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8087 	beq.w	8005036 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f28:	4b36      	ldr	r3, [pc, #216]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d061      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d146      	bne.n	8004fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3c:	4b33      	ldr	r3, [pc, #204]	; (800500c <HAL_RCC_OscConfig+0x4cc>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f42:	f7fd fe73 	bl	8002c2c <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4a:	f7fd fe6f 	bl	8002c2c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e06d      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f0      	bne.n	8004f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d108      	bne.n	8004f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f72:	4b24      	ldr	r3, [pc, #144]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	4921      	ldr	r1, [pc, #132]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f84:	4b1f      	ldr	r3, [pc, #124]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a19      	ldr	r1, [r3, #32]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	430b      	orrs	r3, r1
 8004f96:	491b      	ldr	r1, [pc, #108]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x4cc>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fd fe43 	bl	8002c2c <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fd fe3f 	bl	8002c2c <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e03d      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x46a>
 8004fc8:	e035      	b.n	8005036 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCC_OscConfig+0x4cc>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fe2c 	bl	8002c2c <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd fe28 	bl	8002c2c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e026      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCC_OscConfig+0x4c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x498>
 8004ff6:	e01e      	b.n	8005036 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d107      	bne.n	8005010 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e019      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
 8005004:	40021000 	.word	0x40021000
 8005008:	40007000 	.word	0x40007000
 800500c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_OscConfig+0x500>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	429a      	cmp	r2, r3
 8005022:	d106      	bne.n	8005032 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d001      	beq.n	8005036 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40021000 	.word	0x40021000

08005044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0d0      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005058:	4b6a      	ldr	r3, [pc, #424]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d910      	bls.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b67      	ldr	r3, [pc, #412]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 0207 	bic.w	r2, r3, #7
 800506e:	4965      	ldr	r1, [pc, #404]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005076:	4b63      	ldr	r3, [pc, #396]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d001      	beq.n	8005088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0b8      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d020      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a0:	4b59      	ldr	r3, [pc, #356]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a58      	ldr	r2, [pc, #352]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b8:	4b53      	ldr	r3, [pc, #332]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a52      	ldr	r2, [pc, #328]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	494d      	ldr	r1, [pc, #308]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d040      	beq.n	8005164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d115      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e07f      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005102:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e073      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005112:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e06b      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f023 0203 	bic.w	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4936      	ldr	r1, [pc, #216]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005134:	f7fd fd7a 	bl	8002c2c <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	e00a      	b.n	8005152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513c:	f7fd fd76 	bl	8002c2c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e053      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005152:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 020c 	and.w	r2, r3, #12
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	429a      	cmp	r2, r3
 8005162:	d1eb      	bne.n	800513c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d210      	bcs.n	8005194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 0207 	bic.w	r2, r3, #7
 800517a:	4922      	ldr	r1, [pc, #136]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <HAL_RCC_ClockConfig+0x1c0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e032      	b.n	80051fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4916      	ldr	r1, [pc, #88]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	490e      	ldr	r1, [pc, #56]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051d2:	f000 f821 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80051d6:	4602      	mov	r2, r0
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	490a      	ldr	r1, [pc, #40]	; (800520c <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	5ccb      	ldrb	r3, [r1, r3]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1cc>)
 80051ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1d0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fd fcd8 	bl	8002ba8 <HAL_InitTick>

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40022000 	.word	0x40022000
 8005208:	40021000 	.word	0x40021000
 800520c:	0800b464 	.word	0x0800b464
 8005210:	20000000 	.word	0x20000000
 8005214:	20000004 	.word	0x20000004

08005218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005232:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d002      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x30>
 8005242:	2b08      	cmp	r3, #8
 8005244:	d003      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x36>
 8005246:	e027      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800524a:	613b      	str	r3, [r7, #16]
      break;
 800524c:	e027      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	0c9b      	lsrs	r3, r3, #18
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005258:	5cd3      	ldrb	r3, [r2, r3]
 800525a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <HAL_RCC_GetSysClockFreq+0x94>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	0c5b      	lsrs	r3, r3, #17
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005272:	5cd3      	ldrb	r3, [r2, r3]
 8005274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800527a:	fb03 f202 	mul.w	r2, r3, r2
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e004      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a0c      	ldr	r2, [pc, #48]	; (80052bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800528c:	fb02 f303 	mul.w	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	613b      	str	r3, [r7, #16]
      break;
 8005296:	e002      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800529a:	613b      	str	r3, [r7, #16]
      break;
 800529c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529e:	693b      	ldr	r3, [r7, #16]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	007a1200 	.word	0x007a1200
 80052b4:	0800b47c 	.word	0x0800b47c
 80052b8:	0800b48c 	.word	0x0800b48c
 80052bc:	003d0900 	.word	0x003d0900

080052c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c4:	4b02      	ldr	r3, [pc, #8]	; (80052d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr
 80052d0:	20000000 	.word	0x20000000

080052d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052d8:	f7ff fff2 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4903      	ldr	r1, [pc, #12]	; (80052f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40021000 	.word	0x40021000
 80052f8:	0800b474 	.word	0x0800b474

080052fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005300:	f7ff ffde 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	0adb      	lsrs	r3, r3, #11
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4903      	ldr	r1, [pc, #12]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	0800b474 	.word	0x0800b474

08005324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <RCC_Delay+0x34>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <RCC_Delay+0x38>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	0a5b      	lsrs	r3, r3, #9
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005340:	bf00      	nop
  }
  while (Delay --);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	60fa      	str	r2, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f9      	bne.n	8005340 <RCC_Delay+0x1c>
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	20000000 	.word	0x20000000
 800535c:	10624dd3 	.word	0x10624dd3

08005360 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d07d      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800537c:	2300      	movs	r3, #0
 800537e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005380:	4b4f      	ldr	r3, [pc, #316]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10d      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538c:	4b4c      	ldr	r3, [pc, #304]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	4a4b      	ldr	r2, [pc, #300]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005396:	61d3      	str	r3, [r2, #28]
 8005398:	4b49      	ldr	r3, [pc, #292]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	4b46      	ldr	r3, [pc, #280]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d118      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b4:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a42      	ldr	r2, [pc, #264]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c0:	f7fd fc34 	bl	8002c2c <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c6:	e008      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c8:	f7fd fc30 	bl	8002c2c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b64      	cmp	r3, #100	; 0x64
 80053d4:	d901      	bls.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e06d      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053da:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d02e      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	429a      	cmp	r2, r3
 8005402:	d027      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005404:	4b2e      	ldr	r3, [pc, #184]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800540e:	4b2e      	ldr	r3, [pc, #184]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005414:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800541a:	4a29      	ldr	r2, [pc, #164]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fd fbff 	bl	8002c2c <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	e00a      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fd fbfb 	bl	8002c2c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e036      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ee      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4917      	ldr	r1, [pc, #92]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	4313      	orrs	r3, r2
 8005464:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005466:	7dfb      	ldrb	r3, [r7, #23]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d105      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800546c:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	490b      	ldr	r1, [pc, #44]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005492:	4313      	orrs	r3, r2
 8005494:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	4904      	ldr	r1, [pc, #16]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40007000 	.word	0x40007000
 80054c8:	42420440 	.word	0x42420440

080054cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	f200 808a 	bhi.w	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d045      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d075      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005502:	e082      	b.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005504:	4b46      	ldr	r3, [pc, #280]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800550a:	4b45      	ldr	r3, [pc, #276]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d07b      	beq.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	0c9b      	lsrs	r3, r3, #18
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	4a41      	ldr	r2, [pc, #260]	; (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d015      	beq.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800552e:	4b3c      	ldr	r3, [pc, #240]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	0c5b      	lsrs	r3, r3, #17
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	4a3b      	ldr	r2, [pc, #236]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800553a:	5cd3      	ldrb	r3, [r2, r3]
 800553c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005548:	4a38      	ldr	r2, [pc, #224]	; (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	e004      	b.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4a34      	ldr	r2, [pc, #208]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005564:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005570:	d102      	bne.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	61bb      	str	r3, [r7, #24]
      break;
 8005576:	e04a      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	61bb      	str	r3, [r7, #24]
      break;
 8005586:	e042      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005588:	4b25      	ldr	r3, [pc, #148]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d108      	bne.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80055a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e01f      	b.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b6:	d109      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80055b8:	4b19      	ldr	r3, [pc, #100]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80055c4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e00f      	b.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d6:	d11c      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80055d8:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d016      	beq.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80055e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80055e8:	61bb      	str	r3, [r7, #24]
      break;
 80055ea:	e012      	b.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80055ec:	e011      	b.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80055ee:	f7ff fe85 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	0b9b      	lsrs	r3, r3, #14
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	3301      	adds	r3, #1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	61bb      	str	r3, [r7, #24]
      break;
 8005608:	e004      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800560a:	bf00      	nop
 800560c:	e002      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800560e:	bf00      	nop
 8005610:	e000      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005612:	bf00      	nop
    }
  }
  return (frequency);
 8005614:	69bb      	ldr	r3, [r7, #24]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	0800b490 	.word	0x0800b490
 8005628:	0800b4a0 	.word	0x0800b4a0
 800562c:	007a1200 	.word	0x007a1200
 8005630:	003d0900 	.word	0x003d0900
 8005634:	aaaaaaab 	.word	0xaaaaaaab

08005638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e041      	b.n	80056ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fd f804 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f000 fd2e 	bl	80060d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e041      	b.n	800576c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f839 	bl	8005774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3304      	adds	r3, #4
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f000 fcdf 	bl	80060d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr
	...

08005788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <HAL_TIM_PWM_Start+0x24>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	e022      	b.n	80057f2 <HAL_TIM_PWM_Start+0x6a>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d109      	bne.n	80057c6 <HAL_TIM_PWM_Start+0x3e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	bf14      	ite	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	2300      	moveq	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	e015      	b.n	80057f2 <HAL_TIM_PWM_Start+0x6a>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d109      	bne.n	80057e0 <HAL_TIM_PWM_Start+0x58>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	e008      	b.n	80057f2 <HAL_TIM_PWM_Start+0x6a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	bf14      	ite	ne
 80057ec:	2301      	movne	r3, #1
 80057ee:	2300      	moveq	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e05e      	b.n	80058b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <HAL_TIM_PWM_Start+0x82>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005808:	e013      	b.n	8005832 <HAL_TIM_PWM_Start+0xaa>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b04      	cmp	r3, #4
 800580e:	d104      	bne.n	800581a <HAL_TIM_PWM_Start+0x92>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005818:	e00b      	b.n	8005832 <HAL_TIM_PWM_Start+0xaa>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d104      	bne.n	800582a <HAL_TIM_PWM_Start+0xa2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005828:	e003      	b.n	8005832 <HAL_TIM_PWM_Start+0xaa>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2201      	movs	r2, #1
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fecc 	bl	80065d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_TIM_PWM_Start+0x138>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d107      	bne.n	800585a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_TIM_PWM_Start+0x138>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00e      	beq.n	8005882 <HAL_TIM_PWM_Start+0xfa>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d009      	beq.n	8005882 <HAL_TIM_PWM_Start+0xfa>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a14      	ldr	r2, [pc, #80]	; (80058c4 <HAL_TIM_PWM_Start+0x13c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <HAL_TIM_PWM_Start+0xfa>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <HAL_TIM_PWM_Start+0x140>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d111      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b06      	cmp	r3, #6
 8005892:	d010      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	e007      	b.n	80058b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40000800 	.word	0x40000800

080058cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e093      	b.n	8005a08 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fc feeb 	bl	80026d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6812      	ldr	r2, [r2, #0]
 800590c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005910:	f023 0307 	bic.w	r3, r3, #7
 8005914:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f000 fbd9 	bl	80060d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	4313      	orrs	r3, r2
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800596c:	f023 030c 	bic.w	r3, r3, #12
 8005970:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	4313      	orrs	r3, r2
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	011a      	lsls	r2, r3, #4
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	031b      	lsls	r3, r3, #12
 800599c:	4313      	orrs	r3, r2
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	4313      	orrs	r3, r2
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d110      	bne.n	8005a62 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d102      	bne.n	8005a4c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a46:	7b7b      	ldrb	r3, [r7, #13]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e089      	b.n	8005b64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a60:	e031      	b.n	8005ac6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d110      	bne.n	8005a8a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d102      	bne.n	8005a74 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a6e:	7b3b      	ldrb	r3, [r7, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e075      	b.n	8005b64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a88:	e01d      	b.n	8005ac6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d108      	bne.n	8005aa2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d105      	bne.n	8005aa2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a96:	7b7b      	ldrb	r3, [r7, #13]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d102      	bne.n	8005aa2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a9c:	7b3b      	ldrb	r3, [r7, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d001      	beq.n	8005aa6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e05e      	b.n	8005b64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d010      	beq.n	8005af4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005ad2:	e01f      	b.n	8005b14 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fd7b 	bl	80065d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0202 	orr.w	r2, r2, #2
 8005af0:	60da      	str	r2, [r3, #12]
      break;
 8005af2:	e02e      	b.n	8005b52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2201      	movs	r2, #1
 8005afa:	2104      	movs	r1, #4
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fd6b 	bl	80065d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0204 	orr.w	r2, r2, #4
 8005b10:	60da      	str	r2, [r3, #12]
      break;
 8005b12:	e01e      	b.n	8005b52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fd5b 	bl	80065d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2201      	movs	r2, #1
 8005b28:	2104      	movs	r1, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fd54 	bl	80065d8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0202 	orr.w	r2, r2, #2
 8005b3e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0204 	orr.w	r2, r2, #4
 8005b4e:	60da      	str	r2, [r3, #12]
      break;
 8005b50:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0202 	mvn.w	r2, #2
 8005b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb faa8 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa72 	bl	80060a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fa78 	bl	80060b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d122      	bne.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0204 	mvn.w	r2, #4
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fb fa7e 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa48 	bl	80060a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fa4e 	bl	80060b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0208 	mvn.w	r2, #8
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2204      	movs	r2, #4
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb fa54 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa1e 	bl	80060a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa24 	bl	80060b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0310 	and.w	r3, r3, #16
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0210 	mvn.w	r2, #16
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2208      	movs	r2, #8
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb fa2a 	bl	8001104 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9f4 	bl	80060a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f9fa 	bl	80060b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0201 	mvn.w	r2, #1
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f9cf 	bl	800608e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d08:	2b80      	cmp	r3, #128	; 0x80
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fd3a 	bl	8006790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d26:	2b40      	cmp	r3, #64	; 0x40
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d34:	2b40      	cmp	r3, #64	; 0x40
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9be 	bl	80060c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0320 	and.w	r3, r3, #32
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0220 	mvn.w	r2, #32
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fd05 	bl	800677e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d74:	bf00      	nop
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0ae      	b.n	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	f200 809f 	bhi.w	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005de5 	.word	0x08005de5
 8005db4:	08005ee9 	.word	0x08005ee9
 8005db8:	08005ee9 	.word	0x08005ee9
 8005dbc:	08005ee9 	.word	0x08005ee9
 8005dc0:	08005e25 	.word	0x08005e25
 8005dc4:	08005ee9 	.word	0x08005ee9
 8005dc8:	08005ee9 	.word	0x08005ee9
 8005dcc:	08005ee9 	.word	0x08005ee9
 8005dd0:	08005e67 	.word	0x08005e67
 8005dd4:	08005ee9 	.word	0x08005ee9
 8005dd8:	08005ee9 	.word	0x08005ee9
 8005ddc:	08005ee9 	.word	0x08005ee9
 8005de0:	08005ea7 	.word	0x08005ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 f9d6 	bl	800619c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0208 	orr.w	r2, r2, #8
 8005dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0204 	bic.w	r2, r2, #4
 8005e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	619a      	str	r2, [r3, #24]
      break;
 8005e22:	e064      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fa1c 	bl	8006268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6999      	ldr	r1, [r3, #24]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	619a      	str	r2, [r3, #24]
      break;
 8005e64:	e043      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fa65 	bl	800633c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0208 	orr.w	r2, r2, #8
 8005e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0204 	bic.w	r2, r2, #4
 8005e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69d9      	ldr	r1, [r3, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	61da      	str	r2, [r3, #28]
      break;
 8005ea4:	e023      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 faaf 	bl	8006410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69d9      	ldr	r1, [r3, #28]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	021a      	lsls	r2, r3, #8
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	61da      	str	r2, [r3, #28]
      break;
 8005ee6:	e002      	b.n	8005eee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
      break;
 8005eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIM_ConfigClockSource+0x1c>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e0b4      	b.n	8006086 <HAL_TIM_ConfigClockSource+0x186>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f54:	d03e      	beq.n	8005fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5a:	f200 8087 	bhi.w	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	f000 8086 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x172>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6a:	d87f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b70      	cmp	r3, #112	; 0x70
 8005f6e:	d01a      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f70:	2b70      	cmp	r3, #112	; 0x70
 8005f72:	d87b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b60      	cmp	r3, #96	; 0x60
 8005f76:	d050      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x11a>
 8005f78:	2b60      	cmp	r3, #96	; 0x60
 8005f7a:	d877      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b50      	cmp	r3, #80	; 0x50
 8005f7e:	d03c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xfa>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d873      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d058      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x13a>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d86f      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b30      	cmp	r3, #48	; 0x30
 8005f8e:	d064      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d86b      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d060      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d867      	bhi.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d05c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d05a      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	e062      	b.n	800606c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	f000 faf0 	bl	800659a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	609a      	str	r2, [r3, #8]
      break;
 8005fd2:	e04f      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fe4:	f000 fad9 	bl	800659a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ff6:	609a      	str	r2, [r3, #8]
      break;
 8005ff8:	e03c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fa50 	bl	80064ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2150      	movs	r1, #80	; 0x50
 8006012:	4618      	mov	r0, r3
 8006014:	f000 faa7 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8006018:	e02c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 fa6e 	bl	8006508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2160      	movs	r1, #96	; 0x60
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fa97 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8006038:	e01c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 fa30 	bl	80064ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2140      	movs	r1, #64	; 0x40
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fa87 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8006058:	e00c      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f000 fa7e 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 800606a:	e003      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	73fb      	strb	r3, [r7, #15]
      break;
 8006070:	e000      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
	...

080060d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a29      	ldr	r2, [pc, #164]	; (8006190 <TIM_Base_SetConfig+0xb8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00b      	beq.n	8006108 <TIM_Base_SetConfig+0x30>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f6:	d007      	beq.n	8006108 <TIM_Base_SetConfig+0x30>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a26      	ldr	r2, [pc, #152]	; (8006194 <TIM_Base_SetConfig+0xbc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0x30>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a25      	ldr	r2, [pc, #148]	; (8006198 <TIM_Base_SetConfig+0xc0>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a1c      	ldr	r2, [pc, #112]	; (8006190 <TIM_Base_SetConfig+0xb8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00b      	beq.n	800613a <TIM_Base_SetConfig+0x62>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006128:	d007      	beq.n	800613a <TIM_Base_SetConfig+0x62>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <TIM_Base_SetConfig+0xbc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0x62>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a18      	ldr	r2, [pc, #96]	; (8006198 <TIM_Base_SetConfig+0xc0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a07      	ldr	r2, [pc, #28]	; (8006190 <TIM_Base_SetConfig+0xb8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d103      	bne.n	8006180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	615a      	str	r2, [r3, #20]
}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40000400 	.word	0x40000400
 8006198:	40000800 	.word	0x40000800

0800619c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f023 0201 	bic.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 0302 	bic.w	r3, r3, #2
 80061e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <TIM_OC1_SetConfig+0xc8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10c      	bne.n	8006212 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 0308 	bic.w	r3, r3, #8
 80061fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a13      	ldr	r2, [pc, #76]	; (8006264 <TIM_OC1_SetConfig+0xc8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d111      	bne.n	800623e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40012c00 	.word	0x40012c00

08006268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f023 0210 	bic.w	r2, r3, #16
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0320 	bic.w	r3, r3, #32
 80062b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a1d      	ldr	r2, [pc, #116]	; (8006338 <TIM_OC2_SetConfig+0xd0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d10d      	bne.n	80062e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a14      	ldr	r2, [pc, #80]	; (8006338 <TIM_OC2_SetConfig+0xd0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d113      	bne.n	8006314 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr
 8006338:	40012c00 	.word	0x40012c00

0800633c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a1d      	ldr	r2, [pc, #116]	; (800640c <TIM_OC3_SetConfig+0xd0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10d      	bne.n	80063b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a14      	ldr	r2, [pc, #80]	; (800640c <TIM_OC3_SetConfig+0xd0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d113      	bne.n	80063e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	40012c00 	.word	0x40012c00

08006410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800645a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a0f      	ldr	r2, [pc, #60]	; (80064a8 <TIM_OC4_SetConfig+0x98>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d109      	bne.n	8006484 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	019b      	lsls	r3, r3, #6
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr
 80064a8:	40012c00 	.word	0x40012c00

080064ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 030a 	bic.w	r3, r3, #10
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0210 	bic.w	r2, r3, #16
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	031b      	lsls	r3, r3, #12
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006544:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	011b      	lsls	r3, r3, #4
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	621a      	str	r2, [r3, #32]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	bc80      	pop	{r7}
 8006564:	4770      	bx	lr

08006566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	f043 0307 	orr.w	r3, r3, #7
 8006588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr

0800659a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800659a:	b480      	push	{r7}
 800659c:	b087      	sub	sp, #28
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	021a      	lsls	r2, r3, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	431a      	orrs	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	609a      	str	r2, [r3, #8]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bc80      	pop	{r7}
 80065d6:	4770      	bx	lr

080065d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	2201      	movs	r2, #1
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1a      	ldr	r2, [r3, #32]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	43db      	mvns	r3, r3
 80065fa:	401a      	ands	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	fa01 f303 	lsl.w	r3, r1, r3
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006634:	2302      	movs	r3, #2
 8006636:	e046      	b.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006684:	d009      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a10      	ldr	r2, [pc, #64]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10c      	bne.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bc80      	pop	{r7}
 80066ce:	4770      	bx	lr
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40000400 	.word	0x40000400
 80066d8:	40000800 	.word	0x40000800

080066dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e03d      	b.n	8006774 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr

0800677e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e042      	b.n	800683a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fc f87f 	bl	80028cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2224      	movs	r2, #36	; 0x24
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f91c 	bl	8006a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800680a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800681a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08a      	sub	sp, #40	; 0x28
 8006846:	af02      	add	r7, sp, #8
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4613      	mov	r3, r2
 8006850:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b20      	cmp	r3, #32
 8006860:	d16d      	bne.n	800693e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <HAL_UART_Transmit+0x2c>
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e066      	b.n	8006940 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2221      	movs	r2, #33	; 0x21
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006880:	f7fc f9d4 	bl	8002c2c <HAL_GetTick>
 8006884:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	88fa      	ldrh	r2, [r7, #6]
 800688a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689a:	d108      	bne.n	80068ae <HAL_UART_Transmit+0x6c>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	e003      	b.n	80068b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068b6:	e02a      	b.n	800690e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2200      	movs	r2, #0
 80068c0:	2180      	movs	r1, #128	; 0x80
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f840 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e036      	b.n	8006940 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10b      	bne.n	80068f0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	3302      	adds	r3, #2
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	e007      	b.n	8006900 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3301      	adds	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1cf      	bne.n	80068b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	2140      	movs	r1, #64	; 0x40
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f810 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e006      	b.n	8006940 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800693e:	2302      	movs	r3, #2
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b090      	sub	sp, #64	; 0x40
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	e050      	b.n	80069fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d04c      	beq.n	80069fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
 8006968:	f7fc f960 	bl	8002c2c <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006974:	429a      	cmp	r2, r3
 8006976:	d241      	bcs.n	80069fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006998:	637a      	str	r2, [r7, #52]	; 0x34
 800699a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800699e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e5      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	613b      	str	r3, [r7, #16]
   return(result);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3314      	adds	r3, #20
 80069ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069cc:	623a      	str	r2, [r7, #32]
 80069ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	69f9      	ldr	r1, [r7, #28]
 80069d2:	6a3a      	ldr	r2, [r7, #32]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e00f      	b.n	8006a1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4013      	ands	r3, r2
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	bf0c      	ite	eq
 8006a0c:	2301      	moveq	r3, #1
 8006a0e:	2300      	movne	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d09f      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3740      	adds	r7, #64	; 0x40
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a5e:	f023 030c 	bic.w	r3, r3, #12
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a2c      	ldr	r2, [pc, #176]	; (8006b38 <UART_SetConfig+0x114>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d103      	bne.n	8006a94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a8c:	f7fe fc36 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	e002      	b.n	8006a9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a94:	f7fe fc1e 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8006a98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009a      	lsls	r2, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab0:	4a22      	ldr	r2, [pc, #136]	; (8006b3c <UART_SetConfig+0x118>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	0119      	lsls	r1, r3, #4
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009a      	lsls	r2, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ad0:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <UART_SetConfig+0x118>)
 8006ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	2064      	movs	r0, #100	; 0x64
 8006ada:	fb00 f303 	mul.w	r3, r0, r3
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	3332      	adds	r3, #50	; 0x32
 8006ae4:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <UART_SetConfig+0x118>)
 8006ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aea:	095b      	lsrs	r3, r3, #5
 8006aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af0:	4419      	add	r1, r3
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009a      	lsls	r2, r3, #2
 8006afc:	441a      	add	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b08:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <UART_SetConfig+0x118>)
 8006b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	2064      	movs	r0, #100	; 0x64
 8006b12:	fb00 f303 	mul.w	r3, r0, r3
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	3332      	adds	r3, #50	; 0x32
 8006b1c:	4a07      	ldr	r2, [pc, #28]	; (8006b3c <UART_SetConfig+0x118>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	095b      	lsrs	r3, r3, #5
 8006b24:	f003 020f 	and.w	r2, r3, #15
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40013800 	.word	0x40013800
 8006b3c:	51eb851f 	.word	0x51eb851f

08006b40 <sulp>:
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	460f      	mov	r7, r1
 8006b46:	4690      	mov	r8, r2
 8006b48:	f003 fd9a 	bl	800a680 <__ulp>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	f1b8 0f00 	cmp.w	r8, #0
 8006b54:	d011      	beq.n	8006b7a <sulp+0x3a>
 8006b56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006b5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd0b      	ble.n	8006b7a <sulp+0x3a>
 8006b62:	2400      	movs	r4, #0
 8006b64:	051b      	lsls	r3, r3, #20
 8006b66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b6e:	4622      	mov	r2, r4
 8006b70:	462b      	mov	r3, r5
 8006b72:	f7f9 fcb1 	bl	80004d8 <__aeabi_dmul>
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b82:	0000      	movs	r0, r0
 8006b84:	0000      	movs	r0, r0
	...

08006b88 <_strtod_l>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	b09f      	sub	sp, #124	; 0x7c
 8006b8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b90:	2200      	movs	r2, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	921a      	str	r2, [sp, #104]	; 0x68
 8006b96:	460d      	mov	r5, r1
 8006b98:	f04f 0800 	mov.w	r8, #0
 8006b9c:	f04f 0900 	mov.w	r9, #0
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	9219      	str	r2, [sp, #100]	; 0x64
 8006ba4:	7811      	ldrb	r1, [r2, #0]
 8006ba6:	292b      	cmp	r1, #43	; 0x2b
 8006ba8:	d04a      	beq.n	8006c40 <_strtod_l+0xb8>
 8006baa:	d838      	bhi.n	8006c1e <_strtod_l+0x96>
 8006bac:	290d      	cmp	r1, #13
 8006bae:	d832      	bhi.n	8006c16 <_strtod_l+0x8e>
 8006bb0:	2908      	cmp	r1, #8
 8006bb2:	d832      	bhi.n	8006c1a <_strtod_l+0x92>
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d03b      	beq.n	8006c30 <_strtod_l+0xa8>
 8006bb8:	2200      	movs	r2, #0
 8006bba:	920e      	str	r2, [sp, #56]	; 0x38
 8006bbc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006bbe:	7832      	ldrb	r2, [r6, #0]
 8006bc0:	2a30      	cmp	r2, #48	; 0x30
 8006bc2:	f040 80b2 	bne.w	8006d2a <_strtod_l+0x1a2>
 8006bc6:	7872      	ldrb	r2, [r6, #1]
 8006bc8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006bcc:	2a58      	cmp	r2, #88	; 0x58
 8006bce:	d16e      	bne.n	8006cae <_strtod_l+0x126>
 8006bd0:	9302      	str	r3, [sp, #8]
 8006bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	ab1a      	add	r3, sp, #104	; 0x68
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4a8c      	ldr	r2, [pc, #560]	; (8006e10 <_strtod_l+0x288>)
 8006bde:	ab1b      	add	r3, sp, #108	; 0x6c
 8006be0:	a919      	add	r1, sp, #100	; 0x64
 8006be2:	f002 fe29 	bl	8009838 <__gethex>
 8006be6:	f010 070f 	ands.w	r7, r0, #15
 8006bea:	4605      	mov	r5, r0
 8006bec:	d005      	beq.n	8006bfa <_strtod_l+0x72>
 8006bee:	2f06      	cmp	r7, #6
 8006bf0:	d128      	bne.n	8006c44 <_strtod_l+0xbc>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	3601      	adds	r6, #1
 8006bf6:	9619      	str	r6, [sp, #100]	; 0x64
 8006bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8006bfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 85a0 	bne.w	8007742 <_strtod_l+0xbba>
 8006c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c04:	b1cb      	cbz	r3, 8006c3a <_strtod_l+0xb2>
 8006c06:	4642      	mov	r2, r8
 8006c08:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4619      	mov	r1, r3
 8006c10:	b01f      	add	sp, #124	; 0x7c
 8006c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c16:	2920      	cmp	r1, #32
 8006c18:	d1ce      	bne.n	8006bb8 <_strtod_l+0x30>
 8006c1a:	3201      	adds	r2, #1
 8006c1c:	e7c1      	b.n	8006ba2 <_strtod_l+0x1a>
 8006c1e:	292d      	cmp	r1, #45	; 0x2d
 8006c20:	d1ca      	bne.n	8006bb8 <_strtod_l+0x30>
 8006c22:	2101      	movs	r1, #1
 8006c24:	910e      	str	r1, [sp, #56]	; 0x38
 8006c26:	1c51      	adds	r1, r2, #1
 8006c28:	9119      	str	r1, [sp, #100]	; 0x64
 8006c2a:	7852      	ldrb	r2, [r2, #1]
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	d1c5      	bne.n	8006bbc <_strtod_l+0x34>
 8006c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c32:	9519      	str	r5, [sp, #100]	; 0x64
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f040 8582 	bne.w	800773e <_strtod_l+0xbb6>
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	e7e5      	b.n	8006c0c <_strtod_l+0x84>
 8006c40:	2100      	movs	r1, #0
 8006c42:	e7ef      	b.n	8006c24 <_strtod_l+0x9c>
 8006c44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006c46:	b13a      	cbz	r2, 8006c58 <_strtod_l+0xd0>
 8006c48:	2135      	movs	r1, #53	; 0x35
 8006c4a:	a81c      	add	r0, sp, #112	; 0x70
 8006c4c:	f003 fe04 	bl	800a858 <__copybits>
 8006c50:	4620      	mov	r0, r4
 8006c52:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c54:	f003 f9e8 	bl	800a028 <_Bfree>
 8006c58:	3f01      	subs	r7, #1
 8006c5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006c5c:	2f04      	cmp	r7, #4
 8006c5e:	d806      	bhi.n	8006c6e <_strtod_l+0xe6>
 8006c60:	e8df f007 	tbb	[pc, r7]
 8006c64:	201d0314 	.word	0x201d0314
 8006c68:	14          	.byte	0x14
 8006c69:	00          	.byte	0x00
 8006c6a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006c6e:	05e9      	lsls	r1, r5, #23
 8006c70:	bf48      	it	mi
 8006c72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006c76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c7a:	0d1b      	lsrs	r3, r3, #20
 8006c7c:	051b      	lsls	r3, r3, #20
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1bb      	bne.n	8006bfa <_strtod_l+0x72>
 8006c82:	f001 fe69 	bl	8008958 <__errno>
 8006c86:	2322      	movs	r3, #34	; 0x22
 8006c88:	6003      	str	r3, [r0, #0]
 8006c8a:	e7b6      	b.n	8006bfa <_strtod_l+0x72>
 8006c8c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c90:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006c94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006c9c:	e7e7      	b.n	8006c6e <_strtod_l+0xe6>
 8006c9e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006e14 <_strtod_l+0x28c>
 8006ca2:	e7e4      	b.n	8006c6e <_strtod_l+0xe6>
 8006ca4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ca8:	f04f 38ff 	mov.w	r8, #4294967295
 8006cac:	e7df      	b.n	8006c6e <_strtod_l+0xe6>
 8006cae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	9219      	str	r2, [sp, #100]	; 0x64
 8006cb4:	785b      	ldrb	r3, [r3, #1]
 8006cb6:	2b30      	cmp	r3, #48	; 0x30
 8006cb8:	d0f9      	beq.n	8006cae <_strtod_l+0x126>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d09d      	beq.n	8006bfa <_strtod_l+0x72>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f04f 0a00 	mov.w	sl, #0
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	46d3      	mov	fp, sl
 8006cc8:	9305      	str	r3, [sp, #20]
 8006cca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ccc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006cd4:	7806      	ldrb	r6, [r0, #0]
 8006cd6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006cda:	b2d9      	uxtb	r1, r3
 8006cdc:	2909      	cmp	r1, #9
 8006cde:	d926      	bls.n	8006d2e <_strtod_l+0x1a6>
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	494d      	ldr	r1, [pc, #308]	; (8006e18 <_strtod_l+0x290>)
 8006ce4:	f001 fddc 	bl	80088a0 <strncmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d030      	beq.n	8006d4e <_strtod_l+0x1c6>
 8006cec:	2000      	movs	r0, #0
 8006cee:	4632      	mov	r2, r6
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	465e      	mov	r6, fp
 8006cf4:	9008      	str	r0, [sp, #32]
 8006cf6:	2a65      	cmp	r2, #101	; 0x65
 8006cf8:	d001      	beq.n	8006cfe <_strtod_l+0x176>
 8006cfa:	2a45      	cmp	r2, #69	; 0x45
 8006cfc:	d113      	bne.n	8006d26 <_strtod_l+0x19e>
 8006cfe:	b91e      	cbnz	r6, 8006d08 <_strtod_l+0x180>
 8006d00:	9a05      	ldr	r2, [sp, #20]
 8006d02:	4302      	orrs	r2, r0
 8006d04:	d094      	beq.n	8006c30 <_strtod_l+0xa8>
 8006d06:	2600      	movs	r6, #0
 8006d08:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006d0a:	1c6a      	adds	r2, r5, #1
 8006d0c:	9219      	str	r2, [sp, #100]	; 0x64
 8006d0e:	786a      	ldrb	r2, [r5, #1]
 8006d10:	2a2b      	cmp	r2, #43	; 0x2b
 8006d12:	d074      	beq.n	8006dfe <_strtod_l+0x276>
 8006d14:	2a2d      	cmp	r2, #45	; 0x2d
 8006d16:	d078      	beq.n	8006e0a <_strtod_l+0x282>
 8006d18:	f04f 0c00 	mov.w	ip, #0
 8006d1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d20:	2909      	cmp	r1, #9
 8006d22:	d97f      	bls.n	8006e24 <_strtod_l+0x29c>
 8006d24:	9519      	str	r5, [sp, #100]	; 0x64
 8006d26:	2700      	movs	r7, #0
 8006d28:	e09e      	b.n	8006e68 <_strtod_l+0x2e0>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e7c8      	b.n	8006cc0 <_strtod_l+0x138>
 8006d2e:	f1bb 0f08 	cmp.w	fp, #8
 8006d32:	bfd8      	it	le
 8006d34:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006d36:	f100 0001 	add.w	r0, r0, #1
 8006d3a:	bfd6      	itet	le
 8006d3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d40:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006d44:	930a      	strle	r3, [sp, #40]	; 0x28
 8006d46:	f10b 0b01 	add.w	fp, fp, #1
 8006d4a:	9019      	str	r0, [sp, #100]	; 0x64
 8006d4c:	e7c1      	b.n	8006cd2 <_strtod_l+0x14a>
 8006d4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	9219      	str	r2, [sp, #100]	; 0x64
 8006d54:	785a      	ldrb	r2, [r3, #1]
 8006d56:	f1bb 0f00 	cmp.w	fp, #0
 8006d5a:	d037      	beq.n	8006dcc <_strtod_l+0x244>
 8006d5c:	465e      	mov	r6, fp
 8006d5e:	9008      	str	r0, [sp, #32]
 8006d60:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006d64:	2b09      	cmp	r3, #9
 8006d66:	d912      	bls.n	8006d8e <_strtod_l+0x206>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e7c4      	b.n	8006cf6 <_strtod_l+0x16e>
 8006d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d6e:	3001      	adds	r0, #1
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	9219      	str	r2, [sp, #100]	; 0x64
 8006d74:	785a      	ldrb	r2, [r3, #1]
 8006d76:	2a30      	cmp	r2, #48	; 0x30
 8006d78:	d0f8      	beq.n	8006d6c <_strtod_l+0x1e4>
 8006d7a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	f200 84e4 	bhi.w	800774c <_strtod_l+0xbc4>
 8006d84:	9008      	str	r0, [sp, #32]
 8006d86:	2000      	movs	r0, #0
 8006d88:	4606      	mov	r6, r0
 8006d8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d8e:	3a30      	subs	r2, #48	; 0x30
 8006d90:	f100 0301 	add.w	r3, r0, #1
 8006d94:	d014      	beq.n	8006dc0 <_strtod_l+0x238>
 8006d96:	9908      	ldr	r1, [sp, #32]
 8006d98:	eb00 0c06 	add.w	ip, r0, r6
 8006d9c:	4419      	add	r1, r3
 8006d9e:	9108      	str	r1, [sp, #32]
 8006da0:	4633      	mov	r3, r6
 8006da2:	210a      	movs	r1, #10
 8006da4:	4563      	cmp	r3, ip
 8006da6:	d113      	bne.n	8006dd0 <_strtod_l+0x248>
 8006da8:	1833      	adds	r3, r6, r0
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	f106 0601 	add.w	r6, r6, #1
 8006db0:	4406      	add	r6, r0
 8006db2:	dc1a      	bgt.n	8006dea <_strtod_l+0x262>
 8006db4:	230a      	movs	r3, #10
 8006db6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006db8:	fb03 2301 	mla	r3, r3, r1, r2
 8006dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	1c51      	adds	r1, r2, #1
 8006dc6:	9119      	str	r1, [sp, #100]	; 0x64
 8006dc8:	7852      	ldrb	r2, [r2, #1]
 8006dca:	e7c9      	b.n	8006d60 <_strtod_l+0x1d8>
 8006dcc:	4658      	mov	r0, fp
 8006dce:	e7d2      	b.n	8006d76 <_strtod_l+0x1ee>
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	f103 0301 	add.w	r3, r3, #1
 8006dd6:	dc03      	bgt.n	8006de0 <_strtod_l+0x258>
 8006dd8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006dda:	434f      	muls	r7, r1
 8006ddc:	970a      	str	r7, [sp, #40]	; 0x28
 8006dde:	e7e1      	b.n	8006da4 <_strtod_l+0x21c>
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	bfd8      	it	le
 8006de4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006de8:	e7dc      	b.n	8006da4 <_strtod_l+0x21c>
 8006dea:	2e10      	cmp	r6, #16
 8006dec:	bfdc      	itt	le
 8006dee:	230a      	movle	r3, #10
 8006df0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006df4:	e7e3      	b.n	8006dbe <_strtod_l+0x236>
 8006df6:	2300      	movs	r3, #0
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e780      	b.n	8006d00 <_strtod_l+0x178>
 8006dfe:	f04f 0c00 	mov.w	ip, #0
 8006e02:	1caa      	adds	r2, r5, #2
 8006e04:	9219      	str	r2, [sp, #100]	; 0x64
 8006e06:	78aa      	ldrb	r2, [r5, #2]
 8006e08:	e788      	b.n	8006d1c <_strtod_l+0x194>
 8006e0a:	f04f 0c01 	mov.w	ip, #1
 8006e0e:	e7f8      	b.n	8006e02 <_strtod_l+0x27a>
 8006e10:	0800b4a4 	.word	0x0800b4a4
 8006e14:	7ff00000 	.word	0x7ff00000
 8006e18:	0800b4a2 	.word	0x0800b4a2
 8006e1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e1e:	1c51      	adds	r1, r2, #1
 8006e20:	9119      	str	r1, [sp, #100]	; 0x64
 8006e22:	7852      	ldrb	r2, [r2, #1]
 8006e24:	2a30      	cmp	r2, #48	; 0x30
 8006e26:	d0f9      	beq.n	8006e1c <_strtod_l+0x294>
 8006e28:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006e2c:	2908      	cmp	r1, #8
 8006e2e:	f63f af7a 	bhi.w	8006d26 <_strtod_l+0x19e>
 8006e32:	3a30      	subs	r2, #48	; 0x30
 8006e34:	9209      	str	r2, [sp, #36]	; 0x24
 8006e36:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e38:	920c      	str	r2, [sp, #48]	; 0x30
 8006e3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e3c:	1c57      	adds	r7, r2, #1
 8006e3e:	9719      	str	r7, [sp, #100]	; 0x64
 8006e40:	7852      	ldrb	r2, [r2, #1]
 8006e42:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006e46:	f1be 0f09 	cmp.w	lr, #9
 8006e4a:	d938      	bls.n	8006ebe <_strtod_l+0x336>
 8006e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e4e:	1a7f      	subs	r7, r7, r1
 8006e50:	2f08      	cmp	r7, #8
 8006e52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006e56:	dc03      	bgt.n	8006e60 <_strtod_l+0x2d8>
 8006e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5a:	428f      	cmp	r7, r1
 8006e5c:	bfa8      	it	ge
 8006e5e:	460f      	movge	r7, r1
 8006e60:	f1bc 0f00 	cmp.w	ip, #0
 8006e64:	d000      	beq.n	8006e68 <_strtod_l+0x2e0>
 8006e66:	427f      	negs	r7, r7
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	d14f      	bne.n	8006f0c <_strtod_l+0x384>
 8006e6c:	9905      	ldr	r1, [sp, #20]
 8006e6e:	4301      	orrs	r1, r0
 8006e70:	f47f aec3 	bne.w	8006bfa <_strtod_l+0x72>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f47f aedb 	bne.w	8006c30 <_strtod_l+0xa8>
 8006e7a:	2a69      	cmp	r2, #105	; 0x69
 8006e7c:	d029      	beq.n	8006ed2 <_strtod_l+0x34a>
 8006e7e:	dc26      	bgt.n	8006ece <_strtod_l+0x346>
 8006e80:	2a49      	cmp	r2, #73	; 0x49
 8006e82:	d026      	beq.n	8006ed2 <_strtod_l+0x34a>
 8006e84:	2a4e      	cmp	r2, #78	; 0x4e
 8006e86:	f47f aed3 	bne.w	8006c30 <_strtod_l+0xa8>
 8006e8a:	499a      	ldr	r1, [pc, #616]	; (80070f4 <_strtod_l+0x56c>)
 8006e8c:	a819      	add	r0, sp, #100	; 0x64
 8006e8e:	f002 ff15 	bl	8009cbc <__match>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	f43f aecc 	beq.w	8006c30 <_strtod_l+0xa8>
 8006e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b28      	cmp	r3, #40	; 0x28
 8006e9e:	d12f      	bne.n	8006f00 <_strtod_l+0x378>
 8006ea0:	4995      	ldr	r1, [pc, #596]	; (80070f8 <_strtod_l+0x570>)
 8006ea2:	aa1c      	add	r2, sp, #112	; 0x70
 8006ea4:	a819      	add	r0, sp, #100	; 0x64
 8006ea6:	f002 ff1d 	bl	8009ce4 <__hexnan>
 8006eaa:	2805      	cmp	r0, #5
 8006eac:	d128      	bne.n	8006f00 <_strtod_l+0x378>
 8006eae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eb0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006eb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006eb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006ebc:	e69d      	b.n	8006bfa <_strtod_l+0x72>
 8006ebe:	210a      	movs	r1, #10
 8006ec0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ec2:	fb01 2107 	mla	r1, r1, r7, r2
 8006ec6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006eca:	9209      	str	r2, [sp, #36]	; 0x24
 8006ecc:	e7b5      	b.n	8006e3a <_strtod_l+0x2b2>
 8006ece:	2a6e      	cmp	r2, #110	; 0x6e
 8006ed0:	e7d9      	b.n	8006e86 <_strtod_l+0x2fe>
 8006ed2:	498a      	ldr	r1, [pc, #552]	; (80070fc <_strtod_l+0x574>)
 8006ed4:	a819      	add	r0, sp, #100	; 0x64
 8006ed6:	f002 fef1 	bl	8009cbc <__match>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f43f aea8 	beq.w	8006c30 <_strtod_l+0xa8>
 8006ee0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ee2:	4987      	ldr	r1, [pc, #540]	; (8007100 <_strtod_l+0x578>)
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	a819      	add	r0, sp, #100	; 0x64
 8006ee8:	9319      	str	r3, [sp, #100]	; 0x64
 8006eea:	f002 fee7 	bl	8009cbc <__match>
 8006eee:	b910      	cbnz	r0, 8006ef6 <_strtod_l+0x36e>
 8006ef0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	9319      	str	r3, [sp, #100]	; 0x64
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007104 <_strtod_l+0x57c>
 8006efe:	e67c      	b.n	8006bfa <_strtod_l+0x72>
 8006f00:	4881      	ldr	r0, [pc, #516]	; (8007108 <_strtod_l+0x580>)
 8006f02:	f001 fd71 	bl	80089e8 <nan>
 8006f06:	4680      	mov	r8, r0
 8006f08:	4689      	mov	r9, r1
 8006f0a:	e676      	b.n	8006bfa <_strtod_l+0x72>
 8006f0c:	9b08      	ldr	r3, [sp, #32]
 8006f0e:	f1bb 0f00 	cmp.w	fp, #0
 8006f12:	bf08      	it	eq
 8006f14:	46b3      	moveq	fp, r6
 8006f16:	1afb      	subs	r3, r7, r3
 8006f18:	2e10      	cmp	r6, #16
 8006f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f1c:	4635      	mov	r5, r6
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	bfa8      	it	ge
 8006f22:	2510      	movge	r5, #16
 8006f24:	f7f9 fa5e 	bl	80003e4 <__aeabi_ui2d>
 8006f28:	2e09      	cmp	r6, #9
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4689      	mov	r9, r1
 8006f2e:	dd13      	ble.n	8006f58 <_strtod_l+0x3d0>
 8006f30:	4b76      	ldr	r3, [pc, #472]	; (800710c <_strtod_l+0x584>)
 8006f32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006f36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f3a:	f7f9 facd 	bl	80004d8 <__aeabi_dmul>
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4650      	mov	r0, sl
 8006f42:	4689      	mov	r9, r1
 8006f44:	f7f9 fa4e 	bl	80003e4 <__aeabi_ui2d>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 f90c 	bl	800016c <__adddf3>
 8006f54:	4680      	mov	r8, r0
 8006f56:	4689      	mov	r9, r1
 8006f58:	2e0f      	cmp	r6, #15
 8006f5a:	dc36      	bgt.n	8006fca <_strtod_l+0x442>
 8006f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f43f ae4b 	beq.w	8006bfa <_strtod_l+0x72>
 8006f64:	dd22      	ble.n	8006fac <_strtod_l+0x424>
 8006f66:	2b16      	cmp	r3, #22
 8006f68:	dc09      	bgt.n	8006f7e <_strtod_l+0x3f6>
 8006f6a:	4968      	ldr	r1, [pc, #416]	; (800710c <_strtod_l+0x584>)
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f72:	464b      	mov	r3, r9
 8006f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f78:	f7f9 faae 	bl	80004d8 <__aeabi_dmul>
 8006f7c:	e7c3      	b.n	8006f06 <_strtod_l+0x37e>
 8006f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f80:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006f84:	4293      	cmp	r3, r2
 8006f86:	db20      	blt.n	8006fca <_strtod_l+0x442>
 8006f88:	4c60      	ldr	r4, [pc, #384]	; (800710c <_strtod_l+0x584>)
 8006f8a:	f1c6 060f 	rsb	r6, r6, #15
 8006f8e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006f92:	4642      	mov	r2, r8
 8006f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f98:	464b      	mov	r3, r9
 8006f9a:	f7f9 fa9d 	bl	80004d8 <__aeabi_dmul>
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	1b9e      	subs	r6, r3, r6
 8006fa2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006fa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006faa:	e7e5      	b.n	8006f78 <_strtod_l+0x3f0>
 8006fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fae:	3316      	adds	r3, #22
 8006fb0:	db0b      	blt.n	8006fca <_strtod_l+0x442>
 8006fb2:	9b08      	ldr	r3, [sp, #32]
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	1bdf      	subs	r7, r3, r7
 8006fb8:	4b54      	ldr	r3, [pc, #336]	; (800710c <_strtod_l+0x584>)
 8006fba:	4649      	mov	r1, r9
 8006fbc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc4:	f7f9 fbb2 	bl	800072c <__aeabi_ddiv>
 8006fc8:	e79d      	b.n	8006f06 <_strtod_l+0x37e>
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	1b75      	subs	r5, r6, r5
 8006fce:	441d      	add	r5, r3
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	dd70      	ble.n	80070b6 <_strtod_l+0x52e>
 8006fd4:	f015 030f 	ands.w	r3, r5, #15
 8006fd8:	d00a      	beq.n	8006ff0 <_strtod_l+0x468>
 8006fda:	494c      	ldr	r1, [pc, #304]	; (800710c <_strtod_l+0x584>)
 8006fdc:	4642      	mov	r2, r8
 8006fde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	f7f9 fa76 	bl	80004d8 <__aeabi_dmul>
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
 8006ff0:	f035 050f 	bics.w	r5, r5, #15
 8006ff4:	d04d      	beq.n	8007092 <_strtod_l+0x50a>
 8006ff6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006ffa:	dd22      	ble.n	8007042 <_strtod_l+0x4ba>
 8006ffc:	2600      	movs	r6, #0
 8006ffe:	46b3      	mov	fp, r6
 8007000:	960b      	str	r6, [sp, #44]	; 0x2c
 8007002:	9608      	str	r6, [sp, #32]
 8007004:	2322      	movs	r3, #34	; 0x22
 8007006:	f04f 0800 	mov.w	r8, #0
 800700a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007104 <_strtod_l+0x57c>
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007012:	2b00      	cmp	r3, #0
 8007014:	f43f adf1 	beq.w	8006bfa <_strtod_l+0x72>
 8007018:	4620      	mov	r0, r4
 800701a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800701c:	f003 f804 	bl	800a028 <_Bfree>
 8007020:	4620      	mov	r0, r4
 8007022:	9908      	ldr	r1, [sp, #32]
 8007024:	f003 f800 	bl	800a028 <_Bfree>
 8007028:	4659      	mov	r1, fp
 800702a:	4620      	mov	r0, r4
 800702c:	f002 fffc 	bl	800a028 <_Bfree>
 8007030:	4620      	mov	r0, r4
 8007032:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007034:	f002 fff8 	bl	800a028 <_Bfree>
 8007038:	4631      	mov	r1, r6
 800703a:	4620      	mov	r0, r4
 800703c:	f002 fff4 	bl	800a028 <_Bfree>
 8007040:	e5db      	b.n	8006bfa <_strtod_l+0x72>
 8007042:	4b33      	ldr	r3, [pc, #204]	; (8007110 <_strtod_l+0x588>)
 8007044:	4640      	mov	r0, r8
 8007046:	9305      	str	r3, [sp, #20]
 8007048:	2300      	movs	r3, #0
 800704a:	4649      	mov	r1, r9
 800704c:	469a      	mov	sl, r3
 800704e:	112d      	asrs	r5, r5, #4
 8007050:	2d01      	cmp	r5, #1
 8007052:	dc21      	bgt.n	8007098 <_strtod_l+0x510>
 8007054:	b10b      	cbz	r3, 800705a <_strtod_l+0x4d2>
 8007056:	4680      	mov	r8, r0
 8007058:	4689      	mov	r9, r1
 800705a:	492d      	ldr	r1, [pc, #180]	; (8007110 <_strtod_l+0x588>)
 800705c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007060:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007064:	4642      	mov	r2, r8
 8007066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800706a:	464b      	mov	r3, r9
 800706c:	f7f9 fa34 	bl	80004d8 <__aeabi_dmul>
 8007070:	4b24      	ldr	r3, [pc, #144]	; (8007104 <_strtod_l+0x57c>)
 8007072:	460a      	mov	r2, r1
 8007074:	400b      	ands	r3, r1
 8007076:	4927      	ldr	r1, [pc, #156]	; (8007114 <_strtod_l+0x58c>)
 8007078:	4680      	mov	r8, r0
 800707a:	428b      	cmp	r3, r1
 800707c:	d8be      	bhi.n	8006ffc <_strtod_l+0x474>
 800707e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007082:	428b      	cmp	r3, r1
 8007084:	bf86      	itte	hi
 8007086:	f04f 38ff 	movhi.w	r8, #4294967295
 800708a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007118 <_strtod_l+0x590>
 800708e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007092:	2300      	movs	r3, #0
 8007094:	9305      	str	r3, [sp, #20]
 8007096:	e07b      	b.n	8007190 <_strtod_l+0x608>
 8007098:	07ea      	lsls	r2, r5, #31
 800709a:	d505      	bpl.n	80070a8 <_strtod_l+0x520>
 800709c:	9b05      	ldr	r3, [sp, #20]
 800709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a2:	f7f9 fa19 	bl	80004d8 <__aeabi_dmul>
 80070a6:	2301      	movs	r3, #1
 80070a8:	9a05      	ldr	r2, [sp, #20]
 80070aa:	f10a 0a01 	add.w	sl, sl, #1
 80070ae:	3208      	adds	r2, #8
 80070b0:	106d      	asrs	r5, r5, #1
 80070b2:	9205      	str	r2, [sp, #20]
 80070b4:	e7cc      	b.n	8007050 <_strtod_l+0x4c8>
 80070b6:	d0ec      	beq.n	8007092 <_strtod_l+0x50a>
 80070b8:	426d      	negs	r5, r5
 80070ba:	f015 020f 	ands.w	r2, r5, #15
 80070be:	d00a      	beq.n	80070d6 <_strtod_l+0x54e>
 80070c0:	4b12      	ldr	r3, [pc, #72]	; (800710c <_strtod_l+0x584>)
 80070c2:	4640      	mov	r0, r8
 80070c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070c8:	4649      	mov	r1, r9
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 fb2d 	bl	800072c <__aeabi_ddiv>
 80070d2:	4680      	mov	r8, r0
 80070d4:	4689      	mov	r9, r1
 80070d6:	112d      	asrs	r5, r5, #4
 80070d8:	d0db      	beq.n	8007092 <_strtod_l+0x50a>
 80070da:	2d1f      	cmp	r5, #31
 80070dc:	dd1e      	ble.n	800711c <_strtod_l+0x594>
 80070de:	2600      	movs	r6, #0
 80070e0:	46b3      	mov	fp, r6
 80070e2:	960b      	str	r6, [sp, #44]	; 0x2c
 80070e4:	9608      	str	r6, [sp, #32]
 80070e6:	2322      	movs	r3, #34	; 0x22
 80070e8:	f04f 0800 	mov.w	r8, #0
 80070ec:	f04f 0900 	mov.w	r9, #0
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	e78d      	b.n	8007010 <_strtod_l+0x488>
 80070f4:	0800b505 	.word	0x0800b505
 80070f8:	0800b4b8 	.word	0x0800b4b8
 80070fc:	0800b4fd 	.word	0x0800b4fd
 8007100:	0800b53c 	.word	0x0800b53c
 8007104:	7ff00000 	.word	0x7ff00000
 8007108:	0800b8c9 	.word	0x0800b8c9
 800710c:	0800b6a8 	.word	0x0800b6a8
 8007110:	0800b680 	.word	0x0800b680
 8007114:	7ca00000 	.word	0x7ca00000
 8007118:	7fefffff 	.word	0x7fefffff
 800711c:	f015 0310 	ands.w	r3, r5, #16
 8007120:	bf18      	it	ne
 8007122:	236a      	movne	r3, #106	; 0x6a
 8007124:	4640      	mov	r0, r8
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	4649      	mov	r1, r9
 800712a:	2300      	movs	r3, #0
 800712c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80073f8 <_strtod_l+0x870>
 8007130:	07ea      	lsls	r2, r5, #31
 8007132:	d504      	bpl.n	800713e <_strtod_l+0x5b6>
 8007134:	e9da 2300 	ldrd	r2, r3, [sl]
 8007138:	f7f9 f9ce 	bl	80004d8 <__aeabi_dmul>
 800713c:	2301      	movs	r3, #1
 800713e:	106d      	asrs	r5, r5, #1
 8007140:	f10a 0a08 	add.w	sl, sl, #8
 8007144:	d1f4      	bne.n	8007130 <_strtod_l+0x5a8>
 8007146:	b10b      	cbz	r3, 800714c <_strtod_l+0x5c4>
 8007148:	4680      	mov	r8, r0
 800714a:	4689      	mov	r9, r1
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	b1bb      	cbz	r3, 8007180 <_strtod_l+0x5f8>
 8007150:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007154:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007158:	2b00      	cmp	r3, #0
 800715a:	4649      	mov	r1, r9
 800715c:	dd10      	ble.n	8007180 <_strtod_l+0x5f8>
 800715e:	2b1f      	cmp	r3, #31
 8007160:	f340 8128 	ble.w	80073b4 <_strtod_l+0x82c>
 8007164:	2b34      	cmp	r3, #52	; 0x34
 8007166:	bfd8      	it	le
 8007168:	f04f 33ff 	movle.w	r3, #4294967295
 800716c:	f04f 0800 	mov.w	r8, #0
 8007170:	bfcf      	iteee	gt
 8007172:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007176:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800717a:	4093      	lslle	r3, r2
 800717c:	ea03 0901 	andle.w	r9, r3, r1
 8007180:	2200      	movs	r2, #0
 8007182:	2300      	movs	r3, #0
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f9 fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800718c:	2800      	cmp	r0, #0
 800718e:	d1a6      	bne.n	80070de <_strtod_l+0x556>
 8007190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007192:	465a      	mov	r2, fp
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	4620      	mov	r0, r4
 8007198:	4633      	mov	r3, r6
 800719a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800719c:	f002 ffac 	bl	800a0f8 <__s2b>
 80071a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80071a2:	2800      	cmp	r0, #0
 80071a4:	f43f af2a 	beq.w	8006ffc <_strtod_l+0x474>
 80071a8:	2600      	movs	r6, #0
 80071aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	eba3 0307 	sub.w	r3, r3, r7
 80071b4:	bfa8      	it	ge
 80071b6:	2300      	movge	r3, #0
 80071b8:	46b3      	mov	fp, r6
 80071ba:	9312      	str	r3, [sp, #72]	; 0x48
 80071bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071c0:	9316      	str	r3, [sp, #88]	; 0x58
 80071c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c4:	4620      	mov	r0, r4
 80071c6:	6859      	ldr	r1, [r3, #4]
 80071c8:	f002 feee 	bl	8009fa8 <_Balloc>
 80071cc:	9008      	str	r0, [sp, #32]
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f43f af18 	beq.w	8007004 <_strtod_l+0x47c>
 80071d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d6:	300c      	adds	r0, #12
 80071d8:	691a      	ldr	r2, [r3, #16]
 80071da:	f103 010c 	add.w	r1, r3, #12
 80071de:	3202      	adds	r2, #2
 80071e0:	0092      	lsls	r2, r2, #2
 80071e2:	f001 fbf3 	bl	80089cc <memcpy>
 80071e6:	ab1c      	add	r3, sp, #112	; 0x70
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	ab1b      	add	r3, sp, #108	; 0x6c
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	4642      	mov	r2, r8
 80071f0:	464b      	mov	r3, r9
 80071f2:	4620      	mov	r0, r4
 80071f4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80071f8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80071fc:	f003 faa8 	bl	800a750 <__d2b>
 8007200:	901a      	str	r0, [sp, #104]	; 0x68
 8007202:	2800      	cmp	r0, #0
 8007204:	f43f aefe 	beq.w	8007004 <_strtod_l+0x47c>
 8007208:	2101      	movs	r1, #1
 800720a:	4620      	mov	r0, r4
 800720c:	f003 f80c 	bl	800a228 <__i2b>
 8007210:	4683      	mov	fp, r0
 8007212:	2800      	cmp	r0, #0
 8007214:	f43f aef6 	beq.w	8007004 <_strtod_l+0x47c>
 8007218:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800721a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800721c:	2f00      	cmp	r7, #0
 800721e:	bfab      	itete	ge
 8007220:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007222:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007224:	eb07 0a03 	addge.w	sl, r7, r3
 8007228:	1bdd      	sublt	r5, r3, r7
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	bfa8      	it	ge
 800722e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007230:	eba7 0703 	sub.w	r7, r7, r3
 8007234:	4417      	add	r7, r2
 8007236:	4b71      	ldr	r3, [pc, #452]	; (80073fc <_strtod_l+0x874>)
 8007238:	f107 37ff 	add.w	r7, r7, #4294967295
 800723c:	bfb8      	it	lt
 800723e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007242:	429f      	cmp	r7, r3
 8007244:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007248:	f280 80c7 	bge.w	80073da <_strtod_l+0x852>
 800724c:	1bdb      	subs	r3, r3, r7
 800724e:	2b1f      	cmp	r3, #31
 8007250:	f04f 0101 	mov.w	r1, #1
 8007254:	eba2 0203 	sub.w	r2, r2, r3
 8007258:	f300 80b3 	bgt.w	80073c2 <_strtod_l+0x83a>
 800725c:	fa01 f303 	lsl.w	r3, r1, r3
 8007260:	9313      	str	r3, [sp, #76]	; 0x4c
 8007262:	2300      	movs	r3, #0
 8007264:	9310      	str	r3, [sp, #64]	; 0x40
 8007266:	eb0a 0702 	add.w	r7, sl, r2
 800726a:	9b05      	ldr	r3, [sp, #20]
 800726c:	45ba      	cmp	sl, r7
 800726e:	4415      	add	r5, r2
 8007270:	441d      	add	r5, r3
 8007272:	4653      	mov	r3, sl
 8007274:	bfa8      	it	ge
 8007276:	463b      	movge	r3, r7
 8007278:	42ab      	cmp	r3, r5
 800727a:	bfa8      	it	ge
 800727c:	462b      	movge	r3, r5
 800727e:	2b00      	cmp	r3, #0
 8007280:	bfc2      	ittt	gt
 8007282:	1aff      	subgt	r7, r7, r3
 8007284:	1aed      	subgt	r5, r5, r3
 8007286:	ebaa 0a03 	subgt.w	sl, sl, r3
 800728a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800728c:	2b00      	cmp	r3, #0
 800728e:	dd17      	ble.n	80072c0 <_strtod_l+0x738>
 8007290:	4659      	mov	r1, fp
 8007292:	461a      	mov	r2, r3
 8007294:	4620      	mov	r0, r4
 8007296:	f003 f885 	bl	800a3a4 <__pow5mult>
 800729a:	4683      	mov	fp, r0
 800729c:	2800      	cmp	r0, #0
 800729e:	f43f aeb1 	beq.w	8007004 <_strtod_l+0x47c>
 80072a2:	4601      	mov	r1, r0
 80072a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80072a6:	4620      	mov	r0, r4
 80072a8:	f002 ffd4 	bl	800a254 <__multiply>
 80072ac:	900a      	str	r0, [sp, #40]	; 0x28
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f43f aea8 	beq.w	8007004 <_strtod_l+0x47c>
 80072b4:	4620      	mov	r0, r4
 80072b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072b8:	f002 feb6 	bl	800a028 <_Bfree>
 80072bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072be:	931a      	str	r3, [sp, #104]	; 0x68
 80072c0:	2f00      	cmp	r7, #0
 80072c2:	f300 808f 	bgt.w	80073e4 <_strtod_l+0x85c>
 80072c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dd08      	ble.n	80072de <_strtod_l+0x756>
 80072cc:	4620      	mov	r0, r4
 80072ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80072d0:	9908      	ldr	r1, [sp, #32]
 80072d2:	f003 f867 	bl	800a3a4 <__pow5mult>
 80072d6:	9008      	str	r0, [sp, #32]
 80072d8:	2800      	cmp	r0, #0
 80072da:	f43f ae93 	beq.w	8007004 <_strtod_l+0x47c>
 80072de:	2d00      	cmp	r5, #0
 80072e0:	dd08      	ble.n	80072f4 <_strtod_l+0x76c>
 80072e2:	462a      	mov	r2, r5
 80072e4:	4620      	mov	r0, r4
 80072e6:	9908      	ldr	r1, [sp, #32]
 80072e8:	f003 f8b6 	bl	800a458 <__lshift>
 80072ec:	9008      	str	r0, [sp, #32]
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f43f ae88 	beq.w	8007004 <_strtod_l+0x47c>
 80072f4:	f1ba 0f00 	cmp.w	sl, #0
 80072f8:	dd08      	ble.n	800730c <_strtod_l+0x784>
 80072fa:	4659      	mov	r1, fp
 80072fc:	4652      	mov	r2, sl
 80072fe:	4620      	mov	r0, r4
 8007300:	f003 f8aa 	bl	800a458 <__lshift>
 8007304:	4683      	mov	fp, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f ae7c 	beq.w	8007004 <_strtod_l+0x47c>
 800730c:	4620      	mov	r0, r4
 800730e:	9a08      	ldr	r2, [sp, #32]
 8007310:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007312:	f003 f929 	bl	800a568 <__mdiff>
 8007316:	4606      	mov	r6, r0
 8007318:	2800      	cmp	r0, #0
 800731a:	f43f ae73 	beq.w	8007004 <_strtod_l+0x47c>
 800731e:	2500      	movs	r5, #0
 8007320:	68c3      	ldr	r3, [r0, #12]
 8007322:	4659      	mov	r1, fp
 8007324:	60c5      	str	r5, [r0, #12]
 8007326:	930a      	str	r3, [sp, #40]	; 0x28
 8007328:	f003 f902 	bl	800a530 <__mcmp>
 800732c:	42a8      	cmp	r0, r5
 800732e:	da6b      	bge.n	8007408 <_strtod_l+0x880>
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007332:	ea53 0308 	orrs.w	r3, r3, r8
 8007336:	f040 808f 	bne.w	8007458 <_strtod_l+0x8d0>
 800733a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800733e:	2b00      	cmp	r3, #0
 8007340:	f040 808a 	bne.w	8007458 <_strtod_l+0x8d0>
 8007344:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007348:	0d1b      	lsrs	r3, r3, #20
 800734a:	051b      	lsls	r3, r3, #20
 800734c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007350:	f240 8082 	bls.w	8007458 <_strtod_l+0x8d0>
 8007354:	6973      	ldr	r3, [r6, #20]
 8007356:	b913      	cbnz	r3, 800735e <_strtod_l+0x7d6>
 8007358:	6933      	ldr	r3, [r6, #16]
 800735a:	2b01      	cmp	r3, #1
 800735c:	dd7c      	ble.n	8007458 <_strtod_l+0x8d0>
 800735e:	4631      	mov	r1, r6
 8007360:	2201      	movs	r2, #1
 8007362:	4620      	mov	r0, r4
 8007364:	f003 f878 	bl	800a458 <__lshift>
 8007368:	4659      	mov	r1, fp
 800736a:	4606      	mov	r6, r0
 800736c:	f003 f8e0 	bl	800a530 <__mcmp>
 8007370:	2800      	cmp	r0, #0
 8007372:	dd71      	ble.n	8007458 <_strtod_l+0x8d0>
 8007374:	9905      	ldr	r1, [sp, #20]
 8007376:	464b      	mov	r3, r9
 8007378:	4a21      	ldr	r2, [pc, #132]	; (8007400 <_strtod_l+0x878>)
 800737a:	2900      	cmp	r1, #0
 800737c:	f000 808d 	beq.w	800749a <_strtod_l+0x912>
 8007380:	ea02 0109 	and.w	r1, r2, r9
 8007384:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007388:	f300 8087 	bgt.w	800749a <_strtod_l+0x912>
 800738c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007390:	f77f aea9 	ble.w	80070e6 <_strtod_l+0x55e>
 8007394:	4640      	mov	r0, r8
 8007396:	4649      	mov	r1, r9
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <_strtod_l+0x87c>)
 800739a:	2200      	movs	r2, #0
 800739c:	f7f9 f89c 	bl	80004d8 <__aeabi_dmul>
 80073a0:	4b17      	ldr	r3, [pc, #92]	; (8007400 <_strtod_l+0x878>)
 80073a2:	4680      	mov	r8, r0
 80073a4:	400b      	ands	r3, r1
 80073a6:	4689      	mov	r9, r1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f47f ae35 	bne.w	8007018 <_strtod_l+0x490>
 80073ae:	2322      	movs	r3, #34	; 0x22
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	e631      	b.n	8007018 <_strtod_l+0x490>
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	ea03 0808 	and.w	r8, r3, r8
 80073c0:	e6de      	b.n	8007180 <_strtod_l+0x5f8>
 80073c2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80073c6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80073ca:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80073ce:	37e2      	adds	r7, #226	; 0xe2
 80073d0:	fa01 f307 	lsl.w	r3, r1, r7
 80073d4:	9310      	str	r3, [sp, #64]	; 0x40
 80073d6:	9113      	str	r1, [sp, #76]	; 0x4c
 80073d8:	e745      	b.n	8007266 <_strtod_l+0x6de>
 80073da:	2300      	movs	r3, #0
 80073dc:	9310      	str	r3, [sp, #64]	; 0x40
 80073de:	2301      	movs	r3, #1
 80073e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80073e2:	e740      	b.n	8007266 <_strtod_l+0x6de>
 80073e4:	463a      	mov	r2, r7
 80073e6:	4620      	mov	r0, r4
 80073e8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073ea:	f003 f835 	bl	800a458 <__lshift>
 80073ee:	901a      	str	r0, [sp, #104]	; 0x68
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f47f af68 	bne.w	80072c6 <_strtod_l+0x73e>
 80073f6:	e605      	b.n	8007004 <_strtod_l+0x47c>
 80073f8:	0800b4d0 	.word	0x0800b4d0
 80073fc:	fffffc02 	.word	0xfffffc02
 8007400:	7ff00000 	.word	0x7ff00000
 8007404:	39500000 	.word	0x39500000
 8007408:	46ca      	mov	sl, r9
 800740a:	d165      	bne.n	80074d8 <_strtod_l+0x950>
 800740c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800740e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007412:	b352      	cbz	r2, 800746a <_strtod_l+0x8e2>
 8007414:	4a9e      	ldr	r2, [pc, #632]	; (8007690 <_strtod_l+0xb08>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d12a      	bne.n	8007470 <_strtod_l+0x8e8>
 800741a:	9b05      	ldr	r3, [sp, #20]
 800741c:	4641      	mov	r1, r8
 800741e:	b1fb      	cbz	r3, 8007460 <_strtod_l+0x8d8>
 8007420:	4b9c      	ldr	r3, [pc, #624]	; (8007694 <_strtod_l+0xb0c>)
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	ea09 0303 	and.w	r3, r9, r3
 800742a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800742e:	d81a      	bhi.n	8007466 <_strtod_l+0x8de>
 8007430:	0d1b      	lsrs	r3, r3, #20
 8007432:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	4299      	cmp	r1, r3
 800743c:	d118      	bne.n	8007470 <_strtod_l+0x8e8>
 800743e:	4b96      	ldr	r3, [pc, #600]	; (8007698 <_strtod_l+0xb10>)
 8007440:	459a      	cmp	sl, r3
 8007442:	d102      	bne.n	800744a <_strtod_l+0x8c2>
 8007444:	3101      	adds	r1, #1
 8007446:	f43f addd 	beq.w	8007004 <_strtod_l+0x47c>
 800744a:	f04f 0800 	mov.w	r8, #0
 800744e:	4b91      	ldr	r3, [pc, #580]	; (8007694 <_strtod_l+0xb0c>)
 8007450:	ea0a 0303 	and.w	r3, sl, r3
 8007454:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007458:	9b05      	ldr	r3, [sp, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d19a      	bne.n	8007394 <_strtod_l+0x80c>
 800745e:	e5db      	b.n	8007018 <_strtod_l+0x490>
 8007460:	f04f 33ff 	mov.w	r3, #4294967295
 8007464:	e7e9      	b.n	800743a <_strtod_l+0x8b2>
 8007466:	4613      	mov	r3, r2
 8007468:	e7e7      	b.n	800743a <_strtod_l+0x8b2>
 800746a:	ea53 0308 	orrs.w	r3, r3, r8
 800746e:	d081      	beq.n	8007374 <_strtod_l+0x7ec>
 8007470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007472:	b1e3      	cbz	r3, 80074ae <_strtod_l+0x926>
 8007474:	ea13 0f0a 	tst.w	r3, sl
 8007478:	d0ee      	beq.n	8007458 <_strtod_l+0x8d0>
 800747a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747c:	4640      	mov	r0, r8
 800747e:	4649      	mov	r1, r9
 8007480:	9a05      	ldr	r2, [sp, #20]
 8007482:	b1c3      	cbz	r3, 80074b6 <_strtod_l+0x92e>
 8007484:	f7ff fb5c 	bl	8006b40 <sulp>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800748e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007490:	f7f8 fe6c 	bl	800016c <__adddf3>
 8007494:	4680      	mov	r8, r0
 8007496:	4689      	mov	r9, r1
 8007498:	e7de      	b.n	8007458 <_strtod_l+0x8d0>
 800749a:	4013      	ands	r3, r2
 800749c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80074a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80074a4:	f04f 38ff 	mov.w	r8, #4294967295
 80074a8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80074ac:	e7d4      	b.n	8007458 <_strtod_l+0x8d0>
 80074ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074b0:	ea13 0f08 	tst.w	r3, r8
 80074b4:	e7e0      	b.n	8007478 <_strtod_l+0x8f0>
 80074b6:	f7ff fb43 	bl	8006b40 <sulp>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074c2:	f7f8 fe51 	bl	8000168 <__aeabi_dsub>
 80074c6:	2200      	movs	r2, #0
 80074c8:	2300      	movs	r3, #0
 80074ca:	4680      	mov	r8, r0
 80074cc:	4689      	mov	r9, r1
 80074ce:	f7f9 fa6b 	bl	80009a8 <__aeabi_dcmpeq>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d0c0      	beq.n	8007458 <_strtod_l+0x8d0>
 80074d6:	e606      	b.n	80070e6 <_strtod_l+0x55e>
 80074d8:	4659      	mov	r1, fp
 80074da:	4630      	mov	r0, r6
 80074dc:	f003 f98e 	bl	800a7fc <__ratio>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80074e8:	2200      	movs	r2, #0
 80074ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074ee:	f7f9 fa6f 	bl	80009d0 <__aeabi_dcmple>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d06f      	beq.n	80075d6 <_strtod_l+0xa4e>
 80074f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d17c      	bne.n	80075f6 <_strtod_l+0xa6e>
 80074fc:	f1b8 0f00 	cmp.w	r8, #0
 8007500:	d159      	bne.n	80075b6 <_strtod_l+0xa2e>
 8007502:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007506:	2b00      	cmp	r3, #0
 8007508:	d17b      	bne.n	8007602 <_strtod_l+0xa7a>
 800750a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800750e:	2200      	movs	r2, #0
 8007510:	4b62      	ldr	r3, [pc, #392]	; (800769c <_strtod_l+0xb14>)
 8007512:	f7f9 fa53 	bl	80009bc <__aeabi_dcmplt>
 8007516:	2800      	cmp	r0, #0
 8007518:	d15a      	bne.n	80075d0 <_strtod_l+0xa48>
 800751a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800751e:	2200      	movs	r2, #0
 8007520:	4b5f      	ldr	r3, [pc, #380]	; (80076a0 <_strtod_l+0xb18>)
 8007522:	f7f8 ffd9 	bl	80004d8 <__aeabi_dmul>
 8007526:	4605      	mov	r5, r0
 8007528:	460f      	mov	r7, r1
 800752a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800752e:	9506      	str	r5, [sp, #24]
 8007530:	9307      	str	r3, [sp, #28]
 8007532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007536:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800753a:	4b56      	ldr	r3, [pc, #344]	; (8007694 <_strtod_l+0xb0c>)
 800753c:	4a55      	ldr	r2, [pc, #340]	; (8007694 <_strtod_l+0xb0c>)
 800753e:	ea0a 0303 	and.w	r3, sl, r3
 8007542:	9313      	str	r3, [sp, #76]	; 0x4c
 8007544:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <_strtod_l+0xb1c>)
 8007546:	ea0a 0202 	and.w	r2, sl, r2
 800754a:	429a      	cmp	r2, r3
 800754c:	f040 80b0 	bne.w	80076b0 <_strtod_l+0xb28>
 8007550:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007554:	4640      	mov	r0, r8
 8007556:	4649      	mov	r1, r9
 8007558:	f003 f892 	bl	800a680 <__ulp>
 800755c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007560:	f7f8 ffba 	bl	80004d8 <__aeabi_dmul>
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	f7f8 fe00 	bl	800016c <__adddf3>
 800756c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007694 <_strtod_l+0xb0c>
 8007570:	4a4d      	ldr	r2, [pc, #308]	; (80076a8 <_strtod_l+0xb20>)
 8007572:	ea01 0a0a 	and.w	sl, r1, sl
 8007576:	4592      	cmp	sl, r2
 8007578:	4680      	mov	r8, r0
 800757a:	d948      	bls.n	800760e <_strtod_l+0xa86>
 800757c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800757e:	4b46      	ldr	r3, [pc, #280]	; (8007698 <_strtod_l+0xb10>)
 8007580:	429a      	cmp	r2, r3
 8007582:	d103      	bne.n	800758c <_strtod_l+0xa04>
 8007584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007586:	3301      	adds	r3, #1
 8007588:	f43f ad3c 	beq.w	8007004 <_strtod_l+0x47c>
 800758c:	f04f 38ff 	mov.w	r8, #4294967295
 8007590:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007698 <_strtod_l+0xb10>
 8007594:	4620      	mov	r0, r4
 8007596:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007598:	f002 fd46 	bl	800a028 <_Bfree>
 800759c:	4620      	mov	r0, r4
 800759e:	9908      	ldr	r1, [sp, #32]
 80075a0:	f002 fd42 	bl	800a028 <_Bfree>
 80075a4:	4659      	mov	r1, fp
 80075a6:	4620      	mov	r0, r4
 80075a8:	f002 fd3e 	bl	800a028 <_Bfree>
 80075ac:	4631      	mov	r1, r6
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 fd3a 	bl	800a028 <_Bfree>
 80075b4:	e605      	b.n	80071c2 <_strtod_l+0x63a>
 80075b6:	f1b8 0f01 	cmp.w	r8, #1
 80075ba:	d103      	bne.n	80075c4 <_strtod_l+0xa3c>
 80075bc:	f1b9 0f00 	cmp.w	r9, #0
 80075c0:	f43f ad91 	beq.w	80070e6 <_strtod_l+0x55e>
 80075c4:	2200      	movs	r2, #0
 80075c6:	4b39      	ldr	r3, [pc, #228]	; (80076ac <_strtod_l+0xb24>)
 80075c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80075ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075ce:	e016      	b.n	80075fe <_strtod_l+0xa76>
 80075d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80075d2:	4f33      	ldr	r7, [pc, #204]	; (80076a0 <_strtod_l+0xb18>)
 80075d4:	e7a9      	b.n	800752a <_strtod_l+0x9a2>
 80075d6:	4b32      	ldr	r3, [pc, #200]	; (80076a0 <_strtod_l+0xb18>)
 80075d8:	2200      	movs	r2, #0
 80075da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075de:	f7f8 ff7b 	bl	80004d8 <__aeabi_dmul>
 80075e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e4:	4605      	mov	r5, r0
 80075e6:	460f      	mov	r7, r1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d09e      	beq.n	800752a <_strtod_l+0x9a2>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075f4:	e79d      	b.n	8007532 <_strtod_l+0x9aa>
 80075f6:	2200      	movs	r2, #0
 80075f8:	4b28      	ldr	r3, [pc, #160]	; (800769c <_strtod_l+0xb14>)
 80075fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075fe:	4f27      	ldr	r7, [pc, #156]	; (800769c <_strtod_l+0xb14>)
 8007600:	e797      	b.n	8007532 <_strtod_l+0x9aa>
 8007602:	2200      	movs	r2, #0
 8007604:	4b29      	ldr	r3, [pc, #164]	; (80076ac <_strtod_l+0xb24>)
 8007606:	4645      	mov	r5, r8
 8007608:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800760c:	e7f7      	b.n	80075fe <_strtod_l+0xa76>
 800760e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007612:	9b05      	ldr	r3, [sp, #20]
 8007614:	46ca      	mov	sl, r9
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1bc      	bne.n	8007594 <_strtod_l+0xa0c>
 800761a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800761e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007620:	0d1b      	lsrs	r3, r3, #20
 8007622:	051b      	lsls	r3, r3, #20
 8007624:	429a      	cmp	r2, r3
 8007626:	d1b5      	bne.n	8007594 <_strtod_l+0xa0c>
 8007628:	4628      	mov	r0, r5
 800762a:	4639      	mov	r1, r7
 800762c:	f7f9 fc20 	bl	8000e70 <__aeabi_d2lz>
 8007630:	f7f8 ff24 	bl	800047c <__aeabi_l2d>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4628      	mov	r0, r5
 800763a:	4639      	mov	r1, r7
 800763c:	f7f8 fd94 	bl	8000168 <__aeabi_dsub>
 8007640:	460b      	mov	r3, r1
 8007642:	4602      	mov	r2, r0
 8007644:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007648:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800764e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007652:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007656:	d06c      	beq.n	8007732 <_strtod_l+0xbaa>
 8007658:	a309      	add	r3, pc, #36	; (adr r3, 8007680 <_strtod_l+0xaf8>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f9 f9ad 	bl	80009bc <__aeabi_dcmplt>
 8007662:	2800      	cmp	r0, #0
 8007664:	f47f acd8 	bne.w	8007018 <_strtod_l+0x490>
 8007668:	a307      	add	r3, pc, #28	; (adr r3, 8007688 <_strtod_l+0xb00>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007672:	f7f9 f9c1 	bl	80009f8 <__aeabi_dcmpgt>
 8007676:	2800      	cmp	r0, #0
 8007678:	d08c      	beq.n	8007594 <_strtod_l+0xa0c>
 800767a:	e4cd      	b.n	8007018 <_strtod_l+0x490>
 800767c:	f3af 8000 	nop.w
 8007680:	94a03595 	.word	0x94a03595
 8007684:	3fdfffff 	.word	0x3fdfffff
 8007688:	35afe535 	.word	0x35afe535
 800768c:	3fe00000 	.word	0x3fe00000
 8007690:	000fffff 	.word	0x000fffff
 8007694:	7ff00000 	.word	0x7ff00000
 8007698:	7fefffff 	.word	0x7fefffff
 800769c:	3ff00000 	.word	0x3ff00000
 80076a0:	3fe00000 	.word	0x3fe00000
 80076a4:	7fe00000 	.word	0x7fe00000
 80076a8:	7c9fffff 	.word	0x7c9fffff
 80076ac:	bff00000 	.word	0xbff00000
 80076b0:	9b05      	ldr	r3, [sp, #20]
 80076b2:	b333      	cbz	r3, 8007702 <_strtod_l+0xb7a>
 80076b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80076b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076ba:	d822      	bhi.n	8007702 <_strtod_l+0xb7a>
 80076bc:	a328      	add	r3, pc, #160	; (adr r3, 8007760 <_strtod_l+0xbd8>)
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	4628      	mov	r0, r5
 80076c4:	4639      	mov	r1, r7
 80076c6:	f7f9 f983 	bl	80009d0 <__aeabi_dcmple>
 80076ca:	b1a0      	cbz	r0, 80076f6 <_strtod_l+0xb6e>
 80076cc:	4639      	mov	r1, r7
 80076ce:	4628      	mov	r0, r5
 80076d0:	f7f9 f9da 	bl	8000a88 <__aeabi_d2uiz>
 80076d4:	2801      	cmp	r0, #1
 80076d6:	bf38      	it	cc
 80076d8:	2001      	movcc	r0, #1
 80076da:	f7f8 fe83 	bl	80003e4 <__aeabi_ui2d>
 80076de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e0:	4605      	mov	r5, r0
 80076e2:	460f      	mov	r7, r1
 80076e4:	bb03      	cbnz	r3, 8007728 <_strtod_l+0xba0>
 80076e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076ea:	9014      	str	r0, [sp, #80]	; 0x50
 80076ec:	9315      	str	r3, [sp, #84]	; 0x54
 80076ee:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80076f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80076f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076fa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80076fe:	1a9b      	subs	r3, r3, r2
 8007700:	9311      	str	r3, [sp, #68]	; 0x44
 8007702:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007704:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007706:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800770a:	f002 ffb9 	bl	800a680 <__ulp>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4640      	mov	r0, r8
 8007714:	4649      	mov	r1, r9
 8007716:	f7f8 fedf 	bl	80004d8 <__aeabi_dmul>
 800771a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800771c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800771e:	f7f8 fd25 	bl	800016c <__adddf3>
 8007722:	4680      	mov	r8, r0
 8007724:	4689      	mov	r9, r1
 8007726:	e774      	b.n	8007612 <_strtod_l+0xa8a>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007730:	e7dd      	b.n	80076ee <_strtod_l+0xb66>
 8007732:	a30d      	add	r3, pc, #52	; (adr r3, 8007768 <_strtod_l+0xbe0>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f9 f940 	bl	80009bc <__aeabi_dcmplt>
 800773c:	e79b      	b.n	8007676 <_strtod_l+0xaee>
 800773e:	2300      	movs	r3, #0
 8007740:	930e      	str	r3, [sp, #56]	; 0x38
 8007742:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007744:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	f7ff ba5b 	b.w	8006c02 <_strtod_l+0x7a>
 800774c:	2a65      	cmp	r2, #101	; 0x65
 800774e:	f43f ab52 	beq.w	8006df6 <_strtod_l+0x26e>
 8007752:	2a45      	cmp	r2, #69	; 0x45
 8007754:	f43f ab4f 	beq.w	8006df6 <_strtod_l+0x26e>
 8007758:	2301      	movs	r3, #1
 800775a:	f7ff bb87 	b.w	8006e6c <_strtod_l+0x2e4>
 800775e:	bf00      	nop
 8007760:	ffc00000 	.word	0xffc00000
 8007764:	41dfffff 	.word	0x41dfffff
 8007768:	94a03595 	.word	0x94a03595
 800776c:	3fcfffff 	.word	0x3fcfffff

08007770 <_strtod_r>:
 8007770:	4b01      	ldr	r3, [pc, #4]	; (8007778 <_strtod_r+0x8>)
 8007772:	f7ff ba09 	b.w	8006b88 <_strtod_l>
 8007776:	bf00      	nop
 8007778:	20000018 	.word	0x20000018

0800777c <__cvt>:
 800777c:	2b00      	cmp	r3, #0
 800777e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007782:	461f      	mov	r7, r3
 8007784:	bfbb      	ittet	lt
 8007786:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800778a:	461f      	movlt	r7, r3
 800778c:	2300      	movge	r3, #0
 800778e:	232d      	movlt	r3, #45	; 0x2d
 8007790:	b088      	sub	sp, #32
 8007792:	4614      	mov	r4, r2
 8007794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007796:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007798:	7013      	strb	r3, [r2, #0]
 800779a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800779c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80077a0:	f023 0820 	bic.w	r8, r3, #32
 80077a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077a8:	d005      	beq.n	80077b6 <__cvt+0x3a>
 80077aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077ae:	d100      	bne.n	80077b2 <__cvt+0x36>
 80077b0:	3501      	adds	r5, #1
 80077b2:	2302      	movs	r3, #2
 80077b4:	e000      	b.n	80077b8 <__cvt+0x3c>
 80077b6:	2303      	movs	r3, #3
 80077b8:	aa07      	add	r2, sp, #28
 80077ba:	9204      	str	r2, [sp, #16]
 80077bc:	aa06      	add	r2, sp, #24
 80077be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80077c2:	e9cd 3500 	strd	r3, r5, [sp]
 80077c6:	4622      	mov	r2, r4
 80077c8:	463b      	mov	r3, r7
 80077ca:	f001 f9a1 	bl	8008b10 <_dtoa_r>
 80077ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077d2:	4606      	mov	r6, r0
 80077d4:	d102      	bne.n	80077dc <__cvt+0x60>
 80077d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077d8:	07db      	lsls	r3, r3, #31
 80077da:	d522      	bpl.n	8007822 <__cvt+0xa6>
 80077dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077e0:	eb06 0905 	add.w	r9, r6, r5
 80077e4:	d110      	bne.n	8007808 <__cvt+0x8c>
 80077e6:	7833      	ldrb	r3, [r6, #0]
 80077e8:	2b30      	cmp	r3, #48	; 0x30
 80077ea:	d10a      	bne.n	8007802 <__cvt+0x86>
 80077ec:	2200      	movs	r2, #0
 80077ee:	2300      	movs	r3, #0
 80077f0:	4620      	mov	r0, r4
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f9 f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80077f8:	b918      	cbnz	r0, 8007802 <__cvt+0x86>
 80077fa:	f1c5 0501 	rsb	r5, r5, #1
 80077fe:	f8ca 5000 	str.w	r5, [sl]
 8007802:	f8da 3000 	ldr.w	r3, [sl]
 8007806:	4499      	add	r9, r3
 8007808:	2200      	movs	r2, #0
 800780a:	2300      	movs	r3, #0
 800780c:	4620      	mov	r0, r4
 800780e:	4639      	mov	r1, r7
 8007810:	f7f9 f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8007814:	b108      	cbz	r0, 800781a <__cvt+0x9e>
 8007816:	f8cd 901c 	str.w	r9, [sp, #28]
 800781a:	2230      	movs	r2, #48	; 0x30
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	454b      	cmp	r3, r9
 8007820:	d307      	bcc.n	8007832 <__cvt+0xb6>
 8007822:	4630      	mov	r0, r6
 8007824:	9b07      	ldr	r3, [sp, #28]
 8007826:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007828:	1b9b      	subs	r3, r3, r6
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	b008      	add	sp, #32
 800782e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007832:	1c59      	adds	r1, r3, #1
 8007834:	9107      	str	r1, [sp, #28]
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	e7f0      	b.n	800781c <__cvt+0xa0>

0800783a <__exponent>:
 800783a:	4603      	mov	r3, r0
 800783c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800783e:	2900      	cmp	r1, #0
 8007840:	f803 2b02 	strb.w	r2, [r3], #2
 8007844:	bfb6      	itet	lt
 8007846:	222d      	movlt	r2, #45	; 0x2d
 8007848:	222b      	movge	r2, #43	; 0x2b
 800784a:	4249      	neglt	r1, r1
 800784c:	2909      	cmp	r1, #9
 800784e:	7042      	strb	r2, [r0, #1]
 8007850:	dd2a      	ble.n	80078a8 <__exponent+0x6e>
 8007852:	f10d 0207 	add.w	r2, sp, #7
 8007856:	4617      	mov	r7, r2
 8007858:	260a      	movs	r6, #10
 800785a:	fb91 f5f6 	sdiv	r5, r1, r6
 800785e:	4694      	mov	ip, r2
 8007860:	fb06 1415 	mls	r4, r6, r5, r1
 8007864:	3430      	adds	r4, #48	; 0x30
 8007866:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800786a:	460c      	mov	r4, r1
 800786c:	2c63      	cmp	r4, #99	; 0x63
 800786e:	4629      	mov	r1, r5
 8007870:	f102 32ff 	add.w	r2, r2, #4294967295
 8007874:	dcf1      	bgt.n	800785a <__exponent+0x20>
 8007876:	3130      	adds	r1, #48	; 0x30
 8007878:	f1ac 0402 	sub.w	r4, ip, #2
 800787c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007880:	4622      	mov	r2, r4
 8007882:	1c41      	adds	r1, r0, #1
 8007884:	42ba      	cmp	r2, r7
 8007886:	d30a      	bcc.n	800789e <__exponent+0x64>
 8007888:	f10d 0209 	add.w	r2, sp, #9
 800788c:	eba2 020c 	sub.w	r2, r2, ip
 8007890:	42bc      	cmp	r4, r7
 8007892:	bf88      	it	hi
 8007894:	2200      	movhi	r2, #0
 8007896:	4413      	add	r3, r2
 8007898:	1a18      	subs	r0, r3, r0
 800789a:	b003      	add	sp, #12
 800789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80078a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80078a6:	e7ed      	b.n	8007884 <__exponent+0x4a>
 80078a8:	2330      	movs	r3, #48	; 0x30
 80078aa:	3130      	adds	r1, #48	; 0x30
 80078ac:	7083      	strb	r3, [r0, #2]
 80078ae:	70c1      	strb	r1, [r0, #3]
 80078b0:	1d03      	adds	r3, r0, #4
 80078b2:	e7f1      	b.n	8007898 <__exponent+0x5e>

080078b4 <_printf_float>:
 80078b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	b091      	sub	sp, #68	; 0x44
 80078ba:	460c      	mov	r4, r1
 80078bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80078c0:	4616      	mov	r6, r2
 80078c2:	461f      	mov	r7, r3
 80078c4:	4605      	mov	r5, r0
 80078c6:	f000 fffd 	bl	80088c4 <_localeconv_r>
 80078ca:	6803      	ldr	r3, [r0, #0]
 80078cc:	4618      	mov	r0, r3
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	f7f8 fc3e 	bl	8000150 <strlen>
 80078d4:	2300      	movs	r3, #0
 80078d6:	930e      	str	r3, [sp, #56]	; 0x38
 80078d8:	f8d8 3000 	ldr.w	r3, [r8]
 80078dc:	900a      	str	r0, [sp, #40]	; 0x28
 80078de:	3307      	adds	r3, #7
 80078e0:	f023 0307 	bic.w	r3, r3, #7
 80078e4:	f103 0208 	add.w	r2, r3, #8
 80078e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80078ec:	f8d4 b000 	ldr.w	fp, [r4]
 80078f0:	f8c8 2000 	str.w	r2, [r8]
 80078f4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80078f8:	4652      	mov	r2, sl
 80078fa:	4643      	mov	r3, r8
 80078fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007900:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007904:	930b      	str	r3, [sp, #44]	; 0x2c
 8007906:	f04f 32ff 	mov.w	r2, #4294967295
 800790a:	4650      	mov	r0, sl
 800790c:	4b9c      	ldr	r3, [pc, #624]	; (8007b80 <_printf_float+0x2cc>)
 800790e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007910:	f7f9 f87c 	bl	8000a0c <__aeabi_dcmpun>
 8007914:	bb70      	cbnz	r0, 8007974 <_printf_float+0xc0>
 8007916:	f04f 32ff 	mov.w	r2, #4294967295
 800791a:	4650      	mov	r0, sl
 800791c:	4b98      	ldr	r3, [pc, #608]	; (8007b80 <_printf_float+0x2cc>)
 800791e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007920:	f7f9 f856 	bl	80009d0 <__aeabi_dcmple>
 8007924:	bb30      	cbnz	r0, 8007974 <_printf_float+0xc0>
 8007926:	2200      	movs	r2, #0
 8007928:	2300      	movs	r3, #0
 800792a:	4650      	mov	r0, sl
 800792c:	4641      	mov	r1, r8
 800792e:	f7f9 f845 	bl	80009bc <__aeabi_dcmplt>
 8007932:	b110      	cbz	r0, 800793a <_printf_float+0x86>
 8007934:	232d      	movs	r3, #45	; 0x2d
 8007936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793a:	4a92      	ldr	r2, [pc, #584]	; (8007b84 <_printf_float+0x2d0>)
 800793c:	4b92      	ldr	r3, [pc, #584]	; (8007b88 <_printf_float+0x2d4>)
 800793e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007942:	bf94      	ite	ls
 8007944:	4690      	movls	r8, r2
 8007946:	4698      	movhi	r8, r3
 8007948:	2303      	movs	r3, #3
 800794a:	f04f 0a00 	mov.w	sl, #0
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	f02b 0304 	bic.w	r3, fp, #4
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	4633      	mov	r3, r6
 8007958:	4621      	mov	r1, r4
 800795a:	4628      	mov	r0, r5
 800795c:	9700      	str	r7, [sp, #0]
 800795e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007960:	f000 f9d6 	bl	8007d10 <_printf_common>
 8007964:	3001      	adds	r0, #1
 8007966:	f040 8090 	bne.w	8007a8a <_printf_float+0x1d6>
 800796a:	f04f 30ff 	mov.w	r0, #4294967295
 800796e:	b011      	add	sp, #68	; 0x44
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	4652      	mov	r2, sl
 8007976:	4643      	mov	r3, r8
 8007978:	4650      	mov	r0, sl
 800797a:	4641      	mov	r1, r8
 800797c:	f7f9 f846 	bl	8000a0c <__aeabi_dcmpun>
 8007980:	b148      	cbz	r0, 8007996 <_printf_float+0xe2>
 8007982:	f1b8 0f00 	cmp.w	r8, #0
 8007986:	bfb8      	it	lt
 8007988:	232d      	movlt	r3, #45	; 0x2d
 800798a:	4a80      	ldr	r2, [pc, #512]	; (8007b8c <_printf_float+0x2d8>)
 800798c:	bfb8      	it	lt
 800798e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007992:	4b7f      	ldr	r3, [pc, #508]	; (8007b90 <_printf_float+0x2dc>)
 8007994:	e7d3      	b.n	800793e <_printf_float+0x8a>
 8007996:	6863      	ldr	r3, [r4, #4]
 8007998:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	d142      	bne.n	8007a26 <_printf_float+0x172>
 80079a0:	2306      	movs	r3, #6
 80079a2:	6063      	str	r3, [r4, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	9206      	str	r2, [sp, #24]
 80079a8:	aa0e      	add	r2, sp, #56	; 0x38
 80079aa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80079ae:	aa0d      	add	r2, sp, #52	; 0x34
 80079b0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80079b4:	9203      	str	r2, [sp, #12]
 80079b6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80079ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	6863      	ldr	r3, [r4, #4]
 80079c2:	4652      	mov	r2, sl
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4628      	mov	r0, r5
 80079c8:	4643      	mov	r3, r8
 80079ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80079cc:	f7ff fed6 	bl	800777c <__cvt>
 80079d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079d2:	4680      	mov	r8, r0
 80079d4:	2947      	cmp	r1, #71	; 0x47
 80079d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80079d8:	d108      	bne.n	80079ec <_printf_float+0x138>
 80079da:	1cc8      	adds	r0, r1, #3
 80079dc:	db02      	blt.n	80079e4 <_printf_float+0x130>
 80079de:	6863      	ldr	r3, [r4, #4]
 80079e0:	4299      	cmp	r1, r3
 80079e2:	dd40      	ble.n	8007a66 <_printf_float+0x1b2>
 80079e4:	f1a9 0902 	sub.w	r9, r9, #2
 80079e8:	fa5f f989 	uxtb.w	r9, r9
 80079ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079f0:	d81f      	bhi.n	8007a32 <_printf_float+0x17e>
 80079f2:	464a      	mov	r2, r9
 80079f4:	3901      	subs	r1, #1
 80079f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079fa:	910d      	str	r1, [sp, #52]	; 0x34
 80079fc:	f7ff ff1d 	bl	800783a <__exponent>
 8007a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a02:	4682      	mov	sl, r0
 8007a04:	1813      	adds	r3, r2, r0
 8007a06:	2a01      	cmp	r2, #1
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	dc02      	bgt.n	8007a12 <_printf_float+0x15e>
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	07d2      	lsls	r2, r2, #31
 8007a10:	d501      	bpl.n	8007a16 <_printf_float+0x162>
 8007a12:	3301      	adds	r3, #1
 8007a14:	6123      	str	r3, [r4, #16]
 8007a16:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d09b      	beq.n	8007956 <_printf_float+0xa2>
 8007a1e:	232d      	movs	r3, #45	; 0x2d
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a24:	e797      	b.n	8007956 <_printf_float+0xa2>
 8007a26:	2947      	cmp	r1, #71	; 0x47
 8007a28:	d1bc      	bne.n	80079a4 <_printf_float+0xf0>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1ba      	bne.n	80079a4 <_printf_float+0xf0>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e7b7      	b.n	80079a2 <_printf_float+0xee>
 8007a32:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007a36:	d118      	bne.n	8007a6a <_printf_float+0x1b6>
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	dd0b      	ble.n	8007a56 <_printf_float+0x1a2>
 8007a3e:	6121      	str	r1, [r4, #16]
 8007a40:	b913      	cbnz	r3, 8007a48 <_printf_float+0x194>
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	07d0      	lsls	r0, r2, #31
 8007a46:	d502      	bpl.n	8007a4e <_printf_float+0x19a>
 8007a48:	3301      	adds	r3, #1
 8007a4a:	440b      	add	r3, r1
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	f04f 0a00 	mov.w	sl, #0
 8007a52:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a54:	e7df      	b.n	8007a16 <_printf_float+0x162>
 8007a56:	b913      	cbnz	r3, 8007a5e <_printf_float+0x1aa>
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	07d2      	lsls	r2, r2, #31
 8007a5c:	d501      	bpl.n	8007a62 <_printf_float+0x1ae>
 8007a5e:	3302      	adds	r3, #2
 8007a60:	e7f4      	b.n	8007a4c <_printf_float+0x198>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e7f2      	b.n	8007a4c <_printf_float+0x198>
 8007a66:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	db05      	blt.n	8007a7c <_printf_float+0x1c8>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	6121      	str	r1, [r4, #16]
 8007a74:	07d8      	lsls	r0, r3, #31
 8007a76:	d5ea      	bpl.n	8007a4e <_printf_float+0x19a>
 8007a78:	1c4b      	adds	r3, r1, #1
 8007a7a:	e7e7      	b.n	8007a4c <_printf_float+0x198>
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	bfcc      	ite	gt
 8007a80:	2201      	movgt	r2, #1
 8007a82:	f1c1 0202 	rsble	r2, r1, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	e7e0      	b.n	8007a4c <_printf_float+0x198>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	055a      	lsls	r2, r3, #21
 8007a8e:	d407      	bmi.n	8007aa0 <_printf_float+0x1ec>
 8007a90:	6923      	ldr	r3, [r4, #16]
 8007a92:	4642      	mov	r2, r8
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d12b      	bne.n	8007af6 <_printf_float+0x242>
 8007a9e:	e764      	b.n	800796a <_printf_float+0xb6>
 8007aa0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007aa4:	f240 80dd 	bls.w	8007c62 <_printf_float+0x3ae>
 8007aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007aac:	2200      	movs	r2, #0
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f7f8 ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d033      	beq.n	8007b20 <_printf_float+0x26c>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	4a35      	ldr	r2, [pc, #212]	; (8007b94 <_printf_float+0x2e0>)
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	f43f af51 	beq.w	800796a <_printf_float+0xb6>
 8007ac8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007acc:	429a      	cmp	r2, r3
 8007ace:	db02      	blt.n	8007ad6 <_printf_float+0x222>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	07d8      	lsls	r0, r3, #31
 8007ad4:	d50f      	bpl.n	8007af6 <_printf_float+0x242>
 8007ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b8      	blx	r7
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f43f af42 	beq.w	800796a <_printf_float+0xb6>
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	f104 091a 	add.w	r9, r4, #26
 8007aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af0:	3b01      	subs	r3, #1
 8007af2:	4543      	cmp	r3, r8
 8007af4:	dc09      	bgt.n	8007b0a <_printf_float+0x256>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	079b      	lsls	r3, r3, #30
 8007afa:	f100 8104 	bmi.w	8007d06 <_printf_float+0x452>
 8007afe:	68e0      	ldr	r0, [r4, #12]
 8007b00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b02:	4298      	cmp	r0, r3
 8007b04:	bfb8      	it	lt
 8007b06:	4618      	movlt	r0, r3
 8007b08:	e731      	b.n	800796e <_printf_float+0xba>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	464a      	mov	r2, r9
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f af28 	beq.w	800796a <_printf_float+0xb6>
 8007b1a:	f108 0801 	add.w	r8, r8, #1
 8007b1e:	e7e6      	b.n	8007aee <_printf_float+0x23a>
 8007b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dc38      	bgt.n	8007b98 <_printf_float+0x2e4>
 8007b26:	2301      	movs	r3, #1
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	4a19      	ldr	r2, [pc, #100]	; (8007b94 <_printf_float+0x2e0>)
 8007b2e:	47b8      	blx	r7
 8007b30:	3001      	adds	r0, #1
 8007b32:	f43f af1a 	beq.w	800796a <_printf_float+0xb6>
 8007b36:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	d102      	bne.n	8007b44 <_printf_float+0x290>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	07d9      	lsls	r1, r3, #31
 8007b42:	d5d8      	bpl.n	8007af6 <_printf_float+0x242>
 8007b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f af0b 	beq.w	800796a <_printf_float+0xb6>
 8007b54:	f04f 0900 	mov.w	r9, #0
 8007b58:	f104 0a1a 	add.w	sl, r4, #26
 8007b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5e:	425b      	negs	r3, r3
 8007b60:	454b      	cmp	r3, r9
 8007b62:	dc01      	bgt.n	8007b68 <_printf_float+0x2b4>
 8007b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b66:	e794      	b.n	8007a92 <_printf_float+0x1de>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f aef9 	beq.w	800796a <_printf_float+0xb6>
 8007b78:	f109 0901 	add.w	r9, r9, #1
 8007b7c:	e7ee      	b.n	8007b5c <_printf_float+0x2a8>
 8007b7e:	bf00      	nop
 8007b80:	7fefffff 	.word	0x7fefffff
 8007b84:	0800b4f8 	.word	0x0800b4f8
 8007b88:	0800b4fc 	.word	0x0800b4fc
 8007b8c:	0800b500 	.word	0x0800b500
 8007b90:	0800b504 	.word	0x0800b504
 8007b94:	0800b508 	.word	0x0800b508
 8007b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	bfa8      	it	ge
 8007ba0:	461a      	movge	r2, r3
 8007ba2:	2a00      	cmp	r2, #0
 8007ba4:	4691      	mov	r9, r2
 8007ba6:	dc37      	bgt.n	8007c18 <_printf_float+0x364>
 8007ba8:	f04f 0b00 	mov.w	fp, #0
 8007bac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bb0:	f104 021a 	add.w	r2, r4, #26
 8007bb4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007bb8:	ebaa 0309 	sub.w	r3, sl, r9
 8007bbc:	455b      	cmp	r3, fp
 8007bbe:	dc33      	bgt.n	8007c28 <_printf_float+0x374>
 8007bc0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	db3b      	blt.n	8007c40 <_printf_float+0x38c>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	07da      	lsls	r2, r3, #31
 8007bcc:	d438      	bmi.n	8007c40 <_printf_float+0x38c>
 8007bce:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007bd2:	eba2 0903 	sub.w	r9, r2, r3
 8007bd6:	eba2 020a 	sub.w	r2, r2, sl
 8007bda:	4591      	cmp	r9, r2
 8007bdc:	bfa8      	it	ge
 8007bde:	4691      	movge	r9, r2
 8007be0:	f1b9 0f00 	cmp.w	r9, #0
 8007be4:	dc34      	bgt.n	8007c50 <_printf_float+0x39c>
 8007be6:	f04f 0800 	mov.w	r8, #0
 8007bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bee:	f104 0a1a 	add.w	sl, r4, #26
 8007bf2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007bf6:	1a9b      	subs	r3, r3, r2
 8007bf8:	eba3 0309 	sub.w	r3, r3, r9
 8007bfc:	4543      	cmp	r3, r8
 8007bfe:	f77f af7a 	ble.w	8007af6 <_printf_float+0x242>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4652      	mov	r2, sl
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f aeac 	beq.w	800796a <_printf_float+0xb6>
 8007c12:	f108 0801 	add.w	r8, r8, #1
 8007c16:	e7ec      	b.n	8007bf2 <_printf_float+0x33e>
 8007c18:	4613      	mov	r3, r2
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4642      	mov	r2, r8
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b8      	blx	r7
 8007c22:	3001      	adds	r0, #1
 8007c24:	d1c0      	bne.n	8007ba8 <_printf_float+0x2f4>
 8007c26:	e6a0      	b.n	800796a <_printf_float+0xb6>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4631      	mov	r1, r6
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c30:	47b8      	blx	r7
 8007c32:	3001      	adds	r0, #1
 8007c34:	f43f ae99 	beq.w	800796a <_printf_float+0xb6>
 8007c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c3a:	f10b 0b01 	add.w	fp, fp, #1
 8007c3e:	e7b9      	b.n	8007bb4 <_printf_float+0x300>
 8007c40:	4631      	mov	r1, r6
 8007c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d1bf      	bne.n	8007bce <_printf_float+0x31a>
 8007c4e:	e68c      	b.n	800796a <_printf_float+0xb6>
 8007c50:	464b      	mov	r3, r9
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	eb08 020a 	add.w	r2, r8, sl
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d1c2      	bne.n	8007be6 <_printf_float+0x332>
 8007c60:	e683      	b.n	800796a <_printf_float+0xb6>
 8007c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c64:	2a01      	cmp	r2, #1
 8007c66:	dc01      	bgt.n	8007c6c <_printf_float+0x3b8>
 8007c68:	07db      	lsls	r3, r3, #31
 8007c6a:	d539      	bpl.n	8007ce0 <_printf_float+0x42c>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4642      	mov	r2, r8
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f ae77 	beq.w	800796a <_printf_float+0xb6>
 8007c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c80:	4631      	mov	r1, r6
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b8      	blx	r7
 8007c86:	3001      	adds	r0, #1
 8007c88:	f43f ae6f 	beq.w	800796a <_printf_float+0xb6>
 8007c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c90:	2200      	movs	r2, #0
 8007c92:	2300      	movs	r3, #0
 8007c94:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007c98:	f7f8 fe86 	bl	80009a8 <__aeabi_dcmpeq>
 8007c9c:	b9d8      	cbnz	r0, 8007cd6 <_printf_float+0x422>
 8007c9e:	f109 33ff 	add.w	r3, r9, #4294967295
 8007ca2:	f108 0201 	add.w	r2, r8, #1
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	d10e      	bne.n	8007cce <_printf_float+0x41a>
 8007cb0:	e65b      	b.n	800796a <_printf_float+0xb6>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	464a      	mov	r2, r9
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f ae54 	beq.w	800796a <_printf_float+0xb6>
 8007cc2:	f108 0801 	add.w	r8, r8, #1
 8007cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	4543      	cmp	r3, r8
 8007ccc:	dcf1      	bgt.n	8007cb2 <_printf_float+0x3fe>
 8007cce:	4653      	mov	r3, sl
 8007cd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cd4:	e6de      	b.n	8007a94 <_printf_float+0x1e0>
 8007cd6:	f04f 0800 	mov.w	r8, #0
 8007cda:	f104 091a 	add.w	r9, r4, #26
 8007cde:	e7f2      	b.n	8007cc6 <_printf_float+0x412>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	4642      	mov	r2, r8
 8007ce4:	e7df      	b.n	8007ca6 <_printf_float+0x3f2>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	464a      	mov	r2, r9
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae3a 	beq.w	800796a <_printf_float+0xb6>
 8007cf6:	f108 0801 	add.w	r8, r8, #1
 8007cfa:	68e3      	ldr	r3, [r4, #12]
 8007cfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007cfe:	1a5b      	subs	r3, r3, r1
 8007d00:	4543      	cmp	r3, r8
 8007d02:	dcf0      	bgt.n	8007ce6 <_printf_float+0x432>
 8007d04:	e6fb      	b.n	8007afe <_printf_float+0x24a>
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	f104 0919 	add.w	r9, r4, #25
 8007d0e:	e7f4      	b.n	8007cfa <_printf_float+0x446>

08007d10 <_printf_common>:
 8007d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	4616      	mov	r6, r2
 8007d16:	4699      	mov	r9, r3
 8007d18:	688a      	ldr	r2, [r1, #8]
 8007d1a:	690b      	ldr	r3, [r1, #16]
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	bfb8      	it	lt
 8007d22:	4613      	movlt	r3, r2
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d30:	b10a      	cbz	r2, 8007d36 <_printf_common+0x26>
 8007d32:	3301      	adds	r3, #1
 8007d34:	6033      	str	r3, [r6, #0]
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	0699      	lsls	r1, r3, #26
 8007d3a:	bf42      	ittt	mi
 8007d3c:	6833      	ldrmi	r3, [r6, #0]
 8007d3e:	3302      	addmi	r3, #2
 8007d40:	6033      	strmi	r3, [r6, #0]
 8007d42:	6825      	ldr	r5, [r4, #0]
 8007d44:	f015 0506 	ands.w	r5, r5, #6
 8007d48:	d106      	bne.n	8007d58 <_printf_common+0x48>
 8007d4a:	f104 0a19 	add.w	sl, r4, #25
 8007d4e:	68e3      	ldr	r3, [r4, #12]
 8007d50:	6832      	ldr	r2, [r6, #0]
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dc2b      	bgt.n	8007db0 <_printf_common+0xa0>
 8007d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d5c:	1e13      	subs	r3, r2, #0
 8007d5e:	6822      	ldr	r2, [r4, #0]
 8007d60:	bf18      	it	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	0692      	lsls	r2, r2, #26
 8007d66:	d430      	bmi.n	8007dca <_printf_common+0xba>
 8007d68:	4649      	mov	r1, r9
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d70:	47c0      	blx	r8
 8007d72:	3001      	adds	r0, #1
 8007d74:	d023      	beq.n	8007dbe <_printf_common+0xae>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	6922      	ldr	r2, [r4, #16]
 8007d7a:	f003 0306 	and.w	r3, r3, #6
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	bf14      	ite	ne
 8007d82:	2500      	movne	r5, #0
 8007d84:	6833      	ldreq	r3, [r6, #0]
 8007d86:	f04f 0600 	mov.w	r6, #0
 8007d8a:	bf08      	it	eq
 8007d8c:	68e5      	ldreq	r5, [r4, #12]
 8007d8e:	f104 041a 	add.w	r4, r4, #26
 8007d92:	bf08      	it	eq
 8007d94:	1aed      	subeq	r5, r5, r3
 8007d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007d9a:	bf08      	it	eq
 8007d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfc4      	itt	gt
 8007da4:	1a9b      	subgt	r3, r3, r2
 8007da6:	18ed      	addgt	r5, r5, r3
 8007da8:	42b5      	cmp	r5, r6
 8007daa:	d11a      	bne.n	8007de2 <_printf_common+0xd2>
 8007dac:	2000      	movs	r0, #0
 8007dae:	e008      	b.n	8007dc2 <_printf_common+0xb2>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4652      	mov	r2, sl
 8007db4:	4649      	mov	r1, r9
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d103      	bne.n	8007dc6 <_printf_common+0xb6>
 8007dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc6:	3501      	adds	r5, #1
 8007dc8:	e7c1      	b.n	8007d4e <_printf_common+0x3e>
 8007dca:	2030      	movs	r0, #48	; 0x30
 8007dcc:	18e1      	adds	r1, r4, r3
 8007dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dd8:	4422      	add	r2, r4
 8007dda:	3302      	adds	r3, #2
 8007ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007de0:	e7c2      	b.n	8007d68 <_printf_common+0x58>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4622      	mov	r2, r4
 8007de6:	4649      	mov	r1, r9
 8007de8:	4638      	mov	r0, r7
 8007dea:	47c0      	blx	r8
 8007dec:	3001      	adds	r0, #1
 8007dee:	d0e6      	beq.n	8007dbe <_printf_common+0xae>
 8007df0:	3601      	adds	r6, #1
 8007df2:	e7d9      	b.n	8007da8 <_printf_common+0x98>

08007df4 <_printf_i>:
 8007df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	7e0f      	ldrb	r7, [r1, #24]
 8007dfa:	4691      	mov	r9, r2
 8007dfc:	2f78      	cmp	r7, #120	; 0x78
 8007dfe:	4680      	mov	r8, r0
 8007e00:	460c      	mov	r4, r1
 8007e02:	469a      	mov	sl, r3
 8007e04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e0a:	d807      	bhi.n	8007e1c <_printf_i+0x28>
 8007e0c:	2f62      	cmp	r7, #98	; 0x62
 8007e0e:	d80a      	bhi.n	8007e26 <_printf_i+0x32>
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	f000 80d5 	beq.w	8007fc0 <_printf_i+0x1cc>
 8007e16:	2f58      	cmp	r7, #88	; 0x58
 8007e18:	f000 80c1 	beq.w	8007f9e <_printf_i+0x1aa>
 8007e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e24:	e03a      	b.n	8007e9c <_printf_i+0xa8>
 8007e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e2a:	2b15      	cmp	r3, #21
 8007e2c:	d8f6      	bhi.n	8007e1c <_printf_i+0x28>
 8007e2e:	a101      	add	r1, pc, #4	; (adr r1, 8007e34 <_printf_i+0x40>)
 8007e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e34:	08007e8d 	.word	0x08007e8d
 8007e38:	08007ea1 	.word	0x08007ea1
 8007e3c:	08007e1d 	.word	0x08007e1d
 8007e40:	08007e1d 	.word	0x08007e1d
 8007e44:	08007e1d 	.word	0x08007e1d
 8007e48:	08007e1d 	.word	0x08007e1d
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007e1d 	.word	0x08007e1d
 8007e54:	08007e1d 	.word	0x08007e1d
 8007e58:	08007e1d 	.word	0x08007e1d
 8007e5c:	08007e1d 	.word	0x08007e1d
 8007e60:	08007fa7 	.word	0x08007fa7
 8007e64:	08007ecd 	.word	0x08007ecd
 8007e68:	08007f61 	.word	0x08007f61
 8007e6c:	08007e1d 	.word	0x08007e1d
 8007e70:	08007e1d 	.word	0x08007e1d
 8007e74:	08007fc9 	.word	0x08007fc9
 8007e78:	08007e1d 	.word	0x08007e1d
 8007e7c:	08007ecd 	.word	0x08007ecd
 8007e80:	08007e1d 	.word	0x08007e1d
 8007e84:	08007e1d 	.word	0x08007e1d
 8007e88:	08007f69 	.word	0x08007f69
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	602a      	str	r2, [r5, #0]
 8007e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0a0      	b.n	8007fe2 <_printf_i+0x1ee>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	0607      	lsls	r7, r0, #24
 8007ea6:	f103 0104 	add.w	r1, r3, #4
 8007eaa:	6029      	str	r1, [r5, #0]
 8007eac:	d501      	bpl.n	8007eb2 <_printf_i+0xbe>
 8007eae:	681e      	ldr	r6, [r3, #0]
 8007eb0:	e003      	b.n	8007eba <_printf_i+0xc6>
 8007eb2:	0646      	lsls	r6, r0, #25
 8007eb4:	d5fb      	bpl.n	8007eae <_printf_i+0xba>
 8007eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	da03      	bge.n	8007ec6 <_printf_i+0xd2>
 8007ebe:	232d      	movs	r3, #45	; 0x2d
 8007ec0:	4276      	negs	r6, r6
 8007ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec6:	230a      	movs	r3, #10
 8007ec8:	4859      	ldr	r0, [pc, #356]	; (8008030 <_printf_i+0x23c>)
 8007eca:	e012      	b.n	8007ef2 <_printf_i+0xfe>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	1d19      	adds	r1, r3, #4
 8007ed2:	6029      	str	r1, [r5, #0]
 8007ed4:	0605      	lsls	r5, r0, #24
 8007ed6:	d501      	bpl.n	8007edc <_printf_i+0xe8>
 8007ed8:	681e      	ldr	r6, [r3, #0]
 8007eda:	e002      	b.n	8007ee2 <_printf_i+0xee>
 8007edc:	0641      	lsls	r1, r0, #25
 8007ede:	d5fb      	bpl.n	8007ed8 <_printf_i+0xe4>
 8007ee0:	881e      	ldrh	r6, [r3, #0]
 8007ee2:	2f6f      	cmp	r7, #111	; 0x6f
 8007ee4:	bf0c      	ite	eq
 8007ee6:	2308      	moveq	r3, #8
 8007ee8:	230a      	movne	r3, #10
 8007eea:	4851      	ldr	r0, [pc, #324]	; (8008030 <_printf_i+0x23c>)
 8007eec:	2100      	movs	r1, #0
 8007eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ef2:	6865      	ldr	r5, [r4, #4]
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	bfa8      	it	ge
 8007ef8:	6821      	ldrge	r1, [r4, #0]
 8007efa:	60a5      	str	r5, [r4, #8]
 8007efc:	bfa4      	itt	ge
 8007efe:	f021 0104 	bicge.w	r1, r1, #4
 8007f02:	6021      	strge	r1, [r4, #0]
 8007f04:	b90e      	cbnz	r6, 8007f0a <_printf_i+0x116>
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	d04b      	beq.n	8007fa2 <_printf_i+0x1ae>
 8007f0a:	4615      	mov	r5, r2
 8007f0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f10:	fb03 6711 	mls	r7, r3, r1, r6
 8007f14:	5dc7      	ldrb	r7, [r0, r7]
 8007f16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f1a:	4637      	mov	r7, r6
 8007f1c:	42bb      	cmp	r3, r7
 8007f1e:	460e      	mov	r6, r1
 8007f20:	d9f4      	bls.n	8007f0c <_printf_i+0x118>
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d10b      	bne.n	8007f3e <_printf_i+0x14a>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	07de      	lsls	r6, r3, #31
 8007f2a:	d508      	bpl.n	8007f3e <_printf_i+0x14a>
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	6861      	ldr	r1, [r4, #4]
 8007f30:	4299      	cmp	r1, r3
 8007f32:	bfde      	ittt	le
 8007f34:	2330      	movle	r3, #48	; 0x30
 8007f36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f3e:	1b52      	subs	r2, r2, r5
 8007f40:	6122      	str	r2, [r4, #16]
 8007f42:	464b      	mov	r3, r9
 8007f44:	4621      	mov	r1, r4
 8007f46:	4640      	mov	r0, r8
 8007f48:	f8cd a000 	str.w	sl, [sp]
 8007f4c:	aa03      	add	r2, sp, #12
 8007f4e:	f7ff fedf 	bl	8007d10 <_printf_common>
 8007f52:	3001      	adds	r0, #1
 8007f54:	d14a      	bne.n	8007fec <_printf_i+0x1f8>
 8007f56:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5a:	b004      	add	sp, #16
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	f043 0320 	orr.w	r3, r3, #32
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	2778      	movs	r7, #120	; 0x78
 8007f6a:	4832      	ldr	r0, [pc, #200]	; (8008034 <_printf_i+0x240>)
 8007f6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	6829      	ldr	r1, [r5, #0]
 8007f74:	061f      	lsls	r7, r3, #24
 8007f76:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f7a:	d402      	bmi.n	8007f82 <_printf_i+0x18e>
 8007f7c:	065f      	lsls	r7, r3, #25
 8007f7e:	bf48      	it	mi
 8007f80:	b2b6      	uxthmi	r6, r6
 8007f82:	07df      	lsls	r7, r3, #31
 8007f84:	bf48      	it	mi
 8007f86:	f043 0320 	orrmi.w	r3, r3, #32
 8007f8a:	6029      	str	r1, [r5, #0]
 8007f8c:	bf48      	it	mi
 8007f8e:	6023      	strmi	r3, [r4, #0]
 8007f90:	b91e      	cbnz	r6, 8007f9a <_printf_i+0x1a6>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	f023 0320 	bic.w	r3, r3, #32
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	2310      	movs	r3, #16
 8007f9c:	e7a6      	b.n	8007eec <_printf_i+0xf8>
 8007f9e:	4824      	ldr	r0, [pc, #144]	; (8008030 <_printf_i+0x23c>)
 8007fa0:	e7e4      	b.n	8007f6c <_printf_i+0x178>
 8007fa2:	4615      	mov	r5, r2
 8007fa4:	e7bd      	b.n	8007f22 <_printf_i+0x12e>
 8007fa6:	682b      	ldr	r3, [r5, #0]
 8007fa8:	6826      	ldr	r6, [r4, #0]
 8007faa:	1d18      	adds	r0, r3, #4
 8007fac:	6961      	ldr	r1, [r4, #20]
 8007fae:	6028      	str	r0, [r5, #0]
 8007fb0:	0635      	lsls	r5, r6, #24
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	d501      	bpl.n	8007fba <_printf_i+0x1c6>
 8007fb6:	6019      	str	r1, [r3, #0]
 8007fb8:	e002      	b.n	8007fc0 <_printf_i+0x1cc>
 8007fba:	0670      	lsls	r0, r6, #25
 8007fbc:	d5fb      	bpl.n	8007fb6 <_printf_i+0x1c2>
 8007fbe:	8019      	strh	r1, [r3, #0]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4615      	mov	r5, r2
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	e7bc      	b.n	8007f42 <_printf_i+0x14e>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	1d1a      	adds	r2, r3, #4
 8007fce:	602a      	str	r2, [r5, #0]
 8007fd0:	681d      	ldr	r5, [r3, #0]
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 fceb 	bl	80089b0 <memchr>
 8007fda:	b108      	cbz	r0, 8007fe0 <_printf_i+0x1ec>
 8007fdc:	1b40      	subs	r0, r0, r5
 8007fde:	6060      	str	r0, [r4, #4]
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fea:	e7aa      	b.n	8007f42 <_printf_i+0x14e>
 8007fec:	462a      	mov	r2, r5
 8007fee:	4649      	mov	r1, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	47d0      	blx	sl
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d0ad      	beq.n	8007f56 <_printf_i+0x162>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	079b      	lsls	r3, r3, #30
 8007ffe:	d413      	bmi.n	8008028 <_printf_i+0x234>
 8008000:	68e0      	ldr	r0, [r4, #12]
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	4298      	cmp	r0, r3
 8008006:	bfb8      	it	lt
 8008008:	4618      	movlt	r0, r3
 800800a:	e7a6      	b.n	8007f5a <_printf_i+0x166>
 800800c:	2301      	movs	r3, #1
 800800e:	4632      	mov	r2, r6
 8008010:	4649      	mov	r1, r9
 8008012:	4640      	mov	r0, r8
 8008014:	47d0      	blx	sl
 8008016:	3001      	adds	r0, #1
 8008018:	d09d      	beq.n	8007f56 <_printf_i+0x162>
 800801a:	3501      	adds	r5, #1
 800801c:	68e3      	ldr	r3, [r4, #12]
 800801e:	9903      	ldr	r1, [sp, #12]
 8008020:	1a5b      	subs	r3, r3, r1
 8008022:	42ab      	cmp	r3, r5
 8008024:	dcf2      	bgt.n	800800c <_printf_i+0x218>
 8008026:	e7eb      	b.n	8008000 <_printf_i+0x20c>
 8008028:	2500      	movs	r5, #0
 800802a:	f104 0619 	add.w	r6, r4, #25
 800802e:	e7f5      	b.n	800801c <_printf_i+0x228>
 8008030:	0800b50a 	.word	0x0800b50a
 8008034:	0800b51b 	.word	0x0800b51b

08008038 <_scanf_float>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	b087      	sub	sp, #28
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	688b      	ldr	r3, [r1, #8]
 8008042:	4617      	mov	r7, r2
 8008044:	1e5a      	subs	r2, r3, #1
 8008046:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800804a:	bf85      	ittet	hi
 800804c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008050:	195b      	addhi	r3, r3, r5
 8008052:	2300      	movls	r3, #0
 8008054:	9302      	strhi	r3, [sp, #8]
 8008056:	bf88      	it	hi
 8008058:	f240 135d 	movwhi	r3, #349	; 0x15d
 800805c:	468b      	mov	fp, r1
 800805e:	f04f 0500 	mov.w	r5, #0
 8008062:	bf8c      	ite	hi
 8008064:	608b      	strhi	r3, [r1, #8]
 8008066:	9302      	strls	r3, [sp, #8]
 8008068:	680b      	ldr	r3, [r1, #0]
 800806a:	4680      	mov	r8, r0
 800806c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008070:	f84b 3b1c 	str.w	r3, [fp], #28
 8008074:	460c      	mov	r4, r1
 8008076:	465e      	mov	r6, fp
 8008078:	46aa      	mov	sl, r5
 800807a:	46a9      	mov	r9, r5
 800807c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008080:	9501      	str	r5, [sp, #4]
 8008082:	68a2      	ldr	r2, [r4, #8]
 8008084:	b152      	cbz	r2, 800809c <_scanf_float+0x64>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b4e      	cmp	r3, #78	; 0x4e
 800808c:	d864      	bhi.n	8008158 <_scanf_float+0x120>
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d83c      	bhi.n	800810c <_scanf_float+0xd4>
 8008092:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008096:	b2c8      	uxtb	r0, r1
 8008098:	280e      	cmp	r0, #14
 800809a:	d93a      	bls.n	8008112 <_scanf_float+0xda>
 800809c:	f1b9 0f00 	cmp.w	r9, #0
 80080a0:	d003      	beq.n	80080aa <_scanf_float+0x72>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ae:	f1ba 0f01 	cmp.w	sl, #1
 80080b2:	f200 8113 	bhi.w	80082dc <_scanf_float+0x2a4>
 80080b6:	455e      	cmp	r6, fp
 80080b8:	f200 8105 	bhi.w	80082c6 <_scanf_float+0x28e>
 80080bc:	2501      	movs	r5, #1
 80080be:	4628      	mov	r0, r5
 80080c0:	b007      	add	sp, #28
 80080c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80080ca:	2a0d      	cmp	r2, #13
 80080cc:	d8e6      	bhi.n	800809c <_scanf_float+0x64>
 80080ce:	a101      	add	r1, pc, #4	; (adr r1, 80080d4 <_scanf_float+0x9c>)
 80080d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080d4:	08008213 	.word	0x08008213
 80080d8:	0800809d 	.word	0x0800809d
 80080dc:	0800809d 	.word	0x0800809d
 80080e0:	0800809d 	.word	0x0800809d
 80080e4:	08008273 	.word	0x08008273
 80080e8:	0800824b 	.word	0x0800824b
 80080ec:	0800809d 	.word	0x0800809d
 80080f0:	0800809d 	.word	0x0800809d
 80080f4:	08008221 	.word	0x08008221
 80080f8:	0800809d 	.word	0x0800809d
 80080fc:	0800809d 	.word	0x0800809d
 8008100:	0800809d 	.word	0x0800809d
 8008104:	0800809d 	.word	0x0800809d
 8008108:	080081d9 	.word	0x080081d9
 800810c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008110:	e7db      	b.n	80080ca <_scanf_float+0x92>
 8008112:	290e      	cmp	r1, #14
 8008114:	d8c2      	bhi.n	800809c <_scanf_float+0x64>
 8008116:	a001      	add	r0, pc, #4	; (adr r0, 800811c <_scanf_float+0xe4>)
 8008118:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800811c:	080081cb 	.word	0x080081cb
 8008120:	0800809d 	.word	0x0800809d
 8008124:	080081cb 	.word	0x080081cb
 8008128:	0800825f 	.word	0x0800825f
 800812c:	0800809d 	.word	0x0800809d
 8008130:	08008179 	.word	0x08008179
 8008134:	080081b5 	.word	0x080081b5
 8008138:	080081b5 	.word	0x080081b5
 800813c:	080081b5 	.word	0x080081b5
 8008140:	080081b5 	.word	0x080081b5
 8008144:	080081b5 	.word	0x080081b5
 8008148:	080081b5 	.word	0x080081b5
 800814c:	080081b5 	.word	0x080081b5
 8008150:	080081b5 	.word	0x080081b5
 8008154:	080081b5 	.word	0x080081b5
 8008158:	2b6e      	cmp	r3, #110	; 0x6e
 800815a:	d809      	bhi.n	8008170 <_scanf_float+0x138>
 800815c:	2b60      	cmp	r3, #96	; 0x60
 800815e:	d8b2      	bhi.n	80080c6 <_scanf_float+0x8e>
 8008160:	2b54      	cmp	r3, #84	; 0x54
 8008162:	d077      	beq.n	8008254 <_scanf_float+0x21c>
 8008164:	2b59      	cmp	r3, #89	; 0x59
 8008166:	d199      	bne.n	800809c <_scanf_float+0x64>
 8008168:	2d07      	cmp	r5, #7
 800816a:	d197      	bne.n	800809c <_scanf_float+0x64>
 800816c:	2508      	movs	r5, #8
 800816e:	e029      	b.n	80081c4 <_scanf_float+0x18c>
 8008170:	2b74      	cmp	r3, #116	; 0x74
 8008172:	d06f      	beq.n	8008254 <_scanf_float+0x21c>
 8008174:	2b79      	cmp	r3, #121	; 0x79
 8008176:	e7f6      	b.n	8008166 <_scanf_float+0x12e>
 8008178:	6821      	ldr	r1, [r4, #0]
 800817a:	05c8      	lsls	r0, r1, #23
 800817c:	d51a      	bpl.n	80081b4 <_scanf_float+0x17c>
 800817e:	9b02      	ldr	r3, [sp, #8]
 8008180:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008184:	6021      	str	r1, [r4, #0]
 8008186:	f109 0901 	add.w	r9, r9, #1
 800818a:	b11b      	cbz	r3, 8008194 <_scanf_float+0x15c>
 800818c:	3b01      	subs	r3, #1
 800818e:	3201      	adds	r2, #1
 8008190:	9302      	str	r3, [sp, #8]
 8008192:	60a2      	str	r2, [r4, #8]
 8008194:	68a3      	ldr	r3, [r4, #8]
 8008196:	3b01      	subs	r3, #1
 8008198:	60a3      	str	r3, [r4, #8]
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	3301      	adds	r3, #1
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	607b      	str	r3, [r7, #4]
 80081a8:	f340 8084 	ble.w	80082b4 <_scanf_float+0x27c>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	3301      	adds	r3, #1
 80081b0:	603b      	str	r3, [r7, #0]
 80081b2:	e766      	b.n	8008082 <_scanf_float+0x4a>
 80081b4:	eb1a 0f05 	cmn.w	sl, r5
 80081b8:	f47f af70 	bne.w	800809c <_scanf_float+0x64>
 80081bc:	6822      	ldr	r2, [r4, #0]
 80081be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80081c2:	6022      	str	r2, [r4, #0]
 80081c4:	f806 3b01 	strb.w	r3, [r6], #1
 80081c8:	e7e4      	b.n	8008194 <_scanf_float+0x15c>
 80081ca:	6822      	ldr	r2, [r4, #0]
 80081cc:	0610      	lsls	r0, r2, #24
 80081ce:	f57f af65 	bpl.w	800809c <_scanf_float+0x64>
 80081d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081d6:	e7f4      	b.n	80081c2 <_scanf_float+0x18a>
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	d10e      	bne.n	80081fc <_scanf_float+0x1c4>
 80081de:	f1b9 0f00 	cmp.w	r9, #0
 80081e2:	d10e      	bne.n	8008202 <_scanf_float+0x1ca>
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80081ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80081ee:	d108      	bne.n	8008202 <_scanf_float+0x1ca>
 80081f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081f4:	f04f 0a01 	mov.w	sl, #1
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	e7e3      	b.n	80081c4 <_scanf_float+0x18c>
 80081fc:	f1ba 0f02 	cmp.w	sl, #2
 8008200:	d055      	beq.n	80082ae <_scanf_float+0x276>
 8008202:	2d01      	cmp	r5, #1
 8008204:	d002      	beq.n	800820c <_scanf_float+0x1d4>
 8008206:	2d04      	cmp	r5, #4
 8008208:	f47f af48 	bne.w	800809c <_scanf_float+0x64>
 800820c:	3501      	adds	r5, #1
 800820e:	b2ed      	uxtb	r5, r5
 8008210:	e7d8      	b.n	80081c4 <_scanf_float+0x18c>
 8008212:	f1ba 0f01 	cmp.w	sl, #1
 8008216:	f47f af41 	bne.w	800809c <_scanf_float+0x64>
 800821a:	f04f 0a02 	mov.w	sl, #2
 800821e:	e7d1      	b.n	80081c4 <_scanf_float+0x18c>
 8008220:	b97d      	cbnz	r5, 8008242 <_scanf_float+0x20a>
 8008222:	f1b9 0f00 	cmp.w	r9, #0
 8008226:	f47f af3c 	bne.w	80080a2 <_scanf_float+0x6a>
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008230:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008234:	f47f af39 	bne.w	80080aa <_scanf_float+0x72>
 8008238:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800823c:	2501      	movs	r5, #1
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	e7c0      	b.n	80081c4 <_scanf_float+0x18c>
 8008242:	2d03      	cmp	r5, #3
 8008244:	d0e2      	beq.n	800820c <_scanf_float+0x1d4>
 8008246:	2d05      	cmp	r5, #5
 8008248:	e7de      	b.n	8008208 <_scanf_float+0x1d0>
 800824a:	2d02      	cmp	r5, #2
 800824c:	f47f af26 	bne.w	800809c <_scanf_float+0x64>
 8008250:	2503      	movs	r5, #3
 8008252:	e7b7      	b.n	80081c4 <_scanf_float+0x18c>
 8008254:	2d06      	cmp	r5, #6
 8008256:	f47f af21 	bne.w	800809c <_scanf_float+0x64>
 800825a:	2507      	movs	r5, #7
 800825c:	e7b2      	b.n	80081c4 <_scanf_float+0x18c>
 800825e:	6822      	ldr	r2, [r4, #0]
 8008260:	0591      	lsls	r1, r2, #22
 8008262:	f57f af1b 	bpl.w	800809c <_scanf_float+0x64>
 8008266:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800826a:	6022      	str	r2, [r4, #0]
 800826c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008270:	e7a8      	b.n	80081c4 <_scanf_float+0x18c>
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008278:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800827c:	d006      	beq.n	800828c <_scanf_float+0x254>
 800827e:	0550      	lsls	r0, r2, #21
 8008280:	f57f af0c 	bpl.w	800809c <_scanf_float+0x64>
 8008284:	f1b9 0f00 	cmp.w	r9, #0
 8008288:	f43f af0f 	beq.w	80080aa <_scanf_float+0x72>
 800828c:	0591      	lsls	r1, r2, #22
 800828e:	bf58      	it	pl
 8008290:	9901      	ldrpl	r1, [sp, #4]
 8008292:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008296:	bf58      	it	pl
 8008298:	eba9 0101 	subpl.w	r1, r9, r1
 800829c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80082a0:	f04f 0900 	mov.w	r9, #0
 80082a4:	bf58      	it	pl
 80082a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80082aa:	6022      	str	r2, [r4, #0]
 80082ac:	e78a      	b.n	80081c4 <_scanf_float+0x18c>
 80082ae:	f04f 0a03 	mov.w	sl, #3
 80082b2:	e787      	b.n	80081c4 <_scanf_float+0x18c>
 80082b4:	4639      	mov	r1, r7
 80082b6:	4640      	mov	r0, r8
 80082b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80082bc:	4798      	blx	r3
 80082be:	2800      	cmp	r0, #0
 80082c0:	f43f aedf 	beq.w	8008082 <_scanf_float+0x4a>
 80082c4:	e6ea      	b.n	800809c <_scanf_float+0x64>
 80082c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082ca:	463a      	mov	r2, r7
 80082cc:	4640      	mov	r0, r8
 80082ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082d2:	4798      	blx	r3
 80082d4:	6923      	ldr	r3, [r4, #16]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	e6ec      	b.n	80080b6 <_scanf_float+0x7e>
 80082dc:	1e6b      	subs	r3, r5, #1
 80082de:	2b06      	cmp	r3, #6
 80082e0:	d825      	bhi.n	800832e <_scanf_float+0x2f6>
 80082e2:	2d02      	cmp	r5, #2
 80082e4:	d836      	bhi.n	8008354 <_scanf_float+0x31c>
 80082e6:	455e      	cmp	r6, fp
 80082e8:	f67f aee8 	bls.w	80080bc <_scanf_float+0x84>
 80082ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082f0:	463a      	mov	r2, r7
 80082f2:	4640      	mov	r0, r8
 80082f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082f8:	4798      	blx	r3
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	e7f1      	b.n	80082e6 <_scanf_float+0x2ae>
 8008302:	9802      	ldr	r0, [sp, #8]
 8008304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008308:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800830c:	463a      	mov	r2, r7
 800830e:	9002      	str	r0, [sp, #8]
 8008310:	4640      	mov	r0, r8
 8008312:	4798      	blx	r3
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	3b01      	subs	r3, #1
 8008318:	6123      	str	r3, [r4, #16]
 800831a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800831e:	fa5f fa8a 	uxtb.w	sl, sl
 8008322:	f1ba 0f02 	cmp.w	sl, #2
 8008326:	d1ec      	bne.n	8008302 <_scanf_float+0x2ca>
 8008328:	3d03      	subs	r5, #3
 800832a:	b2ed      	uxtb	r5, r5
 800832c:	1b76      	subs	r6, r6, r5
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	05da      	lsls	r2, r3, #23
 8008332:	d52f      	bpl.n	8008394 <_scanf_float+0x35c>
 8008334:	055b      	lsls	r3, r3, #21
 8008336:	d510      	bpl.n	800835a <_scanf_float+0x322>
 8008338:	455e      	cmp	r6, fp
 800833a:	f67f aebf 	bls.w	80080bc <_scanf_float+0x84>
 800833e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008342:	463a      	mov	r2, r7
 8008344:	4640      	mov	r0, r8
 8008346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800834a:	4798      	blx	r3
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	3b01      	subs	r3, #1
 8008350:	6123      	str	r3, [r4, #16]
 8008352:	e7f1      	b.n	8008338 <_scanf_float+0x300>
 8008354:	46aa      	mov	sl, r5
 8008356:	9602      	str	r6, [sp, #8]
 8008358:	e7df      	b.n	800831a <_scanf_float+0x2e2>
 800835a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800835e:	6923      	ldr	r3, [r4, #16]
 8008360:	2965      	cmp	r1, #101	; 0x65
 8008362:	f103 33ff 	add.w	r3, r3, #4294967295
 8008366:	f106 35ff 	add.w	r5, r6, #4294967295
 800836a:	6123      	str	r3, [r4, #16]
 800836c:	d00c      	beq.n	8008388 <_scanf_float+0x350>
 800836e:	2945      	cmp	r1, #69	; 0x45
 8008370:	d00a      	beq.n	8008388 <_scanf_float+0x350>
 8008372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008376:	463a      	mov	r2, r7
 8008378:	4640      	mov	r0, r8
 800837a:	4798      	blx	r3
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008382:	3b01      	subs	r3, #1
 8008384:	1eb5      	subs	r5, r6, #2
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	463a      	mov	r2, r7
 800838a:	4640      	mov	r0, r8
 800838c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008390:	4798      	blx	r3
 8008392:	462e      	mov	r6, r5
 8008394:	6825      	ldr	r5, [r4, #0]
 8008396:	f015 0510 	ands.w	r5, r5, #16
 800839a:	d155      	bne.n	8008448 <_scanf_float+0x410>
 800839c:	7035      	strb	r5, [r6, #0]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a8:	d11d      	bne.n	80083e6 <_scanf_float+0x3ae>
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	454b      	cmp	r3, r9
 80083ae:	eba3 0209 	sub.w	r2, r3, r9
 80083b2:	d125      	bne.n	8008400 <_scanf_float+0x3c8>
 80083b4:	2200      	movs	r2, #0
 80083b6:	4659      	mov	r1, fp
 80083b8:	4640      	mov	r0, r8
 80083ba:	f7ff f9d9 	bl	8007770 <_strtod_r>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	f8d4 c000 	ldr.w	ip, [r4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f01c 0f02 	tst.w	ip, #2
 80083ca:	4606      	mov	r6, r0
 80083cc:	460f      	mov	r7, r1
 80083ce:	f103 0204 	add.w	r2, r3, #4
 80083d2:	d020      	beq.n	8008416 <_scanf_float+0x3de>
 80083d4:	9903      	ldr	r1, [sp, #12]
 80083d6:	600a      	str	r2, [r1, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	e9c3 6700 	strd	r6, r7, [r3]
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60e3      	str	r3, [r4, #12]
 80083e4:	e66b      	b.n	80080be <_scanf_float+0x86>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0e3      	beq.n	80083b4 <_scanf_float+0x37c>
 80083ec:	9905      	ldr	r1, [sp, #20]
 80083ee:	230a      	movs	r3, #10
 80083f0:	462a      	mov	r2, r5
 80083f2:	4640      	mov	r0, r8
 80083f4:	3101      	adds	r1, #1
 80083f6:	f002 faf1 	bl	800a9dc <_strtol_r>
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	9e05      	ldr	r6, [sp, #20]
 80083fe:	1ac2      	subs	r2, r0, r3
 8008400:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008404:	429e      	cmp	r6, r3
 8008406:	bf28      	it	cs
 8008408:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800840c:	4630      	mov	r0, r6
 800840e:	490f      	ldr	r1, [pc, #60]	; (800844c <_scanf_float+0x414>)
 8008410:	f000 f946 	bl	80086a0 <siprintf>
 8008414:	e7ce      	b.n	80083b4 <_scanf_float+0x37c>
 8008416:	f01c 0f04 	tst.w	ip, #4
 800841a:	d1db      	bne.n	80083d4 <_scanf_float+0x39c>
 800841c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008420:	f8cc 2000 	str.w	r2, [ip]
 8008424:	f8d3 8000 	ldr.w	r8, [r3]
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	f7f8 faee 	bl	8000a0c <__aeabi_dcmpun>
 8008430:	b128      	cbz	r0, 800843e <_scanf_float+0x406>
 8008432:	4807      	ldr	r0, [pc, #28]	; (8008450 <_scanf_float+0x418>)
 8008434:	f000 fade 	bl	80089f4 <nanf>
 8008438:	f8c8 0000 	str.w	r0, [r8]
 800843c:	e7cf      	b.n	80083de <_scanf_float+0x3a6>
 800843e:	4630      	mov	r0, r6
 8008440:	4639      	mov	r1, r7
 8008442:	f7f8 fb41 	bl	8000ac8 <__aeabi_d2f>
 8008446:	e7f7      	b.n	8008438 <_scanf_float+0x400>
 8008448:	2500      	movs	r5, #0
 800844a:	e638      	b.n	80080be <_scanf_float+0x86>
 800844c:	0800b52c 	.word	0x0800b52c
 8008450:	0800b8c9 	.word	0x0800b8c9

08008454 <std>:
 8008454:	2300      	movs	r3, #0
 8008456:	b510      	push	{r4, lr}
 8008458:	4604      	mov	r4, r0
 800845a:	e9c0 3300 	strd	r3, r3, [r0]
 800845e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008462:	6083      	str	r3, [r0, #8]
 8008464:	8181      	strh	r1, [r0, #12]
 8008466:	6643      	str	r3, [r0, #100]	; 0x64
 8008468:	81c2      	strh	r2, [r0, #14]
 800846a:	6183      	str	r3, [r0, #24]
 800846c:	4619      	mov	r1, r3
 800846e:	2208      	movs	r2, #8
 8008470:	305c      	adds	r0, #92	; 0x5c
 8008472:	f000 fa0d 	bl	8008890 <memset>
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <std+0x38>)
 8008478:	6224      	str	r4, [r4, #32]
 800847a:	6263      	str	r3, [r4, #36]	; 0x24
 800847c:	4b04      	ldr	r3, [pc, #16]	; (8008490 <std+0x3c>)
 800847e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008480:	4b04      	ldr	r3, [pc, #16]	; (8008494 <std+0x40>)
 8008482:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <std+0x44>)
 8008486:	6323      	str	r3, [r4, #48]	; 0x30
 8008488:	bd10      	pop	{r4, pc}
 800848a:	bf00      	nop
 800848c:	080086e1 	.word	0x080086e1
 8008490:	08008703 	.word	0x08008703
 8008494:	0800873b 	.word	0x0800873b
 8008498:	0800875f 	.word	0x0800875f

0800849c <stdio_exit_handler>:
 800849c:	4a02      	ldr	r2, [pc, #8]	; (80084a8 <stdio_exit_handler+0xc>)
 800849e:	4903      	ldr	r1, [pc, #12]	; (80084ac <stdio_exit_handler+0x10>)
 80084a0:	4803      	ldr	r0, [pc, #12]	; (80084b0 <stdio_exit_handler+0x14>)
 80084a2:	f000 b869 	b.w	8008578 <_fwalk_sglue>
 80084a6:	bf00      	nop
 80084a8:	2000000c 	.word	0x2000000c
 80084ac:	0800b035 	.word	0x0800b035
 80084b0:	20000184 	.word	0x20000184

080084b4 <cleanup_stdio>:
 80084b4:	6841      	ldr	r1, [r0, #4]
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <cleanup_stdio+0x34>)
 80084b8:	b510      	push	{r4, lr}
 80084ba:	4299      	cmp	r1, r3
 80084bc:	4604      	mov	r4, r0
 80084be:	d001      	beq.n	80084c4 <cleanup_stdio+0x10>
 80084c0:	f002 fdb8 	bl	800b034 <_fflush_r>
 80084c4:	68a1      	ldr	r1, [r4, #8]
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <cleanup_stdio+0x38>)
 80084c8:	4299      	cmp	r1, r3
 80084ca:	d002      	beq.n	80084d2 <cleanup_stdio+0x1e>
 80084cc:	4620      	mov	r0, r4
 80084ce:	f002 fdb1 	bl	800b034 <_fflush_r>
 80084d2:	68e1      	ldr	r1, [r4, #12]
 80084d4:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <cleanup_stdio+0x3c>)
 80084d6:	4299      	cmp	r1, r3
 80084d8:	d004      	beq.n	80084e4 <cleanup_stdio+0x30>
 80084da:	4620      	mov	r0, r4
 80084dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e0:	f002 bda8 	b.w	800b034 <_fflush_r>
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	bf00      	nop
 80084e8:	200004b8 	.word	0x200004b8
 80084ec:	20000520 	.word	0x20000520
 80084f0:	20000588 	.word	0x20000588

080084f4 <global_stdio_init.part.0>:
 80084f4:	b510      	push	{r4, lr}
 80084f6:	4b0b      	ldr	r3, [pc, #44]	; (8008524 <global_stdio_init.part.0+0x30>)
 80084f8:	4c0b      	ldr	r4, [pc, #44]	; (8008528 <global_stdio_init.part.0+0x34>)
 80084fa:	4a0c      	ldr	r2, [pc, #48]	; (800852c <global_stdio_init.part.0+0x38>)
 80084fc:	4620      	mov	r0, r4
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	2104      	movs	r1, #4
 8008502:	2200      	movs	r2, #0
 8008504:	f7ff ffa6 	bl	8008454 <std>
 8008508:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800850c:	2201      	movs	r2, #1
 800850e:	2109      	movs	r1, #9
 8008510:	f7ff ffa0 	bl	8008454 <std>
 8008514:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008518:	2202      	movs	r2, #2
 800851a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800851e:	2112      	movs	r1, #18
 8008520:	f7ff bf98 	b.w	8008454 <std>
 8008524:	200005f0 	.word	0x200005f0
 8008528:	200004b8 	.word	0x200004b8
 800852c:	0800849d 	.word	0x0800849d

08008530 <__sfp_lock_acquire>:
 8008530:	4801      	ldr	r0, [pc, #4]	; (8008538 <__sfp_lock_acquire+0x8>)
 8008532:	f000 ba3b 	b.w	80089ac <__retarget_lock_acquire_recursive>
 8008536:	bf00      	nop
 8008538:	200005f9 	.word	0x200005f9

0800853c <__sfp_lock_release>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__sfp_lock_release+0x8>)
 800853e:	f000 ba36 	b.w	80089ae <__retarget_lock_release_recursive>
 8008542:	bf00      	nop
 8008544:	200005f9 	.word	0x200005f9

08008548 <__sinit>:
 8008548:	b510      	push	{r4, lr}
 800854a:	4604      	mov	r4, r0
 800854c:	f7ff fff0 	bl	8008530 <__sfp_lock_acquire>
 8008550:	6a23      	ldr	r3, [r4, #32]
 8008552:	b11b      	cbz	r3, 800855c <__sinit+0x14>
 8008554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008558:	f7ff bff0 	b.w	800853c <__sfp_lock_release>
 800855c:	4b04      	ldr	r3, [pc, #16]	; (8008570 <__sinit+0x28>)
 800855e:	6223      	str	r3, [r4, #32]
 8008560:	4b04      	ldr	r3, [pc, #16]	; (8008574 <__sinit+0x2c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1f5      	bne.n	8008554 <__sinit+0xc>
 8008568:	f7ff ffc4 	bl	80084f4 <global_stdio_init.part.0>
 800856c:	e7f2      	b.n	8008554 <__sinit+0xc>
 800856e:	bf00      	nop
 8008570:	080084b5 	.word	0x080084b5
 8008574:	200005f0 	.word	0x200005f0

08008578 <_fwalk_sglue>:
 8008578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800857c:	4607      	mov	r7, r0
 800857e:	4688      	mov	r8, r1
 8008580:	4614      	mov	r4, r2
 8008582:	2600      	movs	r6, #0
 8008584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008588:	f1b9 0901 	subs.w	r9, r9, #1
 800858c:	d505      	bpl.n	800859a <_fwalk_sglue+0x22>
 800858e:	6824      	ldr	r4, [r4, #0]
 8008590:	2c00      	cmp	r4, #0
 8008592:	d1f7      	bne.n	8008584 <_fwalk_sglue+0xc>
 8008594:	4630      	mov	r0, r6
 8008596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800859a:	89ab      	ldrh	r3, [r5, #12]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d907      	bls.n	80085b0 <_fwalk_sglue+0x38>
 80085a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085a4:	3301      	adds	r3, #1
 80085a6:	d003      	beq.n	80085b0 <_fwalk_sglue+0x38>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4638      	mov	r0, r7
 80085ac:	47c0      	blx	r8
 80085ae:	4306      	orrs	r6, r0
 80085b0:	3568      	adds	r5, #104	; 0x68
 80085b2:	e7e9      	b.n	8008588 <_fwalk_sglue+0x10>

080085b4 <iprintf>:
 80085b4:	b40f      	push	{r0, r1, r2, r3}
 80085b6:	b507      	push	{r0, r1, r2, lr}
 80085b8:	4906      	ldr	r1, [pc, #24]	; (80085d4 <iprintf+0x20>)
 80085ba:	ab04      	add	r3, sp, #16
 80085bc:	6808      	ldr	r0, [r1, #0]
 80085be:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c2:	6881      	ldr	r1, [r0, #8]
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	f002 fb99 	bl	800acfc <_vfiprintf_r>
 80085ca:	b003      	add	sp, #12
 80085cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085d0:	b004      	add	sp, #16
 80085d2:	4770      	bx	lr
 80085d4:	200001d0 	.word	0x200001d0

080085d8 <putchar>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <putchar+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	6882      	ldr	r2, [r0, #8]
 80085e0:	f002 bdb1 	b.w	800b146 <_putc_r>
 80085e4:	200001d0 	.word	0x200001d0

080085e8 <_puts_r>:
 80085e8:	6a03      	ldr	r3, [r0, #32]
 80085ea:	b570      	push	{r4, r5, r6, lr}
 80085ec:	4605      	mov	r5, r0
 80085ee:	460e      	mov	r6, r1
 80085f0:	6884      	ldr	r4, [r0, #8]
 80085f2:	b90b      	cbnz	r3, 80085f8 <_puts_r+0x10>
 80085f4:	f7ff ffa8 	bl	8008548 <__sinit>
 80085f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085fa:	07db      	lsls	r3, r3, #31
 80085fc:	d405      	bmi.n	800860a <_puts_r+0x22>
 80085fe:	89a3      	ldrh	r3, [r4, #12]
 8008600:	0598      	lsls	r0, r3, #22
 8008602:	d402      	bmi.n	800860a <_puts_r+0x22>
 8008604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008606:	f000 f9d1 	bl	80089ac <__retarget_lock_acquire_recursive>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	d513      	bpl.n	8008638 <_puts_r+0x50>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	b18b      	cbz	r3, 8008638 <_puts_r+0x50>
 8008614:	3e01      	subs	r6, #1
 8008616:	68a3      	ldr	r3, [r4, #8]
 8008618:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800861c:	3b01      	subs	r3, #1
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	b9e9      	cbnz	r1, 800865e <_puts_r+0x76>
 8008622:	2b00      	cmp	r3, #0
 8008624:	da2e      	bge.n	8008684 <_puts_r+0x9c>
 8008626:	4622      	mov	r2, r4
 8008628:	210a      	movs	r1, #10
 800862a:	4628      	mov	r0, r5
 800862c:	f000 f89b 	bl	8008766 <__swbuf_r>
 8008630:	3001      	adds	r0, #1
 8008632:	d007      	beq.n	8008644 <_puts_r+0x5c>
 8008634:	250a      	movs	r5, #10
 8008636:	e007      	b.n	8008648 <_puts_r+0x60>
 8008638:	4621      	mov	r1, r4
 800863a:	4628      	mov	r0, r5
 800863c:	f000 f8d0 	bl	80087e0 <__swsetup_r>
 8008640:	2800      	cmp	r0, #0
 8008642:	d0e7      	beq.n	8008614 <_puts_r+0x2c>
 8008644:	f04f 35ff 	mov.w	r5, #4294967295
 8008648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800864a:	07da      	lsls	r2, r3, #31
 800864c:	d405      	bmi.n	800865a <_puts_r+0x72>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	059b      	lsls	r3, r3, #22
 8008652:	d402      	bmi.n	800865a <_puts_r+0x72>
 8008654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008656:	f000 f9aa 	bl	80089ae <__retarget_lock_release_recursive>
 800865a:	4628      	mov	r0, r5
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	2b00      	cmp	r3, #0
 8008660:	da04      	bge.n	800866c <_puts_r+0x84>
 8008662:	69a2      	ldr	r2, [r4, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	dc06      	bgt.n	8008676 <_puts_r+0x8e>
 8008668:	290a      	cmp	r1, #10
 800866a:	d004      	beq.n	8008676 <_puts_r+0x8e>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	6022      	str	r2, [r4, #0]
 8008672:	7019      	strb	r1, [r3, #0]
 8008674:	e7cf      	b.n	8008616 <_puts_r+0x2e>
 8008676:	4622      	mov	r2, r4
 8008678:	4628      	mov	r0, r5
 800867a:	f000 f874 	bl	8008766 <__swbuf_r>
 800867e:	3001      	adds	r0, #1
 8008680:	d1c9      	bne.n	8008616 <_puts_r+0x2e>
 8008682:	e7df      	b.n	8008644 <_puts_r+0x5c>
 8008684:	250a      	movs	r5, #10
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	6022      	str	r2, [r4, #0]
 800868c:	701d      	strb	r5, [r3, #0]
 800868e:	e7db      	b.n	8008648 <_puts_r+0x60>

08008690 <puts>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <puts+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f7ff bfa7 	b.w	80085e8 <_puts_r>
 800869a:	bf00      	nop
 800869c:	200001d0 	.word	0x200001d0

080086a0 <siprintf>:
 80086a0:	b40e      	push	{r1, r2, r3}
 80086a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086a6:	b500      	push	{lr}
 80086a8:	b09c      	sub	sp, #112	; 0x70
 80086aa:	ab1d      	add	r3, sp, #116	; 0x74
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	9006      	str	r0, [sp, #24]
 80086b0:	9107      	str	r1, [sp, #28]
 80086b2:	9104      	str	r1, [sp, #16]
 80086b4:	4808      	ldr	r0, [pc, #32]	; (80086d8 <siprintf+0x38>)
 80086b6:	4909      	ldr	r1, [pc, #36]	; (80086dc <siprintf+0x3c>)
 80086b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086bc:	9105      	str	r1, [sp, #20]
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	a902      	add	r1, sp, #8
 80086c2:	9301      	str	r3, [sp, #4]
 80086c4:	f002 f9f4 	bl	800aab0 <_svfiprintf_r>
 80086c8:	2200      	movs	r2, #0
 80086ca:	9b02      	ldr	r3, [sp, #8]
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	b01c      	add	sp, #112	; 0x70
 80086d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d4:	b003      	add	sp, #12
 80086d6:	4770      	bx	lr
 80086d8:	200001d0 	.word	0x200001d0
 80086dc:	ffff0208 	.word	0xffff0208

080086e0 <__sread>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	460c      	mov	r4, r1
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	f000 f912 	bl	8008910 <_read_r>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	bfab      	itete	ge
 80086f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086f2:	89a3      	ldrhlt	r3, [r4, #12]
 80086f4:	181b      	addge	r3, r3, r0
 80086f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086fa:	bfac      	ite	ge
 80086fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80086fe:	81a3      	strhlt	r3, [r4, #12]
 8008700:	bd10      	pop	{r4, pc}

08008702 <__swrite>:
 8008702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	461f      	mov	r7, r3
 8008708:	898b      	ldrh	r3, [r1, #12]
 800870a:	4605      	mov	r5, r0
 800870c:	05db      	lsls	r3, r3, #23
 800870e:	460c      	mov	r4, r1
 8008710:	4616      	mov	r6, r2
 8008712:	d505      	bpl.n	8008720 <__swrite+0x1e>
 8008714:	2302      	movs	r3, #2
 8008716:	2200      	movs	r2, #0
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	f000 f8e6 	bl	80088ec <_lseek_r>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	4632      	mov	r2, r6
 8008724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	4628      	mov	r0, r5
 800872c:	463b      	mov	r3, r7
 800872e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008736:	f000 b8fd 	b.w	8008934 <_write_r>

0800873a <__sseek>:
 800873a:	b510      	push	{r4, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 f8d3 	bl	80088ec <_lseek_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	bf15      	itete	ne
 800874c:	6560      	strne	r0, [r4, #84]	; 0x54
 800874e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008756:	81a3      	strheq	r3, [r4, #12]
 8008758:	bf18      	it	ne
 800875a:	81a3      	strhne	r3, [r4, #12]
 800875c:	bd10      	pop	{r4, pc}

0800875e <__sclose>:
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	f000 b8b3 	b.w	80088cc <_close_r>

08008766 <__swbuf_r>:
 8008766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008768:	460e      	mov	r6, r1
 800876a:	4614      	mov	r4, r2
 800876c:	4605      	mov	r5, r0
 800876e:	b118      	cbz	r0, 8008778 <__swbuf_r+0x12>
 8008770:	6a03      	ldr	r3, [r0, #32]
 8008772:	b90b      	cbnz	r3, 8008778 <__swbuf_r+0x12>
 8008774:	f7ff fee8 	bl	8008548 <__sinit>
 8008778:	69a3      	ldr	r3, [r4, #24]
 800877a:	60a3      	str	r3, [r4, #8]
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	071a      	lsls	r2, r3, #28
 8008780:	d525      	bpl.n	80087ce <__swbuf_r+0x68>
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	b31b      	cbz	r3, 80087ce <__swbuf_r+0x68>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	6922      	ldr	r2, [r4, #16]
 800878a:	b2f6      	uxtb	r6, r6
 800878c:	1a98      	subs	r0, r3, r2
 800878e:	6963      	ldr	r3, [r4, #20]
 8008790:	4637      	mov	r7, r6
 8008792:	4283      	cmp	r3, r0
 8008794:	dc04      	bgt.n	80087a0 <__swbuf_r+0x3a>
 8008796:	4621      	mov	r1, r4
 8008798:	4628      	mov	r0, r5
 800879a:	f002 fc4b 	bl	800b034 <_fflush_r>
 800879e:	b9e0      	cbnz	r0, 80087da <__swbuf_r+0x74>
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	6022      	str	r2, [r4, #0]
 80087ac:	701e      	strb	r6, [r3, #0]
 80087ae:	6962      	ldr	r2, [r4, #20]
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d004      	beq.n	80087c0 <__swbuf_r+0x5a>
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	07db      	lsls	r3, r3, #31
 80087ba:	d506      	bpl.n	80087ca <__swbuf_r+0x64>
 80087bc:	2e0a      	cmp	r6, #10
 80087be:	d104      	bne.n	80087ca <__swbuf_r+0x64>
 80087c0:	4621      	mov	r1, r4
 80087c2:	4628      	mov	r0, r5
 80087c4:	f002 fc36 	bl	800b034 <_fflush_r>
 80087c8:	b938      	cbnz	r0, 80087da <__swbuf_r+0x74>
 80087ca:	4638      	mov	r0, r7
 80087cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ce:	4621      	mov	r1, r4
 80087d0:	4628      	mov	r0, r5
 80087d2:	f000 f805 	bl	80087e0 <__swsetup_r>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0d5      	beq.n	8008786 <__swbuf_r+0x20>
 80087da:	f04f 37ff 	mov.w	r7, #4294967295
 80087de:	e7f4      	b.n	80087ca <__swbuf_r+0x64>

080087e0 <__swsetup_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4b2a      	ldr	r3, [pc, #168]	; (800888c <__swsetup_r+0xac>)
 80087e4:	4605      	mov	r5, r0
 80087e6:	6818      	ldr	r0, [r3, #0]
 80087e8:	460c      	mov	r4, r1
 80087ea:	b118      	cbz	r0, 80087f4 <__swsetup_r+0x14>
 80087ec:	6a03      	ldr	r3, [r0, #32]
 80087ee:	b90b      	cbnz	r3, 80087f4 <__swsetup_r+0x14>
 80087f0:	f7ff feaa 	bl	8008548 <__sinit>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087fa:	0718      	lsls	r0, r3, #28
 80087fc:	d422      	bmi.n	8008844 <__swsetup_r+0x64>
 80087fe:	06d9      	lsls	r1, r3, #27
 8008800:	d407      	bmi.n	8008812 <__swsetup_r+0x32>
 8008802:	2309      	movs	r3, #9
 8008804:	602b      	str	r3, [r5, #0]
 8008806:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800880a:	f04f 30ff 	mov.w	r0, #4294967295
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	e034      	b.n	800887c <__swsetup_r+0x9c>
 8008812:	0758      	lsls	r0, r3, #29
 8008814:	d512      	bpl.n	800883c <__swsetup_r+0x5c>
 8008816:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008818:	b141      	cbz	r1, 800882c <__swsetup_r+0x4c>
 800881a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800881e:	4299      	cmp	r1, r3
 8008820:	d002      	beq.n	8008828 <__swsetup_r+0x48>
 8008822:	4628      	mov	r0, r5
 8008824:	f000 ff58 	bl	80096d8 <_free_r>
 8008828:	2300      	movs	r3, #0
 800882a:	6363      	str	r3, [r4, #52]	; 0x34
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008832:	81a3      	strh	r3, [r4, #12]
 8008834:	2300      	movs	r3, #0
 8008836:	6063      	str	r3, [r4, #4]
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f043 0308 	orr.w	r3, r3, #8
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	6923      	ldr	r3, [r4, #16]
 8008846:	b94b      	cbnz	r3, 800885c <__swsetup_r+0x7c>
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800884e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008852:	d003      	beq.n	800885c <__swsetup_r+0x7c>
 8008854:	4621      	mov	r1, r4
 8008856:	4628      	mov	r0, r5
 8008858:	f002 fc39 	bl	800b0ce <__smakebuf_r>
 800885c:	89a0      	ldrh	r0, [r4, #12]
 800885e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008862:	f010 0301 	ands.w	r3, r0, #1
 8008866:	d00a      	beq.n	800887e <__swsetup_r+0x9e>
 8008868:	2300      	movs	r3, #0
 800886a:	60a3      	str	r3, [r4, #8]
 800886c:	6963      	ldr	r3, [r4, #20]
 800886e:	425b      	negs	r3, r3
 8008870:	61a3      	str	r3, [r4, #24]
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	b943      	cbnz	r3, 8008888 <__swsetup_r+0xa8>
 8008876:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800887a:	d1c4      	bne.n	8008806 <__swsetup_r+0x26>
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	0781      	lsls	r1, r0, #30
 8008880:	bf58      	it	pl
 8008882:	6963      	ldrpl	r3, [r4, #20]
 8008884:	60a3      	str	r3, [r4, #8]
 8008886:	e7f4      	b.n	8008872 <__swsetup_r+0x92>
 8008888:	2000      	movs	r0, #0
 800888a:	e7f7      	b.n	800887c <__swsetup_r+0x9c>
 800888c:	200001d0 	.word	0x200001d0

08008890 <memset>:
 8008890:	4603      	mov	r3, r0
 8008892:	4402      	add	r2, r0
 8008894:	4293      	cmp	r3, r2
 8008896:	d100      	bne.n	800889a <memset+0xa>
 8008898:	4770      	bx	lr
 800889a:	f803 1b01 	strb.w	r1, [r3], #1
 800889e:	e7f9      	b.n	8008894 <memset+0x4>

080088a0 <strncmp>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	b16a      	cbz	r2, 80088c0 <strncmp+0x20>
 80088a4:	3901      	subs	r1, #1
 80088a6:	1884      	adds	r4, r0, r2
 80088a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d103      	bne.n	80088bc <strncmp+0x1c>
 80088b4:	42a0      	cmp	r0, r4
 80088b6:	d001      	beq.n	80088bc <strncmp+0x1c>
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	d1f5      	bne.n	80088a8 <strncmp+0x8>
 80088bc:	1ad0      	subs	r0, r2, r3
 80088be:	bd10      	pop	{r4, pc}
 80088c0:	4610      	mov	r0, r2
 80088c2:	e7fc      	b.n	80088be <strncmp+0x1e>

080088c4 <_localeconv_r>:
 80088c4:	4800      	ldr	r0, [pc, #0]	; (80088c8 <_localeconv_r+0x4>)
 80088c6:	4770      	bx	lr
 80088c8:	20000108 	.word	0x20000108

080088cc <_close_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	2300      	movs	r3, #0
 80088d0:	4d05      	ldr	r5, [pc, #20]	; (80088e8 <_close_r+0x1c>)
 80088d2:	4604      	mov	r4, r0
 80088d4:	4608      	mov	r0, r1
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	f7fa f8be 	bl	8002a58 <_close>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_close_r+0x1a>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_close_r+0x1a>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	200005f4 	.word	0x200005f4

080088ec <_lseek_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	4611      	mov	r1, r2
 80088f4:	2200      	movs	r2, #0
 80088f6:	4d05      	ldr	r5, [pc, #20]	; (800890c <_lseek_r+0x20>)
 80088f8:	602a      	str	r2, [r5, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7fa f8d0 	bl	8002aa0 <_lseek>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_lseek_r+0x1e>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b103      	cbz	r3, 800890a <_lseek_r+0x1e>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	200005f4 	.word	0x200005f4

08008910 <_read_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	2200      	movs	r2, #0
 800891a:	4d05      	ldr	r5, [pc, #20]	; (8008930 <_read_r+0x20>)
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7fa f87d 	bl	8002a1e <_read>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_read_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_read_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	200005f4 	.word	0x200005f4

08008934 <_write_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	4611      	mov	r1, r2
 800893c:	2200      	movs	r2, #0
 800893e:	4d05      	ldr	r5, [pc, #20]	; (8008954 <_write_r+0x20>)
 8008940:	602a      	str	r2, [r5, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	f7f8 fb8c 	bl	8001060 <_write>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_write_r+0x1e>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_write_r+0x1e>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	200005f4 	.word	0x200005f4

08008958 <__errno>:
 8008958:	4b01      	ldr	r3, [pc, #4]	; (8008960 <__errno+0x8>)
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	200001d0 	.word	0x200001d0

08008964 <__libc_init_array>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	2600      	movs	r6, #0
 8008968:	4d0c      	ldr	r5, [pc, #48]	; (800899c <__libc_init_array+0x38>)
 800896a:	4c0d      	ldr	r4, [pc, #52]	; (80089a0 <__libc_init_array+0x3c>)
 800896c:	1b64      	subs	r4, r4, r5
 800896e:	10a4      	asrs	r4, r4, #2
 8008970:	42a6      	cmp	r6, r4
 8008972:	d109      	bne.n	8008988 <__libc_init_array+0x24>
 8008974:	f002 fd30 	bl	800b3d8 <_init>
 8008978:	2600      	movs	r6, #0
 800897a:	4d0a      	ldr	r5, [pc, #40]	; (80089a4 <__libc_init_array+0x40>)
 800897c:	4c0a      	ldr	r4, [pc, #40]	; (80089a8 <__libc_init_array+0x44>)
 800897e:	1b64      	subs	r4, r4, r5
 8008980:	10a4      	asrs	r4, r4, #2
 8008982:	42a6      	cmp	r6, r4
 8008984:	d105      	bne.n	8008992 <__libc_init_array+0x2e>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	f855 3b04 	ldr.w	r3, [r5], #4
 800898c:	4798      	blx	r3
 800898e:	3601      	adds	r6, #1
 8008990:	e7ee      	b.n	8008970 <__libc_init_array+0xc>
 8008992:	f855 3b04 	ldr.w	r3, [r5], #4
 8008996:	4798      	blx	r3
 8008998:	3601      	adds	r6, #1
 800899a:	e7f2      	b.n	8008982 <__libc_init_array+0x1e>
 800899c:	0800b8cc 	.word	0x0800b8cc
 80089a0:	0800b8cc 	.word	0x0800b8cc
 80089a4:	0800b8cc 	.word	0x0800b8cc
 80089a8:	0800b8d0 	.word	0x0800b8d0

080089ac <__retarget_lock_acquire_recursive>:
 80089ac:	4770      	bx	lr

080089ae <__retarget_lock_release_recursive>:
 80089ae:	4770      	bx	lr

080089b0 <memchr>:
 80089b0:	4603      	mov	r3, r0
 80089b2:	b510      	push	{r4, lr}
 80089b4:	b2c9      	uxtb	r1, r1
 80089b6:	4402      	add	r2, r0
 80089b8:	4293      	cmp	r3, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	d101      	bne.n	80089c2 <memchr+0x12>
 80089be:	2000      	movs	r0, #0
 80089c0:	e003      	b.n	80089ca <memchr+0x1a>
 80089c2:	7804      	ldrb	r4, [r0, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	428c      	cmp	r4, r1
 80089c8:	d1f6      	bne.n	80089b8 <memchr+0x8>
 80089ca:	bd10      	pop	{r4, pc}

080089cc <memcpy>:
 80089cc:	440a      	add	r2, r1
 80089ce:	4291      	cmp	r1, r2
 80089d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d4:	d100      	bne.n	80089d8 <memcpy+0xc>
 80089d6:	4770      	bx	lr
 80089d8:	b510      	push	{r4, lr}
 80089da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089de:	4291      	cmp	r1, r2
 80089e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e4:	d1f9      	bne.n	80089da <memcpy+0xe>
 80089e6:	bd10      	pop	{r4, pc}

080089e8 <nan>:
 80089e8:	2000      	movs	r0, #0
 80089ea:	4901      	ldr	r1, [pc, #4]	; (80089f0 <nan+0x8>)
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	7ff80000 	.word	0x7ff80000

080089f4 <nanf>:
 80089f4:	4800      	ldr	r0, [pc, #0]	; (80089f8 <nanf+0x4>)
 80089f6:	4770      	bx	lr
 80089f8:	7fc00000 	.word	0x7fc00000

080089fc <quorem>:
 80089fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	6903      	ldr	r3, [r0, #16]
 8008a02:	690c      	ldr	r4, [r1, #16]
 8008a04:	4607      	mov	r7, r0
 8008a06:	42a3      	cmp	r3, r4
 8008a08:	db7f      	blt.n	8008b0a <quorem+0x10e>
 8008a0a:	3c01      	subs	r4, #1
 8008a0c:	f100 0514 	add.w	r5, r0, #20
 8008a10:	f101 0814 	add.w	r8, r1, #20
 8008a14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a22:	3301      	adds	r3, #1
 8008a24:	429a      	cmp	r2, r3
 8008a26:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a32:	d331      	bcc.n	8008a98 <quorem+0x9c>
 8008a34:	f04f 0e00 	mov.w	lr, #0
 8008a38:	4640      	mov	r0, r8
 8008a3a:	46ac      	mov	ip, r5
 8008a3c:	46f2      	mov	sl, lr
 8008a3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a42:	b293      	uxth	r3, r2
 8008a44:	fb06 e303 	mla	r3, r6, r3, lr
 8008a48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a4c:	0c1a      	lsrs	r2, r3, #16
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	fb06 220e 	mla	r2, r6, lr, r2
 8008a54:	ebaa 0303 	sub.w	r3, sl, r3
 8008a58:	f8dc a000 	ldr.w	sl, [ip]
 8008a5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a60:	fa1f fa8a 	uxth.w	sl, sl
 8008a64:	4453      	add	r3, sl
 8008a66:	f8dc a000 	ldr.w	sl, [ip]
 8008a6a:	b292      	uxth	r2, r2
 8008a6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a7a:	4581      	cmp	r9, r0
 8008a7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a80:	f84c 3b04 	str.w	r3, [ip], #4
 8008a84:	d2db      	bcs.n	8008a3e <quorem+0x42>
 8008a86:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a8a:	b92b      	cbnz	r3, 8008a98 <quorem+0x9c>
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	3b04      	subs	r3, #4
 8008a90:	429d      	cmp	r5, r3
 8008a92:	461a      	mov	r2, r3
 8008a94:	d32d      	bcc.n	8008af2 <quorem+0xf6>
 8008a96:	613c      	str	r4, [r7, #16]
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f001 fd49 	bl	800a530 <__mcmp>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	db23      	blt.n	8008aea <quorem+0xee>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aac:	f8d1 c000 	ldr.w	ip, [r1]
 8008ab0:	b293      	uxth	r3, r2
 8008ab2:	1ac3      	subs	r3, r0, r3
 8008ab4:	0c12      	lsrs	r2, r2, #16
 8008ab6:	fa1f f08c 	uxth.w	r0, ip
 8008aba:	4403      	add	r3, r0
 8008abc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aca:	45c1      	cmp	r9, r8
 8008acc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ad0:	f841 3b04 	str.w	r3, [r1], #4
 8008ad4:	d2e8      	bcs.n	8008aa8 <quorem+0xac>
 8008ad6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ade:	b922      	cbnz	r2, 8008aea <quorem+0xee>
 8008ae0:	3b04      	subs	r3, #4
 8008ae2:	429d      	cmp	r5, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	d30a      	bcc.n	8008afe <quorem+0x102>
 8008ae8:	613c      	str	r4, [r7, #16]
 8008aea:	4630      	mov	r0, r6
 8008aec:	b003      	add	sp, #12
 8008aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	3b04      	subs	r3, #4
 8008af6:	2a00      	cmp	r2, #0
 8008af8:	d1cd      	bne.n	8008a96 <quorem+0x9a>
 8008afa:	3c01      	subs	r4, #1
 8008afc:	e7c8      	b.n	8008a90 <quorem+0x94>
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	3b04      	subs	r3, #4
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	d1f0      	bne.n	8008ae8 <quorem+0xec>
 8008b06:	3c01      	subs	r4, #1
 8008b08:	e7eb      	b.n	8008ae2 <quorem+0xe6>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e7ee      	b.n	8008aec <quorem+0xf0>
	...

08008b10 <_dtoa_r>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	4616      	mov	r6, r2
 8008b16:	461f      	mov	r7, r3
 8008b18:	69c4      	ldr	r4, [r0, #28]
 8008b1a:	b099      	sub	sp, #100	; 0x64
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008b26:	b974      	cbnz	r4, 8008b46 <_dtoa_r+0x36>
 8008b28:	2010      	movs	r0, #16
 8008b2a:	f001 f977 	bl	8009e1c <malloc>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	61e8      	str	r0, [r5, #28]
 8008b32:	b920      	cbnz	r0, 8008b3e <_dtoa_r+0x2e>
 8008b34:	21ef      	movs	r1, #239	; 0xef
 8008b36:	4bac      	ldr	r3, [pc, #688]	; (8008de8 <_dtoa_r+0x2d8>)
 8008b38:	48ac      	ldr	r0, [pc, #688]	; (8008dec <_dtoa_r+0x2dc>)
 8008b3a:	f002 fb85 	bl	800b248 <__assert_func>
 8008b3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b42:	6004      	str	r4, [r0, #0]
 8008b44:	60c4      	str	r4, [r0, #12]
 8008b46:	69eb      	ldr	r3, [r5, #28]
 8008b48:	6819      	ldr	r1, [r3, #0]
 8008b4a:	b151      	cbz	r1, 8008b62 <_dtoa_r+0x52>
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4093      	lsls	r3, r2
 8008b52:	604a      	str	r2, [r1, #4]
 8008b54:	608b      	str	r3, [r1, #8]
 8008b56:	4628      	mov	r0, r5
 8008b58:	f001 fa66 	bl	800a028 <_Bfree>
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	69eb      	ldr	r3, [r5, #28]
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	1e3b      	subs	r3, r7, #0
 8008b64:	bfaf      	iteee	ge
 8008b66:	2300      	movge	r3, #0
 8008b68:	2201      	movlt	r2, #1
 8008b6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b6e:	9305      	strlt	r3, [sp, #20]
 8008b70:	bfa8      	it	ge
 8008b72:	f8c8 3000 	strge.w	r3, [r8]
 8008b76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008b7a:	4b9d      	ldr	r3, [pc, #628]	; (8008df0 <_dtoa_r+0x2e0>)
 8008b7c:	bfb8      	it	lt
 8008b7e:	f8c8 2000 	strlt.w	r2, [r8]
 8008b82:	ea33 0309 	bics.w	r3, r3, r9
 8008b86:	d119      	bne.n	8008bbc <_dtoa_r+0xac>
 8008b88:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b94:	4333      	orrs	r3, r6
 8008b96:	f000 8589 	beq.w	80096ac <_dtoa_r+0xb9c>
 8008b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b9c:	b953      	cbnz	r3, 8008bb4 <_dtoa_r+0xa4>
 8008b9e:	4b95      	ldr	r3, [pc, #596]	; (8008df4 <_dtoa_r+0x2e4>)
 8008ba0:	e023      	b.n	8008bea <_dtoa_r+0xda>
 8008ba2:	4b95      	ldr	r3, [pc, #596]	; (8008df8 <_dtoa_r+0x2e8>)
 8008ba4:	9303      	str	r3, [sp, #12]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	9803      	ldr	r0, [sp, #12]
 8008bae:	b019      	add	sp, #100	; 0x64
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	4b8f      	ldr	r3, [pc, #572]	; (8008df4 <_dtoa_r+0x2e4>)
 8008bb6:	9303      	str	r3, [sp, #12]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	e7f5      	b.n	8008ba8 <_dtoa_r+0x98>
 8008bbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008bc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008bc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f7f7 feec 	bl	80009a8 <__aeabi_dcmpeq>
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	b160      	cbz	r0, 8008bee <_dtoa_r+0xde>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 8562 	beq.w	80096a6 <_dtoa_r+0xb96>
 8008be2:	4b86      	ldr	r3, [pc, #536]	; (8008dfc <_dtoa_r+0x2ec>)
 8008be4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008be6:	6013      	str	r3, [r2, #0]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	e7de      	b.n	8008bac <_dtoa_r+0x9c>
 8008bee:	ab16      	add	r3, sp, #88	; 0x58
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	ab17      	add	r3, sp, #92	; 0x5c
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008bfc:	f001 fda8 	bl	800a750 <__d2b>
 8008c00:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008c04:	4682      	mov	sl, r0
 8008c06:	2c00      	cmp	r4, #0
 8008c08:	d07e      	beq.n	8008d08 <_dtoa_r+0x1f8>
 8008c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c18:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c20:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008c24:	4619      	mov	r1, r3
 8008c26:	2200      	movs	r2, #0
 8008c28:	4b75      	ldr	r3, [pc, #468]	; (8008e00 <_dtoa_r+0x2f0>)
 8008c2a:	f7f7 fa9d 	bl	8000168 <__aeabi_dsub>
 8008c2e:	a368      	add	r3, pc, #416	; (adr r3, 8008dd0 <_dtoa_r+0x2c0>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fc50 	bl	80004d8 <__aeabi_dmul>
 8008c38:	a367      	add	r3, pc, #412	; (adr r3, 8008dd8 <_dtoa_r+0x2c8>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f7f7 fa95 	bl	800016c <__adddf3>
 8008c42:	4606      	mov	r6, r0
 8008c44:	4620      	mov	r0, r4
 8008c46:	460f      	mov	r7, r1
 8008c48:	f7f7 fbdc 	bl	8000404 <__aeabi_i2d>
 8008c4c:	a364      	add	r3, pc, #400	; (adr r3, 8008de0 <_dtoa_r+0x2d0>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f7f7 fc41 	bl	80004d8 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 fa85 	bl	800016c <__adddf3>
 8008c62:	4606      	mov	r6, r0
 8008c64:	460f      	mov	r7, r1
 8008c66:	f7f7 fee7 	bl	8000a38 <__aeabi_d2iz>
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	4683      	mov	fp, r0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 fea2 	bl	80009bc <__aeabi_dcmplt>
 8008c78:	b148      	cbz	r0, 8008c8e <_dtoa_r+0x17e>
 8008c7a:	4658      	mov	r0, fp
 8008c7c:	f7f7 fbc2 	bl	8000404 <__aeabi_i2d>
 8008c80:	4632      	mov	r2, r6
 8008c82:	463b      	mov	r3, r7
 8008c84:	f7f7 fe90 	bl	80009a8 <__aeabi_dcmpeq>
 8008c88:	b908      	cbnz	r0, 8008c8e <_dtoa_r+0x17e>
 8008c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c8e:	f1bb 0f16 	cmp.w	fp, #22
 8008c92:	d857      	bhi.n	8008d44 <_dtoa_r+0x234>
 8008c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c98:	4b5a      	ldr	r3, [pc, #360]	; (8008e04 <_dtoa_r+0x2f4>)
 8008c9a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 fe8b 	bl	80009bc <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d04e      	beq.n	8008d48 <_dtoa_r+0x238>
 8008caa:	2300      	movs	r3, #0
 8008cac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008cb4:	1b1b      	subs	r3, r3, r4
 8008cb6:	1e5a      	subs	r2, r3, #1
 8008cb8:	bf46      	itte	mi
 8008cba:	f1c3 0901 	rsbmi	r9, r3, #1
 8008cbe:	2300      	movmi	r3, #0
 8008cc0:	f04f 0900 	movpl.w	r9, #0
 8008cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc6:	bf48      	it	mi
 8008cc8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008cca:	f1bb 0f00 	cmp.w	fp, #0
 8008cce:	db3d      	blt.n	8008d4c <_dtoa_r+0x23c>
 8008cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008cd6:	445b      	add	r3, fp
 8008cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cda:	2300      	movs	r3, #0
 8008cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8008cde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ce0:	2b09      	cmp	r3, #9
 8008ce2:	d867      	bhi.n	8008db4 <_dtoa_r+0x2a4>
 8008ce4:	2b05      	cmp	r3, #5
 8008ce6:	bfc4      	itt	gt
 8008ce8:	3b04      	subgt	r3, #4
 8008cea:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cee:	bfc8      	it	gt
 8008cf0:	2400      	movgt	r4, #0
 8008cf2:	f1a3 0302 	sub.w	r3, r3, #2
 8008cf6:	bfd8      	it	le
 8008cf8:	2401      	movle	r4, #1
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	f200 8086 	bhi.w	8008e0c <_dtoa_r+0x2fc>
 8008d00:	e8df f003 	tbb	[pc, r3]
 8008d04:	5637392c 	.word	0x5637392c
 8008d08:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008d0c:	441c      	add	r4, r3
 8008d0e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	bfc1      	itttt	gt
 8008d16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d1a:	fa09 f903 	lslgt.w	r9, r9, r3
 8008d1e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008d22:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d26:	bfd6      	itet	le
 8008d28:	f1c3 0320 	rsble	r3, r3, #32
 8008d2c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008d30:	fa06 f003 	lslle.w	r0, r6, r3
 8008d34:	f7f7 fb56 	bl	80003e4 <__aeabi_ui2d>
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d3e:	3c01      	subs	r4, #1
 8008d40:	9213      	str	r2, [sp, #76]	; 0x4c
 8008d42:	e76f      	b.n	8008c24 <_dtoa_r+0x114>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e7b3      	b.n	8008cb0 <_dtoa_r+0x1a0>
 8008d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8008d4a:	e7b2      	b.n	8008cb2 <_dtoa_r+0x1a2>
 8008d4c:	f1cb 0300 	rsb	r3, fp, #0
 8008d50:	930a      	str	r3, [sp, #40]	; 0x28
 8008d52:	2300      	movs	r3, #0
 8008d54:	eba9 090b 	sub.w	r9, r9, fp
 8008d58:	930e      	str	r3, [sp, #56]	; 0x38
 8008d5a:	e7c0      	b.n	8008cde <_dtoa_r+0x1ce>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	dc55      	bgt.n	8008e12 <_dtoa_r+0x302>
 8008d66:	2301      	movs	r3, #1
 8008d68:	461a      	mov	r2, r3
 8008d6a:	9306      	str	r3, [sp, #24]
 8008d6c:	9308      	str	r3, [sp, #32]
 8008d6e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008d70:	e00b      	b.n	8008d8a <_dtoa_r+0x27a>
 8008d72:	2301      	movs	r3, #1
 8008d74:	e7f3      	b.n	8008d5e <_dtoa_r+0x24e>
 8008d76:	2300      	movs	r3, #0
 8008d78:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d7c:	445b      	add	r3, fp
 8008d7e:	9306      	str	r3, [sp, #24]
 8008d80:	3301      	adds	r3, #1
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	9308      	str	r3, [sp, #32]
 8008d86:	bfb8      	it	lt
 8008d88:	2301      	movlt	r3, #1
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	69e8      	ldr	r0, [r5, #28]
 8008d90:	f102 0614 	add.w	r6, r2, #20
 8008d94:	429e      	cmp	r6, r3
 8008d96:	d940      	bls.n	8008e1a <_dtoa_r+0x30a>
 8008d98:	6041      	str	r1, [r0, #4]
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f001 f904 	bl	8009fa8 <_Balloc>
 8008da0:	9003      	str	r0, [sp, #12]
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d13c      	bne.n	8008e20 <_dtoa_r+0x310>
 8008da6:	4602      	mov	r2, r0
 8008da8:	f240 11af 	movw	r1, #431	; 0x1af
 8008dac:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <_dtoa_r+0x2f8>)
 8008dae:	e6c3      	b.n	8008b38 <_dtoa_r+0x28>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e7e1      	b.n	8008d78 <_dtoa_r+0x268>
 8008db4:	2401      	movs	r4, #1
 8008db6:	2300      	movs	r3, #0
 8008db8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008dba:	9322      	str	r3, [sp, #136]	; 0x88
 8008dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	9306      	str	r3, [sp, #24]
 8008dc4:	9308      	str	r3, [sp, #32]
 8008dc6:	2312      	movs	r3, #18
 8008dc8:	e7d1      	b.n	8008d6e <_dtoa_r+0x25e>
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	636f4361 	.word	0x636f4361
 8008dd4:	3fd287a7 	.word	0x3fd287a7
 8008dd8:	8b60c8b3 	.word	0x8b60c8b3
 8008ddc:	3fc68a28 	.word	0x3fc68a28
 8008de0:	509f79fb 	.word	0x509f79fb
 8008de4:	3fd34413 	.word	0x3fd34413
 8008de8:	0800b546 	.word	0x0800b546
 8008dec:	0800b55d 	.word	0x0800b55d
 8008df0:	7ff00000 	.word	0x7ff00000
 8008df4:	0800b542 	.word	0x0800b542
 8008df8:	0800b539 	.word	0x0800b539
 8008dfc:	0800b509 	.word	0x0800b509
 8008e00:	3ff80000 	.word	0x3ff80000
 8008e04:	0800b6a8 	.word	0x0800b6a8
 8008e08:	0800b5b5 	.word	0x0800b5b5
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e10:	e7d4      	b.n	8008dbc <_dtoa_r+0x2ac>
 8008e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e14:	9306      	str	r3, [sp, #24]
 8008e16:	9308      	str	r3, [sp, #32]
 8008e18:	e7b7      	b.n	8008d8a <_dtoa_r+0x27a>
 8008e1a:	3101      	adds	r1, #1
 8008e1c:	0052      	lsls	r2, r2, #1
 8008e1e:	e7b7      	b.n	8008d90 <_dtoa_r+0x280>
 8008e20:	69eb      	ldr	r3, [r5, #28]
 8008e22:	9a03      	ldr	r2, [sp, #12]
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	9b08      	ldr	r3, [sp, #32]
 8008e28:	2b0e      	cmp	r3, #14
 8008e2a:	f200 80a8 	bhi.w	8008f7e <_dtoa_r+0x46e>
 8008e2e:	2c00      	cmp	r4, #0
 8008e30:	f000 80a5 	beq.w	8008f7e <_dtoa_r+0x46e>
 8008e34:	f1bb 0f00 	cmp.w	fp, #0
 8008e38:	dd34      	ble.n	8008ea4 <_dtoa_r+0x394>
 8008e3a:	4b9a      	ldr	r3, [pc, #616]	; (80090a4 <_dtoa_r+0x594>)
 8008e3c:	f00b 020f 	and.w	r2, fp, #15
 8008e40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008e50:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008e54:	d016      	beq.n	8008e84 <_dtoa_r+0x374>
 8008e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e5a:	4b93      	ldr	r3, [pc, #588]	; (80090a8 <_dtoa_r+0x598>)
 8008e5c:	2703      	movs	r7, #3
 8008e5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e62:	f7f7 fc63 	bl	800072c <__aeabi_ddiv>
 8008e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e6a:	f004 040f 	and.w	r4, r4, #15
 8008e6e:	4e8e      	ldr	r6, [pc, #568]	; (80090a8 <_dtoa_r+0x598>)
 8008e70:	b954      	cbnz	r4, 8008e88 <_dtoa_r+0x378>
 8008e72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e7a:	f7f7 fc57 	bl	800072c <__aeabi_ddiv>
 8008e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e82:	e029      	b.n	8008ed8 <_dtoa_r+0x3c8>
 8008e84:	2702      	movs	r7, #2
 8008e86:	e7f2      	b.n	8008e6e <_dtoa_r+0x35e>
 8008e88:	07e1      	lsls	r1, r4, #31
 8008e8a:	d508      	bpl.n	8008e9e <_dtoa_r+0x38e>
 8008e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e94:	f7f7 fb20 	bl	80004d8 <__aeabi_dmul>
 8008e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008e9c:	3701      	adds	r7, #1
 8008e9e:	1064      	asrs	r4, r4, #1
 8008ea0:	3608      	adds	r6, #8
 8008ea2:	e7e5      	b.n	8008e70 <_dtoa_r+0x360>
 8008ea4:	f000 80a5 	beq.w	8008ff2 <_dtoa_r+0x4e2>
 8008ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eac:	f1cb 0400 	rsb	r4, fp, #0
 8008eb0:	4b7c      	ldr	r3, [pc, #496]	; (80090a4 <_dtoa_r+0x594>)
 8008eb2:	f004 020f 	and.w	r2, r4, #15
 8008eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fb0b 	bl	80004d8 <__aeabi_dmul>
 8008ec2:	2702      	movs	r7, #2
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eca:	4e77      	ldr	r6, [pc, #476]	; (80090a8 <_dtoa_r+0x598>)
 8008ecc:	1124      	asrs	r4, r4, #4
 8008ece:	2c00      	cmp	r4, #0
 8008ed0:	f040 8084 	bne.w	8008fdc <_dtoa_r+0x4cc>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1d2      	bne.n	8008e7e <_dtoa_r+0x36e>
 8008ed8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008edc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 8087 	beq.w	8008ff6 <_dtoa_r+0x4e6>
 8008ee8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008eec:	2200      	movs	r2, #0
 8008eee:	4b6f      	ldr	r3, [pc, #444]	; (80090ac <_dtoa_r+0x59c>)
 8008ef0:	f7f7 fd64 	bl	80009bc <__aeabi_dcmplt>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d07e      	beq.n	8008ff6 <_dtoa_r+0x4e6>
 8008ef8:	9b08      	ldr	r3, [sp, #32]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d07b      	beq.n	8008ff6 <_dtoa_r+0x4e6>
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	dd38      	ble.n	8008f76 <_dtoa_r+0x466>
 8008f04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4b69      	ldr	r3, [pc, #420]	; (80090b0 <_dtoa_r+0x5a0>)
 8008f0c:	f7f7 fae4 	bl	80004d8 <__aeabi_dmul>
 8008f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f14:	9c06      	ldr	r4, [sp, #24]
 8008f16:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008f1a:	3701      	adds	r7, #1
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7f7 fa71 	bl	8000404 <__aeabi_i2d>
 8008f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f26:	f7f7 fad7 	bl	80004d8 <__aeabi_dmul>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4b61      	ldr	r3, [pc, #388]	; (80090b4 <_dtoa_r+0x5a4>)
 8008f2e:	f7f7 f91d 	bl	800016c <__adddf3>
 8008f32:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f3a:	9611      	str	r6, [sp, #68]	; 0x44
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	d15d      	bne.n	8008ffc <_dtoa_r+0x4ec>
 8008f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f44:	2200      	movs	r2, #0
 8008f46:	4b5c      	ldr	r3, [pc, #368]	; (80090b8 <_dtoa_r+0x5a8>)
 8008f48:	f7f7 f90e 	bl	8000168 <__aeabi_dsub>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f54:	4633      	mov	r3, r6
 8008f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f58:	f7f7 fd4e 	bl	80009f8 <__aeabi_dcmpgt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f040 8295 	bne.w	800948c <_dtoa_r+0x97c>
 8008f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008f6c:	f7f7 fd26 	bl	80009bc <__aeabi_dcmplt>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f040 8289 	bne.w	8009488 <_dtoa_r+0x978>
 8008f76:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f2c0 8151 	blt.w	8009228 <_dtoa_r+0x718>
 8008f86:	f1bb 0f0e 	cmp.w	fp, #14
 8008f8a:	f300 814d 	bgt.w	8009228 <_dtoa_r+0x718>
 8008f8e:	4b45      	ldr	r3, [pc, #276]	; (80090a4 <_dtoa_r+0x594>)
 8008f90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f98:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008f9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f280 80da 	bge.w	8009158 <_dtoa_r+0x648>
 8008fa4:	9b08      	ldr	r3, [sp, #32]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f300 80d6 	bgt.w	8009158 <_dtoa_r+0x648>
 8008fac:	f040 826b 	bne.w	8009486 <_dtoa_r+0x976>
 8008fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4b40      	ldr	r3, [pc, #256]	; (80090b8 <_dtoa_r+0x5a8>)
 8008fb8:	f7f7 fa8e 	bl	80004d8 <__aeabi_dmul>
 8008fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fc0:	f7f7 fd10 	bl	80009e4 <__aeabi_dcmpge>
 8008fc4:	9c08      	ldr	r4, [sp, #32]
 8008fc6:	4626      	mov	r6, r4
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f040 8241 	bne.w	8009450 <_dtoa_r+0x940>
 8008fce:	2331      	movs	r3, #49	; 0x31
 8008fd0:	9f03      	ldr	r7, [sp, #12]
 8008fd2:	f10b 0b01 	add.w	fp, fp, #1
 8008fd6:	f807 3b01 	strb.w	r3, [r7], #1
 8008fda:	e23d      	b.n	8009458 <_dtoa_r+0x948>
 8008fdc:	07e2      	lsls	r2, r4, #31
 8008fde:	d505      	bpl.n	8008fec <_dtoa_r+0x4dc>
 8008fe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fe4:	f7f7 fa78 	bl	80004d8 <__aeabi_dmul>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	3701      	adds	r7, #1
 8008fec:	1064      	asrs	r4, r4, #1
 8008fee:	3608      	adds	r6, #8
 8008ff0:	e76d      	b.n	8008ece <_dtoa_r+0x3be>
 8008ff2:	2702      	movs	r7, #2
 8008ff4:	e770      	b.n	8008ed8 <_dtoa_r+0x3c8>
 8008ff6:	46d8      	mov	r8, fp
 8008ff8:	9c08      	ldr	r4, [sp, #32]
 8008ffa:	e78f      	b.n	8008f1c <_dtoa_r+0x40c>
 8008ffc:	9903      	ldr	r1, [sp, #12]
 8008ffe:	4b29      	ldr	r3, [pc, #164]	; (80090a4 <_dtoa_r+0x594>)
 8009000:	4421      	add	r1, r4
 8009002:	9112      	str	r1, [sp, #72]	; 0x48
 8009004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009006:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800900a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800900e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009012:	2900      	cmp	r1, #0
 8009014:	d054      	beq.n	80090c0 <_dtoa_r+0x5b0>
 8009016:	2000      	movs	r0, #0
 8009018:	4928      	ldr	r1, [pc, #160]	; (80090bc <_dtoa_r+0x5ac>)
 800901a:	f7f7 fb87 	bl	800072c <__aeabi_ddiv>
 800901e:	463b      	mov	r3, r7
 8009020:	4632      	mov	r2, r6
 8009022:	f7f7 f8a1 	bl	8000168 <__aeabi_dsub>
 8009026:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800902a:	9f03      	ldr	r7, [sp, #12]
 800902c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009030:	f7f7 fd02 	bl	8000a38 <__aeabi_d2iz>
 8009034:	4604      	mov	r4, r0
 8009036:	f7f7 f9e5 	bl	8000404 <__aeabi_i2d>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009042:	f7f7 f891 	bl	8000168 <__aeabi_dsub>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	3430      	adds	r4, #48	; 0x30
 800904c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009050:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009054:	f807 4b01 	strb.w	r4, [r7], #1
 8009058:	f7f7 fcb0 	bl	80009bc <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	d173      	bne.n	8009148 <_dtoa_r+0x638>
 8009060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009064:	2000      	movs	r0, #0
 8009066:	4911      	ldr	r1, [pc, #68]	; (80090ac <_dtoa_r+0x59c>)
 8009068:	f7f7 f87e 	bl	8000168 <__aeabi_dsub>
 800906c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009070:	f7f7 fca4 	bl	80009bc <__aeabi_dcmplt>
 8009074:	2800      	cmp	r0, #0
 8009076:	f040 80b6 	bne.w	80091e6 <_dtoa_r+0x6d6>
 800907a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800907c:	429f      	cmp	r7, r3
 800907e:	f43f af7a 	beq.w	8008f76 <_dtoa_r+0x466>
 8009082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009086:	2200      	movs	r2, #0
 8009088:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <_dtoa_r+0x5a0>)
 800908a:	f7f7 fa25 	bl	80004d8 <__aeabi_dmul>
 800908e:	2200      	movs	r2, #0
 8009090:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <_dtoa_r+0x5a0>)
 800909a:	f7f7 fa1d 	bl	80004d8 <__aeabi_dmul>
 800909e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090a2:	e7c3      	b.n	800902c <_dtoa_r+0x51c>
 80090a4:	0800b6a8 	.word	0x0800b6a8
 80090a8:	0800b680 	.word	0x0800b680
 80090ac:	3ff00000 	.word	0x3ff00000
 80090b0:	40240000 	.word	0x40240000
 80090b4:	401c0000 	.word	0x401c0000
 80090b8:	40140000 	.word	0x40140000
 80090bc:	3fe00000 	.word	0x3fe00000
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fa08 	bl	80004d8 <__aeabi_dmul>
 80090c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090ce:	9c03      	ldr	r4, [sp, #12]
 80090d0:	9314      	str	r3, [sp, #80]	; 0x50
 80090d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090d6:	f7f7 fcaf 	bl	8000a38 <__aeabi_d2iz>
 80090da:	9015      	str	r0, [sp, #84]	; 0x54
 80090dc:	f7f7 f992 	bl	8000404 <__aeabi_i2d>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090e8:	f7f7 f83e 	bl	8000168 <__aeabi_dsub>
 80090ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ee:	4606      	mov	r6, r0
 80090f0:	3330      	adds	r3, #48	; 0x30
 80090f2:	f804 3b01 	strb.w	r3, [r4], #1
 80090f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090f8:	460f      	mov	r7, r1
 80090fa:	429c      	cmp	r4, r3
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	d124      	bne.n	800914c <_dtoa_r+0x63c>
 8009102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009106:	4baf      	ldr	r3, [pc, #700]	; (80093c4 <_dtoa_r+0x8b4>)
 8009108:	f7f7 f830 	bl	800016c <__adddf3>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4630      	mov	r0, r6
 8009112:	4639      	mov	r1, r7
 8009114:	f7f7 fc70 	bl	80009f8 <__aeabi_dcmpgt>
 8009118:	2800      	cmp	r0, #0
 800911a:	d163      	bne.n	80091e4 <_dtoa_r+0x6d4>
 800911c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009120:	2000      	movs	r0, #0
 8009122:	49a8      	ldr	r1, [pc, #672]	; (80093c4 <_dtoa_r+0x8b4>)
 8009124:	f7f7 f820 	bl	8000168 <__aeabi_dsub>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4630      	mov	r0, r6
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 fc44 	bl	80009bc <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	f43f af1e 	beq.w	8008f76 <_dtoa_r+0x466>
 800913a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800913c:	1e7b      	subs	r3, r7, #1
 800913e:	9314      	str	r3, [sp, #80]	; 0x50
 8009140:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009144:	2b30      	cmp	r3, #48	; 0x30
 8009146:	d0f8      	beq.n	800913a <_dtoa_r+0x62a>
 8009148:	46c3      	mov	fp, r8
 800914a:	e03b      	b.n	80091c4 <_dtoa_r+0x6b4>
 800914c:	4b9e      	ldr	r3, [pc, #632]	; (80093c8 <_dtoa_r+0x8b8>)
 800914e:	f7f7 f9c3 	bl	80004d8 <__aeabi_dmul>
 8009152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009156:	e7bc      	b.n	80090d2 <_dtoa_r+0x5c2>
 8009158:	9f03      	ldr	r7, [sp, #12]
 800915a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800915e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009162:	4640      	mov	r0, r8
 8009164:	4649      	mov	r1, r9
 8009166:	f7f7 fae1 	bl	800072c <__aeabi_ddiv>
 800916a:	f7f7 fc65 	bl	8000a38 <__aeabi_d2iz>
 800916e:	4604      	mov	r4, r0
 8009170:	f7f7 f948 	bl	8000404 <__aeabi_i2d>
 8009174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009178:	f7f7 f9ae 	bl	80004d8 <__aeabi_dmul>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f6 fff0 	bl	8000168 <__aeabi_dsub>
 8009188:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800918c:	f807 6b01 	strb.w	r6, [r7], #1
 8009190:	9e03      	ldr	r6, [sp, #12]
 8009192:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009196:	1bbe      	subs	r6, r7, r6
 8009198:	45b4      	cmp	ip, r6
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	d136      	bne.n	800920e <_dtoa_r+0x6fe>
 80091a0:	f7f6 ffe4 	bl	800016c <__adddf3>
 80091a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091a8:	4680      	mov	r8, r0
 80091aa:	4689      	mov	r9, r1
 80091ac:	f7f7 fc24 	bl	80009f8 <__aeabi_dcmpgt>
 80091b0:	bb58      	cbnz	r0, 800920a <_dtoa_r+0x6fa>
 80091b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091b6:	4640      	mov	r0, r8
 80091b8:	4649      	mov	r1, r9
 80091ba:	f7f7 fbf5 	bl	80009a8 <__aeabi_dcmpeq>
 80091be:	b108      	cbz	r0, 80091c4 <_dtoa_r+0x6b4>
 80091c0:	07e3      	lsls	r3, r4, #31
 80091c2:	d422      	bmi.n	800920a <_dtoa_r+0x6fa>
 80091c4:	4651      	mov	r1, sl
 80091c6:	4628      	mov	r0, r5
 80091c8:	f000 ff2e 	bl	800a028 <_Bfree>
 80091cc:	2300      	movs	r3, #0
 80091ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80091d0:	703b      	strb	r3, [r7, #0]
 80091d2:	f10b 0301 	add.w	r3, fp, #1
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f43f ace6 	beq.w	8008bac <_dtoa_r+0x9c>
 80091e0:	601f      	str	r7, [r3, #0]
 80091e2:	e4e3      	b.n	8008bac <_dtoa_r+0x9c>
 80091e4:	4627      	mov	r7, r4
 80091e6:	463b      	mov	r3, r7
 80091e8:	461f      	mov	r7, r3
 80091ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ee:	2a39      	cmp	r2, #57	; 0x39
 80091f0:	d107      	bne.n	8009202 <_dtoa_r+0x6f2>
 80091f2:	9a03      	ldr	r2, [sp, #12]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d1f7      	bne.n	80091e8 <_dtoa_r+0x6d8>
 80091f8:	2230      	movs	r2, #48	; 0x30
 80091fa:	9903      	ldr	r1, [sp, #12]
 80091fc:	f108 0801 	add.w	r8, r8, #1
 8009200:	700a      	strb	r2, [r1, #0]
 8009202:	781a      	ldrb	r2, [r3, #0]
 8009204:	3201      	adds	r2, #1
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	e79e      	b.n	8009148 <_dtoa_r+0x638>
 800920a:	46d8      	mov	r8, fp
 800920c:	e7eb      	b.n	80091e6 <_dtoa_r+0x6d6>
 800920e:	2200      	movs	r2, #0
 8009210:	4b6d      	ldr	r3, [pc, #436]	; (80093c8 <_dtoa_r+0x8b8>)
 8009212:	f7f7 f961 	bl	80004d8 <__aeabi_dmul>
 8009216:	2200      	movs	r2, #0
 8009218:	2300      	movs	r3, #0
 800921a:	4680      	mov	r8, r0
 800921c:	4689      	mov	r9, r1
 800921e:	f7f7 fbc3 	bl	80009a8 <__aeabi_dcmpeq>
 8009222:	2800      	cmp	r0, #0
 8009224:	d09b      	beq.n	800915e <_dtoa_r+0x64e>
 8009226:	e7cd      	b.n	80091c4 <_dtoa_r+0x6b4>
 8009228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800922a:	2a00      	cmp	r2, #0
 800922c:	f000 80c4 	beq.w	80093b8 <_dtoa_r+0x8a8>
 8009230:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009232:	2a01      	cmp	r2, #1
 8009234:	f300 80a8 	bgt.w	8009388 <_dtoa_r+0x878>
 8009238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800923a:	2a00      	cmp	r2, #0
 800923c:	f000 80a0 	beq.w	8009380 <_dtoa_r+0x870>
 8009240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009244:	464f      	mov	r7, r9
 8009246:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800924a:	2101      	movs	r1, #1
 800924c:	441a      	add	r2, r3
 800924e:	4628      	mov	r0, r5
 8009250:	4499      	add	r9, r3
 8009252:	9209      	str	r2, [sp, #36]	; 0x24
 8009254:	f000 ffe8 	bl	800a228 <__i2b>
 8009258:	4606      	mov	r6, r0
 800925a:	b15f      	cbz	r7, 8009274 <_dtoa_r+0x764>
 800925c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	dd08      	ble.n	8009274 <_dtoa_r+0x764>
 8009262:	42bb      	cmp	r3, r7
 8009264:	bfa8      	it	ge
 8009266:	463b      	movge	r3, r7
 8009268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800926a:	eba9 0903 	sub.w	r9, r9, r3
 800926e:	1aff      	subs	r7, r7, r3
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	9309      	str	r3, [sp, #36]	; 0x24
 8009274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009276:	b1f3      	cbz	r3, 80092b6 <_dtoa_r+0x7a6>
 8009278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80a0 	beq.w	80093c0 <_dtoa_r+0x8b0>
 8009280:	2c00      	cmp	r4, #0
 8009282:	dd10      	ble.n	80092a6 <_dtoa_r+0x796>
 8009284:	4631      	mov	r1, r6
 8009286:	4622      	mov	r2, r4
 8009288:	4628      	mov	r0, r5
 800928a:	f001 f88b 	bl	800a3a4 <__pow5mult>
 800928e:	4652      	mov	r2, sl
 8009290:	4601      	mov	r1, r0
 8009292:	4606      	mov	r6, r0
 8009294:	4628      	mov	r0, r5
 8009296:	f000 ffdd 	bl	800a254 <__multiply>
 800929a:	4680      	mov	r8, r0
 800929c:	4651      	mov	r1, sl
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 fec2 	bl	800a028 <_Bfree>
 80092a4:	46c2      	mov	sl, r8
 80092a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a8:	1b1a      	subs	r2, r3, r4
 80092aa:	d004      	beq.n	80092b6 <_dtoa_r+0x7a6>
 80092ac:	4651      	mov	r1, sl
 80092ae:	4628      	mov	r0, r5
 80092b0:	f001 f878 	bl	800a3a4 <__pow5mult>
 80092b4:	4682      	mov	sl, r0
 80092b6:	2101      	movs	r1, #1
 80092b8:	4628      	mov	r0, r5
 80092ba:	f000 ffb5 	bl	800a228 <__i2b>
 80092be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c0:	4604      	mov	r4, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f340 8082 	ble.w	80093cc <_dtoa_r+0x8bc>
 80092c8:	461a      	mov	r2, r3
 80092ca:	4601      	mov	r1, r0
 80092cc:	4628      	mov	r0, r5
 80092ce:	f001 f869 	bl	800a3a4 <__pow5mult>
 80092d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092d4:	4604      	mov	r4, r0
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	dd7b      	ble.n	80093d2 <_dtoa_r+0x8c2>
 80092da:	f04f 0800 	mov.w	r8, #0
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092e4:	6918      	ldr	r0, [r3, #16]
 80092e6:	f000 ff51 	bl	800a18c <__hi0bits>
 80092ea:	f1c0 0020 	rsb	r0, r0, #32
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	4418      	add	r0, r3
 80092f2:	f010 001f 	ands.w	r0, r0, #31
 80092f6:	f000 8092 	beq.w	800941e <_dtoa_r+0x90e>
 80092fa:	f1c0 0320 	rsb	r3, r0, #32
 80092fe:	2b04      	cmp	r3, #4
 8009300:	f340 8085 	ble.w	800940e <_dtoa_r+0x8fe>
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	f1c0 001c 	rsb	r0, r0, #28
 800930a:	4403      	add	r3, r0
 800930c:	4481      	add	r9, r0
 800930e:	4407      	add	r7, r0
 8009310:	9309      	str	r3, [sp, #36]	; 0x24
 8009312:	f1b9 0f00 	cmp.w	r9, #0
 8009316:	dd05      	ble.n	8009324 <_dtoa_r+0x814>
 8009318:	4651      	mov	r1, sl
 800931a:	464a      	mov	r2, r9
 800931c:	4628      	mov	r0, r5
 800931e:	f001 f89b 	bl	800a458 <__lshift>
 8009322:	4682      	mov	sl, r0
 8009324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009326:	2b00      	cmp	r3, #0
 8009328:	dd05      	ble.n	8009336 <_dtoa_r+0x826>
 800932a:	4621      	mov	r1, r4
 800932c:	461a      	mov	r2, r3
 800932e:	4628      	mov	r0, r5
 8009330:	f001 f892 	bl	800a458 <__lshift>
 8009334:	4604      	mov	r4, r0
 8009336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009338:	2b00      	cmp	r3, #0
 800933a:	d072      	beq.n	8009422 <_dtoa_r+0x912>
 800933c:	4621      	mov	r1, r4
 800933e:	4650      	mov	r0, sl
 8009340:	f001 f8f6 	bl	800a530 <__mcmp>
 8009344:	2800      	cmp	r0, #0
 8009346:	da6c      	bge.n	8009422 <_dtoa_r+0x912>
 8009348:	2300      	movs	r3, #0
 800934a:	4651      	mov	r1, sl
 800934c:	220a      	movs	r2, #10
 800934e:	4628      	mov	r0, r5
 8009350:	f000 fe8c 	bl	800a06c <__multadd>
 8009354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009356:	4682      	mov	sl, r0
 8009358:	f10b 3bff 	add.w	fp, fp, #4294967295
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 81ac 	beq.w	80096ba <_dtoa_r+0xbaa>
 8009362:	2300      	movs	r3, #0
 8009364:	4631      	mov	r1, r6
 8009366:	220a      	movs	r2, #10
 8009368:	4628      	mov	r0, r5
 800936a:	f000 fe7f 	bl	800a06c <__multadd>
 800936e:	9b06      	ldr	r3, [sp, #24]
 8009370:	4606      	mov	r6, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	f300 8093 	bgt.w	800949e <_dtoa_r+0x98e>
 8009378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800937a:	2b02      	cmp	r3, #2
 800937c:	dc59      	bgt.n	8009432 <_dtoa_r+0x922>
 800937e:	e08e      	b.n	800949e <_dtoa_r+0x98e>
 8009380:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009382:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009386:	e75d      	b.n	8009244 <_dtoa_r+0x734>
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	1e5c      	subs	r4, r3, #1
 800938c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938e:	42a3      	cmp	r3, r4
 8009390:	bfbf      	itttt	lt
 8009392:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009394:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009396:	1ae3      	sublt	r3, r4, r3
 8009398:	18d2      	addlt	r2, r2, r3
 800939a:	bfa8      	it	ge
 800939c:	1b1c      	subge	r4, r3, r4
 800939e:	9b08      	ldr	r3, [sp, #32]
 80093a0:	bfbe      	ittt	lt
 80093a2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80093a4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80093a6:	2400      	movlt	r4, #0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bfb5      	itete	lt
 80093ac:	eba9 0703 	sublt.w	r7, r9, r3
 80093b0:	464f      	movge	r7, r9
 80093b2:	2300      	movlt	r3, #0
 80093b4:	9b08      	ldrge	r3, [sp, #32]
 80093b6:	e747      	b.n	8009248 <_dtoa_r+0x738>
 80093b8:	464f      	mov	r7, r9
 80093ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80093bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80093be:	e74c      	b.n	800925a <_dtoa_r+0x74a>
 80093c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c2:	e773      	b.n	80092ac <_dtoa_r+0x79c>
 80093c4:	3fe00000 	.word	0x3fe00000
 80093c8:	40240000 	.word	0x40240000
 80093cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	dc18      	bgt.n	8009404 <_dtoa_r+0x8f4>
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	b9b3      	cbnz	r3, 8009404 <_dtoa_r+0x8f4>
 80093d6:	9b05      	ldr	r3, [sp, #20]
 80093d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093dc:	b993      	cbnz	r3, 8009404 <_dtoa_r+0x8f4>
 80093de:	9b05      	ldr	r3, [sp, #20]
 80093e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e4:	0d1b      	lsrs	r3, r3, #20
 80093e6:	051b      	lsls	r3, r3, #20
 80093e8:	b17b      	cbz	r3, 800940a <_dtoa_r+0x8fa>
 80093ea:	f04f 0801 	mov.w	r8, #1
 80093ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f0:	f109 0901 	add.w	r9, r9, #1
 80093f4:	3301      	adds	r3, #1
 80093f6:	9309      	str	r3, [sp, #36]	; 0x24
 80093f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f47f af6f 	bne.w	80092de <_dtoa_r+0x7ce>
 8009400:	2001      	movs	r0, #1
 8009402:	e774      	b.n	80092ee <_dtoa_r+0x7de>
 8009404:	f04f 0800 	mov.w	r8, #0
 8009408:	e7f6      	b.n	80093f8 <_dtoa_r+0x8e8>
 800940a:	4698      	mov	r8, r3
 800940c:	e7f4      	b.n	80093f8 <_dtoa_r+0x8e8>
 800940e:	d080      	beq.n	8009312 <_dtoa_r+0x802>
 8009410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009412:	331c      	adds	r3, #28
 8009414:	441a      	add	r2, r3
 8009416:	4499      	add	r9, r3
 8009418:	441f      	add	r7, r3
 800941a:	9209      	str	r2, [sp, #36]	; 0x24
 800941c:	e779      	b.n	8009312 <_dtoa_r+0x802>
 800941e:	4603      	mov	r3, r0
 8009420:	e7f6      	b.n	8009410 <_dtoa_r+0x900>
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	2b00      	cmp	r3, #0
 8009426:	dc34      	bgt.n	8009492 <_dtoa_r+0x982>
 8009428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800942a:	2b02      	cmp	r3, #2
 800942c:	dd31      	ble.n	8009492 <_dtoa_r+0x982>
 800942e:	9b08      	ldr	r3, [sp, #32]
 8009430:	9306      	str	r3, [sp, #24]
 8009432:	9b06      	ldr	r3, [sp, #24]
 8009434:	b963      	cbnz	r3, 8009450 <_dtoa_r+0x940>
 8009436:	4621      	mov	r1, r4
 8009438:	2205      	movs	r2, #5
 800943a:	4628      	mov	r0, r5
 800943c:	f000 fe16 	bl	800a06c <__multadd>
 8009440:	4601      	mov	r1, r0
 8009442:	4604      	mov	r4, r0
 8009444:	4650      	mov	r0, sl
 8009446:	f001 f873 	bl	800a530 <__mcmp>
 800944a:	2800      	cmp	r0, #0
 800944c:	f73f adbf 	bgt.w	8008fce <_dtoa_r+0x4be>
 8009450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009452:	9f03      	ldr	r7, [sp, #12]
 8009454:	ea6f 0b03 	mvn.w	fp, r3
 8009458:	f04f 0800 	mov.w	r8, #0
 800945c:	4621      	mov	r1, r4
 800945e:	4628      	mov	r0, r5
 8009460:	f000 fde2 	bl	800a028 <_Bfree>
 8009464:	2e00      	cmp	r6, #0
 8009466:	f43f aead 	beq.w	80091c4 <_dtoa_r+0x6b4>
 800946a:	f1b8 0f00 	cmp.w	r8, #0
 800946e:	d005      	beq.n	800947c <_dtoa_r+0x96c>
 8009470:	45b0      	cmp	r8, r6
 8009472:	d003      	beq.n	800947c <_dtoa_r+0x96c>
 8009474:	4641      	mov	r1, r8
 8009476:	4628      	mov	r0, r5
 8009478:	f000 fdd6 	bl	800a028 <_Bfree>
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	f000 fdd2 	bl	800a028 <_Bfree>
 8009484:	e69e      	b.n	80091c4 <_dtoa_r+0x6b4>
 8009486:	2400      	movs	r4, #0
 8009488:	4626      	mov	r6, r4
 800948a:	e7e1      	b.n	8009450 <_dtoa_r+0x940>
 800948c:	46c3      	mov	fp, r8
 800948e:	4626      	mov	r6, r4
 8009490:	e59d      	b.n	8008fce <_dtoa_r+0x4be>
 8009492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80c8 	beq.w	800962a <_dtoa_r+0xb1a>
 800949a:	9b08      	ldr	r3, [sp, #32]
 800949c:	9306      	str	r3, [sp, #24]
 800949e:	2f00      	cmp	r7, #0
 80094a0:	dd05      	ble.n	80094ae <_dtoa_r+0x99e>
 80094a2:	4631      	mov	r1, r6
 80094a4:	463a      	mov	r2, r7
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 ffd6 	bl	800a458 <__lshift>
 80094ac:	4606      	mov	r6, r0
 80094ae:	f1b8 0f00 	cmp.w	r8, #0
 80094b2:	d05b      	beq.n	800956c <_dtoa_r+0xa5c>
 80094b4:	4628      	mov	r0, r5
 80094b6:	6871      	ldr	r1, [r6, #4]
 80094b8:	f000 fd76 	bl	8009fa8 <_Balloc>
 80094bc:	4607      	mov	r7, r0
 80094be:	b928      	cbnz	r0, 80094cc <_dtoa_r+0x9bc>
 80094c0:	4602      	mov	r2, r0
 80094c2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80094c6:	4b81      	ldr	r3, [pc, #516]	; (80096cc <_dtoa_r+0xbbc>)
 80094c8:	f7ff bb36 	b.w	8008b38 <_dtoa_r+0x28>
 80094cc:	6932      	ldr	r2, [r6, #16]
 80094ce:	f106 010c 	add.w	r1, r6, #12
 80094d2:	3202      	adds	r2, #2
 80094d4:	0092      	lsls	r2, r2, #2
 80094d6:	300c      	adds	r0, #12
 80094d8:	f7ff fa78 	bl	80089cc <memcpy>
 80094dc:	2201      	movs	r2, #1
 80094de:	4639      	mov	r1, r7
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 ffb9 	bl	800a458 <__lshift>
 80094e6:	46b0      	mov	r8, r6
 80094e8:	4606      	mov	r6, r0
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	9a03      	ldr	r2, [sp, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	9308      	str	r3, [sp, #32]
 80094f2:	9b06      	ldr	r3, [sp, #24]
 80094f4:	4413      	add	r3, r2
 80094f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009500:	9b08      	ldr	r3, [sp, #32]
 8009502:	4621      	mov	r1, r4
 8009504:	3b01      	subs	r3, #1
 8009506:	4650      	mov	r0, sl
 8009508:	9304      	str	r3, [sp, #16]
 800950a:	f7ff fa77 	bl	80089fc <quorem>
 800950e:	4641      	mov	r1, r8
 8009510:	9006      	str	r0, [sp, #24]
 8009512:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009516:	4650      	mov	r0, sl
 8009518:	f001 f80a 	bl	800a530 <__mcmp>
 800951c:	4632      	mov	r2, r6
 800951e:	9009      	str	r0, [sp, #36]	; 0x24
 8009520:	4621      	mov	r1, r4
 8009522:	4628      	mov	r0, r5
 8009524:	f001 f820 	bl	800a568 <__mdiff>
 8009528:	68c2      	ldr	r2, [r0, #12]
 800952a:	4607      	mov	r7, r0
 800952c:	bb02      	cbnz	r2, 8009570 <_dtoa_r+0xa60>
 800952e:	4601      	mov	r1, r0
 8009530:	4650      	mov	r0, sl
 8009532:	f000 fffd 	bl	800a530 <__mcmp>
 8009536:	4602      	mov	r2, r0
 8009538:	4639      	mov	r1, r7
 800953a:	4628      	mov	r0, r5
 800953c:	920c      	str	r2, [sp, #48]	; 0x30
 800953e:	f000 fd73 	bl	800a028 <_Bfree>
 8009542:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009546:	9f08      	ldr	r7, [sp, #32]
 8009548:	ea43 0102 	orr.w	r1, r3, r2
 800954c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800954e:	4319      	orrs	r1, r3
 8009550:	d110      	bne.n	8009574 <_dtoa_r+0xa64>
 8009552:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009556:	d029      	beq.n	80095ac <_dtoa_r+0xa9c>
 8009558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd02      	ble.n	8009564 <_dtoa_r+0xa54>
 800955e:	9b06      	ldr	r3, [sp, #24]
 8009560:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009564:	9b04      	ldr	r3, [sp, #16]
 8009566:	f883 9000 	strb.w	r9, [r3]
 800956a:	e777      	b.n	800945c <_dtoa_r+0x94c>
 800956c:	4630      	mov	r0, r6
 800956e:	e7ba      	b.n	80094e6 <_dtoa_r+0x9d6>
 8009570:	2201      	movs	r2, #1
 8009572:	e7e1      	b.n	8009538 <_dtoa_r+0xa28>
 8009574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	db04      	blt.n	8009584 <_dtoa_r+0xa74>
 800957a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800957c:	430b      	orrs	r3, r1
 800957e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009580:	430b      	orrs	r3, r1
 8009582:	d120      	bne.n	80095c6 <_dtoa_r+0xab6>
 8009584:	2a00      	cmp	r2, #0
 8009586:	dded      	ble.n	8009564 <_dtoa_r+0xa54>
 8009588:	4651      	mov	r1, sl
 800958a:	2201      	movs	r2, #1
 800958c:	4628      	mov	r0, r5
 800958e:	f000 ff63 	bl	800a458 <__lshift>
 8009592:	4621      	mov	r1, r4
 8009594:	4682      	mov	sl, r0
 8009596:	f000 ffcb 	bl	800a530 <__mcmp>
 800959a:	2800      	cmp	r0, #0
 800959c:	dc03      	bgt.n	80095a6 <_dtoa_r+0xa96>
 800959e:	d1e1      	bne.n	8009564 <_dtoa_r+0xa54>
 80095a0:	f019 0f01 	tst.w	r9, #1
 80095a4:	d0de      	beq.n	8009564 <_dtoa_r+0xa54>
 80095a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095aa:	d1d8      	bne.n	800955e <_dtoa_r+0xa4e>
 80095ac:	2339      	movs	r3, #57	; 0x39
 80095ae:	9a04      	ldr	r2, [sp, #16]
 80095b0:	7013      	strb	r3, [r2, #0]
 80095b2:	463b      	mov	r3, r7
 80095b4:	461f      	mov	r7, r3
 80095b6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	2a39      	cmp	r2, #57	; 0x39
 80095be:	d06b      	beq.n	8009698 <_dtoa_r+0xb88>
 80095c0:	3201      	adds	r2, #1
 80095c2:	701a      	strb	r2, [r3, #0]
 80095c4:	e74a      	b.n	800945c <_dtoa_r+0x94c>
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	dd07      	ble.n	80095da <_dtoa_r+0xaca>
 80095ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095ce:	d0ed      	beq.n	80095ac <_dtoa_r+0xa9c>
 80095d0:	9a04      	ldr	r2, [sp, #16]
 80095d2:	f109 0301 	add.w	r3, r9, #1
 80095d6:	7013      	strb	r3, [r2, #0]
 80095d8:	e740      	b.n	800945c <_dtoa_r+0x94c>
 80095da:	9b08      	ldr	r3, [sp, #32]
 80095dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095de:	f803 9c01 	strb.w	r9, [r3, #-1]
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d042      	beq.n	800966c <_dtoa_r+0xb5c>
 80095e6:	4651      	mov	r1, sl
 80095e8:	2300      	movs	r3, #0
 80095ea:	220a      	movs	r2, #10
 80095ec:	4628      	mov	r0, r5
 80095ee:	f000 fd3d 	bl	800a06c <__multadd>
 80095f2:	45b0      	cmp	r8, r6
 80095f4:	4682      	mov	sl, r0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	f04f 020a 	mov.w	r2, #10
 80095fe:	4641      	mov	r1, r8
 8009600:	4628      	mov	r0, r5
 8009602:	d107      	bne.n	8009614 <_dtoa_r+0xb04>
 8009604:	f000 fd32 	bl	800a06c <__multadd>
 8009608:	4680      	mov	r8, r0
 800960a:	4606      	mov	r6, r0
 800960c:	9b08      	ldr	r3, [sp, #32]
 800960e:	3301      	adds	r3, #1
 8009610:	9308      	str	r3, [sp, #32]
 8009612:	e775      	b.n	8009500 <_dtoa_r+0x9f0>
 8009614:	f000 fd2a 	bl	800a06c <__multadd>
 8009618:	4631      	mov	r1, r6
 800961a:	4680      	mov	r8, r0
 800961c:	2300      	movs	r3, #0
 800961e:	220a      	movs	r2, #10
 8009620:	4628      	mov	r0, r5
 8009622:	f000 fd23 	bl	800a06c <__multadd>
 8009626:	4606      	mov	r6, r0
 8009628:	e7f0      	b.n	800960c <_dtoa_r+0xafc>
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	9306      	str	r3, [sp, #24]
 800962e:	9f03      	ldr	r7, [sp, #12]
 8009630:	4621      	mov	r1, r4
 8009632:	4650      	mov	r0, sl
 8009634:	f7ff f9e2 	bl	80089fc <quorem>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800963e:	f807 9b01 	strb.w	r9, [r7], #1
 8009642:	1afa      	subs	r2, r7, r3
 8009644:	9b06      	ldr	r3, [sp, #24]
 8009646:	4293      	cmp	r3, r2
 8009648:	dd07      	ble.n	800965a <_dtoa_r+0xb4a>
 800964a:	4651      	mov	r1, sl
 800964c:	2300      	movs	r3, #0
 800964e:	220a      	movs	r2, #10
 8009650:	4628      	mov	r0, r5
 8009652:	f000 fd0b 	bl	800a06c <__multadd>
 8009656:	4682      	mov	sl, r0
 8009658:	e7ea      	b.n	8009630 <_dtoa_r+0xb20>
 800965a:	9b06      	ldr	r3, [sp, #24]
 800965c:	f04f 0800 	mov.w	r8, #0
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfcc      	ite	gt
 8009664:	461f      	movgt	r7, r3
 8009666:	2701      	movle	r7, #1
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	441f      	add	r7, r3
 800966c:	4651      	mov	r1, sl
 800966e:	2201      	movs	r2, #1
 8009670:	4628      	mov	r0, r5
 8009672:	f000 fef1 	bl	800a458 <__lshift>
 8009676:	4621      	mov	r1, r4
 8009678:	4682      	mov	sl, r0
 800967a:	f000 ff59 	bl	800a530 <__mcmp>
 800967e:	2800      	cmp	r0, #0
 8009680:	dc97      	bgt.n	80095b2 <_dtoa_r+0xaa2>
 8009682:	d102      	bne.n	800968a <_dtoa_r+0xb7a>
 8009684:	f019 0f01 	tst.w	r9, #1
 8009688:	d193      	bne.n	80095b2 <_dtoa_r+0xaa2>
 800968a:	463b      	mov	r3, r7
 800968c:	461f      	mov	r7, r3
 800968e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009692:	2a30      	cmp	r2, #48	; 0x30
 8009694:	d0fa      	beq.n	800968c <_dtoa_r+0xb7c>
 8009696:	e6e1      	b.n	800945c <_dtoa_r+0x94c>
 8009698:	9a03      	ldr	r2, [sp, #12]
 800969a:	429a      	cmp	r2, r3
 800969c:	d18a      	bne.n	80095b4 <_dtoa_r+0xaa4>
 800969e:	2331      	movs	r3, #49	; 0x31
 80096a0:	f10b 0b01 	add.w	fp, fp, #1
 80096a4:	e797      	b.n	80095d6 <_dtoa_r+0xac6>
 80096a6:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <_dtoa_r+0xbc0>)
 80096a8:	f7ff ba9f 	b.w	8008bea <_dtoa_r+0xda>
 80096ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f aa77 	bne.w	8008ba2 <_dtoa_r+0x92>
 80096b4:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <_dtoa_r+0xbc4>)
 80096b6:	f7ff ba98 	b.w	8008bea <_dtoa_r+0xda>
 80096ba:	9b06      	ldr	r3, [sp, #24]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	dcb6      	bgt.n	800962e <_dtoa_r+0xb1e>
 80096c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	f73f aeb5 	bgt.w	8009432 <_dtoa_r+0x922>
 80096c8:	e7b1      	b.n	800962e <_dtoa_r+0xb1e>
 80096ca:	bf00      	nop
 80096cc:	0800b5b5 	.word	0x0800b5b5
 80096d0:	0800b508 	.word	0x0800b508
 80096d4:	0800b539 	.word	0x0800b539

080096d8 <_free_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4605      	mov	r5, r0
 80096dc:	2900      	cmp	r1, #0
 80096de:	d040      	beq.n	8009762 <_free_r+0x8a>
 80096e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e4:	1f0c      	subs	r4, r1, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfb8      	it	lt
 80096ea:	18e4      	addlt	r4, r4, r3
 80096ec:	f000 fc50 	bl	8009f90 <__malloc_lock>
 80096f0:	4a1c      	ldr	r2, [pc, #112]	; (8009764 <_free_r+0x8c>)
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	b933      	cbnz	r3, 8009704 <_free_r+0x2c>
 80096f6:	6063      	str	r3, [r4, #4]
 80096f8:	6014      	str	r4, [r2, #0]
 80096fa:	4628      	mov	r0, r5
 80096fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009700:	f000 bc4c 	b.w	8009f9c <__malloc_unlock>
 8009704:	42a3      	cmp	r3, r4
 8009706:	d908      	bls.n	800971a <_free_r+0x42>
 8009708:	6820      	ldr	r0, [r4, #0]
 800970a:	1821      	adds	r1, r4, r0
 800970c:	428b      	cmp	r3, r1
 800970e:	bf01      	itttt	eq
 8009710:	6819      	ldreq	r1, [r3, #0]
 8009712:	685b      	ldreq	r3, [r3, #4]
 8009714:	1809      	addeq	r1, r1, r0
 8009716:	6021      	streq	r1, [r4, #0]
 8009718:	e7ed      	b.n	80096f6 <_free_r+0x1e>
 800971a:	461a      	mov	r2, r3
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	b10b      	cbz	r3, 8009724 <_free_r+0x4c>
 8009720:	42a3      	cmp	r3, r4
 8009722:	d9fa      	bls.n	800971a <_free_r+0x42>
 8009724:	6811      	ldr	r1, [r2, #0]
 8009726:	1850      	adds	r0, r2, r1
 8009728:	42a0      	cmp	r0, r4
 800972a:	d10b      	bne.n	8009744 <_free_r+0x6c>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	4401      	add	r1, r0
 8009730:	1850      	adds	r0, r2, r1
 8009732:	4283      	cmp	r3, r0
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	d1e0      	bne.n	80096fa <_free_r+0x22>
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	4408      	add	r0, r1
 800973e:	6010      	str	r0, [r2, #0]
 8009740:	6053      	str	r3, [r2, #4]
 8009742:	e7da      	b.n	80096fa <_free_r+0x22>
 8009744:	d902      	bls.n	800974c <_free_r+0x74>
 8009746:	230c      	movs	r3, #12
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	e7d6      	b.n	80096fa <_free_r+0x22>
 800974c:	6820      	ldr	r0, [r4, #0]
 800974e:	1821      	adds	r1, r4, r0
 8009750:	428b      	cmp	r3, r1
 8009752:	bf01      	itttt	eq
 8009754:	6819      	ldreq	r1, [r3, #0]
 8009756:	685b      	ldreq	r3, [r3, #4]
 8009758:	1809      	addeq	r1, r1, r0
 800975a:	6021      	streq	r1, [r4, #0]
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	6054      	str	r4, [r2, #4]
 8009760:	e7cb      	b.n	80096fa <_free_r+0x22>
 8009762:	bd38      	pop	{r3, r4, r5, pc}
 8009764:	200005fc 	.word	0x200005fc

08009768 <rshift>:
 8009768:	6903      	ldr	r3, [r0, #16]
 800976a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800976e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009772:	f100 0414 	add.w	r4, r0, #20
 8009776:	ea4f 1261 	mov.w	r2, r1, asr #5
 800977a:	dd46      	ble.n	800980a <rshift+0xa2>
 800977c:	f011 011f 	ands.w	r1, r1, #31
 8009780:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009784:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009788:	d10c      	bne.n	80097a4 <rshift+0x3c>
 800978a:	4629      	mov	r1, r5
 800978c:	f100 0710 	add.w	r7, r0, #16
 8009790:	42b1      	cmp	r1, r6
 8009792:	d335      	bcc.n	8009800 <rshift+0x98>
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	1eea      	subs	r2, r5, #3
 800979a:	4296      	cmp	r6, r2
 800979c:	bf38      	it	cc
 800979e:	2300      	movcc	r3, #0
 80097a0:	4423      	add	r3, r4
 80097a2:	e015      	b.n	80097d0 <rshift+0x68>
 80097a4:	46a1      	mov	r9, r4
 80097a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80097aa:	f1c1 0820 	rsb	r8, r1, #32
 80097ae:	40cf      	lsrs	r7, r1
 80097b0:	f105 0e04 	add.w	lr, r5, #4
 80097b4:	4576      	cmp	r6, lr
 80097b6:	46f4      	mov	ip, lr
 80097b8:	d816      	bhi.n	80097e8 <rshift+0x80>
 80097ba:	1a9a      	subs	r2, r3, r2
 80097bc:	0092      	lsls	r2, r2, #2
 80097be:	3a04      	subs	r2, #4
 80097c0:	3501      	adds	r5, #1
 80097c2:	42ae      	cmp	r6, r5
 80097c4:	bf38      	it	cc
 80097c6:	2200      	movcc	r2, #0
 80097c8:	18a3      	adds	r3, r4, r2
 80097ca:	50a7      	str	r7, [r4, r2]
 80097cc:	b107      	cbz	r7, 80097d0 <rshift+0x68>
 80097ce:	3304      	adds	r3, #4
 80097d0:	42a3      	cmp	r3, r4
 80097d2:	eba3 0204 	sub.w	r2, r3, r4
 80097d6:	bf08      	it	eq
 80097d8:	2300      	moveq	r3, #0
 80097da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097de:	6102      	str	r2, [r0, #16]
 80097e0:	bf08      	it	eq
 80097e2:	6143      	streq	r3, [r0, #20]
 80097e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097e8:	f8dc c000 	ldr.w	ip, [ip]
 80097ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80097f0:	ea4c 0707 	orr.w	r7, ip, r7
 80097f4:	f849 7b04 	str.w	r7, [r9], #4
 80097f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097fc:	40cf      	lsrs	r7, r1
 80097fe:	e7d9      	b.n	80097b4 <rshift+0x4c>
 8009800:	f851 cb04 	ldr.w	ip, [r1], #4
 8009804:	f847 cf04 	str.w	ip, [r7, #4]!
 8009808:	e7c2      	b.n	8009790 <rshift+0x28>
 800980a:	4623      	mov	r3, r4
 800980c:	e7e0      	b.n	80097d0 <rshift+0x68>

0800980e <__hexdig_fun>:
 800980e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009812:	2b09      	cmp	r3, #9
 8009814:	d802      	bhi.n	800981c <__hexdig_fun+0xe>
 8009816:	3820      	subs	r0, #32
 8009818:	b2c0      	uxtb	r0, r0
 800981a:	4770      	bx	lr
 800981c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009820:	2b05      	cmp	r3, #5
 8009822:	d801      	bhi.n	8009828 <__hexdig_fun+0x1a>
 8009824:	3847      	subs	r0, #71	; 0x47
 8009826:	e7f7      	b.n	8009818 <__hexdig_fun+0xa>
 8009828:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800982c:	2b05      	cmp	r3, #5
 800982e:	d801      	bhi.n	8009834 <__hexdig_fun+0x26>
 8009830:	3827      	subs	r0, #39	; 0x27
 8009832:	e7f1      	b.n	8009818 <__hexdig_fun+0xa>
 8009834:	2000      	movs	r0, #0
 8009836:	4770      	bx	lr

08009838 <__gethex>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	4681      	mov	r9, r0
 800983e:	468a      	mov	sl, r1
 8009840:	4617      	mov	r7, r2
 8009842:	680a      	ldr	r2, [r1, #0]
 8009844:	b085      	sub	sp, #20
 8009846:	f102 0b02 	add.w	fp, r2, #2
 800984a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800984e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	32fe      	adds	r2, #254	; 0xfe
 8009856:	eb02 030b 	add.w	r3, r2, fp
 800985a:	46d8      	mov	r8, fp
 800985c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009860:	9301      	str	r3, [sp, #4]
 8009862:	2830      	cmp	r0, #48	; 0x30
 8009864:	d0f7      	beq.n	8009856 <__gethex+0x1e>
 8009866:	f7ff ffd2 	bl	800980e <__hexdig_fun>
 800986a:	4604      	mov	r4, r0
 800986c:	2800      	cmp	r0, #0
 800986e:	d138      	bne.n	80098e2 <__gethex+0xaa>
 8009870:	2201      	movs	r2, #1
 8009872:	4640      	mov	r0, r8
 8009874:	49a7      	ldr	r1, [pc, #668]	; (8009b14 <__gethex+0x2dc>)
 8009876:	f7ff f813 	bl	80088a0 <strncmp>
 800987a:	4606      	mov	r6, r0
 800987c:	2800      	cmp	r0, #0
 800987e:	d169      	bne.n	8009954 <__gethex+0x11c>
 8009880:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009884:	465d      	mov	r5, fp
 8009886:	f7ff ffc2 	bl	800980e <__hexdig_fun>
 800988a:	2800      	cmp	r0, #0
 800988c:	d064      	beq.n	8009958 <__gethex+0x120>
 800988e:	465a      	mov	r2, fp
 8009890:	7810      	ldrb	r0, [r2, #0]
 8009892:	4690      	mov	r8, r2
 8009894:	2830      	cmp	r0, #48	; 0x30
 8009896:	f102 0201 	add.w	r2, r2, #1
 800989a:	d0f9      	beq.n	8009890 <__gethex+0x58>
 800989c:	f7ff ffb7 	bl	800980e <__hexdig_fun>
 80098a0:	2301      	movs	r3, #1
 80098a2:	fab0 f480 	clz	r4, r0
 80098a6:	465e      	mov	r6, fp
 80098a8:	0964      	lsrs	r4, r4, #5
 80098aa:	9301      	str	r3, [sp, #4]
 80098ac:	4642      	mov	r2, r8
 80098ae:	4615      	mov	r5, r2
 80098b0:	7828      	ldrb	r0, [r5, #0]
 80098b2:	3201      	adds	r2, #1
 80098b4:	f7ff ffab 	bl	800980e <__hexdig_fun>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d1f8      	bne.n	80098ae <__gethex+0x76>
 80098bc:	2201      	movs	r2, #1
 80098be:	4628      	mov	r0, r5
 80098c0:	4994      	ldr	r1, [pc, #592]	; (8009b14 <__gethex+0x2dc>)
 80098c2:	f7fe ffed 	bl	80088a0 <strncmp>
 80098c6:	b978      	cbnz	r0, 80098e8 <__gethex+0xb0>
 80098c8:	b946      	cbnz	r6, 80098dc <__gethex+0xa4>
 80098ca:	1c6e      	adds	r6, r5, #1
 80098cc:	4632      	mov	r2, r6
 80098ce:	4615      	mov	r5, r2
 80098d0:	7828      	ldrb	r0, [r5, #0]
 80098d2:	3201      	adds	r2, #1
 80098d4:	f7ff ff9b 	bl	800980e <__hexdig_fun>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1f8      	bne.n	80098ce <__gethex+0x96>
 80098dc:	1b73      	subs	r3, r6, r5
 80098de:	009e      	lsls	r6, r3, #2
 80098e0:	e004      	b.n	80098ec <__gethex+0xb4>
 80098e2:	2400      	movs	r4, #0
 80098e4:	4626      	mov	r6, r4
 80098e6:	e7e1      	b.n	80098ac <__gethex+0x74>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	d1f7      	bne.n	80098dc <__gethex+0xa4>
 80098ec:	782b      	ldrb	r3, [r5, #0]
 80098ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098f2:	2b50      	cmp	r3, #80	; 0x50
 80098f4:	d13d      	bne.n	8009972 <__gethex+0x13a>
 80098f6:	786b      	ldrb	r3, [r5, #1]
 80098f8:	2b2b      	cmp	r3, #43	; 0x2b
 80098fa:	d02f      	beq.n	800995c <__gethex+0x124>
 80098fc:	2b2d      	cmp	r3, #45	; 0x2d
 80098fe:	d031      	beq.n	8009964 <__gethex+0x12c>
 8009900:	f04f 0b00 	mov.w	fp, #0
 8009904:	1c69      	adds	r1, r5, #1
 8009906:	7808      	ldrb	r0, [r1, #0]
 8009908:	f7ff ff81 	bl	800980e <__hexdig_fun>
 800990c:	1e42      	subs	r2, r0, #1
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	2a18      	cmp	r2, #24
 8009912:	d82e      	bhi.n	8009972 <__gethex+0x13a>
 8009914:	f1a0 0210 	sub.w	r2, r0, #16
 8009918:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800991c:	f7ff ff77 	bl	800980e <__hexdig_fun>
 8009920:	f100 3cff 	add.w	ip, r0, #4294967295
 8009924:	fa5f fc8c 	uxtb.w	ip, ip
 8009928:	f1bc 0f18 	cmp.w	ip, #24
 800992c:	d91d      	bls.n	800996a <__gethex+0x132>
 800992e:	f1bb 0f00 	cmp.w	fp, #0
 8009932:	d000      	beq.n	8009936 <__gethex+0xfe>
 8009934:	4252      	negs	r2, r2
 8009936:	4416      	add	r6, r2
 8009938:	f8ca 1000 	str.w	r1, [sl]
 800993c:	b1dc      	cbz	r4, 8009976 <__gethex+0x13e>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bf14      	ite	ne
 8009944:	f04f 0800 	movne.w	r8, #0
 8009948:	f04f 0806 	moveq.w	r8, #6
 800994c:	4640      	mov	r0, r8
 800994e:	b005      	add	sp, #20
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009954:	4645      	mov	r5, r8
 8009956:	4626      	mov	r6, r4
 8009958:	2401      	movs	r4, #1
 800995a:	e7c7      	b.n	80098ec <__gethex+0xb4>
 800995c:	f04f 0b00 	mov.w	fp, #0
 8009960:	1ca9      	adds	r1, r5, #2
 8009962:	e7d0      	b.n	8009906 <__gethex+0xce>
 8009964:	f04f 0b01 	mov.w	fp, #1
 8009968:	e7fa      	b.n	8009960 <__gethex+0x128>
 800996a:	230a      	movs	r3, #10
 800996c:	fb03 0002 	mla	r0, r3, r2, r0
 8009970:	e7d0      	b.n	8009914 <__gethex+0xdc>
 8009972:	4629      	mov	r1, r5
 8009974:	e7e0      	b.n	8009938 <__gethex+0x100>
 8009976:	4621      	mov	r1, r4
 8009978:	eba5 0308 	sub.w	r3, r5, r8
 800997c:	3b01      	subs	r3, #1
 800997e:	2b07      	cmp	r3, #7
 8009980:	dc0a      	bgt.n	8009998 <__gethex+0x160>
 8009982:	4648      	mov	r0, r9
 8009984:	f000 fb10 	bl	8009fa8 <_Balloc>
 8009988:	4604      	mov	r4, r0
 800998a:	b940      	cbnz	r0, 800999e <__gethex+0x166>
 800998c:	4602      	mov	r2, r0
 800998e:	21e4      	movs	r1, #228	; 0xe4
 8009990:	4b61      	ldr	r3, [pc, #388]	; (8009b18 <__gethex+0x2e0>)
 8009992:	4862      	ldr	r0, [pc, #392]	; (8009b1c <__gethex+0x2e4>)
 8009994:	f001 fc58 	bl	800b248 <__assert_func>
 8009998:	3101      	adds	r1, #1
 800999a:	105b      	asrs	r3, r3, #1
 800999c:	e7ef      	b.n	800997e <__gethex+0x146>
 800999e:	2300      	movs	r3, #0
 80099a0:	469b      	mov	fp, r3
 80099a2:	f100 0a14 	add.w	sl, r0, #20
 80099a6:	f8cd a004 	str.w	sl, [sp, #4]
 80099aa:	45a8      	cmp	r8, r5
 80099ac:	d344      	bcc.n	8009a38 <__gethex+0x200>
 80099ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099b2:	4658      	mov	r0, fp
 80099b4:	f848 bb04 	str.w	fp, [r8], #4
 80099b8:	eba8 080a 	sub.w	r8, r8, sl
 80099bc:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80099c0:	6122      	str	r2, [r4, #16]
 80099c2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80099c6:	f000 fbe1 	bl	800a18c <__hi0bits>
 80099ca:	683d      	ldr	r5, [r7, #0]
 80099cc:	eba8 0800 	sub.w	r8, r8, r0
 80099d0:	45a8      	cmp	r8, r5
 80099d2:	dd59      	ble.n	8009a88 <__gethex+0x250>
 80099d4:	eba8 0805 	sub.w	r8, r8, r5
 80099d8:	4641      	mov	r1, r8
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 ff5f 	bl	800a89e <__any_on>
 80099e0:	4683      	mov	fp, r0
 80099e2:	b1b8      	cbz	r0, 8009a14 <__gethex+0x1dc>
 80099e4:	f04f 0b01 	mov.w	fp, #1
 80099e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80099ec:	1159      	asrs	r1, r3, #5
 80099ee:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80099f2:	f003 021f 	and.w	r2, r3, #31
 80099f6:	fa0b f202 	lsl.w	r2, fp, r2
 80099fa:	420a      	tst	r2, r1
 80099fc:	d00a      	beq.n	8009a14 <__gethex+0x1dc>
 80099fe:	455b      	cmp	r3, fp
 8009a00:	dd06      	ble.n	8009a10 <__gethex+0x1d8>
 8009a02:	4620      	mov	r0, r4
 8009a04:	f1a8 0102 	sub.w	r1, r8, #2
 8009a08:	f000 ff49 	bl	800a89e <__any_on>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d138      	bne.n	8009a82 <__gethex+0x24a>
 8009a10:	f04f 0b02 	mov.w	fp, #2
 8009a14:	4641      	mov	r1, r8
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7ff fea6 	bl	8009768 <rshift>
 8009a1c:	4446      	add	r6, r8
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	42b3      	cmp	r3, r6
 8009a22:	da41      	bge.n	8009aa8 <__gethex+0x270>
 8009a24:	4621      	mov	r1, r4
 8009a26:	4648      	mov	r0, r9
 8009a28:	f000 fafe 	bl	800a028 <_Bfree>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a30:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	e789      	b.n	800994c <__gethex+0x114>
 8009a38:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009a3c:	2a2e      	cmp	r2, #46	; 0x2e
 8009a3e:	d014      	beq.n	8009a6a <__gethex+0x232>
 8009a40:	2b20      	cmp	r3, #32
 8009a42:	d106      	bne.n	8009a52 <__gethex+0x21a>
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	f843 bb04 	str.w	fp, [r3], #4
 8009a4a:	f04f 0b00 	mov.w	fp, #0
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	465b      	mov	r3, fp
 8009a52:	7828      	ldrb	r0, [r5, #0]
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	f7ff feda 	bl	800980e <__hexdig_fun>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	f000 000f 	and.w	r0, r0, #15
 8009a60:	4098      	lsls	r0, r3
 8009a62:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a66:	3304      	adds	r3, #4
 8009a68:	e79f      	b.n	80099aa <__gethex+0x172>
 8009a6a:	45a8      	cmp	r8, r5
 8009a6c:	d8e8      	bhi.n	8009a40 <__gethex+0x208>
 8009a6e:	2201      	movs	r2, #1
 8009a70:	4628      	mov	r0, r5
 8009a72:	4928      	ldr	r1, [pc, #160]	; (8009b14 <__gethex+0x2dc>)
 8009a74:	9303      	str	r3, [sp, #12]
 8009a76:	f7fe ff13 	bl	80088a0 <strncmp>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d1df      	bne.n	8009a40 <__gethex+0x208>
 8009a80:	e793      	b.n	80099aa <__gethex+0x172>
 8009a82:	f04f 0b03 	mov.w	fp, #3
 8009a86:	e7c5      	b.n	8009a14 <__gethex+0x1dc>
 8009a88:	da0b      	bge.n	8009aa2 <__gethex+0x26a>
 8009a8a:	eba5 0808 	sub.w	r8, r5, r8
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4642      	mov	r2, r8
 8009a92:	4648      	mov	r0, r9
 8009a94:	f000 fce0 	bl	800a458 <__lshift>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	eba6 0608 	sub.w	r6, r6, r8
 8009a9e:	f100 0a14 	add.w	sl, r0, #20
 8009aa2:	f04f 0b00 	mov.w	fp, #0
 8009aa6:	e7ba      	b.n	8009a1e <__gethex+0x1e6>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	42b3      	cmp	r3, r6
 8009aac:	dd74      	ble.n	8009b98 <__gethex+0x360>
 8009aae:	1b9e      	subs	r6, r3, r6
 8009ab0:	42b5      	cmp	r5, r6
 8009ab2:	dc35      	bgt.n	8009b20 <__gethex+0x2e8>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d023      	beq.n	8009b02 <__gethex+0x2ca>
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d025      	beq.n	8009b0a <__gethex+0x2d2>
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d115      	bne.n	8009aee <__gethex+0x2b6>
 8009ac2:	42b5      	cmp	r5, r6
 8009ac4:	d113      	bne.n	8009aee <__gethex+0x2b6>
 8009ac6:	2d01      	cmp	r5, #1
 8009ac8:	d10b      	bne.n	8009ae2 <__gethex+0x2aa>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	9a02      	ldr	r2, [sp, #8]
 8009ace:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	f8ca 3000 	str.w	r3, [sl]
 8009adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ade:	601c      	str	r4, [r3, #0]
 8009ae0:	e734      	b.n	800994c <__gethex+0x114>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	1e69      	subs	r1, r5, #1
 8009ae6:	f000 feda 	bl	800a89e <__any_on>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d1ed      	bne.n	8009aca <__gethex+0x292>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4648      	mov	r0, r9
 8009af2:	f000 fa99 	bl	800a028 <_Bfree>
 8009af6:	2300      	movs	r3, #0
 8009af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009afa:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	e724      	b.n	800994c <__gethex+0x114>
 8009b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1f2      	bne.n	8009aee <__gethex+0x2b6>
 8009b08:	e7df      	b.n	8009aca <__gethex+0x292>
 8009b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1dc      	bne.n	8009aca <__gethex+0x292>
 8009b10:	e7ed      	b.n	8009aee <__gethex+0x2b6>
 8009b12:	bf00      	nop
 8009b14:	0800b4a2 	.word	0x0800b4a2
 8009b18:	0800b5b5 	.word	0x0800b5b5
 8009b1c:	0800b5c6 	.word	0x0800b5c6
 8009b20:	f106 38ff 	add.w	r8, r6, #4294967295
 8009b24:	f1bb 0f00 	cmp.w	fp, #0
 8009b28:	d133      	bne.n	8009b92 <__gethex+0x35a>
 8009b2a:	f1b8 0f00 	cmp.w	r8, #0
 8009b2e:	d004      	beq.n	8009b3a <__gethex+0x302>
 8009b30:	4641      	mov	r1, r8
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 feb3 	bl	800a89e <__any_on>
 8009b38:	4683      	mov	fp, r0
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009b40:	f008 081f 	and.w	r8, r8, #31
 8009b44:	fa03 f308 	lsl.w	r3, r3, r8
 8009b48:	f04f 0802 	mov.w	r8, #2
 8009b4c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b50:	4631      	mov	r1, r6
 8009b52:	4213      	tst	r3, r2
 8009b54:	4620      	mov	r0, r4
 8009b56:	bf18      	it	ne
 8009b58:	f04b 0b02 	orrne.w	fp, fp, #2
 8009b5c:	1bad      	subs	r5, r5, r6
 8009b5e:	f7ff fe03 	bl	8009768 <rshift>
 8009b62:	687e      	ldr	r6, [r7, #4]
 8009b64:	f1bb 0f00 	cmp.w	fp, #0
 8009b68:	d04a      	beq.n	8009c00 <__gethex+0x3c8>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d016      	beq.n	8009b9e <__gethex+0x366>
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d018      	beq.n	8009ba6 <__gethex+0x36e>
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d109      	bne.n	8009b8c <__gethex+0x354>
 8009b78:	f01b 0f02 	tst.w	fp, #2
 8009b7c:	d006      	beq.n	8009b8c <__gethex+0x354>
 8009b7e:	f8da 3000 	ldr.w	r3, [sl]
 8009b82:	ea4b 0b03 	orr.w	fp, fp, r3
 8009b86:	f01b 0f01 	tst.w	fp, #1
 8009b8a:	d10f      	bne.n	8009bac <__gethex+0x374>
 8009b8c:	f048 0810 	orr.w	r8, r8, #16
 8009b90:	e036      	b.n	8009c00 <__gethex+0x3c8>
 8009b92:	f04f 0b01 	mov.w	fp, #1
 8009b96:	e7d0      	b.n	8009b3a <__gethex+0x302>
 8009b98:	f04f 0801 	mov.w	r8, #1
 8009b9c:	e7e2      	b.n	8009b64 <__gethex+0x32c>
 8009b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba0:	f1c3 0301 	rsb	r3, r3, #1
 8009ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d0ef      	beq.n	8009b8c <__gethex+0x354>
 8009bac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bb0:	f104 0214 	add.w	r2, r4, #20
 8009bb4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009bc0:	4694      	mov	ip, r2
 8009bc2:	f852 1b04 	ldr.w	r1, [r2], #4
 8009bc6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009bca:	d01e      	beq.n	8009c0a <__gethex+0x3d2>
 8009bcc:	3101      	adds	r1, #1
 8009bce:	f8cc 1000 	str.w	r1, [ip]
 8009bd2:	f1b8 0f02 	cmp.w	r8, #2
 8009bd6:	f104 0214 	add.w	r2, r4, #20
 8009bda:	d13d      	bne.n	8009c58 <__gethex+0x420>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	42ab      	cmp	r3, r5
 8009be2:	d10b      	bne.n	8009bfc <__gethex+0x3c4>
 8009be4:	2301      	movs	r3, #1
 8009be6:	1169      	asrs	r1, r5, #5
 8009be8:	f005 051f 	and.w	r5, r5, #31
 8009bec:	fa03 f505 	lsl.w	r5, r3, r5
 8009bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bf4:	421d      	tst	r5, r3
 8009bf6:	bf18      	it	ne
 8009bf8:	f04f 0801 	movne.w	r8, #1
 8009bfc:	f048 0820 	orr.w	r8, r8, #32
 8009c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c02:	601c      	str	r4, [r3, #0]
 8009c04:	9b02      	ldr	r3, [sp, #8]
 8009c06:	601e      	str	r6, [r3, #0]
 8009c08:	e6a0      	b.n	800994c <__gethex+0x114>
 8009c0a:	4290      	cmp	r0, r2
 8009c0c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009c10:	d8d6      	bhi.n	8009bc0 <__gethex+0x388>
 8009c12:	68a2      	ldr	r2, [r4, #8]
 8009c14:	4593      	cmp	fp, r2
 8009c16:	db17      	blt.n	8009c48 <__gethex+0x410>
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	4648      	mov	r0, r9
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f000 f9c3 	bl	8009fa8 <_Balloc>
 8009c22:	4682      	mov	sl, r0
 8009c24:	b918      	cbnz	r0, 8009c2e <__gethex+0x3f6>
 8009c26:	4602      	mov	r2, r0
 8009c28:	2184      	movs	r1, #132	; 0x84
 8009c2a:	4b1a      	ldr	r3, [pc, #104]	; (8009c94 <__gethex+0x45c>)
 8009c2c:	e6b1      	b.n	8009992 <__gethex+0x15a>
 8009c2e:	6922      	ldr	r2, [r4, #16]
 8009c30:	f104 010c 	add.w	r1, r4, #12
 8009c34:	3202      	adds	r2, #2
 8009c36:	0092      	lsls	r2, r2, #2
 8009c38:	300c      	adds	r0, #12
 8009c3a:	f7fe fec7 	bl	80089cc <memcpy>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4648      	mov	r0, r9
 8009c42:	f000 f9f1 	bl	800a028 <_Bfree>
 8009c46:	4654      	mov	r4, sl
 8009c48:	6922      	ldr	r2, [r4, #16]
 8009c4a:	1c51      	adds	r1, r2, #1
 8009c4c:	6121      	str	r1, [r4, #16]
 8009c4e:	2101      	movs	r1, #1
 8009c50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009c54:	6151      	str	r1, [r2, #20]
 8009c56:	e7bc      	b.n	8009bd2 <__gethex+0x39a>
 8009c58:	6921      	ldr	r1, [r4, #16]
 8009c5a:	4559      	cmp	r1, fp
 8009c5c:	dd0b      	ble.n	8009c76 <__gethex+0x43e>
 8009c5e:	2101      	movs	r1, #1
 8009c60:	4620      	mov	r0, r4
 8009c62:	f7ff fd81 	bl	8009768 <rshift>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	3601      	adds	r6, #1
 8009c6a:	42b3      	cmp	r3, r6
 8009c6c:	f6ff aeda 	blt.w	8009a24 <__gethex+0x1ec>
 8009c70:	f04f 0801 	mov.w	r8, #1
 8009c74:	e7c2      	b.n	8009bfc <__gethex+0x3c4>
 8009c76:	f015 051f 	ands.w	r5, r5, #31
 8009c7a:	d0f9      	beq.n	8009c70 <__gethex+0x438>
 8009c7c:	9b01      	ldr	r3, [sp, #4]
 8009c7e:	f1c5 0520 	rsb	r5, r5, #32
 8009c82:	441a      	add	r2, r3
 8009c84:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009c88:	f000 fa80 	bl	800a18c <__hi0bits>
 8009c8c:	42a8      	cmp	r0, r5
 8009c8e:	dbe6      	blt.n	8009c5e <__gethex+0x426>
 8009c90:	e7ee      	b.n	8009c70 <__gethex+0x438>
 8009c92:	bf00      	nop
 8009c94:	0800b5b5 	.word	0x0800b5b5

08009c98 <L_shift>:
 8009c98:	f1c2 0208 	rsb	r2, r2, #8
 8009c9c:	0092      	lsls	r2, r2, #2
 8009c9e:	b570      	push	{r4, r5, r6, lr}
 8009ca0:	f1c2 0620 	rsb	r6, r2, #32
 8009ca4:	6843      	ldr	r3, [r0, #4]
 8009ca6:	6804      	ldr	r4, [r0, #0]
 8009ca8:	fa03 f506 	lsl.w	r5, r3, r6
 8009cac:	432c      	orrs	r4, r5
 8009cae:	40d3      	lsrs	r3, r2
 8009cb0:	6004      	str	r4, [r0, #0]
 8009cb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cb6:	4288      	cmp	r0, r1
 8009cb8:	d3f4      	bcc.n	8009ca4 <L_shift+0xc>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}

08009cbc <__match>:
 8009cbc:	b530      	push	{r4, r5, lr}
 8009cbe:	6803      	ldr	r3, [r0, #0]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cc6:	b914      	cbnz	r4, 8009cce <__match+0x12>
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	bd30      	pop	{r4, r5, pc}
 8009cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009cd6:	2d19      	cmp	r5, #25
 8009cd8:	bf98      	it	ls
 8009cda:	3220      	addls	r2, #32
 8009cdc:	42a2      	cmp	r2, r4
 8009cde:	d0f0      	beq.n	8009cc2 <__match+0x6>
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	e7f3      	b.n	8009ccc <__match+0x10>

08009ce4 <__hexnan>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	2500      	movs	r5, #0
 8009cea:	680b      	ldr	r3, [r1, #0]
 8009cec:	4682      	mov	sl, r0
 8009cee:	115e      	asrs	r6, r3, #5
 8009cf0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cf4:	f013 031f 	ands.w	r3, r3, #31
 8009cf8:	bf18      	it	ne
 8009cfa:	3604      	addne	r6, #4
 8009cfc:	1f37      	subs	r7, r6, #4
 8009cfe:	4690      	mov	r8, r2
 8009d00:	46b9      	mov	r9, r7
 8009d02:	463c      	mov	r4, r7
 8009d04:	46ab      	mov	fp, r5
 8009d06:	b087      	sub	sp, #28
 8009d08:	6801      	ldr	r1, [r0, #0]
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d10:	9502      	str	r5, [sp, #8]
 8009d12:	784a      	ldrb	r2, [r1, #1]
 8009d14:	1c4b      	adds	r3, r1, #1
 8009d16:	9303      	str	r3, [sp, #12]
 8009d18:	b342      	cbz	r2, 8009d6c <__hexnan+0x88>
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	9105      	str	r1, [sp, #20]
 8009d1e:	9204      	str	r2, [sp, #16]
 8009d20:	f7ff fd75 	bl	800980e <__hexdig_fun>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d14f      	bne.n	8009dc8 <__hexnan+0xe4>
 8009d28:	9a04      	ldr	r2, [sp, #16]
 8009d2a:	9905      	ldr	r1, [sp, #20]
 8009d2c:	2a20      	cmp	r2, #32
 8009d2e:	d818      	bhi.n	8009d62 <__hexnan+0x7e>
 8009d30:	9b02      	ldr	r3, [sp, #8]
 8009d32:	459b      	cmp	fp, r3
 8009d34:	dd13      	ble.n	8009d5e <__hexnan+0x7a>
 8009d36:	454c      	cmp	r4, r9
 8009d38:	d206      	bcs.n	8009d48 <__hexnan+0x64>
 8009d3a:	2d07      	cmp	r5, #7
 8009d3c:	dc04      	bgt.n	8009d48 <__hexnan+0x64>
 8009d3e:	462a      	mov	r2, r5
 8009d40:	4649      	mov	r1, r9
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff ffa8 	bl	8009c98 <L_shift>
 8009d48:	4544      	cmp	r4, r8
 8009d4a:	d950      	bls.n	8009dee <__hexnan+0x10a>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f1a4 0904 	sub.w	r9, r4, #4
 8009d52:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d56:	461d      	mov	r5, r3
 8009d58:	464c      	mov	r4, r9
 8009d5a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d5e:	9903      	ldr	r1, [sp, #12]
 8009d60:	e7d7      	b.n	8009d12 <__hexnan+0x2e>
 8009d62:	2a29      	cmp	r2, #41	; 0x29
 8009d64:	d155      	bne.n	8009e12 <__hexnan+0x12e>
 8009d66:	3102      	adds	r1, #2
 8009d68:	f8ca 1000 	str.w	r1, [sl]
 8009d6c:	f1bb 0f00 	cmp.w	fp, #0
 8009d70:	d04f      	beq.n	8009e12 <__hexnan+0x12e>
 8009d72:	454c      	cmp	r4, r9
 8009d74:	d206      	bcs.n	8009d84 <__hexnan+0xa0>
 8009d76:	2d07      	cmp	r5, #7
 8009d78:	dc04      	bgt.n	8009d84 <__hexnan+0xa0>
 8009d7a:	462a      	mov	r2, r5
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f7ff ff8a 	bl	8009c98 <L_shift>
 8009d84:	4544      	cmp	r4, r8
 8009d86:	d934      	bls.n	8009df2 <__hexnan+0x10e>
 8009d88:	4623      	mov	r3, r4
 8009d8a:	f1a8 0204 	sub.w	r2, r8, #4
 8009d8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d92:	429f      	cmp	r7, r3
 8009d94:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d98:	d2f9      	bcs.n	8009d8e <__hexnan+0xaa>
 8009d9a:	1b3b      	subs	r3, r7, r4
 8009d9c:	f023 0303 	bic.w	r3, r3, #3
 8009da0:	3304      	adds	r3, #4
 8009da2:	3e03      	subs	r6, #3
 8009da4:	3401      	adds	r4, #1
 8009da6:	42a6      	cmp	r6, r4
 8009da8:	bf38      	it	cc
 8009daa:	2304      	movcc	r3, #4
 8009dac:	2200      	movs	r2, #0
 8009dae:	4443      	add	r3, r8
 8009db0:	f843 2b04 	str.w	r2, [r3], #4
 8009db4:	429f      	cmp	r7, r3
 8009db6:	d2fb      	bcs.n	8009db0 <__hexnan+0xcc>
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	b91b      	cbnz	r3, 8009dc4 <__hexnan+0xe0>
 8009dbc:	4547      	cmp	r7, r8
 8009dbe:	d126      	bne.n	8009e0e <__hexnan+0x12a>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	2005      	movs	r0, #5
 8009dc6:	e025      	b.n	8009e14 <__hexnan+0x130>
 8009dc8:	3501      	adds	r5, #1
 8009dca:	2d08      	cmp	r5, #8
 8009dcc:	f10b 0b01 	add.w	fp, fp, #1
 8009dd0:	dd06      	ble.n	8009de0 <__hexnan+0xfc>
 8009dd2:	4544      	cmp	r4, r8
 8009dd4:	d9c3      	bls.n	8009d5e <__hexnan+0x7a>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	2501      	movs	r5, #1
 8009dda:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dde:	3c04      	subs	r4, #4
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	f000 000f 	and.w	r0, r0, #15
 8009de6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009dea:	6020      	str	r0, [r4, #0]
 8009dec:	e7b7      	b.n	8009d5e <__hexnan+0x7a>
 8009dee:	2508      	movs	r5, #8
 8009df0:	e7b5      	b.n	8009d5e <__hexnan+0x7a>
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0df      	beq.n	8009db8 <__hexnan+0xd4>
 8009df8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfc:	f1c3 0320 	rsb	r3, r3, #32
 8009e00:	40da      	lsrs	r2, r3
 8009e02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e06:	4013      	ands	r3, r2
 8009e08:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e0c:	e7d4      	b.n	8009db8 <__hexnan+0xd4>
 8009e0e:	3f04      	subs	r7, #4
 8009e10:	e7d2      	b.n	8009db8 <__hexnan+0xd4>
 8009e12:	2004      	movs	r0, #4
 8009e14:	b007      	add	sp, #28
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009e1c <malloc>:
 8009e1c:	4b02      	ldr	r3, [pc, #8]	; (8009e28 <malloc+0xc>)
 8009e1e:	4601      	mov	r1, r0
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	f000 b823 	b.w	8009e6c <_malloc_r>
 8009e26:	bf00      	nop
 8009e28:	200001d0 	.word	0x200001d0

08009e2c <sbrk_aligned>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4e0e      	ldr	r6, [pc, #56]	; (8009e68 <sbrk_aligned+0x3c>)
 8009e30:	460c      	mov	r4, r1
 8009e32:	6831      	ldr	r1, [r6, #0]
 8009e34:	4605      	mov	r5, r0
 8009e36:	b911      	cbnz	r1, 8009e3e <sbrk_aligned+0x12>
 8009e38:	f001 f9f6 	bl	800b228 <_sbrk_r>
 8009e3c:	6030      	str	r0, [r6, #0]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f001 f9f1 	bl	800b228 <_sbrk_r>
 8009e46:	1c43      	adds	r3, r0, #1
 8009e48:	d00a      	beq.n	8009e60 <sbrk_aligned+0x34>
 8009e4a:	1cc4      	adds	r4, r0, #3
 8009e4c:	f024 0403 	bic.w	r4, r4, #3
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d007      	beq.n	8009e64 <sbrk_aligned+0x38>
 8009e54:	1a21      	subs	r1, r4, r0
 8009e56:	4628      	mov	r0, r5
 8009e58:	f001 f9e6 	bl	800b228 <_sbrk_r>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d101      	bne.n	8009e64 <sbrk_aligned+0x38>
 8009e60:	f04f 34ff 	mov.w	r4, #4294967295
 8009e64:	4620      	mov	r0, r4
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	20000600 	.word	0x20000600

08009e6c <_malloc_r>:
 8009e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e70:	1ccd      	adds	r5, r1, #3
 8009e72:	f025 0503 	bic.w	r5, r5, #3
 8009e76:	3508      	adds	r5, #8
 8009e78:	2d0c      	cmp	r5, #12
 8009e7a:	bf38      	it	cc
 8009e7c:	250c      	movcc	r5, #12
 8009e7e:	2d00      	cmp	r5, #0
 8009e80:	4607      	mov	r7, r0
 8009e82:	db01      	blt.n	8009e88 <_malloc_r+0x1c>
 8009e84:	42a9      	cmp	r1, r5
 8009e86:	d905      	bls.n	8009e94 <_malloc_r+0x28>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	603b      	str	r3, [r7, #0]
 8009e8e:	4630      	mov	r0, r6
 8009e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009f68 <_malloc_r+0xfc>
 8009e98:	f000 f87a 	bl	8009f90 <__malloc_lock>
 8009e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009ea0:	461c      	mov	r4, r3
 8009ea2:	bb5c      	cbnz	r4, 8009efc <_malloc_r+0x90>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	f7ff ffc0 	bl	8009e2c <sbrk_aligned>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	4604      	mov	r4, r0
 8009eb0:	d155      	bne.n	8009f5e <_malloc_r+0xf2>
 8009eb2:	f8d8 4000 	ldr.w	r4, [r8]
 8009eb6:	4626      	mov	r6, r4
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	d145      	bne.n	8009f48 <_malloc_r+0xdc>
 8009ebc:	2c00      	cmp	r4, #0
 8009ebe:	d048      	beq.n	8009f52 <_malloc_r+0xe6>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	eb04 0903 	add.w	r9, r4, r3
 8009eca:	f001 f9ad 	bl	800b228 <_sbrk_r>
 8009ece:	4581      	cmp	r9, r0
 8009ed0:	d13f      	bne.n	8009f52 <_malloc_r+0xe6>
 8009ed2:	6821      	ldr	r1, [r4, #0]
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	1a6d      	subs	r5, r5, r1
 8009ed8:	4629      	mov	r1, r5
 8009eda:	f7ff ffa7 	bl	8009e2c <sbrk_aligned>
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d037      	beq.n	8009f52 <_malloc_r+0xe6>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	442b      	add	r3, r5
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d038      	beq.n	8009f62 <_malloc_r+0xf6>
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	42a2      	cmp	r2, r4
 8009ef4:	d12b      	bne.n	8009f4e <_malloc_r+0xe2>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
 8009efa:	e00f      	b.n	8009f1c <_malloc_r+0xb0>
 8009efc:	6822      	ldr	r2, [r4, #0]
 8009efe:	1b52      	subs	r2, r2, r5
 8009f00:	d41f      	bmi.n	8009f42 <_malloc_r+0xd6>
 8009f02:	2a0b      	cmp	r2, #11
 8009f04:	d917      	bls.n	8009f36 <_malloc_r+0xca>
 8009f06:	1961      	adds	r1, r4, r5
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	6025      	str	r5, [r4, #0]
 8009f0c:	bf18      	it	ne
 8009f0e:	6059      	strne	r1, [r3, #4]
 8009f10:	6863      	ldr	r3, [r4, #4]
 8009f12:	bf08      	it	eq
 8009f14:	f8c8 1000 	streq.w	r1, [r8]
 8009f18:	5162      	str	r2, [r4, r5]
 8009f1a:	604b      	str	r3, [r1, #4]
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f104 060b 	add.w	r6, r4, #11
 8009f22:	f000 f83b 	bl	8009f9c <__malloc_unlock>
 8009f26:	f026 0607 	bic.w	r6, r6, #7
 8009f2a:	1d23      	adds	r3, r4, #4
 8009f2c:	1af2      	subs	r2, r6, r3
 8009f2e:	d0ae      	beq.n	8009e8e <_malloc_r+0x22>
 8009f30:	1b9b      	subs	r3, r3, r6
 8009f32:	50a3      	str	r3, [r4, r2]
 8009f34:	e7ab      	b.n	8009e8e <_malloc_r+0x22>
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	6862      	ldr	r2, [r4, #4]
 8009f3a:	d1dd      	bne.n	8009ef8 <_malloc_r+0x8c>
 8009f3c:	f8c8 2000 	str.w	r2, [r8]
 8009f40:	e7ec      	b.n	8009f1c <_malloc_r+0xb0>
 8009f42:	4623      	mov	r3, r4
 8009f44:	6864      	ldr	r4, [r4, #4]
 8009f46:	e7ac      	b.n	8009ea2 <_malloc_r+0x36>
 8009f48:	4634      	mov	r4, r6
 8009f4a:	6876      	ldr	r6, [r6, #4]
 8009f4c:	e7b4      	b.n	8009eb8 <_malloc_r+0x4c>
 8009f4e:	4613      	mov	r3, r2
 8009f50:	e7cc      	b.n	8009eec <_malloc_r+0x80>
 8009f52:	230c      	movs	r3, #12
 8009f54:	4638      	mov	r0, r7
 8009f56:	603b      	str	r3, [r7, #0]
 8009f58:	f000 f820 	bl	8009f9c <__malloc_unlock>
 8009f5c:	e797      	b.n	8009e8e <_malloc_r+0x22>
 8009f5e:	6025      	str	r5, [r4, #0]
 8009f60:	e7dc      	b.n	8009f1c <_malloc_r+0xb0>
 8009f62:	605b      	str	r3, [r3, #4]
 8009f64:	deff      	udf	#255	; 0xff
 8009f66:	bf00      	nop
 8009f68:	200005fc 	.word	0x200005fc

08009f6c <__ascii_mbtowc>:
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	b901      	cbnz	r1, 8009f72 <__ascii_mbtowc+0x6>
 8009f70:	a901      	add	r1, sp, #4
 8009f72:	b142      	cbz	r2, 8009f86 <__ascii_mbtowc+0x1a>
 8009f74:	b14b      	cbz	r3, 8009f8a <__ascii_mbtowc+0x1e>
 8009f76:	7813      	ldrb	r3, [r2, #0]
 8009f78:	600b      	str	r3, [r1, #0]
 8009f7a:	7812      	ldrb	r2, [r2, #0]
 8009f7c:	1e10      	subs	r0, r2, #0
 8009f7e:	bf18      	it	ne
 8009f80:	2001      	movne	r0, #1
 8009f82:	b002      	add	sp, #8
 8009f84:	4770      	bx	lr
 8009f86:	4610      	mov	r0, r2
 8009f88:	e7fb      	b.n	8009f82 <__ascii_mbtowc+0x16>
 8009f8a:	f06f 0001 	mvn.w	r0, #1
 8009f8e:	e7f8      	b.n	8009f82 <__ascii_mbtowc+0x16>

08009f90 <__malloc_lock>:
 8009f90:	4801      	ldr	r0, [pc, #4]	; (8009f98 <__malloc_lock+0x8>)
 8009f92:	f7fe bd0b 	b.w	80089ac <__retarget_lock_acquire_recursive>
 8009f96:	bf00      	nop
 8009f98:	200005f8 	.word	0x200005f8

08009f9c <__malloc_unlock>:
 8009f9c:	4801      	ldr	r0, [pc, #4]	; (8009fa4 <__malloc_unlock+0x8>)
 8009f9e:	f7fe bd06 	b.w	80089ae <__retarget_lock_release_recursive>
 8009fa2:	bf00      	nop
 8009fa4:	200005f8 	.word	0x200005f8

08009fa8 <_Balloc>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	69c6      	ldr	r6, [r0, #28]
 8009fac:	4604      	mov	r4, r0
 8009fae:	460d      	mov	r5, r1
 8009fb0:	b976      	cbnz	r6, 8009fd0 <_Balloc+0x28>
 8009fb2:	2010      	movs	r0, #16
 8009fb4:	f7ff ff32 	bl	8009e1c <malloc>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	61e0      	str	r0, [r4, #28]
 8009fbc:	b920      	cbnz	r0, 8009fc8 <_Balloc+0x20>
 8009fbe:	216b      	movs	r1, #107	; 0x6b
 8009fc0:	4b17      	ldr	r3, [pc, #92]	; (800a020 <_Balloc+0x78>)
 8009fc2:	4818      	ldr	r0, [pc, #96]	; (800a024 <_Balloc+0x7c>)
 8009fc4:	f001 f940 	bl	800b248 <__assert_func>
 8009fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fcc:	6006      	str	r6, [r0, #0]
 8009fce:	60c6      	str	r6, [r0, #12]
 8009fd0:	69e6      	ldr	r6, [r4, #28]
 8009fd2:	68f3      	ldr	r3, [r6, #12]
 8009fd4:	b183      	cbz	r3, 8009ff8 <_Balloc+0x50>
 8009fd6:	69e3      	ldr	r3, [r4, #28]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fde:	b9b8      	cbnz	r0, 800a010 <_Balloc+0x68>
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8009fe6:	1d72      	adds	r2, r6, #5
 8009fe8:	4620      	mov	r0, r4
 8009fea:	0092      	lsls	r2, r2, #2
 8009fec:	f001 f94a 	bl	800b284 <_calloc_r>
 8009ff0:	b160      	cbz	r0, 800a00c <_Balloc+0x64>
 8009ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ff6:	e00e      	b.n	800a016 <_Balloc+0x6e>
 8009ff8:	2221      	movs	r2, #33	; 0x21
 8009ffa:	2104      	movs	r1, #4
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f001 f941 	bl	800b284 <_calloc_r>
 800a002:	69e3      	ldr	r3, [r4, #28]
 800a004:	60f0      	str	r0, [r6, #12]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e4      	bne.n	8009fd6 <_Balloc+0x2e>
 800a00c:	2000      	movs	r0, #0
 800a00e:	bd70      	pop	{r4, r5, r6, pc}
 800a010:	6802      	ldr	r2, [r0, #0]
 800a012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a016:	2300      	movs	r3, #0
 800a018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a01c:	e7f7      	b.n	800a00e <_Balloc+0x66>
 800a01e:	bf00      	nop
 800a020:	0800b546 	.word	0x0800b546
 800a024:	0800b626 	.word	0x0800b626

0800a028 <_Bfree>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	69c6      	ldr	r6, [r0, #28]
 800a02c:	4605      	mov	r5, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	b976      	cbnz	r6, 800a050 <_Bfree+0x28>
 800a032:	2010      	movs	r0, #16
 800a034:	f7ff fef2 	bl	8009e1c <malloc>
 800a038:	4602      	mov	r2, r0
 800a03a:	61e8      	str	r0, [r5, #28]
 800a03c:	b920      	cbnz	r0, 800a048 <_Bfree+0x20>
 800a03e:	218f      	movs	r1, #143	; 0x8f
 800a040:	4b08      	ldr	r3, [pc, #32]	; (800a064 <_Bfree+0x3c>)
 800a042:	4809      	ldr	r0, [pc, #36]	; (800a068 <_Bfree+0x40>)
 800a044:	f001 f900 	bl	800b248 <__assert_func>
 800a048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a04c:	6006      	str	r6, [r0, #0]
 800a04e:	60c6      	str	r6, [r0, #12]
 800a050:	b13c      	cbz	r4, 800a062 <_Bfree+0x3a>
 800a052:	69eb      	ldr	r3, [r5, #28]
 800a054:	6862      	ldr	r2, [r4, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a05c:	6021      	str	r1, [r4, #0]
 800a05e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	0800b546 	.word	0x0800b546
 800a068:	0800b626 	.word	0x0800b626

0800a06c <__multadd>:
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	4607      	mov	r7, r0
 800a072:	460c      	mov	r4, r1
 800a074:	461e      	mov	r6, r3
 800a076:	2000      	movs	r0, #0
 800a078:	690d      	ldr	r5, [r1, #16]
 800a07a:	f101 0c14 	add.w	ip, r1, #20
 800a07e:	f8dc 3000 	ldr.w	r3, [ip]
 800a082:	3001      	adds	r0, #1
 800a084:	b299      	uxth	r1, r3
 800a086:	fb02 6101 	mla	r1, r2, r1, r6
 800a08a:	0c1e      	lsrs	r6, r3, #16
 800a08c:	0c0b      	lsrs	r3, r1, #16
 800a08e:	fb02 3306 	mla	r3, r2, r6, r3
 800a092:	b289      	uxth	r1, r1
 800a094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a098:	4285      	cmp	r5, r0
 800a09a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a09e:	f84c 1b04 	str.w	r1, [ip], #4
 800a0a2:	dcec      	bgt.n	800a07e <__multadd+0x12>
 800a0a4:	b30e      	cbz	r6, 800a0ea <__multadd+0x7e>
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	42ab      	cmp	r3, r5
 800a0aa:	dc19      	bgt.n	800a0e0 <__multadd+0x74>
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	f7ff ff79 	bl	8009fa8 <_Balloc>
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	b928      	cbnz	r0, 800a0c6 <__multadd+0x5a>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	21ba      	movs	r1, #186	; 0xba
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <__multadd+0x84>)
 800a0c0:	480c      	ldr	r0, [pc, #48]	; (800a0f4 <__multadd+0x88>)
 800a0c2:	f001 f8c1 	bl	800b248 <__assert_func>
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	f104 010c 	add.w	r1, r4, #12
 800a0cc:	3202      	adds	r2, #2
 800a0ce:	0092      	lsls	r2, r2, #2
 800a0d0:	300c      	adds	r0, #12
 800a0d2:	f7fe fc7b 	bl	80089cc <memcpy>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff ffa5 	bl	800a028 <_Bfree>
 800a0de:	4644      	mov	r4, r8
 800a0e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	615e      	str	r6, [r3, #20]
 800a0e8:	6125      	str	r5, [r4, #16]
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f0:	0800b5b5 	.word	0x0800b5b5
 800a0f4:	0800b626 	.word	0x0800b626

0800a0f8 <__s2b>:
 800a0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0fc:	4615      	mov	r5, r2
 800a0fe:	2209      	movs	r2, #9
 800a100:	461f      	mov	r7, r3
 800a102:	3308      	adds	r3, #8
 800a104:	460c      	mov	r4, r1
 800a106:	fb93 f3f2 	sdiv	r3, r3, r2
 800a10a:	4606      	mov	r6, r0
 800a10c:	2201      	movs	r2, #1
 800a10e:	2100      	movs	r1, #0
 800a110:	429a      	cmp	r2, r3
 800a112:	db09      	blt.n	800a128 <__s2b+0x30>
 800a114:	4630      	mov	r0, r6
 800a116:	f7ff ff47 	bl	8009fa8 <_Balloc>
 800a11a:	b940      	cbnz	r0, 800a12e <__s2b+0x36>
 800a11c:	4602      	mov	r2, r0
 800a11e:	21d3      	movs	r1, #211	; 0xd3
 800a120:	4b18      	ldr	r3, [pc, #96]	; (800a184 <__s2b+0x8c>)
 800a122:	4819      	ldr	r0, [pc, #100]	; (800a188 <__s2b+0x90>)
 800a124:	f001 f890 	bl	800b248 <__assert_func>
 800a128:	0052      	lsls	r2, r2, #1
 800a12a:	3101      	adds	r1, #1
 800a12c:	e7f0      	b.n	800a110 <__s2b+0x18>
 800a12e:	9b08      	ldr	r3, [sp, #32]
 800a130:	2d09      	cmp	r5, #9
 800a132:	6143      	str	r3, [r0, #20]
 800a134:	f04f 0301 	mov.w	r3, #1
 800a138:	6103      	str	r3, [r0, #16]
 800a13a:	dd16      	ble.n	800a16a <__s2b+0x72>
 800a13c:	f104 0909 	add.w	r9, r4, #9
 800a140:	46c8      	mov	r8, r9
 800a142:	442c      	add	r4, r5
 800a144:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a148:	4601      	mov	r1, r0
 800a14a:	220a      	movs	r2, #10
 800a14c:	4630      	mov	r0, r6
 800a14e:	3b30      	subs	r3, #48	; 0x30
 800a150:	f7ff ff8c 	bl	800a06c <__multadd>
 800a154:	45a0      	cmp	r8, r4
 800a156:	d1f5      	bne.n	800a144 <__s2b+0x4c>
 800a158:	f1a5 0408 	sub.w	r4, r5, #8
 800a15c:	444c      	add	r4, r9
 800a15e:	1b2d      	subs	r5, r5, r4
 800a160:	1963      	adds	r3, r4, r5
 800a162:	42bb      	cmp	r3, r7
 800a164:	db04      	blt.n	800a170 <__s2b+0x78>
 800a166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16a:	2509      	movs	r5, #9
 800a16c:	340a      	adds	r4, #10
 800a16e:	e7f6      	b.n	800a15e <__s2b+0x66>
 800a170:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a174:	4601      	mov	r1, r0
 800a176:	220a      	movs	r2, #10
 800a178:	4630      	mov	r0, r6
 800a17a:	3b30      	subs	r3, #48	; 0x30
 800a17c:	f7ff ff76 	bl	800a06c <__multadd>
 800a180:	e7ee      	b.n	800a160 <__s2b+0x68>
 800a182:	bf00      	nop
 800a184:	0800b5b5 	.word	0x0800b5b5
 800a188:	0800b626 	.word	0x0800b626

0800a18c <__hi0bits>:
 800a18c:	0c02      	lsrs	r2, r0, #16
 800a18e:	0412      	lsls	r2, r2, #16
 800a190:	4603      	mov	r3, r0
 800a192:	b9ca      	cbnz	r2, 800a1c8 <__hi0bits+0x3c>
 800a194:	0403      	lsls	r3, r0, #16
 800a196:	2010      	movs	r0, #16
 800a198:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a19c:	bf04      	itt	eq
 800a19e:	021b      	lsleq	r3, r3, #8
 800a1a0:	3008      	addeq	r0, #8
 800a1a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1a6:	bf04      	itt	eq
 800a1a8:	011b      	lsleq	r3, r3, #4
 800a1aa:	3004      	addeq	r0, #4
 800a1ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a1b0:	bf04      	itt	eq
 800a1b2:	009b      	lsleq	r3, r3, #2
 800a1b4:	3002      	addeq	r0, #2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	db05      	blt.n	800a1c6 <__hi0bits+0x3a>
 800a1ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a1be:	f100 0001 	add.w	r0, r0, #1
 800a1c2:	bf08      	it	eq
 800a1c4:	2020      	moveq	r0, #32
 800a1c6:	4770      	bx	lr
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	e7e5      	b.n	800a198 <__hi0bits+0xc>

0800a1cc <__lo0bits>:
 800a1cc:	6803      	ldr	r3, [r0, #0]
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	f013 0007 	ands.w	r0, r3, #7
 800a1d4:	d00b      	beq.n	800a1ee <__lo0bits+0x22>
 800a1d6:	07d9      	lsls	r1, r3, #31
 800a1d8:	d421      	bmi.n	800a21e <__lo0bits+0x52>
 800a1da:	0798      	lsls	r0, r3, #30
 800a1dc:	bf49      	itett	mi
 800a1de:	085b      	lsrmi	r3, r3, #1
 800a1e0:	089b      	lsrpl	r3, r3, #2
 800a1e2:	2001      	movmi	r0, #1
 800a1e4:	6013      	strmi	r3, [r2, #0]
 800a1e6:	bf5c      	itt	pl
 800a1e8:	2002      	movpl	r0, #2
 800a1ea:	6013      	strpl	r3, [r2, #0]
 800a1ec:	4770      	bx	lr
 800a1ee:	b299      	uxth	r1, r3
 800a1f0:	b909      	cbnz	r1, 800a1f6 <__lo0bits+0x2a>
 800a1f2:	2010      	movs	r0, #16
 800a1f4:	0c1b      	lsrs	r3, r3, #16
 800a1f6:	b2d9      	uxtb	r1, r3
 800a1f8:	b909      	cbnz	r1, 800a1fe <__lo0bits+0x32>
 800a1fa:	3008      	adds	r0, #8
 800a1fc:	0a1b      	lsrs	r3, r3, #8
 800a1fe:	0719      	lsls	r1, r3, #28
 800a200:	bf04      	itt	eq
 800a202:	091b      	lsreq	r3, r3, #4
 800a204:	3004      	addeq	r0, #4
 800a206:	0799      	lsls	r1, r3, #30
 800a208:	bf04      	itt	eq
 800a20a:	089b      	lsreq	r3, r3, #2
 800a20c:	3002      	addeq	r0, #2
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	d403      	bmi.n	800a21a <__lo0bits+0x4e>
 800a212:	085b      	lsrs	r3, r3, #1
 800a214:	f100 0001 	add.w	r0, r0, #1
 800a218:	d003      	beq.n	800a222 <__lo0bits+0x56>
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	4770      	bx	lr
 800a21e:	2000      	movs	r0, #0
 800a220:	4770      	bx	lr
 800a222:	2020      	movs	r0, #32
 800a224:	4770      	bx	lr
	...

0800a228 <__i2b>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	460c      	mov	r4, r1
 800a22c:	2101      	movs	r1, #1
 800a22e:	f7ff febb 	bl	8009fa8 <_Balloc>
 800a232:	4602      	mov	r2, r0
 800a234:	b928      	cbnz	r0, 800a242 <__i2b+0x1a>
 800a236:	f240 1145 	movw	r1, #325	; 0x145
 800a23a:	4b04      	ldr	r3, [pc, #16]	; (800a24c <__i2b+0x24>)
 800a23c:	4804      	ldr	r0, [pc, #16]	; (800a250 <__i2b+0x28>)
 800a23e:	f001 f803 	bl	800b248 <__assert_func>
 800a242:	2301      	movs	r3, #1
 800a244:	6144      	str	r4, [r0, #20]
 800a246:	6103      	str	r3, [r0, #16]
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	bf00      	nop
 800a24c:	0800b5b5 	.word	0x0800b5b5
 800a250:	0800b626 	.word	0x0800b626

0800a254 <__multiply>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	4691      	mov	r9, r2
 800a25a:	690a      	ldr	r2, [r1, #16]
 800a25c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a260:	460c      	mov	r4, r1
 800a262:	429a      	cmp	r2, r3
 800a264:	bfbe      	ittt	lt
 800a266:	460b      	movlt	r3, r1
 800a268:	464c      	movlt	r4, r9
 800a26a:	4699      	movlt	r9, r3
 800a26c:	6927      	ldr	r7, [r4, #16]
 800a26e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a272:	68a3      	ldr	r3, [r4, #8]
 800a274:	6861      	ldr	r1, [r4, #4]
 800a276:	eb07 060a 	add.w	r6, r7, sl
 800a27a:	42b3      	cmp	r3, r6
 800a27c:	b085      	sub	sp, #20
 800a27e:	bfb8      	it	lt
 800a280:	3101      	addlt	r1, #1
 800a282:	f7ff fe91 	bl	8009fa8 <_Balloc>
 800a286:	b930      	cbnz	r0, 800a296 <__multiply+0x42>
 800a288:	4602      	mov	r2, r0
 800a28a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a28e:	4b43      	ldr	r3, [pc, #268]	; (800a39c <__multiply+0x148>)
 800a290:	4843      	ldr	r0, [pc, #268]	; (800a3a0 <__multiply+0x14c>)
 800a292:	f000 ffd9 	bl	800b248 <__assert_func>
 800a296:	f100 0514 	add.w	r5, r0, #20
 800a29a:	462b      	mov	r3, r5
 800a29c:	2200      	movs	r2, #0
 800a29e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2a2:	4543      	cmp	r3, r8
 800a2a4:	d321      	bcc.n	800a2ea <__multiply+0x96>
 800a2a6:	f104 0314 	add.w	r3, r4, #20
 800a2aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a2ae:	f109 0314 	add.w	r3, r9, #20
 800a2b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2b6:	9202      	str	r2, [sp, #8]
 800a2b8:	1b3a      	subs	r2, r7, r4
 800a2ba:	3a15      	subs	r2, #21
 800a2bc:	f022 0203 	bic.w	r2, r2, #3
 800a2c0:	3204      	adds	r2, #4
 800a2c2:	f104 0115 	add.w	r1, r4, #21
 800a2c6:	428f      	cmp	r7, r1
 800a2c8:	bf38      	it	cc
 800a2ca:	2204      	movcc	r2, #4
 800a2cc:	9201      	str	r2, [sp, #4]
 800a2ce:	9a02      	ldr	r2, [sp, #8]
 800a2d0:	9303      	str	r3, [sp, #12]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d80c      	bhi.n	800a2f0 <__multiply+0x9c>
 800a2d6:	2e00      	cmp	r6, #0
 800a2d8:	dd03      	ble.n	800a2e2 <__multiply+0x8e>
 800a2da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d05a      	beq.n	800a398 <__multiply+0x144>
 800a2e2:	6106      	str	r6, [r0, #16]
 800a2e4:	b005      	add	sp, #20
 800a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ea:	f843 2b04 	str.w	r2, [r3], #4
 800a2ee:	e7d8      	b.n	800a2a2 <__multiply+0x4e>
 800a2f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2f4:	f1ba 0f00 	cmp.w	sl, #0
 800a2f8:	d023      	beq.n	800a342 <__multiply+0xee>
 800a2fa:	46a9      	mov	r9, r5
 800a2fc:	f04f 0c00 	mov.w	ip, #0
 800a300:	f104 0e14 	add.w	lr, r4, #20
 800a304:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a308:	f8d9 1000 	ldr.w	r1, [r9]
 800a30c:	fa1f fb82 	uxth.w	fp, r2
 800a310:	b289      	uxth	r1, r1
 800a312:	fb0a 110b 	mla	r1, sl, fp, r1
 800a316:	4461      	add	r1, ip
 800a318:	f8d9 c000 	ldr.w	ip, [r9]
 800a31c:	0c12      	lsrs	r2, r2, #16
 800a31e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a322:	fb0a c202 	mla	r2, sl, r2, ip
 800a326:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a32a:	b289      	uxth	r1, r1
 800a32c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a330:	4577      	cmp	r7, lr
 800a332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a336:	f849 1b04 	str.w	r1, [r9], #4
 800a33a:	d8e3      	bhi.n	800a304 <__multiply+0xb0>
 800a33c:	9a01      	ldr	r2, [sp, #4]
 800a33e:	f845 c002 	str.w	ip, [r5, r2]
 800a342:	9a03      	ldr	r2, [sp, #12]
 800a344:	3304      	adds	r3, #4
 800a346:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a34a:	f1b9 0f00 	cmp.w	r9, #0
 800a34e:	d021      	beq.n	800a394 <__multiply+0x140>
 800a350:	46ae      	mov	lr, r5
 800a352:	f04f 0a00 	mov.w	sl, #0
 800a356:	6829      	ldr	r1, [r5, #0]
 800a358:	f104 0c14 	add.w	ip, r4, #20
 800a35c:	f8bc b000 	ldrh.w	fp, [ip]
 800a360:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a364:	b289      	uxth	r1, r1
 800a366:	fb09 220b 	mla	r2, r9, fp, r2
 800a36a:	4452      	add	r2, sl
 800a36c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a370:	f84e 1b04 	str.w	r1, [lr], #4
 800a374:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a378:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a37c:	f8be 1000 	ldrh.w	r1, [lr]
 800a380:	4567      	cmp	r7, ip
 800a382:	fb09 110a 	mla	r1, r9, sl, r1
 800a386:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a38a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a38e:	d8e5      	bhi.n	800a35c <__multiply+0x108>
 800a390:	9a01      	ldr	r2, [sp, #4]
 800a392:	50a9      	str	r1, [r5, r2]
 800a394:	3504      	adds	r5, #4
 800a396:	e79a      	b.n	800a2ce <__multiply+0x7a>
 800a398:	3e01      	subs	r6, #1
 800a39a:	e79c      	b.n	800a2d6 <__multiply+0x82>
 800a39c:	0800b5b5 	.word	0x0800b5b5
 800a3a0:	0800b626 	.word	0x0800b626

0800a3a4 <__pow5mult>:
 800a3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a8:	4615      	mov	r5, r2
 800a3aa:	f012 0203 	ands.w	r2, r2, #3
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	d007      	beq.n	800a3c4 <__pow5mult+0x20>
 800a3b4:	4c25      	ldr	r4, [pc, #148]	; (800a44c <__pow5mult+0xa8>)
 800a3b6:	3a01      	subs	r2, #1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3be:	f7ff fe55 	bl	800a06c <__multadd>
 800a3c2:	4607      	mov	r7, r0
 800a3c4:	10ad      	asrs	r5, r5, #2
 800a3c6:	d03d      	beq.n	800a444 <__pow5mult+0xa0>
 800a3c8:	69f4      	ldr	r4, [r6, #28]
 800a3ca:	b97c      	cbnz	r4, 800a3ec <__pow5mult+0x48>
 800a3cc:	2010      	movs	r0, #16
 800a3ce:	f7ff fd25 	bl	8009e1c <malloc>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	61f0      	str	r0, [r6, #28]
 800a3d6:	b928      	cbnz	r0, 800a3e4 <__pow5mult+0x40>
 800a3d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a3dc:	4b1c      	ldr	r3, [pc, #112]	; (800a450 <__pow5mult+0xac>)
 800a3de:	481d      	ldr	r0, [pc, #116]	; (800a454 <__pow5mult+0xb0>)
 800a3e0:	f000 ff32 	bl	800b248 <__assert_func>
 800a3e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3e8:	6004      	str	r4, [r0, #0]
 800a3ea:	60c4      	str	r4, [r0, #12]
 800a3ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a3f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3f4:	b94c      	cbnz	r4, 800a40a <__pow5mult+0x66>
 800a3f6:	f240 2171 	movw	r1, #625	; 0x271
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff ff14 	bl	800a228 <__i2b>
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	f8c8 0008 	str.w	r0, [r8, #8]
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	f04f 0900 	mov.w	r9, #0
 800a40e:	07eb      	lsls	r3, r5, #31
 800a410:	d50a      	bpl.n	800a428 <__pow5mult+0x84>
 800a412:	4639      	mov	r1, r7
 800a414:	4622      	mov	r2, r4
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ff1c 	bl	800a254 <__multiply>
 800a41c:	4680      	mov	r8, r0
 800a41e:	4639      	mov	r1, r7
 800a420:	4630      	mov	r0, r6
 800a422:	f7ff fe01 	bl	800a028 <_Bfree>
 800a426:	4647      	mov	r7, r8
 800a428:	106d      	asrs	r5, r5, #1
 800a42a:	d00b      	beq.n	800a444 <__pow5mult+0xa0>
 800a42c:	6820      	ldr	r0, [r4, #0]
 800a42e:	b938      	cbnz	r0, 800a440 <__pow5mult+0x9c>
 800a430:	4622      	mov	r2, r4
 800a432:	4621      	mov	r1, r4
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ff0d 	bl	800a254 <__multiply>
 800a43a:	6020      	str	r0, [r4, #0]
 800a43c:	f8c0 9000 	str.w	r9, [r0]
 800a440:	4604      	mov	r4, r0
 800a442:	e7e4      	b.n	800a40e <__pow5mult+0x6a>
 800a444:	4638      	mov	r0, r7
 800a446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44a:	bf00      	nop
 800a44c:	0800b770 	.word	0x0800b770
 800a450:	0800b546 	.word	0x0800b546
 800a454:	0800b626 	.word	0x0800b626

0800a458 <__lshift>:
 800a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	4607      	mov	r7, r0
 800a460:	4691      	mov	r9, r2
 800a462:	6923      	ldr	r3, [r4, #16]
 800a464:	6849      	ldr	r1, [r1, #4]
 800a466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a46a:	68a3      	ldr	r3, [r4, #8]
 800a46c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a470:	f108 0601 	add.w	r6, r8, #1
 800a474:	42b3      	cmp	r3, r6
 800a476:	db0b      	blt.n	800a490 <__lshift+0x38>
 800a478:	4638      	mov	r0, r7
 800a47a:	f7ff fd95 	bl	8009fa8 <_Balloc>
 800a47e:	4605      	mov	r5, r0
 800a480:	b948      	cbnz	r0, 800a496 <__lshift+0x3e>
 800a482:	4602      	mov	r2, r0
 800a484:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a488:	4b27      	ldr	r3, [pc, #156]	; (800a528 <__lshift+0xd0>)
 800a48a:	4828      	ldr	r0, [pc, #160]	; (800a52c <__lshift+0xd4>)
 800a48c:	f000 fedc 	bl	800b248 <__assert_func>
 800a490:	3101      	adds	r1, #1
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	e7ee      	b.n	800a474 <__lshift+0x1c>
 800a496:	2300      	movs	r3, #0
 800a498:	f100 0114 	add.w	r1, r0, #20
 800a49c:	f100 0210 	add.w	r2, r0, #16
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	4553      	cmp	r3, sl
 800a4a4:	db33      	blt.n	800a50e <__lshift+0xb6>
 800a4a6:	6920      	ldr	r0, [r4, #16]
 800a4a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4ac:	f104 0314 	add.w	r3, r4, #20
 800a4b0:	f019 091f 	ands.w	r9, r9, #31
 800a4b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4bc:	d02b      	beq.n	800a516 <__lshift+0xbe>
 800a4be:	468a      	mov	sl, r1
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a4cc:	4310      	orrs	r0, r2
 800a4ce:	f84a 0b04 	str.w	r0, [sl], #4
 800a4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4d6:	459c      	cmp	ip, r3
 800a4d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4dc:	d8f3      	bhi.n	800a4c6 <__lshift+0x6e>
 800a4de:	ebac 0304 	sub.w	r3, ip, r4
 800a4e2:	3b15      	subs	r3, #21
 800a4e4:	f023 0303 	bic.w	r3, r3, #3
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	f104 0015 	add.w	r0, r4, #21
 800a4ee:	4584      	cmp	ip, r0
 800a4f0:	bf38      	it	cc
 800a4f2:	2304      	movcc	r3, #4
 800a4f4:	50ca      	str	r2, [r1, r3]
 800a4f6:	b10a      	cbz	r2, 800a4fc <__lshift+0xa4>
 800a4f8:	f108 0602 	add.w	r6, r8, #2
 800a4fc:	3e01      	subs	r6, #1
 800a4fe:	4638      	mov	r0, r7
 800a500:	4621      	mov	r1, r4
 800a502:	612e      	str	r6, [r5, #16]
 800a504:	f7ff fd90 	bl	800a028 <_Bfree>
 800a508:	4628      	mov	r0, r5
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a512:	3301      	adds	r3, #1
 800a514:	e7c5      	b.n	800a4a2 <__lshift+0x4a>
 800a516:	3904      	subs	r1, #4
 800a518:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51c:	459c      	cmp	ip, r3
 800a51e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a522:	d8f9      	bhi.n	800a518 <__lshift+0xc0>
 800a524:	e7ea      	b.n	800a4fc <__lshift+0xa4>
 800a526:	bf00      	nop
 800a528:	0800b5b5 	.word	0x0800b5b5
 800a52c:	0800b626 	.word	0x0800b626

0800a530 <__mcmp>:
 800a530:	4603      	mov	r3, r0
 800a532:	690a      	ldr	r2, [r1, #16]
 800a534:	6900      	ldr	r0, [r0, #16]
 800a536:	b530      	push	{r4, r5, lr}
 800a538:	1a80      	subs	r0, r0, r2
 800a53a:	d10d      	bne.n	800a558 <__mcmp+0x28>
 800a53c:	3314      	adds	r3, #20
 800a53e:	3114      	adds	r1, #20
 800a540:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a544:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a548:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a54c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a550:	4295      	cmp	r5, r2
 800a552:	d002      	beq.n	800a55a <__mcmp+0x2a>
 800a554:	d304      	bcc.n	800a560 <__mcmp+0x30>
 800a556:	2001      	movs	r0, #1
 800a558:	bd30      	pop	{r4, r5, pc}
 800a55a:	42a3      	cmp	r3, r4
 800a55c:	d3f4      	bcc.n	800a548 <__mcmp+0x18>
 800a55e:	e7fb      	b.n	800a558 <__mcmp+0x28>
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	e7f8      	b.n	800a558 <__mcmp+0x28>
	...

0800a568 <__mdiff>:
 800a568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	460d      	mov	r5, r1
 800a56e:	4607      	mov	r7, r0
 800a570:	4611      	mov	r1, r2
 800a572:	4628      	mov	r0, r5
 800a574:	4614      	mov	r4, r2
 800a576:	f7ff ffdb 	bl	800a530 <__mcmp>
 800a57a:	1e06      	subs	r6, r0, #0
 800a57c:	d111      	bne.n	800a5a2 <__mdiff+0x3a>
 800a57e:	4631      	mov	r1, r6
 800a580:	4638      	mov	r0, r7
 800a582:	f7ff fd11 	bl	8009fa8 <_Balloc>
 800a586:	4602      	mov	r2, r0
 800a588:	b928      	cbnz	r0, 800a596 <__mdiff+0x2e>
 800a58a:	f240 2137 	movw	r1, #567	; 0x237
 800a58e:	4b3a      	ldr	r3, [pc, #232]	; (800a678 <__mdiff+0x110>)
 800a590:	483a      	ldr	r0, [pc, #232]	; (800a67c <__mdiff+0x114>)
 800a592:	f000 fe59 	bl	800b248 <__assert_func>
 800a596:	2301      	movs	r3, #1
 800a598:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a59c:	4610      	mov	r0, r2
 800a59e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a2:	bfa4      	itt	ge
 800a5a4:	4623      	movge	r3, r4
 800a5a6:	462c      	movge	r4, r5
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	6861      	ldr	r1, [r4, #4]
 800a5ac:	bfa6      	itte	ge
 800a5ae:	461d      	movge	r5, r3
 800a5b0:	2600      	movge	r6, #0
 800a5b2:	2601      	movlt	r6, #1
 800a5b4:	f7ff fcf8 	bl	8009fa8 <_Balloc>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	b918      	cbnz	r0, 800a5c4 <__mdiff+0x5c>
 800a5bc:	f240 2145 	movw	r1, #581	; 0x245
 800a5c0:	4b2d      	ldr	r3, [pc, #180]	; (800a678 <__mdiff+0x110>)
 800a5c2:	e7e5      	b.n	800a590 <__mdiff+0x28>
 800a5c4:	f102 0814 	add.w	r8, r2, #20
 800a5c8:	46c2      	mov	sl, r8
 800a5ca:	f04f 0c00 	mov.w	ip, #0
 800a5ce:	6927      	ldr	r7, [r4, #16]
 800a5d0:	60c6      	str	r6, [r0, #12]
 800a5d2:	692e      	ldr	r6, [r5, #16]
 800a5d4:	f104 0014 	add.w	r0, r4, #20
 800a5d8:	f105 0914 	add.w	r9, r5, #20
 800a5dc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a5e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a5e4:	3410      	adds	r4, #16
 800a5e6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a5ea:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5ee:	fa1f f18b 	uxth.w	r1, fp
 800a5f2:	4461      	add	r1, ip
 800a5f4:	fa1f fc83 	uxth.w	ip, r3
 800a5f8:	0c1b      	lsrs	r3, r3, #16
 800a5fa:	eba1 010c 	sub.w	r1, r1, ip
 800a5fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a602:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a606:	b289      	uxth	r1, r1
 800a608:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a60c:	454e      	cmp	r6, r9
 800a60e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a612:	f84a 1b04 	str.w	r1, [sl], #4
 800a616:	d8e6      	bhi.n	800a5e6 <__mdiff+0x7e>
 800a618:	1b73      	subs	r3, r6, r5
 800a61a:	3b15      	subs	r3, #21
 800a61c:	f023 0303 	bic.w	r3, r3, #3
 800a620:	3515      	adds	r5, #21
 800a622:	3304      	adds	r3, #4
 800a624:	42ae      	cmp	r6, r5
 800a626:	bf38      	it	cc
 800a628:	2304      	movcc	r3, #4
 800a62a:	4418      	add	r0, r3
 800a62c:	4443      	add	r3, r8
 800a62e:	461e      	mov	r6, r3
 800a630:	4605      	mov	r5, r0
 800a632:	4575      	cmp	r5, lr
 800a634:	d30e      	bcc.n	800a654 <__mdiff+0xec>
 800a636:	f10e 0103 	add.w	r1, lr, #3
 800a63a:	1a09      	subs	r1, r1, r0
 800a63c:	f021 0103 	bic.w	r1, r1, #3
 800a640:	3803      	subs	r0, #3
 800a642:	4586      	cmp	lr, r0
 800a644:	bf38      	it	cc
 800a646:	2100      	movcc	r1, #0
 800a648:	440b      	add	r3, r1
 800a64a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a64e:	b189      	cbz	r1, 800a674 <__mdiff+0x10c>
 800a650:	6117      	str	r7, [r2, #16]
 800a652:	e7a3      	b.n	800a59c <__mdiff+0x34>
 800a654:	f855 8b04 	ldr.w	r8, [r5], #4
 800a658:	fa1f f188 	uxth.w	r1, r8
 800a65c:	4461      	add	r1, ip
 800a65e:	140c      	asrs	r4, r1, #16
 800a660:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a664:	b289      	uxth	r1, r1
 800a666:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a66a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a66e:	f846 1b04 	str.w	r1, [r6], #4
 800a672:	e7de      	b.n	800a632 <__mdiff+0xca>
 800a674:	3f01      	subs	r7, #1
 800a676:	e7e8      	b.n	800a64a <__mdiff+0xe2>
 800a678:	0800b5b5 	.word	0x0800b5b5
 800a67c:	0800b626 	.word	0x0800b626

0800a680 <__ulp>:
 800a680:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <__ulp+0x3c>)
 800a682:	400b      	ands	r3, r1
 800a684:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	dc08      	bgt.n	800a69e <__ulp+0x1e>
 800a68c:	425b      	negs	r3, r3
 800a68e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a692:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a696:	da04      	bge.n	800a6a2 <__ulp+0x22>
 800a698:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a69c:	4113      	asrs	r3, r2
 800a69e:	2200      	movs	r2, #0
 800a6a0:	e008      	b.n	800a6b4 <__ulp+0x34>
 800a6a2:	f1a2 0314 	sub.w	r3, r2, #20
 800a6a6:	2b1e      	cmp	r3, #30
 800a6a8:	bfd6      	itet	le
 800a6aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a6ae:	2201      	movgt	r2, #1
 800a6b0:	40da      	lsrle	r2, r3
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	7ff00000 	.word	0x7ff00000

0800a6c0 <__b2d>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	6905      	ldr	r5, [r0, #16]
 800a6c4:	f100 0714 	add.w	r7, r0, #20
 800a6c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a6cc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a6d0:	1f2e      	subs	r6, r5, #4
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff fd5a 	bl	800a18c <__hi0bits>
 800a6d8:	f1c0 0220 	rsb	r2, r0, #32
 800a6dc:	280a      	cmp	r0, #10
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a74c <__b2d+0x8c>
 800a6e4:	600a      	str	r2, [r1, #0]
 800a6e6:	dc12      	bgt.n	800a70e <__b2d+0x4e>
 800a6e8:	f1c0 0e0b 	rsb	lr, r0, #11
 800a6ec:	fa24 f20e 	lsr.w	r2, r4, lr
 800a6f0:	42b7      	cmp	r7, r6
 800a6f2:	ea42 010c 	orr.w	r1, r2, ip
 800a6f6:	bf2c      	ite	cs
 800a6f8:	2200      	movcs	r2, #0
 800a6fa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a6fe:	3315      	adds	r3, #21
 800a700:	fa04 f303 	lsl.w	r3, r4, r3
 800a704:	fa22 f20e 	lsr.w	r2, r2, lr
 800a708:	431a      	orrs	r2, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a70e:	42b7      	cmp	r7, r6
 800a710:	bf2e      	itee	cs
 800a712:	2200      	movcs	r2, #0
 800a714:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a718:	f1a5 0608 	subcc.w	r6, r5, #8
 800a71c:	3b0b      	subs	r3, #11
 800a71e:	d012      	beq.n	800a746 <__b2d+0x86>
 800a720:	f1c3 0520 	rsb	r5, r3, #32
 800a724:	fa22 f105 	lsr.w	r1, r2, r5
 800a728:	409c      	lsls	r4, r3
 800a72a:	430c      	orrs	r4, r1
 800a72c:	42be      	cmp	r6, r7
 800a72e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a732:	bf94      	ite	ls
 800a734:	2400      	movls	r4, #0
 800a736:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a73a:	409a      	lsls	r2, r3
 800a73c:	40ec      	lsrs	r4, r5
 800a73e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a742:	4322      	orrs	r2, r4
 800a744:	e7e1      	b.n	800a70a <__b2d+0x4a>
 800a746:	ea44 010c 	orr.w	r1, r4, ip
 800a74a:	e7de      	b.n	800a70a <__b2d+0x4a>
 800a74c:	3ff00000 	.word	0x3ff00000

0800a750 <__d2b>:
 800a750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a752:	2101      	movs	r1, #1
 800a754:	4617      	mov	r7, r2
 800a756:	461c      	mov	r4, r3
 800a758:	9e08      	ldr	r6, [sp, #32]
 800a75a:	f7ff fc25 	bl	8009fa8 <_Balloc>
 800a75e:	4605      	mov	r5, r0
 800a760:	b930      	cbnz	r0, 800a770 <__d2b+0x20>
 800a762:	4602      	mov	r2, r0
 800a764:	f240 310f 	movw	r1, #783	; 0x30f
 800a768:	4b22      	ldr	r3, [pc, #136]	; (800a7f4 <__d2b+0xa4>)
 800a76a:	4823      	ldr	r0, [pc, #140]	; (800a7f8 <__d2b+0xa8>)
 800a76c:	f000 fd6c 	bl	800b248 <__assert_func>
 800a770:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a774:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a778:	bb24      	cbnz	r4, 800a7c4 <__d2b+0x74>
 800a77a:	2f00      	cmp	r7, #0
 800a77c:	9301      	str	r3, [sp, #4]
 800a77e:	d026      	beq.n	800a7ce <__d2b+0x7e>
 800a780:	4668      	mov	r0, sp
 800a782:	9700      	str	r7, [sp, #0]
 800a784:	f7ff fd22 	bl	800a1cc <__lo0bits>
 800a788:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a78c:	b1e8      	cbz	r0, 800a7ca <__d2b+0x7a>
 800a78e:	f1c0 0320 	rsb	r3, r0, #32
 800a792:	fa02 f303 	lsl.w	r3, r2, r3
 800a796:	430b      	orrs	r3, r1
 800a798:	40c2      	lsrs	r2, r0
 800a79a:	616b      	str	r3, [r5, #20]
 800a79c:	9201      	str	r2, [sp, #4]
 800a79e:	9b01      	ldr	r3, [sp, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bf14      	ite	ne
 800a7a4:	2102      	movne	r1, #2
 800a7a6:	2101      	moveq	r1, #1
 800a7a8:	61ab      	str	r3, [r5, #24]
 800a7aa:	6129      	str	r1, [r5, #16]
 800a7ac:	b1bc      	cbz	r4, 800a7de <__d2b+0x8e>
 800a7ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7b2:	4404      	add	r4, r0
 800a7b4:	6034      	str	r4, [r6, #0]
 800a7b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7bc:	6018      	str	r0, [r3, #0]
 800a7be:	4628      	mov	r0, r5
 800a7c0:	b003      	add	sp, #12
 800a7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7c8:	e7d7      	b.n	800a77a <__d2b+0x2a>
 800a7ca:	6169      	str	r1, [r5, #20]
 800a7cc:	e7e7      	b.n	800a79e <__d2b+0x4e>
 800a7ce:	a801      	add	r0, sp, #4
 800a7d0:	f7ff fcfc 	bl	800a1cc <__lo0bits>
 800a7d4:	9b01      	ldr	r3, [sp, #4]
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	616b      	str	r3, [r5, #20]
 800a7da:	3020      	adds	r0, #32
 800a7dc:	e7e5      	b.n	800a7aa <__d2b+0x5a>
 800a7de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7e2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a7e6:	6030      	str	r0, [r6, #0]
 800a7e8:	6918      	ldr	r0, [r3, #16]
 800a7ea:	f7ff fccf 	bl	800a18c <__hi0bits>
 800a7ee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a7f2:	e7e2      	b.n	800a7ba <__d2b+0x6a>
 800a7f4:	0800b5b5 	.word	0x0800b5b5
 800a7f8:	0800b626 	.word	0x0800b626

0800a7fc <__ratio>:
 800a7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	4688      	mov	r8, r1
 800a802:	4669      	mov	r1, sp
 800a804:	4681      	mov	r9, r0
 800a806:	f7ff ff5b 	bl	800a6c0 <__b2d>
 800a80a:	460f      	mov	r7, r1
 800a80c:	4604      	mov	r4, r0
 800a80e:	460d      	mov	r5, r1
 800a810:	4640      	mov	r0, r8
 800a812:	a901      	add	r1, sp, #4
 800a814:	f7ff ff54 	bl	800a6c0 <__b2d>
 800a818:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a81c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a820:	468b      	mov	fp, r1
 800a822:	eba3 0c02 	sub.w	ip, r3, r2
 800a826:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a82a:	1a9b      	subs	r3, r3, r2
 800a82c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a830:	2b00      	cmp	r3, #0
 800a832:	bfd5      	itete	le
 800a834:	460a      	movle	r2, r1
 800a836:	462a      	movgt	r2, r5
 800a838:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a83c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a840:	bfd8      	it	le
 800a842:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a846:	465b      	mov	r3, fp
 800a848:	4602      	mov	r2, r0
 800a84a:	4639      	mov	r1, r7
 800a84c:	4620      	mov	r0, r4
 800a84e:	f7f5 ff6d 	bl	800072c <__aeabi_ddiv>
 800a852:	b003      	add	sp, #12
 800a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a858 <__copybits>:
 800a858:	3901      	subs	r1, #1
 800a85a:	b570      	push	{r4, r5, r6, lr}
 800a85c:	1149      	asrs	r1, r1, #5
 800a85e:	6914      	ldr	r4, [r2, #16]
 800a860:	3101      	adds	r1, #1
 800a862:	f102 0314 	add.w	r3, r2, #20
 800a866:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a86a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a86e:	1f05      	subs	r5, r0, #4
 800a870:	42a3      	cmp	r3, r4
 800a872:	d30c      	bcc.n	800a88e <__copybits+0x36>
 800a874:	1aa3      	subs	r3, r4, r2
 800a876:	3b11      	subs	r3, #17
 800a878:	f023 0303 	bic.w	r3, r3, #3
 800a87c:	3211      	adds	r2, #17
 800a87e:	42a2      	cmp	r2, r4
 800a880:	bf88      	it	hi
 800a882:	2300      	movhi	r3, #0
 800a884:	4418      	add	r0, r3
 800a886:	2300      	movs	r3, #0
 800a888:	4288      	cmp	r0, r1
 800a88a:	d305      	bcc.n	800a898 <__copybits+0x40>
 800a88c:	bd70      	pop	{r4, r5, r6, pc}
 800a88e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a892:	f845 6f04 	str.w	r6, [r5, #4]!
 800a896:	e7eb      	b.n	800a870 <__copybits+0x18>
 800a898:	f840 3b04 	str.w	r3, [r0], #4
 800a89c:	e7f4      	b.n	800a888 <__copybits+0x30>

0800a89e <__any_on>:
 800a89e:	f100 0214 	add.w	r2, r0, #20
 800a8a2:	6900      	ldr	r0, [r0, #16]
 800a8a4:	114b      	asrs	r3, r1, #5
 800a8a6:	4298      	cmp	r0, r3
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	db11      	blt.n	800a8d0 <__any_on+0x32>
 800a8ac:	dd0a      	ble.n	800a8c4 <__any_on+0x26>
 800a8ae:	f011 011f 	ands.w	r1, r1, #31
 800a8b2:	d007      	beq.n	800a8c4 <__any_on+0x26>
 800a8b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8b8:	fa24 f001 	lsr.w	r0, r4, r1
 800a8bc:	fa00 f101 	lsl.w	r1, r0, r1
 800a8c0:	428c      	cmp	r4, r1
 800a8c2:	d10b      	bne.n	800a8dc <__any_on+0x3e>
 800a8c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d803      	bhi.n	800a8d4 <__any_on+0x36>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	bd10      	pop	{r4, pc}
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	e7f7      	b.n	800a8c4 <__any_on+0x26>
 800a8d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	d0f5      	beq.n	800a8c8 <__any_on+0x2a>
 800a8dc:	2001      	movs	r0, #1
 800a8de:	e7f6      	b.n	800a8ce <__any_on+0x30>

0800a8e0 <_strtol_l.constprop.0>:
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e6:	4686      	mov	lr, r0
 800a8e8:	4690      	mov	r8, r2
 800a8ea:	d001      	beq.n	800a8f0 <_strtol_l.constprop.0+0x10>
 800a8ec:	2b24      	cmp	r3, #36	; 0x24
 800a8ee:	d906      	bls.n	800a8fe <_strtol_l.constprop.0+0x1e>
 800a8f0:	f7fe f832 	bl	8008958 <__errno>
 800a8f4:	2316      	movs	r3, #22
 800a8f6:	6003      	str	r3, [r0, #0]
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fe:	460d      	mov	r5, r1
 800a900:	4835      	ldr	r0, [pc, #212]	; (800a9d8 <_strtol_l.constprop.0+0xf8>)
 800a902:	462a      	mov	r2, r5
 800a904:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a908:	5d06      	ldrb	r6, [r0, r4]
 800a90a:	f016 0608 	ands.w	r6, r6, #8
 800a90e:	d1f8      	bne.n	800a902 <_strtol_l.constprop.0+0x22>
 800a910:	2c2d      	cmp	r4, #45	; 0x2d
 800a912:	d12e      	bne.n	800a972 <_strtol_l.constprop.0+0x92>
 800a914:	2601      	movs	r6, #1
 800a916:	782c      	ldrb	r4, [r5, #0]
 800a918:	1c95      	adds	r5, r2, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d057      	beq.n	800a9ce <_strtol_l.constprop.0+0xee>
 800a91e:	2b10      	cmp	r3, #16
 800a920:	d109      	bne.n	800a936 <_strtol_l.constprop.0+0x56>
 800a922:	2c30      	cmp	r4, #48	; 0x30
 800a924:	d107      	bne.n	800a936 <_strtol_l.constprop.0+0x56>
 800a926:	782a      	ldrb	r2, [r5, #0]
 800a928:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a92c:	2a58      	cmp	r2, #88	; 0x58
 800a92e:	d149      	bne.n	800a9c4 <_strtol_l.constprop.0+0xe4>
 800a930:	2310      	movs	r3, #16
 800a932:	786c      	ldrb	r4, [r5, #1]
 800a934:	3502      	adds	r5, #2
 800a936:	2200      	movs	r2, #0
 800a938:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a93c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a940:	fbbc f9f3 	udiv	r9, ip, r3
 800a944:	4610      	mov	r0, r2
 800a946:	fb03 ca19 	mls	sl, r3, r9, ip
 800a94a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a94e:	2f09      	cmp	r7, #9
 800a950:	d814      	bhi.n	800a97c <_strtol_l.constprop.0+0x9c>
 800a952:	463c      	mov	r4, r7
 800a954:	42a3      	cmp	r3, r4
 800a956:	dd20      	ble.n	800a99a <_strtol_l.constprop.0+0xba>
 800a958:	1c57      	adds	r7, r2, #1
 800a95a:	d007      	beq.n	800a96c <_strtol_l.constprop.0+0x8c>
 800a95c:	4581      	cmp	r9, r0
 800a95e:	d319      	bcc.n	800a994 <_strtol_l.constprop.0+0xb4>
 800a960:	d101      	bne.n	800a966 <_strtol_l.constprop.0+0x86>
 800a962:	45a2      	cmp	sl, r4
 800a964:	db16      	blt.n	800a994 <_strtol_l.constprop.0+0xb4>
 800a966:	2201      	movs	r2, #1
 800a968:	fb00 4003 	mla	r0, r0, r3, r4
 800a96c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a970:	e7eb      	b.n	800a94a <_strtol_l.constprop.0+0x6a>
 800a972:	2c2b      	cmp	r4, #43	; 0x2b
 800a974:	bf04      	itt	eq
 800a976:	782c      	ldrbeq	r4, [r5, #0]
 800a978:	1c95      	addeq	r5, r2, #2
 800a97a:	e7ce      	b.n	800a91a <_strtol_l.constprop.0+0x3a>
 800a97c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a980:	2f19      	cmp	r7, #25
 800a982:	d801      	bhi.n	800a988 <_strtol_l.constprop.0+0xa8>
 800a984:	3c37      	subs	r4, #55	; 0x37
 800a986:	e7e5      	b.n	800a954 <_strtol_l.constprop.0+0x74>
 800a988:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a98c:	2f19      	cmp	r7, #25
 800a98e:	d804      	bhi.n	800a99a <_strtol_l.constprop.0+0xba>
 800a990:	3c57      	subs	r4, #87	; 0x57
 800a992:	e7df      	b.n	800a954 <_strtol_l.constprop.0+0x74>
 800a994:	f04f 32ff 	mov.w	r2, #4294967295
 800a998:	e7e8      	b.n	800a96c <_strtol_l.constprop.0+0x8c>
 800a99a:	1c53      	adds	r3, r2, #1
 800a99c:	d108      	bne.n	800a9b0 <_strtol_l.constprop.0+0xd0>
 800a99e:	2322      	movs	r3, #34	; 0x22
 800a9a0:	4660      	mov	r0, ip
 800a9a2:	f8ce 3000 	str.w	r3, [lr]
 800a9a6:	f1b8 0f00 	cmp.w	r8, #0
 800a9aa:	d0a6      	beq.n	800a8fa <_strtol_l.constprop.0+0x1a>
 800a9ac:	1e69      	subs	r1, r5, #1
 800a9ae:	e006      	b.n	800a9be <_strtol_l.constprop.0+0xde>
 800a9b0:	b106      	cbz	r6, 800a9b4 <_strtol_l.constprop.0+0xd4>
 800a9b2:	4240      	negs	r0, r0
 800a9b4:	f1b8 0f00 	cmp.w	r8, #0
 800a9b8:	d09f      	beq.n	800a8fa <_strtol_l.constprop.0+0x1a>
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	d1f6      	bne.n	800a9ac <_strtol_l.constprop.0+0xcc>
 800a9be:	f8c8 1000 	str.w	r1, [r8]
 800a9c2:	e79a      	b.n	800a8fa <_strtol_l.constprop.0+0x1a>
 800a9c4:	2430      	movs	r4, #48	; 0x30
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1b5      	bne.n	800a936 <_strtol_l.constprop.0+0x56>
 800a9ca:	2308      	movs	r3, #8
 800a9cc:	e7b3      	b.n	800a936 <_strtol_l.constprop.0+0x56>
 800a9ce:	2c30      	cmp	r4, #48	; 0x30
 800a9d0:	d0a9      	beq.n	800a926 <_strtol_l.constprop.0+0x46>
 800a9d2:	230a      	movs	r3, #10
 800a9d4:	e7af      	b.n	800a936 <_strtol_l.constprop.0+0x56>
 800a9d6:	bf00      	nop
 800a9d8:	0800b77d 	.word	0x0800b77d

0800a9dc <_strtol_r>:
 800a9dc:	f7ff bf80 	b.w	800a8e0 <_strtol_l.constprop.0>

0800a9e0 <__ascii_wctomb>:
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4608      	mov	r0, r1
 800a9e4:	b141      	cbz	r1, 800a9f8 <__ascii_wctomb+0x18>
 800a9e6:	2aff      	cmp	r2, #255	; 0xff
 800a9e8:	d904      	bls.n	800a9f4 <__ascii_wctomb+0x14>
 800a9ea:	228a      	movs	r2, #138	; 0x8a
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	4770      	bx	lr
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	700a      	strb	r2, [r1, #0]
 800a9f8:	4770      	bx	lr

0800a9fa <__ssputs_r>:
 800a9fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9fe:	461f      	mov	r7, r3
 800aa00:	688e      	ldr	r6, [r1, #8]
 800aa02:	4682      	mov	sl, r0
 800aa04:	42be      	cmp	r6, r7
 800aa06:	460c      	mov	r4, r1
 800aa08:	4690      	mov	r8, r2
 800aa0a:	680b      	ldr	r3, [r1, #0]
 800aa0c:	d82c      	bhi.n	800aa68 <__ssputs_r+0x6e>
 800aa0e:	898a      	ldrh	r2, [r1, #12]
 800aa10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa14:	d026      	beq.n	800aa64 <__ssputs_r+0x6a>
 800aa16:	6965      	ldr	r5, [r4, #20]
 800aa18:	6909      	ldr	r1, [r1, #16]
 800aa1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa1e:	eba3 0901 	sub.w	r9, r3, r1
 800aa22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa26:	1c7b      	adds	r3, r7, #1
 800aa28:	444b      	add	r3, r9
 800aa2a:	106d      	asrs	r5, r5, #1
 800aa2c:	429d      	cmp	r5, r3
 800aa2e:	bf38      	it	cc
 800aa30:	461d      	movcc	r5, r3
 800aa32:	0553      	lsls	r3, r2, #21
 800aa34:	d527      	bpl.n	800aa86 <__ssputs_r+0x8c>
 800aa36:	4629      	mov	r1, r5
 800aa38:	f7ff fa18 	bl	8009e6c <_malloc_r>
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	b360      	cbz	r0, 800aa9a <__ssputs_r+0xa0>
 800aa40:	464a      	mov	r2, r9
 800aa42:	6921      	ldr	r1, [r4, #16]
 800aa44:	f7fd ffc2 	bl	80089cc <memcpy>
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	6126      	str	r6, [r4, #16]
 800aa56:	444e      	add	r6, r9
 800aa58:	6026      	str	r6, [r4, #0]
 800aa5a:	463e      	mov	r6, r7
 800aa5c:	6165      	str	r5, [r4, #20]
 800aa5e:	eba5 0509 	sub.w	r5, r5, r9
 800aa62:	60a5      	str	r5, [r4, #8]
 800aa64:	42be      	cmp	r6, r7
 800aa66:	d900      	bls.n	800aa6a <__ssputs_r+0x70>
 800aa68:	463e      	mov	r6, r7
 800aa6a:	4632      	mov	r2, r6
 800aa6c:	4641      	mov	r1, r8
 800aa6e:	6820      	ldr	r0, [r4, #0]
 800aa70:	f000 fb9d 	bl	800b1ae <memmove>
 800aa74:	2000      	movs	r0, #0
 800aa76:	68a3      	ldr	r3, [r4, #8]
 800aa78:	1b9b      	subs	r3, r3, r6
 800aa7a:	60a3      	str	r3, [r4, #8]
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	4433      	add	r3, r6
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa86:	462a      	mov	r2, r5
 800aa88:	f000 fc10 	bl	800b2ac <_realloc_r>
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d1e0      	bne.n	800aa54 <__ssputs_r+0x5a>
 800aa92:	4650      	mov	r0, sl
 800aa94:	6921      	ldr	r1, [r4, #16]
 800aa96:	f7fe fe1f 	bl	80096d8 <_free_r>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	f8ca 3000 	str.w	r3, [sl]
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	e7e9      	b.n	800aa82 <__ssputs_r+0x88>
	...

0800aab0 <_svfiprintf_r>:
 800aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	4698      	mov	r8, r3
 800aab6:	898b      	ldrh	r3, [r1, #12]
 800aab8:	4607      	mov	r7, r0
 800aaba:	061b      	lsls	r3, r3, #24
 800aabc:	460d      	mov	r5, r1
 800aabe:	4614      	mov	r4, r2
 800aac0:	b09d      	sub	sp, #116	; 0x74
 800aac2:	d50e      	bpl.n	800aae2 <_svfiprintf_r+0x32>
 800aac4:	690b      	ldr	r3, [r1, #16]
 800aac6:	b963      	cbnz	r3, 800aae2 <_svfiprintf_r+0x32>
 800aac8:	2140      	movs	r1, #64	; 0x40
 800aaca:	f7ff f9cf 	bl	8009e6c <_malloc_r>
 800aace:	6028      	str	r0, [r5, #0]
 800aad0:	6128      	str	r0, [r5, #16]
 800aad2:	b920      	cbnz	r0, 800aade <_svfiprintf_r+0x2e>
 800aad4:	230c      	movs	r3, #12
 800aad6:	603b      	str	r3, [r7, #0]
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e0d0      	b.n	800ac80 <_svfiprintf_r+0x1d0>
 800aade:	2340      	movs	r3, #64	; 0x40
 800aae0:	616b      	str	r3, [r5, #20]
 800aae2:	2300      	movs	r3, #0
 800aae4:	9309      	str	r3, [sp, #36]	; 0x24
 800aae6:	2320      	movs	r3, #32
 800aae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aaec:	2330      	movs	r3, #48	; 0x30
 800aaee:	f04f 0901 	mov.w	r9, #1
 800aaf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaf6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ac98 <_svfiprintf_r+0x1e8>
 800aafa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aafe:	4623      	mov	r3, r4
 800ab00:	469a      	mov	sl, r3
 800ab02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab06:	b10a      	cbz	r2, 800ab0c <_svfiprintf_r+0x5c>
 800ab08:	2a25      	cmp	r2, #37	; 0x25
 800ab0a:	d1f9      	bne.n	800ab00 <_svfiprintf_r+0x50>
 800ab0c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab10:	d00b      	beq.n	800ab2a <_svfiprintf_r+0x7a>
 800ab12:	465b      	mov	r3, fp
 800ab14:	4622      	mov	r2, r4
 800ab16:	4629      	mov	r1, r5
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff ff6e 	bl	800a9fa <__ssputs_r>
 800ab1e:	3001      	adds	r0, #1
 800ab20:	f000 80a9 	beq.w	800ac76 <_svfiprintf_r+0x1c6>
 800ab24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab26:	445a      	add	r2, fp
 800ab28:	9209      	str	r2, [sp, #36]	; 0x24
 800ab2a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 80a1 	beq.w	800ac76 <_svfiprintf_r+0x1c6>
 800ab34:	2300      	movs	r3, #0
 800ab36:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab3e:	f10a 0a01 	add.w	sl, sl, #1
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	9307      	str	r3, [sp, #28]
 800ab46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab4a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab4c:	4654      	mov	r4, sl
 800ab4e:	2205      	movs	r2, #5
 800ab50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab54:	4850      	ldr	r0, [pc, #320]	; (800ac98 <_svfiprintf_r+0x1e8>)
 800ab56:	f7fd ff2b 	bl	80089b0 <memchr>
 800ab5a:	9a04      	ldr	r2, [sp, #16]
 800ab5c:	b9d8      	cbnz	r0, 800ab96 <_svfiprintf_r+0xe6>
 800ab5e:	06d0      	lsls	r0, r2, #27
 800ab60:	bf44      	itt	mi
 800ab62:	2320      	movmi	r3, #32
 800ab64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab68:	0711      	lsls	r1, r2, #28
 800ab6a:	bf44      	itt	mi
 800ab6c:	232b      	movmi	r3, #43	; 0x2b
 800ab6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab72:	f89a 3000 	ldrb.w	r3, [sl]
 800ab76:	2b2a      	cmp	r3, #42	; 0x2a
 800ab78:	d015      	beq.n	800aba6 <_svfiprintf_r+0xf6>
 800ab7a:	4654      	mov	r4, sl
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	f04f 0c0a 	mov.w	ip, #10
 800ab82:	9a07      	ldr	r2, [sp, #28]
 800ab84:	4621      	mov	r1, r4
 800ab86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab8a:	3b30      	subs	r3, #48	; 0x30
 800ab8c:	2b09      	cmp	r3, #9
 800ab8e:	d94d      	bls.n	800ac2c <_svfiprintf_r+0x17c>
 800ab90:	b1b0      	cbz	r0, 800abc0 <_svfiprintf_r+0x110>
 800ab92:	9207      	str	r2, [sp, #28]
 800ab94:	e014      	b.n	800abc0 <_svfiprintf_r+0x110>
 800ab96:	eba0 0308 	sub.w	r3, r0, r8
 800ab9a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	46a2      	mov	sl, r4
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	e7d2      	b.n	800ab4c <_svfiprintf_r+0x9c>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	1d19      	adds	r1, r3, #4
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	9103      	str	r1, [sp, #12]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	bfbb      	ittet	lt
 800abb2:	425b      	neglt	r3, r3
 800abb4:	f042 0202 	orrlt.w	r2, r2, #2
 800abb8:	9307      	strge	r3, [sp, #28]
 800abba:	9307      	strlt	r3, [sp, #28]
 800abbc:	bfb8      	it	lt
 800abbe:	9204      	strlt	r2, [sp, #16]
 800abc0:	7823      	ldrb	r3, [r4, #0]
 800abc2:	2b2e      	cmp	r3, #46	; 0x2e
 800abc4:	d10c      	bne.n	800abe0 <_svfiprintf_r+0x130>
 800abc6:	7863      	ldrb	r3, [r4, #1]
 800abc8:	2b2a      	cmp	r3, #42	; 0x2a
 800abca:	d134      	bne.n	800ac36 <_svfiprintf_r+0x186>
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	3402      	adds	r4, #2
 800abd0:	1d1a      	adds	r2, r3, #4
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	9203      	str	r2, [sp, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	bfb8      	it	lt
 800abda:	f04f 33ff 	movlt.w	r3, #4294967295
 800abde:	9305      	str	r3, [sp, #20]
 800abe0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ac9c <_svfiprintf_r+0x1ec>
 800abe4:	2203      	movs	r2, #3
 800abe6:	4650      	mov	r0, sl
 800abe8:	7821      	ldrb	r1, [r4, #0]
 800abea:	f7fd fee1 	bl	80089b0 <memchr>
 800abee:	b138      	cbz	r0, 800ac00 <_svfiprintf_r+0x150>
 800abf0:	2240      	movs	r2, #64	; 0x40
 800abf2:	9b04      	ldr	r3, [sp, #16]
 800abf4:	eba0 000a 	sub.w	r0, r0, sl
 800abf8:	4082      	lsls	r2, r0
 800abfa:	4313      	orrs	r3, r2
 800abfc:	3401      	adds	r4, #1
 800abfe:	9304      	str	r3, [sp, #16]
 800ac00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac04:	2206      	movs	r2, #6
 800ac06:	4826      	ldr	r0, [pc, #152]	; (800aca0 <_svfiprintf_r+0x1f0>)
 800ac08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac0c:	f7fd fed0 	bl	80089b0 <memchr>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d038      	beq.n	800ac86 <_svfiprintf_r+0x1d6>
 800ac14:	4b23      	ldr	r3, [pc, #140]	; (800aca4 <_svfiprintf_r+0x1f4>)
 800ac16:	bb1b      	cbnz	r3, 800ac60 <_svfiprintf_r+0x1b0>
 800ac18:	9b03      	ldr	r3, [sp, #12]
 800ac1a:	3307      	adds	r3, #7
 800ac1c:	f023 0307 	bic.w	r3, r3, #7
 800ac20:	3308      	adds	r3, #8
 800ac22:	9303      	str	r3, [sp, #12]
 800ac24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac26:	4433      	add	r3, r6
 800ac28:	9309      	str	r3, [sp, #36]	; 0x24
 800ac2a:	e768      	b.n	800aafe <_svfiprintf_r+0x4e>
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	2001      	movs	r0, #1
 800ac30:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac34:	e7a6      	b.n	800ab84 <_svfiprintf_r+0xd4>
 800ac36:	2300      	movs	r3, #0
 800ac38:	f04f 0c0a 	mov.w	ip, #10
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	3401      	adds	r4, #1
 800ac40:	9305      	str	r3, [sp, #20]
 800ac42:	4620      	mov	r0, r4
 800ac44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac48:	3a30      	subs	r2, #48	; 0x30
 800ac4a:	2a09      	cmp	r2, #9
 800ac4c:	d903      	bls.n	800ac56 <_svfiprintf_r+0x1a6>
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0c6      	beq.n	800abe0 <_svfiprintf_r+0x130>
 800ac52:	9105      	str	r1, [sp, #20]
 800ac54:	e7c4      	b.n	800abe0 <_svfiprintf_r+0x130>
 800ac56:	4604      	mov	r4, r0
 800ac58:	2301      	movs	r3, #1
 800ac5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac5e:	e7f0      	b.n	800ac42 <_svfiprintf_r+0x192>
 800ac60:	ab03      	add	r3, sp, #12
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	462a      	mov	r2, r5
 800ac66:	4638      	mov	r0, r7
 800ac68:	4b0f      	ldr	r3, [pc, #60]	; (800aca8 <_svfiprintf_r+0x1f8>)
 800ac6a:	a904      	add	r1, sp, #16
 800ac6c:	f7fc fe22 	bl	80078b4 <_printf_float>
 800ac70:	1c42      	adds	r2, r0, #1
 800ac72:	4606      	mov	r6, r0
 800ac74:	d1d6      	bne.n	800ac24 <_svfiprintf_r+0x174>
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	065b      	lsls	r3, r3, #25
 800ac7a:	f53f af2d 	bmi.w	800aad8 <_svfiprintf_r+0x28>
 800ac7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac80:	b01d      	add	sp, #116	; 0x74
 800ac82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac86:	ab03      	add	r3, sp, #12
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	462a      	mov	r2, r5
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <_svfiprintf_r+0x1f8>)
 800ac90:	a904      	add	r1, sp, #16
 800ac92:	f7fd f8af 	bl	8007df4 <_printf_i>
 800ac96:	e7eb      	b.n	800ac70 <_svfiprintf_r+0x1c0>
 800ac98:	0800b87d 	.word	0x0800b87d
 800ac9c:	0800b883 	.word	0x0800b883
 800aca0:	0800b887 	.word	0x0800b887
 800aca4:	080078b5 	.word	0x080078b5
 800aca8:	0800a9fb 	.word	0x0800a9fb

0800acac <__sfputc_r>:
 800acac:	6893      	ldr	r3, [r2, #8]
 800acae:	b410      	push	{r4}
 800acb0:	3b01      	subs	r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	6093      	str	r3, [r2, #8]
 800acb6:	da07      	bge.n	800acc8 <__sfputc_r+0x1c>
 800acb8:	6994      	ldr	r4, [r2, #24]
 800acba:	42a3      	cmp	r3, r4
 800acbc:	db01      	blt.n	800acc2 <__sfputc_r+0x16>
 800acbe:	290a      	cmp	r1, #10
 800acc0:	d102      	bne.n	800acc8 <__sfputc_r+0x1c>
 800acc2:	bc10      	pop	{r4}
 800acc4:	f7fd bd4f 	b.w	8008766 <__swbuf_r>
 800acc8:	6813      	ldr	r3, [r2, #0]
 800acca:	1c58      	adds	r0, r3, #1
 800accc:	6010      	str	r0, [r2, #0]
 800acce:	7019      	strb	r1, [r3, #0]
 800acd0:	4608      	mov	r0, r1
 800acd2:	bc10      	pop	{r4}
 800acd4:	4770      	bx	lr

0800acd6 <__sfputs_r>:
 800acd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	4614      	mov	r4, r2
 800acde:	18d5      	adds	r5, r2, r3
 800ace0:	42ac      	cmp	r4, r5
 800ace2:	d101      	bne.n	800ace8 <__sfputs_r+0x12>
 800ace4:	2000      	movs	r0, #0
 800ace6:	e007      	b.n	800acf8 <__sfputs_r+0x22>
 800ace8:	463a      	mov	r2, r7
 800acea:	4630      	mov	r0, r6
 800acec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf0:	f7ff ffdc 	bl	800acac <__sfputc_r>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d1f3      	bne.n	800ace0 <__sfputs_r+0xa>
 800acf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acfc <_vfiprintf_r>:
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	460d      	mov	r5, r1
 800ad02:	4614      	mov	r4, r2
 800ad04:	4698      	mov	r8, r3
 800ad06:	4606      	mov	r6, r0
 800ad08:	b09d      	sub	sp, #116	; 0x74
 800ad0a:	b118      	cbz	r0, 800ad14 <_vfiprintf_r+0x18>
 800ad0c:	6a03      	ldr	r3, [r0, #32]
 800ad0e:	b90b      	cbnz	r3, 800ad14 <_vfiprintf_r+0x18>
 800ad10:	f7fd fc1a 	bl	8008548 <__sinit>
 800ad14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad16:	07d9      	lsls	r1, r3, #31
 800ad18:	d405      	bmi.n	800ad26 <_vfiprintf_r+0x2a>
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	059a      	lsls	r2, r3, #22
 800ad1e:	d402      	bmi.n	800ad26 <_vfiprintf_r+0x2a>
 800ad20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad22:	f7fd fe43 	bl	80089ac <__retarget_lock_acquire_recursive>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	071b      	lsls	r3, r3, #28
 800ad2a:	d501      	bpl.n	800ad30 <_vfiprintf_r+0x34>
 800ad2c:	692b      	ldr	r3, [r5, #16]
 800ad2e:	b99b      	cbnz	r3, 800ad58 <_vfiprintf_r+0x5c>
 800ad30:	4629      	mov	r1, r5
 800ad32:	4630      	mov	r0, r6
 800ad34:	f7fd fd54 	bl	80087e0 <__swsetup_r>
 800ad38:	b170      	cbz	r0, 800ad58 <_vfiprintf_r+0x5c>
 800ad3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad3c:	07dc      	lsls	r4, r3, #31
 800ad3e:	d504      	bpl.n	800ad4a <_vfiprintf_r+0x4e>
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	b01d      	add	sp, #116	; 0x74
 800ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4a:	89ab      	ldrh	r3, [r5, #12]
 800ad4c:	0598      	lsls	r0, r3, #22
 800ad4e:	d4f7      	bmi.n	800ad40 <_vfiprintf_r+0x44>
 800ad50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad52:	f7fd fe2c 	bl	80089ae <__retarget_lock_release_recursive>
 800ad56:	e7f3      	b.n	800ad40 <_vfiprintf_r+0x44>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5c:	2320      	movs	r3, #32
 800ad5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad62:	2330      	movs	r3, #48	; 0x30
 800ad64:	f04f 0901 	mov.w	r9, #1
 800ad68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800af1c <_vfiprintf_r+0x220>
 800ad70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad74:	4623      	mov	r3, r4
 800ad76:	469a      	mov	sl, r3
 800ad78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7c:	b10a      	cbz	r2, 800ad82 <_vfiprintf_r+0x86>
 800ad7e:	2a25      	cmp	r2, #37	; 0x25
 800ad80:	d1f9      	bne.n	800ad76 <_vfiprintf_r+0x7a>
 800ad82:	ebba 0b04 	subs.w	fp, sl, r4
 800ad86:	d00b      	beq.n	800ada0 <_vfiprintf_r+0xa4>
 800ad88:	465b      	mov	r3, fp
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ffa1 	bl	800acd6 <__sfputs_r>
 800ad94:	3001      	adds	r0, #1
 800ad96:	f000 80a9 	beq.w	800aeec <_vfiprintf_r+0x1f0>
 800ad9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad9c:	445a      	add	r2, fp
 800ad9e:	9209      	str	r2, [sp, #36]	; 0x24
 800ada0:	f89a 3000 	ldrb.w	r3, [sl]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 80a1 	beq.w	800aeec <_vfiprintf_r+0x1f0>
 800adaa:	2300      	movs	r3, #0
 800adac:	f04f 32ff 	mov.w	r2, #4294967295
 800adb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb4:	f10a 0a01 	add.w	sl, sl, #1
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	9307      	str	r3, [sp, #28]
 800adbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adc0:	931a      	str	r3, [sp, #104]	; 0x68
 800adc2:	4654      	mov	r4, sl
 800adc4:	2205      	movs	r2, #5
 800adc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adca:	4854      	ldr	r0, [pc, #336]	; (800af1c <_vfiprintf_r+0x220>)
 800adcc:	f7fd fdf0 	bl	80089b0 <memchr>
 800add0:	9a04      	ldr	r2, [sp, #16]
 800add2:	b9d8      	cbnz	r0, 800ae0c <_vfiprintf_r+0x110>
 800add4:	06d1      	lsls	r1, r2, #27
 800add6:	bf44      	itt	mi
 800add8:	2320      	movmi	r3, #32
 800adda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adde:	0713      	lsls	r3, r2, #28
 800ade0:	bf44      	itt	mi
 800ade2:	232b      	movmi	r3, #43	; 0x2b
 800ade4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade8:	f89a 3000 	ldrb.w	r3, [sl]
 800adec:	2b2a      	cmp	r3, #42	; 0x2a
 800adee:	d015      	beq.n	800ae1c <_vfiprintf_r+0x120>
 800adf0:	4654      	mov	r4, sl
 800adf2:	2000      	movs	r0, #0
 800adf4:	f04f 0c0a 	mov.w	ip, #10
 800adf8:	9a07      	ldr	r2, [sp, #28]
 800adfa:	4621      	mov	r1, r4
 800adfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae00:	3b30      	subs	r3, #48	; 0x30
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	d94d      	bls.n	800aea2 <_vfiprintf_r+0x1a6>
 800ae06:	b1b0      	cbz	r0, 800ae36 <_vfiprintf_r+0x13a>
 800ae08:	9207      	str	r2, [sp, #28]
 800ae0a:	e014      	b.n	800ae36 <_vfiprintf_r+0x13a>
 800ae0c:	eba0 0308 	sub.w	r3, r0, r8
 800ae10:	fa09 f303 	lsl.w	r3, r9, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	46a2      	mov	sl, r4
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	e7d2      	b.n	800adc2 <_vfiprintf_r+0xc6>
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	1d19      	adds	r1, r3, #4
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	9103      	str	r1, [sp, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	bfbb      	ittet	lt
 800ae28:	425b      	neglt	r3, r3
 800ae2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae2e:	9307      	strge	r3, [sp, #28]
 800ae30:	9307      	strlt	r3, [sp, #28]
 800ae32:	bfb8      	it	lt
 800ae34:	9204      	strlt	r2, [sp, #16]
 800ae36:	7823      	ldrb	r3, [r4, #0]
 800ae38:	2b2e      	cmp	r3, #46	; 0x2e
 800ae3a:	d10c      	bne.n	800ae56 <_vfiprintf_r+0x15a>
 800ae3c:	7863      	ldrb	r3, [r4, #1]
 800ae3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae40:	d134      	bne.n	800aeac <_vfiprintf_r+0x1b0>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	3402      	adds	r4, #2
 800ae46:	1d1a      	adds	r2, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9203      	str	r2, [sp, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfb8      	it	lt
 800ae50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae54:	9305      	str	r3, [sp, #20]
 800ae56:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af20 <_vfiprintf_r+0x224>
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	7821      	ldrb	r1, [r4, #0]
 800ae60:	f7fd fda6 	bl	80089b0 <memchr>
 800ae64:	b138      	cbz	r0, 800ae76 <_vfiprintf_r+0x17a>
 800ae66:	2240      	movs	r2, #64	; 0x40
 800ae68:	9b04      	ldr	r3, [sp, #16]
 800ae6a:	eba0 000a 	sub.w	r0, r0, sl
 800ae6e:	4082      	lsls	r2, r0
 800ae70:	4313      	orrs	r3, r2
 800ae72:	3401      	adds	r4, #1
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7a:	2206      	movs	r2, #6
 800ae7c:	4829      	ldr	r0, [pc, #164]	; (800af24 <_vfiprintf_r+0x228>)
 800ae7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae82:	f7fd fd95 	bl	80089b0 <memchr>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d03f      	beq.n	800af0a <_vfiprintf_r+0x20e>
 800ae8a:	4b27      	ldr	r3, [pc, #156]	; (800af28 <_vfiprintf_r+0x22c>)
 800ae8c:	bb1b      	cbnz	r3, 800aed6 <_vfiprintf_r+0x1da>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	3307      	adds	r3, #7
 800ae92:	f023 0307 	bic.w	r3, r3, #7
 800ae96:	3308      	adds	r3, #8
 800ae98:	9303      	str	r3, [sp, #12]
 800ae9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae9c:	443b      	add	r3, r7
 800ae9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aea0:	e768      	b.n	800ad74 <_vfiprintf_r+0x78>
 800aea2:	460c      	mov	r4, r1
 800aea4:	2001      	movs	r0, #1
 800aea6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeaa:	e7a6      	b.n	800adfa <_vfiprintf_r+0xfe>
 800aeac:	2300      	movs	r3, #0
 800aeae:	f04f 0c0a 	mov.w	ip, #10
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	3401      	adds	r4, #1
 800aeb6:	9305      	str	r3, [sp, #20]
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aebe:	3a30      	subs	r2, #48	; 0x30
 800aec0:	2a09      	cmp	r2, #9
 800aec2:	d903      	bls.n	800aecc <_vfiprintf_r+0x1d0>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d0c6      	beq.n	800ae56 <_vfiprintf_r+0x15a>
 800aec8:	9105      	str	r1, [sp, #20]
 800aeca:	e7c4      	b.n	800ae56 <_vfiprintf_r+0x15a>
 800aecc:	4604      	mov	r4, r0
 800aece:	2301      	movs	r3, #1
 800aed0:	fb0c 2101 	mla	r1, ip, r1, r2
 800aed4:	e7f0      	b.n	800aeb8 <_vfiprintf_r+0x1bc>
 800aed6:	ab03      	add	r3, sp, #12
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	462a      	mov	r2, r5
 800aedc:	4630      	mov	r0, r6
 800aede:	4b13      	ldr	r3, [pc, #76]	; (800af2c <_vfiprintf_r+0x230>)
 800aee0:	a904      	add	r1, sp, #16
 800aee2:	f7fc fce7 	bl	80078b4 <_printf_float>
 800aee6:	4607      	mov	r7, r0
 800aee8:	1c78      	adds	r0, r7, #1
 800aeea:	d1d6      	bne.n	800ae9a <_vfiprintf_r+0x19e>
 800aeec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeee:	07d9      	lsls	r1, r3, #31
 800aef0:	d405      	bmi.n	800aefe <_vfiprintf_r+0x202>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	059a      	lsls	r2, r3, #22
 800aef6:	d402      	bmi.n	800aefe <_vfiprintf_r+0x202>
 800aef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefa:	f7fd fd58 	bl	80089ae <__retarget_lock_release_recursive>
 800aefe:	89ab      	ldrh	r3, [r5, #12]
 800af00:	065b      	lsls	r3, r3, #25
 800af02:	f53f af1d 	bmi.w	800ad40 <_vfiprintf_r+0x44>
 800af06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af08:	e71c      	b.n	800ad44 <_vfiprintf_r+0x48>
 800af0a:	ab03      	add	r3, sp, #12
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	462a      	mov	r2, r5
 800af10:	4630      	mov	r0, r6
 800af12:	4b06      	ldr	r3, [pc, #24]	; (800af2c <_vfiprintf_r+0x230>)
 800af14:	a904      	add	r1, sp, #16
 800af16:	f7fc ff6d 	bl	8007df4 <_printf_i>
 800af1a:	e7e4      	b.n	800aee6 <_vfiprintf_r+0x1ea>
 800af1c:	0800b87d 	.word	0x0800b87d
 800af20:	0800b883 	.word	0x0800b883
 800af24:	0800b887 	.word	0x0800b887
 800af28:	080078b5 	.word	0x080078b5
 800af2c:	0800acd7 	.word	0x0800acd7

0800af30 <__sflush_r>:
 800af30:	898a      	ldrh	r2, [r1, #12]
 800af32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af34:	4605      	mov	r5, r0
 800af36:	0710      	lsls	r0, r2, #28
 800af38:	460c      	mov	r4, r1
 800af3a:	d457      	bmi.n	800afec <__sflush_r+0xbc>
 800af3c:	684b      	ldr	r3, [r1, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	dc04      	bgt.n	800af4c <__sflush_r+0x1c>
 800af42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af44:	2b00      	cmp	r3, #0
 800af46:	dc01      	bgt.n	800af4c <__sflush_r+0x1c>
 800af48:	2000      	movs	r0, #0
 800af4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4e:	2e00      	cmp	r6, #0
 800af50:	d0fa      	beq.n	800af48 <__sflush_r+0x18>
 800af52:	2300      	movs	r3, #0
 800af54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af58:	682f      	ldr	r7, [r5, #0]
 800af5a:	6a21      	ldr	r1, [r4, #32]
 800af5c:	602b      	str	r3, [r5, #0]
 800af5e:	d032      	beq.n	800afc6 <__sflush_r+0x96>
 800af60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	075a      	lsls	r2, r3, #29
 800af66:	d505      	bpl.n	800af74 <__sflush_r+0x44>
 800af68:	6863      	ldr	r3, [r4, #4]
 800af6a:	1ac0      	subs	r0, r0, r3
 800af6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af6e:	b10b      	cbz	r3, 800af74 <__sflush_r+0x44>
 800af70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af72:	1ac0      	subs	r0, r0, r3
 800af74:	2300      	movs	r3, #0
 800af76:	4602      	mov	r2, r0
 800af78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af7a:	4628      	mov	r0, r5
 800af7c:	6a21      	ldr	r1, [r4, #32]
 800af7e:	47b0      	blx	r6
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	d106      	bne.n	800af94 <__sflush_r+0x64>
 800af86:	6829      	ldr	r1, [r5, #0]
 800af88:	291d      	cmp	r1, #29
 800af8a:	d82b      	bhi.n	800afe4 <__sflush_r+0xb4>
 800af8c:	4a28      	ldr	r2, [pc, #160]	; (800b030 <__sflush_r+0x100>)
 800af8e:	410a      	asrs	r2, r1
 800af90:	07d6      	lsls	r6, r2, #31
 800af92:	d427      	bmi.n	800afe4 <__sflush_r+0xb4>
 800af94:	2200      	movs	r2, #0
 800af96:	6062      	str	r2, [r4, #4]
 800af98:	6922      	ldr	r2, [r4, #16]
 800af9a:	04d9      	lsls	r1, r3, #19
 800af9c:	6022      	str	r2, [r4, #0]
 800af9e:	d504      	bpl.n	800afaa <__sflush_r+0x7a>
 800afa0:	1c42      	adds	r2, r0, #1
 800afa2:	d101      	bne.n	800afa8 <__sflush_r+0x78>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b903      	cbnz	r3, 800afaa <__sflush_r+0x7a>
 800afa8:	6560      	str	r0, [r4, #84]	; 0x54
 800afaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afac:	602f      	str	r7, [r5, #0]
 800afae:	2900      	cmp	r1, #0
 800afb0:	d0ca      	beq.n	800af48 <__sflush_r+0x18>
 800afb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afb6:	4299      	cmp	r1, r3
 800afb8:	d002      	beq.n	800afc0 <__sflush_r+0x90>
 800afba:	4628      	mov	r0, r5
 800afbc:	f7fe fb8c 	bl	80096d8 <_free_r>
 800afc0:	2000      	movs	r0, #0
 800afc2:	6360      	str	r0, [r4, #52]	; 0x34
 800afc4:	e7c1      	b.n	800af4a <__sflush_r+0x1a>
 800afc6:	2301      	movs	r3, #1
 800afc8:	4628      	mov	r0, r5
 800afca:	47b0      	blx	r6
 800afcc:	1c41      	adds	r1, r0, #1
 800afce:	d1c8      	bne.n	800af62 <__sflush_r+0x32>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0c5      	beq.n	800af62 <__sflush_r+0x32>
 800afd6:	2b1d      	cmp	r3, #29
 800afd8:	d001      	beq.n	800afde <__sflush_r+0xae>
 800afda:	2b16      	cmp	r3, #22
 800afdc:	d101      	bne.n	800afe2 <__sflush_r+0xb2>
 800afde:	602f      	str	r7, [r5, #0]
 800afe0:	e7b2      	b.n	800af48 <__sflush_r+0x18>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	e7ae      	b.n	800af4a <__sflush_r+0x1a>
 800afec:	690f      	ldr	r7, [r1, #16]
 800afee:	2f00      	cmp	r7, #0
 800aff0:	d0aa      	beq.n	800af48 <__sflush_r+0x18>
 800aff2:	0793      	lsls	r3, r2, #30
 800aff4:	bf18      	it	ne
 800aff6:	2300      	movne	r3, #0
 800aff8:	680e      	ldr	r6, [r1, #0]
 800affa:	bf08      	it	eq
 800affc:	694b      	ldreq	r3, [r1, #20]
 800affe:	1bf6      	subs	r6, r6, r7
 800b000:	600f      	str	r7, [r1, #0]
 800b002:	608b      	str	r3, [r1, #8]
 800b004:	2e00      	cmp	r6, #0
 800b006:	dd9f      	ble.n	800af48 <__sflush_r+0x18>
 800b008:	4633      	mov	r3, r6
 800b00a:	463a      	mov	r2, r7
 800b00c:	4628      	mov	r0, r5
 800b00e:	6a21      	ldr	r1, [r4, #32]
 800b010:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b014:	47e0      	blx	ip
 800b016:	2800      	cmp	r0, #0
 800b018:	dc06      	bgt.n	800b028 <__sflush_r+0xf8>
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	e790      	b.n	800af4a <__sflush_r+0x1a>
 800b028:	4407      	add	r7, r0
 800b02a:	1a36      	subs	r6, r6, r0
 800b02c:	e7ea      	b.n	800b004 <__sflush_r+0xd4>
 800b02e:	bf00      	nop
 800b030:	dfbffffe 	.word	0xdfbffffe

0800b034 <_fflush_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	690b      	ldr	r3, [r1, #16]
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b913      	cbnz	r3, 800b044 <_fflush_r+0x10>
 800b03e:	2500      	movs	r5, #0
 800b040:	4628      	mov	r0, r5
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	b118      	cbz	r0, 800b04e <_fflush_r+0x1a>
 800b046:	6a03      	ldr	r3, [r0, #32]
 800b048:	b90b      	cbnz	r3, 800b04e <_fflush_r+0x1a>
 800b04a:	f7fd fa7d 	bl	8008548 <__sinit>
 800b04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0f3      	beq.n	800b03e <_fflush_r+0xa>
 800b056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b058:	07d0      	lsls	r0, r2, #31
 800b05a:	d404      	bmi.n	800b066 <_fflush_r+0x32>
 800b05c:	0599      	lsls	r1, r3, #22
 800b05e:	d402      	bmi.n	800b066 <_fflush_r+0x32>
 800b060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b062:	f7fd fca3 	bl	80089ac <__retarget_lock_acquire_recursive>
 800b066:	4628      	mov	r0, r5
 800b068:	4621      	mov	r1, r4
 800b06a:	f7ff ff61 	bl	800af30 <__sflush_r>
 800b06e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b070:	4605      	mov	r5, r0
 800b072:	07da      	lsls	r2, r3, #31
 800b074:	d4e4      	bmi.n	800b040 <_fflush_r+0xc>
 800b076:	89a3      	ldrh	r3, [r4, #12]
 800b078:	059b      	lsls	r3, r3, #22
 800b07a:	d4e1      	bmi.n	800b040 <_fflush_r+0xc>
 800b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b07e:	f7fd fc96 	bl	80089ae <__retarget_lock_release_recursive>
 800b082:	e7dd      	b.n	800b040 <_fflush_r+0xc>

0800b084 <__swhatbuf_r>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	460c      	mov	r4, r1
 800b088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08c:	4615      	mov	r5, r2
 800b08e:	2900      	cmp	r1, #0
 800b090:	461e      	mov	r6, r3
 800b092:	b096      	sub	sp, #88	; 0x58
 800b094:	da0c      	bge.n	800b0b0 <__swhatbuf_r+0x2c>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	2100      	movs	r1, #0
 800b09a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b09e:	bf0c      	ite	eq
 800b0a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0a4:	2340      	movne	r3, #64	; 0x40
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	6031      	str	r1, [r6, #0]
 800b0aa:	602b      	str	r3, [r5, #0]
 800b0ac:	b016      	add	sp, #88	; 0x58
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}
 800b0b0:	466a      	mov	r2, sp
 800b0b2:	f000 f897 	bl	800b1e4 <_fstat_r>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	dbed      	blt.n	800b096 <__swhatbuf_r+0x12>
 800b0ba:	9901      	ldr	r1, [sp, #4]
 800b0bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0c4:	4259      	negs	r1, r3
 800b0c6:	4159      	adcs	r1, r3
 800b0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0cc:	e7eb      	b.n	800b0a6 <__swhatbuf_r+0x22>

0800b0ce <__smakebuf_r>:
 800b0ce:	898b      	ldrh	r3, [r1, #12]
 800b0d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0d2:	079d      	lsls	r5, r3, #30
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	d507      	bpl.n	800b0ea <__smakebuf_r+0x1c>
 800b0da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	6123      	str	r3, [r4, #16]
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	6163      	str	r3, [r4, #20]
 800b0e6:	b002      	add	sp, #8
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ea:	466a      	mov	r2, sp
 800b0ec:	ab01      	add	r3, sp, #4
 800b0ee:	f7ff ffc9 	bl	800b084 <__swhatbuf_r>
 800b0f2:	9900      	ldr	r1, [sp, #0]
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f7fe feb8 	bl	8009e6c <_malloc_r>
 800b0fc:	b948      	cbnz	r0, 800b112 <__smakebuf_r+0x44>
 800b0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b102:	059a      	lsls	r2, r3, #22
 800b104:	d4ef      	bmi.n	800b0e6 <__smakebuf_r+0x18>
 800b106:	f023 0303 	bic.w	r3, r3, #3
 800b10a:	f043 0302 	orr.w	r3, r3, #2
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	e7e3      	b.n	800b0da <__smakebuf_r+0xc>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	6020      	str	r0, [r4, #0]
 800b116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	9b00      	ldr	r3, [sp, #0]
 800b11e:	6120      	str	r0, [r4, #16]
 800b120:	6163      	str	r3, [r4, #20]
 800b122:	9b01      	ldr	r3, [sp, #4]
 800b124:	b15b      	cbz	r3, 800b13e <__smakebuf_r+0x70>
 800b126:	4630      	mov	r0, r6
 800b128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b12c:	f000 f86c 	bl	800b208 <_isatty_r>
 800b130:	b128      	cbz	r0, 800b13e <__smakebuf_r+0x70>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f023 0303 	bic.w	r3, r3, #3
 800b138:	f043 0301 	orr.w	r3, r3, #1
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	431d      	orrs	r5, r3
 800b142:	81a5      	strh	r5, [r4, #12]
 800b144:	e7cf      	b.n	800b0e6 <__smakebuf_r+0x18>

0800b146 <_putc_r>:
 800b146:	b570      	push	{r4, r5, r6, lr}
 800b148:	460d      	mov	r5, r1
 800b14a:	4614      	mov	r4, r2
 800b14c:	4606      	mov	r6, r0
 800b14e:	b118      	cbz	r0, 800b158 <_putc_r+0x12>
 800b150:	6a03      	ldr	r3, [r0, #32]
 800b152:	b90b      	cbnz	r3, 800b158 <_putc_r+0x12>
 800b154:	f7fd f9f8 	bl	8008548 <__sinit>
 800b158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b15a:	07d8      	lsls	r0, r3, #31
 800b15c:	d405      	bmi.n	800b16a <_putc_r+0x24>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	0599      	lsls	r1, r3, #22
 800b162:	d402      	bmi.n	800b16a <_putc_r+0x24>
 800b164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b166:	f7fd fc21 	bl	80089ac <__retarget_lock_acquire_recursive>
 800b16a:	68a3      	ldr	r3, [r4, #8]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	60a3      	str	r3, [r4, #8]
 800b172:	da05      	bge.n	800b180 <_putc_r+0x3a>
 800b174:	69a2      	ldr	r2, [r4, #24]
 800b176:	4293      	cmp	r3, r2
 800b178:	db12      	blt.n	800b1a0 <_putc_r+0x5a>
 800b17a:	b2eb      	uxtb	r3, r5
 800b17c:	2b0a      	cmp	r3, #10
 800b17e:	d00f      	beq.n	800b1a0 <_putc_r+0x5a>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	701d      	strb	r5, [r3, #0]
 800b188:	b2ed      	uxtb	r5, r5
 800b18a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b18c:	07da      	lsls	r2, r3, #31
 800b18e:	d405      	bmi.n	800b19c <_putc_r+0x56>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	059b      	lsls	r3, r3, #22
 800b194:	d402      	bmi.n	800b19c <_putc_r+0x56>
 800b196:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b198:	f7fd fc09 	bl	80089ae <__retarget_lock_release_recursive>
 800b19c:	4628      	mov	r0, r5
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7fd fade 	bl	8008766 <__swbuf_r>
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	e7ed      	b.n	800b18a <_putc_r+0x44>

0800b1ae <memmove>:
 800b1ae:	4288      	cmp	r0, r1
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	eb01 0402 	add.w	r4, r1, r2
 800b1b6:	d902      	bls.n	800b1be <memmove+0x10>
 800b1b8:	4284      	cmp	r4, r0
 800b1ba:	4623      	mov	r3, r4
 800b1bc:	d807      	bhi.n	800b1ce <memmove+0x20>
 800b1be:	1e43      	subs	r3, r0, #1
 800b1c0:	42a1      	cmp	r1, r4
 800b1c2:	d008      	beq.n	800b1d6 <memmove+0x28>
 800b1c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1cc:	e7f8      	b.n	800b1c0 <memmove+0x12>
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4402      	add	r2, r0
 800b1d2:	428a      	cmp	r2, r1
 800b1d4:	d100      	bne.n	800b1d8 <memmove+0x2a>
 800b1d6:	bd10      	pop	{r4, pc}
 800b1d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1e0:	e7f7      	b.n	800b1d2 <memmove+0x24>
	...

0800b1e4 <_fstat_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4d06      	ldr	r5, [pc, #24]	; (800b204 <_fstat_r+0x20>)
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	602b      	str	r3, [r5, #0]
 800b1f2:	f7f7 fc3c 	bl	8002a6e <_fstat>
 800b1f6:	1c43      	adds	r3, r0, #1
 800b1f8:	d102      	bne.n	800b200 <_fstat_r+0x1c>
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	b103      	cbz	r3, 800b200 <_fstat_r+0x1c>
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	bf00      	nop
 800b204:	200005f4 	.word	0x200005f4

0800b208 <_isatty_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	2300      	movs	r3, #0
 800b20c:	4d05      	ldr	r5, [pc, #20]	; (800b224 <_isatty_r+0x1c>)
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	602b      	str	r3, [r5, #0]
 800b214:	f7f7 fc3a 	bl	8002a8c <_isatty>
 800b218:	1c43      	adds	r3, r0, #1
 800b21a:	d102      	bne.n	800b222 <_isatty_r+0x1a>
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	b103      	cbz	r3, 800b222 <_isatty_r+0x1a>
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	200005f4 	.word	0x200005f4

0800b228 <_sbrk_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	2300      	movs	r3, #0
 800b22c:	4d05      	ldr	r5, [pc, #20]	; (800b244 <_sbrk_r+0x1c>)
 800b22e:	4604      	mov	r4, r0
 800b230:	4608      	mov	r0, r1
 800b232:	602b      	str	r3, [r5, #0]
 800b234:	f7f7 fc40 	bl	8002ab8 <_sbrk>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	d102      	bne.n	800b242 <_sbrk_r+0x1a>
 800b23c:	682b      	ldr	r3, [r5, #0]
 800b23e:	b103      	cbz	r3, 800b242 <_sbrk_r+0x1a>
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	200005f4 	.word	0x200005f4

0800b248 <__assert_func>:
 800b248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b24a:	4614      	mov	r4, r2
 800b24c:	461a      	mov	r2, r3
 800b24e:	4b09      	ldr	r3, [pc, #36]	; (800b274 <__assert_func+0x2c>)
 800b250:	4605      	mov	r5, r0
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68d8      	ldr	r0, [r3, #12]
 800b256:	b14c      	cbz	r4, 800b26c <__assert_func+0x24>
 800b258:	4b07      	ldr	r3, [pc, #28]	; (800b278 <__assert_func+0x30>)
 800b25a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b25e:	9100      	str	r1, [sp, #0]
 800b260:	462b      	mov	r3, r5
 800b262:	4906      	ldr	r1, [pc, #24]	; (800b27c <__assert_func+0x34>)
 800b264:	f000 f852 	bl	800b30c <fiprintf>
 800b268:	f000 f862 	bl	800b330 <abort>
 800b26c:	4b04      	ldr	r3, [pc, #16]	; (800b280 <__assert_func+0x38>)
 800b26e:	461c      	mov	r4, r3
 800b270:	e7f3      	b.n	800b25a <__assert_func+0x12>
 800b272:	bf00      	nop
 800b274:	200001d0 	.word	0x200001d0
 800b278:	0800b88e 	.word	0x0800b88e
 800b27c:	0800b89b 	.word	0x0800b89b
 800b280:	0800b8c9 	.word	0x0800b8c9

0800b284 <_calloc_r>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	fba1 5402 	umull	r5, r4, r1, r2
 800b28a:	b934      	cbnz	r4, 800b29a <_calloc_r+0x16>
 800b28c:	4629      	mov	r1, r5
 800b28e:	f7fe fded 	bl	8009e6c <_malloc_r>
 800b292:	4606      	mov	r6, r0
 800b294:	b928      	cbnz	r0, 800b2a2 <_calloc_r+0x1e>
 800b296:	4630      	mov	r0, r6
 800b298:	bd70      	pop	{r4, r5, r6, pc}
 800b29a:	220c      	movs	r2, #12
 800b29c:	2600      	movs	r6, #0
 800b29e:	6002      	str	r2, [r0, #0]
 800b2a0:	e7f9      	b.n	800b296 <_calloc_r+0x12>
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	f7fd faf3 	bl	8008890 <memset>
 800b2aa:	e7f4      	b.n	800b296 <_calloc_r+0x12>

0800b2ac <_realloc_r>:
 800b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	460e      	mov	r6, r1
 800b2b6:	b921      	cbnz	r1, 800b2c2 <_realloc_r+0x16>
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	f7fe bdd5 	b.w	8009e6c <_malloc_r>
 800b2c2:	b92a      	cbnz	r2, 800b2d0 <_realloc_r+0x24>
 800b2c4:	f7fe fa08 	bl	80096d8 <_free_r>
 800b2c8:	4625      	mov	r5, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	f000 f835 	bl	800b33e <_malloc_usable_size_r>
 800b2d4:	4284      	cmp	r4, r0
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	d802      	bhi.n	800b2e0 <_realloc_r+0x34>
 800b2da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2de:	d812      	bhi.n	800b306 <_realloc_r+0x5a>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	f7fe fdc2 	bl	8009e6c <_malloc_r>
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0ed      	beq.n	800b2ca <_realloc_r+0x1e>
 800b2ee:	42bc      	cmp	r4, r7
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	bf28      	it	cs
 800b2f6:	463a      	movcs	r2, r7
 800b2f8:	f7fd fb68 	bl	80089cc <memcpy>
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4640      	mov	r0, r8
 800b300:	f7fe f9ea 	bl	80096d8 <_free_r>
 800b304:	e7e1      	b.n	800b2ca <_realloc_r+0x1e>
 800b306:	4635      	mov	r5, r6
 800b308:	e7df      	b.n	800b2ca <_realloc_r+0x1e>
	...

0800b30c <fiprintf>:
 800b30c:	b40e      	push	{r1, r2, r3}
 800b30e:	b503      	push	{r0, r1, lr}
 800b310:	4601      	mov	r1, r0
 800b312:	ab03      	add	r3, sp, #12
 800b314:	4805      	ldr	r0, [pc, #20]	; (800b32c <fiprintf+0x20>)
 800b316:	f853 2b04 	ldr.w	r2, [r3], #4
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	f7ff fced 	bl	800acfc <_vfiprintf_r>
 800b322:	b002      	add	sp, #8
 800b324:	f85d eb04 	ldr.w	lr, [sp], #4
 800b328:	b003      	add	sp, #12
 800b32a:	4770      	bx	lr
 800b32c:	200001d0 	.word	0x200001d0

0800b330 <abort>:
 800b330:	2006      	movs	r0, #6
 800b332:	b508      	push	{r3, lr}
 800b334:	f000 f834 	bl	800b3a0 <raise>
 800b338:	2001      	movs	r0, #1
 800b33a:	f7f7 fb66 	bl	8002a0a <_exit>

0800b33e <_malloc_usable_size_r>:
 800b33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b342:	1f18      	subs	r0, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	bfbc      	itt	lt
 800b348:	580b      	ldrlt	r3, [r1, r0]
 800b34a:	18c0      	addlt	r0, r0, r3
 800b34c:	4770      	bx	lr

0800b34e <_raise_r>:
 800b34e:	291f      	cmp	r1, #31
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4604      	mov	r4, r0
 800b354:	460d      	mov	r5, r1
 800b356:	d904      	bls.n	800b362 <_raise_r+0x14>
 800b358:	2316      	movs	r3, #22
 800b35a:	6003      	str	r3, [r0, #0]
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295
 800b360:	bd38      	pop	{r3, r4, r5, pc}
 800b362:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b364:	b112      	cbz	r2, 800b36c <_raise_r+0x1e>
 800b366:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b36a:	b94b      	cbnz	r3, 800b380 <_raise_r+0x32>
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 f831 	bl	800b3d4 <_getpid_r>
 800b372:	462a      	mov	r2, r5
 800b374:	4601      	mov	r1, r0
 800b376:	4620      	mov	r0, r4
 800b378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b37c:	f000 b818 	b.w	800b3b0 <_kill_r>
 800b380:	2b01      	cmp	r3, #1
 800b382:	d00a      	beq.n	800b39a <_raise_r+0x4c>
 800b384:	1c59      	adds	r1, r3, #1
 800b386:	d103      	bne.n	800b390 <_raise_r+0x42>
 800b388:	2316      	movs	r3, #22
 800b38a:	6003      	str	r3, [r0, #0]
 800b38c:	2001      	movs	r0, #1
 800b38e:	e7e7      	b.n	800b360 <_raise_r+0x12>
 800b390:	2400      	movs	r4, #0
 800b392:	4628      	mov	r0, r5
 800b394:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b398:	4798      	blx	r3
 800b39a:	2000      	movs	r0, #0
 800b39c:	e7e0      	b.n	800b360 <_raise_r+0x12>
	...

0800b3a0 <raise>:
 800b3a0:	4b02      	ldr	r3, [pc, #8]	; (800b3ac <raise+0xc>)
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	6818      	ldr	r0, [r3, #0]
 800b3a6:	f7ff bfd2 	b.w	800b34e <_raise_r>
 800b3aa:	bf00      	nop
 800b3ac:	200001d0 	.word	0x200001d0

0800b3b0 <_kill_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_kill_r+0x20>)
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	602b      	str	r3, [r5, #0]
 800b3be:	f7f7 fb14 	bl	80029ea <_kill>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	d102      	bne.n	800b3cc <_kill_r+0x1c>
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	b103      	cbz	r3, 800b3cc <_kill_r+0x1c>
 800b3ca:	6023      	str	r3, [r4, #0]
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
 800b3ce:	bf00      	nop
 800b3d0:	200005f4 	.word	0x200005f4

0800b3d4 <_getpid_r>:
 800b3d4:	f7f7 bb02 	b.w	80029dc <_getpid>

0800b3d8 <_init>:
 800b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3da:	bf00      	nop
 800b3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3de:	bc08      	pop	{r3}
 800b3e0:	469e      	mov	lr, r3
 800b3e2:	4770      	bx	lr

0800b3e4 <_fini>:
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	bf00      	nop
 800b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ea:	bc08      	pop	{r3}
 800b3ec:	469e      	mov	lr, r3
 800b3ee:	4770      	bx	lr
