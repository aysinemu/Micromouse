
rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef20  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800f108  0800f108  0001f108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6c0  0800f6c0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f6c0  0800f6c0  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f6c0  0800f6c0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6c0  0800f6c0  0001f6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6c4  0800f6c4  0001f6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800f6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043b0  200001d8  0800f8a0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004588  0800f8a0  00024588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014dda  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d2c  00000000  00000000  0003501e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  00037d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fad  00000000  00000000  00039120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd4e  00000000  00000000  0003a0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017bcc  00000000  00000000  00056e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4b3e  00000000  00000000  0006e9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b88  00000000  00000000  00113528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0011a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800f0f0 	.word	0x0800f0f0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	0800f0f0 	.word	0x0800f0f0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_d2lz>:
 80011e8:	b538      	push	{r3, r4, r5, lr}
 80011ea:	4605      	mov	r5, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	2300      	movs	r3, #0
 80011f2:	4628      	mov	r0, r5
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff fc4d 	bl	8000a94 <__aeabi_dcmplt>
 80011fa:	b928      	cbnz	r0, 8001208 <__aeabi_d2lz+0x20>
 80011fc:	4628      	mov	r0, r5
 80011fe:	4621      	mov	r1, r4
 8001200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001204:	f000 b80a 	b.w	800121c <__aeabi_d2ulz>
 8001208:	4628      	mov	r0, r5
 800120a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800120e:	f000 f805 	bl	800121c <__aeabi_d2ulz>
 8001212:	4240      	negs	r0, r0
 8001214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001218:	bd38      	pop	{r3, r4, r5, pc}
 800121a:	bf00      	nop

0800121c <__aeabi_d2ulz>:
 800121c:	b5d0      	push	{r4, r6, r7, lr}
 800121e:	2200      	movs	r2, #0
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <__aeabi_d2ulz+0x34>)
 8001222:	4606      	mov	r6, r0
 8001224:	460f      	mov	r7, r1
 8001226:	f7ff f9c3 	bl	80005b0 <__aeabi_dmul>
 800122a:	f7ff fc99 	bl	8000b60 <__aeabi_d2uiz>
 800122e:	4604      	mov	r4, r0
 8001230:	f7ff f944 	bl	80004bc <__aeabi_ui2d>
 8001234:	2200      	movs	r2, #0
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <__aeabi_d2ulz+0x38>)
 8001238:	f7ff f9ba 	bl	80005b0 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4630      	mov	r0, r6
 8001242:	4639      	mov	r1, r7
 8001244:	f7fe fffc 	bl	8000240 <__aeabi_dsub>
 8001248:	f7ff fc8a 	bl	8000b60 <__aeabi_d2uiz>
 800124c:	4621      	mov	r1, r4
 800124e:	bdd0      	pop	{r4, r6, r7, pc}
 8001250:	3df00000 	.word	0x3df00000
 8001254:	41f00000 	.word	0x41f00000

08001258 <timer_Right>:

uint16_t counterWheel = 0;
int16_t rightWheel = 0;
int16_t leftWheel = 0;

void timer_Right(uint8_t timer){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2110      	movs	r1, #16
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <timer_Right+0x74>)
 8001268:	f006 f889 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <timer_Right+0x74>)
 8001274:	f006 f883 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	4814      	ldr	r0, [pc, #80]	; (80012d0 <timer_Right+0x78>)
 800127e:	f006 f87e 	bl	800737e <HAL_GPIO_WritePin>
	timerRight += timer;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <timer_Right+0x7c>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <timer_Right+0x7c>)
 8001290:	801a      	strh	r2, [r3, #0]
    if (timerRight > MAX_TIMER_RIGHT_VALUE) {
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <timer_Right+0x7c>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	f241 029a 	movw	r2, #4250	; 0x109a
 800129a:	4293      	cmp	r3, r2
 800129c:	d903      	bls.n	80012a6 <timer_Right+0x4e>
    	timerRight = MAX_TIMER_RIGHT_VALUE;
 800129e:	f241 029a 	movw	r2, #4250	; 0x109a
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <timer_Right+0x7c>)
 80012a4:	801a      	strh	r2, [r3, #0]
    }
    if (timerLeft > MIN_TIMER_LEFT_VALUE) {
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <timer_Right+0x80>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	f640 723c 	movw	r2, #3900	; 0xf3c
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d907      	bls.n	80012c2 <timer_Right+0x6a>
    	timerLeft -= timer;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <timer_Right+0x80>)
 80012b4:	881a      	ldrh	r2, [r3, #0]
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <timer_Right+0x80>)
 80012c0:	801a      	strh	r2, [r3, #0]
    }
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40010800 	.word	0x40010800
 80012d4:	20000002 	.word	0x20000002
 80012d8:	20000000 	.word	0x20000000

080012dc <timer_Left>:
void timer_Left(uint8_t timer){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ec:	4818      	ldr	r0, [pc, #96]	; (8001350 <timer_Left+0x74>)
 80012ee:	f006 f846 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2110      	movs	r1, #16
 80012f6:	4816      	ldr	r0, [pc, #88]	; (8001350 <timer_Left+0x74>)
 80012f8:	f006 f841 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2110      	movs	r1, #16
 8001300:	4814      	ldr	r0, [pc, #80]	; (8001354 <timer_Left+0x78>)
 8001302:	f006 f83c 	bl	800737e <HAL_GPIO_WritePin>
	timerLeft += timer;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <timer_Left+0x7c>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <timer_Left+0x7c>)
 8001314:	801a      	strh	r2, [r3, #0]
    if (timerLeft > MAX_TIMER_LEFT_VALUE) {
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <timer_Left+0x7c>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	f241 0204 	movw	r2, #4100	; 0x1004
 800131e:	4293      	cmp	r3, r2
 8001320:	d903      	bls.n	800132a <timer_Left+0x4e>
    	timerLeft = MAX_TIMER_LEFT_VALUE;
 8001322:	f241 0204 	movw	r2, #4100	; 0x1004
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <timer_Left+0x7c>)
 8001328:	801a      	strh	r2, [r3, #0]
    }
    if (timerRight > MIN_TIMER_RIGHT_VALUE) {
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <timer_Left+0x80>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	f640 72d2 	movw	r2, #4050	; 0xfd2
 8001332:	4293      	cmp	r3, r2
 8001334:	d907      	bls.n	8001346 <timer_Left+0x6a>
    	timerRight -= timer;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <timer_Left+0x80>)
 8001338:	881a      	ldrh	r2, [r3, #0]
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <timer_Left+0x80>)
 8001344:	801a      	strh	r2, [r3, #0]
    }
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010c00 	.word	0x40010c00
 8001354:	40010800 	.word	0x40010800
 8001358:	20000000 	.word	0x20000000
 800135c:	20000002 	.word	0x20000002

08001360 <forwardGPIO>:

void forwardGPIO(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <forwardGPIO+0x40>)
 800136a:	f006 f808 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2101      	movs	r1, #1
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <forwardGPIO+0x44>)
 8001374:	f006 f803 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2102      	movs	r1, #2
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <forwardGPIO+0x44>)
 800137e:	f005 fffe 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <forwardGPIO+0x44>)
 800138a:	f005 fff8 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <forwardGPIO+0x44>)
 8001396:	f005 fff2 	bl	800737e <HAL_GPIO_WritePin>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00

080013a8 <API_moveForward>:
// led 5 left
//-1250;
int16_t lastpositionLeft;
int16_t lastpositionRight;

void API_moveForward(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
	forwardGPIO();
 80013ae:	f7ff ffd7 	bl	8001360 <forwardGPIO>
	bno055_euler_t lastYaw = CurrentYaw();
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 fb44 	bl	8003a44 <CurrentYaw>
	bno055_euler_t currentYaw;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeft); //left
 80013bc:	4b96      	ldr	r3, [pc, #600]	; (8001618 <API_moveForward+0x270>)
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	4b96      	ldr	r3, [pc, #600]	; (800161c <API_moveForward+0x274>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRight); // right
 80013c6:	4b96      	ldr	r3, [pc, #600]	; (8001620 <API_moveForward+0x278>)
 80013c8:	881a      	ldrh	r2, [r3, #0]
 80013ca:	4b96      	ldr	r3, [pc, #600]	; (8001624 <API_moveForward+0x27c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40

	rightWheel = 0;
 80013d0:	4b95      	ldr	r3, [pc, #596]	; (8001628 <API_moveForward+0x280>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	801a      	strh	r2, [r3, #0]
	leftWheel = 0;
 80013d6:	4b95      	ldr	r3, [pc, #596]	; (800162c <API_moveForward+0x284>)
 80013d8:	2200      	movs	r2, #0
 80013da:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	77fb      	strb	r3, [r7, #31]

	lastpositionLeft = countTim3;
 80013e0:	4b93      	ldr	r3, [pc, #588]	; (8001630 <API_moveForward+0x288>)
 80013e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013e6:	4b93      	ldr	r3, [pc, #588]	; (8001634 <API_moveForward+0x28c>)
 80013e8:	801a      	strh	r2, [r3, #0]
	lastpositionRight = countTim2;
 80013ea:	4b93      	ldr	r3, [pc, #588]	; (8001638 <API_moveForward+0x290>)
 80013ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013f0:	4b92      	ldr	r3, [pc, #584]	; (800163c <API_moveForward+0x294>)
 80013f2:	801a      	strh	r2, [r3, #0]

	while(1){
		left = distanceLeft();
 80013f4:	f002 fb3c 	bl	8003a70 <distanceLeft>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4990      	ldr	r1, [pc, #576]	; (8001640 <API_moveForward+0x298>)
 80013fe:	e9c1 2300 	strd	r2, r3, [r1]
		right = distanceRight();
 8001402:	f002 fc25 	bl	8003c50 <distanceRight>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	498e      	ldr	r1, [pc, #568]	; (8001644 <API_moveForward+0x29c>)
 800140c:	e9c1 2300 	strd	r2, r3, [r1]
		straight = distanceStraight();
 8001410:	f002 fba6 	bl	8003b60 <distanceStraight>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	498b      	ldr	r1, [pc, #556]	; (8001648 <API_moveForward+0x2a0>)
 800141a:	e9c1 2300 	strd	r2, r3, [r1]


		if(straight < 5.5) {
 800141e:	4b8a      	ldr	r3, [pc, #552]	; (8001648 <API_moveForward+0x2a0>)
 8001420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b88      	ldr	r3, [pc, #544]	; (800164c <API_moveForward+0x2a4>)
 800142a:	f7ff fb33 	bl	8000a94 <__aeabi_dcmplt>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 81aa 	bne.w	800178a <API_moveForward+0x3e2>
			break;
		}

		else if(lastpositionRight - countTim2 > 1260 && lastpositionLeft - countTim3 > 1260){
 8001436:	4b81      	ldr	r3, [pc, #516]	; (800163c <API_moveForward+0x294>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	461a      	mov	r2, r3
 800143e:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <API_moveForward+0x290>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f240 42ec 	movw	r2, #1260	; 0x4ec
 800144a:	4293      	cmp	r3, r2
 800144c:	dd23      	ble.n	8001496 <API_moveForward+0xee>
 800144e:	4b79      	ldr	r3, [pc, #484]	; (8001634 <API_moveForward+0x28c>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	461a      	mov	r2, r3
 8001456:	4b76      	ldr	r3, [pc, #472]	; (8001630 <API_moveForward+0x288>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8001462:	4293      	cmp	r3, r2
 8001464:	dd17      	ble.n	8001496 <API_moveForward+0xee>
			if(straight < 5.5 || straight > 12){
 8001466:	4b78      	ldr	r3, [pc, #480]	; (8001648 <API_moveForward+0x2a0>)
 8001468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b76      	ldr	r3, [pc, #472]	; (800164c <API_moveForward+0x2a4>)
 8001472:	f7ff fb0f 	bl	8000a94 <__aeabi_dcmplt>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 8187 	bne.w	800178c <API_moveForward+0x3e4>
 800147e:	4b72      	ldr	r3, [pc, #456]	; (8001648 <API_moveForward+0x2a0>)
 8001480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b71      	ldr	r3, [pc, #452]	; (8001650 <API_moveForward+0x2a8>)
 800148a:	f7ff fb21 	bl	8000ad0 <__aeabi_dcmpgt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	f040 817b 	bne.w	800178c <API_moveForward+0x3e4>
				break;
			}
		}

		if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0){
 8001496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149a:	486e      	ldr	r0, [pc, #440]	; (8001654 <API_moveForward+0x2ac>)
 800149c:	f005 ff58 	bl	8007350 <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <API_moveForward+0x10a>
			timer_Left(30);
 80014a6:	201e      	movs	r0, #30
 80014a8:	f7ff ff18 	bl	80012dc <timer_Left>
			flag = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	77fb      	strb	r3, [r7, #31]
 80014b0:	e15a      	b.n	8001768 <API_moveForward+0x3c0>

		}
		else if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0){
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	4867      	ldr	r0, [pc, #412]	; (8001654 <API_moveForward+0x2ac>)
 80014b8:	f005 ff4a 	bl	8007350 <HAL_GPIO_ReadPin>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <API_moveForward+0x126>
			timer_Right(30);
 80014c2:	201e      	movs	r0, #30
 80014c4:	f7ff fec8 	bl	8001258 <timer_Right>
			flag = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	77fb      	strb	r3, [r7, #31]
 80014cc:	e14c      	b.n	8001768 <API_moveForward+0x3c0>
		}


		else if(left < 5){
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <API_moveForward+0x298>)
 80014d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <API_moveForward+0x2b0>)
 80014da:	f7ff fadb 	bl	8000a94 <__aeabi_dcmplt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <API_moveForward+0x148>
			timer_Left(10);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f7ff fef9 	bl	80012dc <timer_Left>
			flag = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	77fb      	strb	r3, [r7, #31]
 80014ee:	e13b      	b.n	8001768 <API_moveForward+0x3c0>
		}
		else if( right < 5){
 80014f0:	4b54      	ldr	r3, [pc, #336]	; (8001644 <API_moveForward+0x29c>)
 80014f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b57      	ldr	r3, [pc, #348]	; (8001658 <API_moveForward+0x2b0>)
 80014fc:	f7ff faca 	bl	8000a94 <__aeabi_dcmplt>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <API_moveForward+0x16a>
			timer_Right(10);
 8001506:	200a      	movs	r0, #10
 8001508:	f7ff fea6 	bl	8001258 <timer_Right>
			flag = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	77fb      	strb	r3, [r7, #31]
 8001510:	e12a      	b.n	8001768 <API_moveForward+0x3c0>
		}
		else if(left >= 5 && left < 12 && right >= 5 && right < 12){
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <API_moveForward+0x298>)
 8001514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b4e      	ldr	r3, [pc, #312]	; (8001658 <API_moveForward+0x2b0>)
 800151e:	f7ff facd 	bl	8000abc <__aeabi_dcmpge>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d037      	beq.n	8001598 <API_moveForward+0x1f0>
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <API_moveForward+0x298>)
 800152a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <API_moveForward+0x2a8>)
 8001534:	f7ff faae 	bl	8000a94 <__aeabi_dcmplt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d02c      	beq.n	8001598 <API_moveForward+0x1f0>
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <API_moveForward+0x29c>)
 8001540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <API_moveForward+0x2b0>)
 800154a:	f7ff fab7 	bl	8000abc <__aeabi_dcmpge>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d021      	beq.n	8001598 <API_moveForward+0x1f0>
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <API_moveForward+0x29c>)
 8001556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <API_moveForward+0x2a8>)
 8001560:	f7ff fa98 	bl	8000a94 <__aeabi_dcmplt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <API_moveForward+0x1f0>
			if(left < right){
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <API_moveForward+0x298>)
 800156c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <API_moveForward+0x29c>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff fa8d 	bl	8000a94 <__aeabi_dcmplt>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <API_moveForward+0x1e4>
				timer_Left(30);
 8001580:	201e      	movs	r0, #30
 8001582:	f7ff feab 	bl	80012dc <timer_Left>
				flag = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	77fb      	strb	r3, [r7, #31]
			if(left < right){
 800158a:	e0ed      	b.n	8001768 <API_moveForward+0x3c0>
			}
			else {
				timer_Right(30);
 800158c:	201e      	movs	r0, #30
 800158e:	f7ff fe63 	bl	8001258 <timer_Right>
				flag = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	77fb      	strb	r3, [r7, #31]
			if(left < right){
 8001596:	e0e7      	b.n	8001768 <API_moveForward+0x3c0>
			}
		}

		else if(left >= 12){
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <API_moveForward+0x298>)
 800159a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <API_moveForward+0x2a8>)
 80015a4:	f7ff fa8a 	bl	8000abc <__aeabi_dcmpge>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d058      	beq.n	8001660 <API_moveForward+0x2b8>
			if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0 ||( right > 5.5 && right < 12)){
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	4828      	ldr	r0, [pc, #160]	; (8001654 <API_moveForward+0x2ac>)
 80015b4:	f005 fecc 	bl	8007350 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d017      	beq.n	80015ee <API_moveForward+0x246>
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <API_moveForward+0x29c>)
 80015c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <API_moveForward+0x2a4>)
 80015ca:	f7ff fa81 	bl	8000ad0 <__aeabi_dcmpgt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80c9 	beq.w	8001768 <API_moveForward+0x3c0>
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <API_moveForward+0x29c>)
 80015d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <API_moveForward+0x2a8>)
 80015e2:	f7ff fa57 	bl	8000a94 <__aeabi_dcmplt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80bd 	beq.w	8001768 <API_moveForward+0x3c0>
				if(right > 7) {
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <API_moveForward+0x29c>)
 80015f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <API_moveForward+0x2b4>)
 80015fa:	f7ff fa69 	bl	8000ad0 <__aeabi_dcmpgt>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <API_moveForward+0x264>
					timer_Left(30);
 8001604:	201e      	movs	r0, #30
 8001606:	f7ff fe69 	bl	80012dc <timer_Left>
 800160a:	e002      	b.n	8001612 <API_moveForward+0x26a>
				}
				else {
					timer_Left(10);
 800160c:	200a      	movs	r0, #10
 800160e:	f7ff fe65 	bl	80012dc <timer_Left>
				}
				flag = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	77fb      	strb	r3, [r7, #31]
 8001616:	e0a7      	b.n	8001768 <API_moveForward+0x3c0>
 8001618:	20000000 	.word	0x20000000
 800161c:	200002fc 	.word	0x200002fc
 8001620:	20000002 	.word	0x20000002
 8001624:	200003d4 	.word	0x200003d4
 8001628:	20000210 	.word	0x20000210
 800162c:	20000212 	.word	0x20000212
 8001630:	2000048c 	.word	0x2000048c
 8001634:	20000214 	.word	0x20000214
 8001638:	20000484 	.word	0x20000484
 800163c:	20000216 	.word	0x20000216
 8001640:	200001f8 	.word	0x200001f8
 8001644:	20000200 	.word	0x20000200
 8001648:	20000208 	.word	0x20000208
 800164c:	40160000 	.word	0x40160000
 8001650:	40280000 	.word	0x40280000
 8001654:	40010800 	.word	0x40010800
 8001658:	40140000 	.word	0x40140000
 800165c:	401c0000 	.word	0x401c0000
			}

		}

		else if(right >= 12 ){
 8001660:	4b73      	ldr	r3, [pc, #460]	; (8001830 <API_moveForward+0x488>)
 8001662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b72      	ldr	r3, [pc, #456]	; (8001834 <API_moveForward+0x48c>)
 800166c:	f7ff fa26 	bl	8000abc <__aeabi_dcmpge>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d037      	beq.n	80016e6 <API_moveForward+0x33e>
			if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0 || ( left > 5.5 && left <12)){
 8001676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167a:	486f      	ldr	r0, [pc, #444]	; (8001838 <API_moveForward+0x490>)
 800167c:	f005 fe68 	bl	8007350 <HAL_GPIO_ReadPin>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d015      	beq.n	80016b2 <API_moveForward+0x30a>
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <API_moveForward+0x494>)
 8001688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <API_moveForward+0x498>)
 8001692:	f7ff fa1d 	bl	8000ad0 <__aeabi_dcmpgt>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01e      	beq.n	80016da <API_moveForward+0x332>
 800169c:	4b67      	ldr	r3, [pc, #412]	; (800183c <API_moveForward+0x494>)
 800169e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <API_moveForward+0x48c>)
 80016a8:	f7ff f9f4 	bl	8000a94 <__aeabi_dcmplt>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d013      	beq.n	80016da <API_moveForward+0x332>
				if(left > 7) {
 80016b2:	4b62      	ldr	r3, [pc, #392]	; (800183c <API_moveForward+0x494>)
 80016b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <API_moveForward+0x49c>)
 80016be:	f7ff fa07 	bl	8000ad0 <__aeabi_dcmpgt>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <API_moveForward+0x328>
					timer_Left(30);
 80016c8:	201e      	movs	r0, #30
 80016ca:	f7ff fe07 	bl	80012dc <timer_Left>
 80016ce:	e002      	b.n	80016d6 <API_moveForward+0x32e>
				}
				else {
					timer_Left(10);
 80016d0:	200a      	movs	r0, #10
 80016d2:	f7ff fe03 	bl	80012dc <timer_Left>
				}
				flag = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	77fb      	strb	r3, [r7, #31]
			}
			timer_Right(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f7ff fdbc 	bl	8001258 <timer_Right>
			flag = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	77fb      	strb	r3, [r7, #31]
 80016e4:	e040      	b.n	8001768 <API_moveForward+0x3c0>
		}
		else{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2110      	movs	r1, #16
 80016ea:	4853      	ldr	r0, [pc, #332]	; (8001838 <API_moveForward+0x490>)
 80016ec:	f005 fe47 	bl	800737e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2110      	movs	r1, #16
 80016f4:	4854      	ldr	r0, [pc, #336]	; (8001848 <API_moveForward+0x4a0>)
 80016f6:	f005 fe42 	bl	800737e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED5_Pin, RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001700:	4851      	ldr	r0, [pc, #324]	; (8001848 <API_moveForward+0x4a0>)
 8001702:	f005 fe3c 	bl	800737e <HAL_GPIO_WritePin>
			if(((lastTim2_Right - countTim2) -(lastTim3_Left - countTim3)) > 3){
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <API_moveForward+0x4a4>)
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	461a      	mov	r2, r3
 800170e:	4b50      	ldr	r3, [pc, #320]	; (8001850 <API_moveForward+0x4a8>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	1ad2      	subs	r2, r2, r3
 8001716:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <API_moveForward+0x4ac>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	4619      	mov	r1, r3
 800171e:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <API_moveForward+0x4b0>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	1acb      	subs	r3, r1, r3
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b03      	cmp	r3, #3
 800172a:	dd05      	ble.n	8001738 <API_moveForward+0x390>
				timer_Left(10);
 800172c:	200a      	movs	r0, #10
 800172e:	f7ff fdd5 	bl	80012dc <timer_Left>
				flag = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	77fb      	strb	r3, [r7, #31]
 8001736:	e017      	b.n	8001768 <API_moveForward+0x3c0>
			}
			else if(((lastTim3_Left - countTim3) -(lastTim2_Right - countTim2) ) > 3){
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <API_moveForward+0x4ac>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	461a      	mov	r2, r3
 8001740:	4b45      	ldr	r3, [pc, #276]	; (8001858 <API_moveForward+0x4b0>)
 8001742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001746:	1ad2      	subs	r2, r2, r3
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <API_moveForward+0x4a4>)
 800174a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174e:	4619      	mov	r1, r3
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <API_moveForward+0x4a8>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	1acb      	subs	r3, r1, r3
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b03      	cmp	r3, #3
 800175c:	dd04      	ble.n	8001768 <API_moveForward+0x3c0>
				timer_Right(10);
 800175e:	200a      	movs	r0, #10
 8001760:	f7ff fd7a 	bl	8001258 <timer_Right>
				flag = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
			}
		}
		if(flag == 0){
 8001768:	7ffb      	ldrb	r3, [r7, #31]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f47f ae42 	bne.w	80013f4 <API_moveForward+0x4c>
			flag = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	77fb      	strb	r3, [r7, #31]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeft); //left
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <API_moveForward+0x4b4>)
 8001776:	881a      	ldrh	r2, [r3, #0]
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <API_moveForward+0x4b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRight); // right
 800177e:	4b39      	ldr	r3, [pc, #228]	; (8001864 <API_moveForward+0x4bc>)
 8001780:	881a      	ldrh	r2, [r3, #0]
 8001782:	4b39      	ldr	r3, [pc, #228]	; (8001868 <API_moveForward+0x4c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
		left = distanceLeft();
 8001788:	e634      	b.n	80013f4 <API_moveForward+0x4c>
			break;
 800178a:	bf00      	nop
		}
	}
	while (1) {
	    currentYaw = CurrentYaw();
 800178c:	463b      	mov	r3, r7
 800178e:	4618      	mov	r0, r3
 8001790:	f002 f958 	bl	8003a44 <CurrentYaw>

	    // Calculate the raw difference
	    float yawDifference = currentYaw.yaw - lastYaw.yaw;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fa54 	bl	8000c48 <__aeabi_fsub>
 80017a0:	4603      	mov	r3, r0
 80017a2:	61bb      	str	r3, [r7, #24]

	    // Handle wrapping around the 360-degree mark
	    if (yawDifference > 180.0) {
 80017a4:	4931      	ldr	r1, [pc, #196]	; (800186c <API_moveForward+0x4c4>)
 80017a6:	69b8      	ldr	r0, [r7, #24]
 80017a8:	f7ff fd14 	bl	80011d4 <__aeabi_fcmpgt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <API_moveForward+0x418>
	        yawDifference -= 360.0;
 80017b2:	492f      	ldr	r1, [pc, #188]	; (8001870 <API_moveForward+0x4c8>)
 80017b4:	69b8      	ldr	r0, [r7, #24]
 80017b6:	f7ff fa47 	bl	8000c48 <__aeabi_fsub>
 80017ba:	4603      	mov	r3, r0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e00c      	b.n	80017da <API_moveForward+0x432>
	    } else if (yawDifference < -180.0) {
 80017c0:	492c      	ldr	r1, [pc, #176]	; (8001874 <API_moveForward+0x4cc>)
 80017c2:	69b8      	ldr	r0, [r7, #24]
 80017c4:	f7ff fce8 	bl	8001198 <__aeabi_fcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <API_moveForward+0x432>
	        yawDifference += 360.0;
 80017ce:	4928      	ldr	r1, [pc, #160]	; (8001870 <API_moveForward+0x4c8>)
 80017d0:	69b8      	ldr	r0, [r7, #24]
 80017d2:	f7ff fa3b 	bl	8000c4c <__addsf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	61bb      	str	r3, [r7, #24]
	    }

	    // Check if the yaw difference is greater than 5 degrees
	    if (yawDifference > 5.0) {
 80017da:	4927      	ldr	r1, [pc, #156]	; (8001878 <API_moveForward+0x4d0>)
 80017dc:	69b8      	ldr	r0, [r7, #24]
 80017de:	f7ff fcf9 	bl	80011d4 <__aeabi_fcmpgt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <API_moveForward+0x454>
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);     // left motor off
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <API_moveForward+0x4b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 4150);  // right motor forward
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <API_moveForward+0x4c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f241 0236 	movw	r2, #4150	; 0x1036
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
 80017fa:	e7c7      	b.n	800178c <API_moveForward+0x3e4>
	    }
	    // Check if the yaw difference is less than -5 degrees
	    else if (yawDifference < -5.0) {
 80017fc:	491f      	ldr	r1, [pc, #124]	; (800187c <API_moveForward+0x4d4>)
 80017fe:	69b8      	ldr	r0, [r7, #24]
 8001800:	f7ff fcca 	bl	8001198 <__aeabi_fcmplt>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <API_moveForward+0x476>
	        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 4000);  // left motor forward
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <API_moveForward+0x4b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);     // right motor off
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <API_moveForward+0x4c0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
 800181c:	e7b6      	b.n	800178c <API_moveForward+0x3e4>
	    }
	    // Within the 5-degree tolerance
	    else {
	        stop();
 800181e:	f000 fbf3 	bl	8002008 <stop>
	        HAL_Delay(150);
 8001822:	2096      	movs	r0, #150	; 0x96
 8001824:	f004 fe64 	bl	80064f0 <HAL_Delay>
	        return;
 8001828:	bf00      	nop
	    }
	}
}
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000200 	.word	0x20000200
 8001834:	40280000 	.word	0x40280000
 8001838:	40010800 	.word	0x40010800
 800183c:	200001f8 	.word	0x200001f8
 8001840:	40160000 	.word	0x40160000
 8001844:	401c0000 	.word	0x401c0000
 8001848:	40010c00 	.word	0x40010c00
 800184c:	200001f6 	.word	0x200001f6
 8001850:	20000484 	.word	0x20000484
 8001854:	200001f4 	.word	0x200001f4
 8001858:	2000048c 	.word	0x2000048c
 800185c:	20000000 	.word	0x20000000
 8001860:	200002fc 	.word	0x200002fc
 8001864:	20000002 	.word	0x20000002
 8001868:	200003d4 	.word	0x200003d4
 800186c:	43340000 	.word	0x43340000
 8001870:	43b40000 	.word	0x43b40000
 8001874:	c3340000 	.word	0xc3340000
 8001878:	40a00000 	.word	0x40a00000
 800187c:	c0a00000 	.word	0xc0a00000

08001880 <API_turnRight>:
	HAL_GPIO_WritePin(BI2_GPIO_Port, AI2_Pin,RESET);
	HAL_GPIO_WritePin(BI1_GPIO_Port, AI1_Pin,SET);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0); // right
}
void API_turnRight(){
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2120      	movs	r1, #32
 800188a:	4868      	ldr	r0, [pc, #416]	; (8001a2c <API_turnRight+0x1ac>)
 800188c:	f005 fd77 	bl	800737e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 8001890:	2201      	movs	r2, #1
 8001892:	2101      	movs	r1, #1
 8001894:	4866      	ldr	r0, [pc, #408]	; (8001a30 <API_turnRight+0x1b0>)
 8001896:	f005 fd72 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2102      	movs	r1, #2
 800189e:	4864      	ldr	r0, [pc, #400]	; (8001a30 <API_turnRight+0x1b0>)
 80018a0:	f005 fd6d 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018aa:	4861      	ldr	r0, [pc, #388]	; (8001a30 <API_turnRight+0x1b0>)
 80018ac:	f005 fd67 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b6:	485e      	ldr	r0, [pc, #376]	; (8001a30 <API_turnRight+0x1b0>)
 80018b8:	f005 fd61 	bl	800737e <HAL_GPIO_WritePin>

	bno055_euler_t lastYaw = CurrentYaw();
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 f8bf 	bl	8003a44 <CurrentYaw>
	bno055_euler_t currentYaw;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <API_turnRight+0x1b4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <API_turnRight+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f241 0236 	movw	r2, #4150	; 0x1036
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40

    float target_yaw = lastYaw.yaw + 90;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4957      	ldr	r1, [pc, #348]	; (8001a3c <API_turnRight+0x1bc>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f9b4 	bl	8000c4c <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 80018e8:	4955      	ldr	r1, [pc, #340]	; (8001a40 <API_turnRight+0x1c0>)
 80018ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ec:	f7ff fc68 	bl	80011c0 <__aeabi_fcmpge>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <API_turnRight+0x84>
        target_yaw -= 360.0;
 80018f6:	4952      	ldr	r1, [pc, #328]	; (8001a40 <API_turnRight+0x1c0>)
 80018f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018fa:	f7ff f9a5 	bl	8000c48 <__aeabi_fsub>
 80018fe:	4603      	mov	r3, r0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	e00d      	b.n	8001920 <API_turnRight+0xa0>
    } else if (target_yaw < 0.0) {
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800190a:	f7ff fc45 	bl	8001198 <__aeabi_fcmplt>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <API_turnRight+0xa0>
        target_yaw += 360.0;
 8001914:	494a      	ldr	r1, [pc, #296]	; (8001a40 <API_turnRight+0x1c0>)
 8001916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001918:	f7ff f998 	bl	8000c4c <__addsf3>
 800191c:	4603      	mov	r3, r0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    float mean = 0;
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    while (1) {
        currentYaw = CurrentYaw();
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4618      	mov	r0, r3
 800192a:	f002 f88b 	bl	8003a44 <CurrentYaw>

        // Calculate the yaw difference and handle wrapping
        float yawDifference = currentYaw.yaw - target_yaw;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f988 	bl	8000c48 <__aeabi_fsub>
 8001938:	4603      	mov	r3, r0
 800193a:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 800193c:	4941      	ldr	r1, [pc, #260]	; (8001a44 <API_turnRight+0x1c4>)
 800193e:	6a38      	ldr	r0, [r7, #32]
 8001940:	f7ff fc48 	bl	80011d4 <__aeabi_fcmpgt>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <API_turnRight+0xd8>
            yawDifference -= 360.0;
 800194a:	493d      	ldr	r1, [pc, #244]	; (8001a40 <API_turnRight+0x1c0>)
 800194c:	6a38      	ldr	r0, [r7, #32]
 800194e:	f7ff f97b 	bl	8000c48 <__aeabi_fsub>
 8001952:	4603      	mov	r3, r0
 8001954:	623b      	str	r3, [r7, #32]
 8001956:	e00c      	b.n	8001972 <API_turnRight+0xf2>
        } else if (yawDifference < -180.0) {
 8001958:	493b      	ldr	r1, [pc, #236]	; (8001a48 <API_turnRight+0x1c8>)
 800195a:	6a38      	ldr	r0, [r7, #32]
 800195c:	f7ff fc1c 	bl	8001198 <__aeabi_fcmplt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <API_turnRight+0xf2>
            yawDifference += 360.0;
 8001966:	4936      	ldr	r1, [pc, #216]	; (8001a40 <API_turnRight+0x1c0>)
 8001968:	6a38      	ldr	r0, [r7, #32]
 800196a:	f7ff f96f 	bl	8000c4c <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001978:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 800197a:	4934      	ldr	r1, [pc, #208]	; (8001a4c <API_turnRight+0x1cc>)
 800197c:	69f8      	ldr	r0, [r7, #28]
 800197e:	f7ff fc0b 	bl	8001198 <__aeabi_fcmplt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d011      	beq.n	80019ac <API_turnRight+0x12c>
 8001988:	4931      	ldr	r1, [pc, #196]	; (8001a50 <API_turnRight+0x1d0>)
 800198a:	69f8      	ldr	r0, [r7, #28]
 800198c:	f7ff fc22 	bl	80011d4 <__aeabi_fcmpgt>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <API_turnRight+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <API_turnRight+0x1b4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <API_turnRight+0x1b8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f640 424e 	movw	r2, #3150	; 0xc4e
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
 80019aa:	e031      	b.n	8001a10 <API_turnRight+0x190>
        }
        else if (mean > 12 && mean < 30) {
 80019ac:	4929      	ldr	r1, [pc, #164]	; (8001a54 <API_turnRight+0x1d4>)
 80019ae:	69f8      	ldr	r0, [r7, #28]
 80019b0:	f7ff fc10 	bl	80011d4 <__aeabi_fcmpgt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d011      	beq.n	80019de <API_turnRight+0x15e>
 80019ba:	4927      	ldr	r1, [pc, #156]	; (8001a58 <API_turnRight+0x1d8>)
 80019bc:	69f8      	ldr	r0, [r7, #28]
 80019be:	f7ff fbeb 	bl	8001198 <__aeabi_fcmplt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00a      	beq.n	80019de <API_turnRight+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <API_turnRight+0x1b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <API_turnRight+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f640 225a 	movw	r2, #2650	; 0xa5a
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
 80019dc:	e018      	b.n	8001a10 <API_turnRight+0x190>
        }
        else if (mean > 2 && mean < 13) {
 80019de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019e2:	69f8      	ldr	r0, [r7, #28]
 80019e4:	f7ff fbf6 	bl	80011d4 <__aeabi_fcmpgt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <API_turnRight+0x190>
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <API_turnRight+0x1dc>)
 80019f0:	69f8      	ldr	r0, [r7, #28]
 80019f2:	f7ff fbd1 	bl	8001198 <__aeabi_fcmplt>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <API_turnRight+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300); // left
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <API_turnRight+0x1b4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2450); // right
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <API_turnRight+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f640 1292 	movw	r2, #2450	; 0x992
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 3) {
 8001a10:	4913      	ldr	r1, [pc, #76]	; (8001a60 <API_turnRight+0x1e0>)
 8001a12:	69f8      	ldr	r0, [r7, #28]
 8001a14:	f7ff fbc0 	bl	8001198 <__aeabi_fcmplt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <API_turnRight+0x1a4>
            stop();
 8001a1e:	f000 faf3 	bl	8002008 <stop>
            return;
 8001a22:	e000      	b.n	8001a26 <API_turnRight+0x1a6>
    while (1) {
 8001a24:	e77f      	b.n	8001926 <API_turnRight+0xa6>
        }
    }
}
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	200002fc 	.word	0x200002fc
 8001a38:	200003d4 	.word	0x200003d4
 8001a3c:	42b40000 	.word	0x42b40000
 8001a40:	43b40000 	.word	0x43b40000
 8001a44:	43340000 	.word	0x43340000
 8001a48:	c3340000 	.word	0xc3340000
 8001a4c:	42480000 	.word	0x42480000
 8001a50:	41e80000 	.word	0x41e80000
 8001a54:	41400000 	.word	0x41400000
 8001a58:	41f00000 	.word	0x41f00000
 8001a5c:	41500000 	.word	0x41500000
 8001a60:	40400000 	.word	0x40400000

08001a64 <API_turnLeft>:
void API_turnLeft(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	4868      	ldr	r0, [pc, #416]	; (8001c10 <API_turnLeft+0x1ac>)
 8001a70:	f005 fc85 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2101      	movs	r1, #1
 8001a78:	4866      	ldr	r0, [pc, #408]	; (8001c14 <API_turnLeft+0x1b0>)
 8001a7a:	f005 fc80 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2102      	movs	r1, #2
 8001a82:	4864      	ldr	r0, [pc, #400]	; (8001c14 <API_turnLeft+0x1b0>)
 8001a84:	f005 fc7b 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8e:	4861      	ldr	r0, [pc, #388]	; (8001c14 <API_turnLeft+0x1b0>)
 8001a90:	f005 fc75 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9a:	485e      	ldr	r0, [pc, #376]	; (8001c14 <API_turnLeft+0x1b0>)
 8001a9c:	f005 fc6f 	bl	800737e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 8001aa0:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <API_turnLeft+0x1b4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <API_turnLeft+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f241 0236 	movw	r2, #4150	; 0x1036
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
	bno055_euler_t lastYaw = CurrentYaw();
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 ffc3 	bl	8003a44 <CurrentYaw>
	bno055_euler_t currentYaw;
    float target_yaw = lastYaw.yaw - 90;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4957      	ldr	r1, [pc, #348]	; (8001c20 <API_turnLeft+0x1bc>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8c0 	bl	8000c48 <__aeabi_fsub>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 8001ad2:	4954      	ldr	r1, [pc, #336]	; (8001c24 <API_turnLeft+0x1c0>)
 8001ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ad6:	f7ff fb73 	bl	80011c0 <__aeabi_fcmpge>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <API_turnLeft+0x8a>
        target_yaw -= 360.0;
 8001ae0:	4950      	ldr	r1, [pc, #320]	; (8001c24 <API_turnLeft+0x1c0>)
 8001ae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ae4:	f7ff f8b0 	bl	8000c48 <__aeabi_fsub>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	e00d      	b.n	8001b0a <API_turnLeft+0xa6>
    } else if (target_yaw < 0.0) {
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001af4:	f7ff fb50 	bl	8001198 <__aeabi_fcmplt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <API_turnLeft+0xa6>
        target_yaw += 360.0;
 8001afe:	4949      	ldr	r1, [pc, #292]	; (8001c24 <API_turnLeft+0x1c0>)
 8001b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b02:	f7ff f8a3 	bl	8000c4c <__addsf3>
 8001b06:	4603      	mov	r3, r0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while (1) {
        currentYaw = CurrentYaw();
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 ff99 	bl	8003a44 <CurrentYaw>

        float yawDifference = currentYaw.yaw - target_yaw;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f896 	bl	8000c48 <__aeabi_fsub>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 8001b20:	4941      	ldr	r1, [pc, #260]	; (8001c28 <API_turnLeft+0x1c4>)
 8001b22:	6a38      	ldr	r0, [r7, #32]
 8001b24:	f7ff fb56 	bl	80011d4 <__aeabi_fcmpgt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <API_turnLeft+0xd8>
            yawDifference -= 360.0;
 8001b2e:	493d      	ldr	r1, [pc, #244]	; (8001c24 <API_turnLeft+0x1c0>)
 8001b30:	6a38      	ldr	r0, [r7, #32]
 8001b32:	f7ff f889 	bl	8000c48 <__aeabi_fsub>
 8001b36:	4603      	mov	r3, r0
 8001b38:	623b      	str	r3, [r7, #32]
 8001b3a:	e00c      	b.n	8001b56 <API_turnLeft+0xf2>
        } else if (yawDifference < -180.0) {
 8001b3c:	493b      	ldr	r1, [pc, #236]	; (8001c2c <API_turnLeft+0x1c8>)
 8001b3e:	6a38      	ldr	r0, [r7, #32]
 8001b40:	f7ff fb2a 	bl	8001198 <__aeabi_fcmplt>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <API_turnLeft+0xf2>
            yawDifference += 360.0;
 8001b4a:	4936      	ldr	r1, [pc, #216]	; (8001c24 <API_turnLeft+0x1c0>)
 8001b4c:	6a38      	ldr	r0, [r7, #32]
 8001b4e:	f7ff f87d 	bl	8000c4c <__addsf3>
 8001b52:	4603      	mov	r3, r0
 8001b54:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b5c:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 8001b5e:	4934      	ldr	r1, [pc, #208]	; (8001c30 <API_turnLeft+0x1cc>)
 8001b60:	69f8      	ldr	r0, [r7, #28]
 8001b62:	f7ff fb19 	bl	8001198 <__aeabi_fcmplt>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d011      	beq.n	8001b90 <API_turnLeft+0x12c>
 8001b6c:	4931      	ldr	r1, [pc, #196]	; (8001c34 <API_turnLeft+0x1d0>)
 8001b6e:	69f8      	ldr	r0, [r7, #28]
 8001b70:	f7ff fb30 	bl	80011d4 <__aeabi_fcmpgt>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <API_turnLeft+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <API_turnLeft+0x1b4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <API_turnLeft+0x1b8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8e:	e031      	b.n	8001bf4 <API_turnLeft+0x190>
        }
        else if (mean > 12 && mean < 30) {
 8001b90:	4929      	ldr	r1, [pc, #164]	; (8001c38 <API_turnLeft+0x1d4>)
 8001b92:	69f8      	ldr	r0, [r7, #28]
 8001b94:	f7ff fb1e 	bl	80011d4 <__aeabi_fcmpgt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d011      	beq.n	8001bc2 <API_turnLeft+0x15e>
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <API_turnLeft+0x1d8>)
 8001ba0:	69f8      	ldr	r0, [r7, #28]
 8001ba2:	f7ff faf9 	bl	8001198 <__aeabi_fcmplt>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00a      	beq.n	8001bc2 <API_turnLeft+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <API_turnLeft+0x1b4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <API_turnLeft+0x1b8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc0:	e018      	b.n	8001bf4 <API_turnLeft+0x190>
        }
        else if (mean > 2 && mean < 13) {
 8001bc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bc6:	69f8      	ldr	r0, [r7, #28]
 8001bc8:	f7ff fb04 	bl	80011d4 <__aeabi_fcmpgt>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <API_turnLeft+0x190>
 8001bd2:	491b      	ldr	r1, [pc, #108]	; (8001c40 <API_turnLeft+0x1dc>)
 8001bd4:	69f8      	ldr	r0, [r7, #28]
 8001bd6:	f7ff fadf 	bl	8001198 <__aeabi_fcmplt>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d009      	beq.n	8001bf4 <API_turnLeft+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2200); // left
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <API_turnLeft+0x1b4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f640 0298 	movw	r2, #2200	; 0x898
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2350); // right
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <API_turnLeft+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f640 122e 	movw	r2, #2350	; 0x92e
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 3) {
 8001bf4:	4913      	ldr	r1, [pc, #76]	; (8001c44 <API_turnLeft+0x1e0>)
 8001bf6:	69f8      	ldr	r0, [r7, #28]
 8001bf8:	f7ff face 	bl	8001198 <__aeabi_fcmplt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <API_turnLeft+0x1a4>
            stop();
 8001c02:	f000 fa01 	bl	8002008 <stop>
            return;
 8001c06:	e000      	b.n	8001c0a <API_turnLeft+0x1a6>
    while (1) {
 8001c08:	e77f      	b.n	8001b0a <API_turnLeft+0xa6>
        }
    }
}
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40010c00 	.word	0x40010c00
 8001c18:	200002fc 	.word	0x200002fc
 8001c1c:	200003d4 	.word	0x200003d4
 8001c20:	42b40000 	.word	0x42b40000
 8001c24:	43b40000 	.word	0x43b40000
 8001c28:	43340000 	.word	0x43340000
 8001c2c:	c3340000 	.word	0xc3340000
 8001c30:	42480000 	.word	0x42480000
 8001c34:	41e80000 	.word	0x41e80000
 8001c38:	41400000 	.word	0x41400000
 8001c3c:	41f00000 	.word	0x41f00000
 8001c40:	41500000 	.word	0x41500000
 8001c44:	40400000 	.word	0x40400000

08001c48 <API_turnRight180>:
void API_turnRight180(){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2120      	movs	r1, #32
 8001c52:	4868      	ldr	r0, [pc, #416]	; (8001df4 <API_turnRight180+0x1ac>)
 8001c54:	f005 fb93 	bl	800737e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	4866      	ldr	r0, [pc, #408]	; (8001df8 <API_turnRight180+0x1b0>)
 8001c5e:	f005 fb8e 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2102      	movs	r1, #2
 8001c66:	4864      	ldr	r0, [pc, #400]	; (8001df8 <API_turnRight180+0x1b0>)
 8001c68:	f005 fb89 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c72:	4861      	ldr	r0, [pc, #388]	; (8001df8 <API_turnRight180+0x1b0>)
 8001c74:	f005 fb83 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7e:	485e      	ldr	r0, [pc, #376]	; (8001df8 <API_turnRight180+0x1b0>)
 8001c80:	f005 fb7d 	bl	800737e <HAL_GPIO_WritePin>

	bno055_euler_t lastYaw = CurrentYaw();
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 fedb 	bl	8003a44 <CurrentYaw>
	bno055_euler_t currentYaw;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <API_turnRight180+0x1b4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <API_turnRight180+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f241 0236 	movw	r2, #4150	; 0x1036
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

    float target_yaw = lastYaw.yaw + 180;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4957      	ldr	r1, [pc, #348]	; (8001e04 <API_turnRight180+0x1bc>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe ffd0 	bl	8000c4c <__addsf3>
 8001cac:	4603      	mov	r3, r0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 8001cb0:	4955      	ldr	r1, [pc, #340]	; (8001e08 <API_turnRight180+0x1c0>)
 8001cb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cb4:	f7ff fa84 	bl	80011c0 <__aeabi_fcmpge>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <API_turnRight180+0x84>
        target_yaw -= 360.0;
 8001cbe:	4952      	ldr	r1, [pc, #328]	; (8001e08 <API_turnRight180+0x1c0>)
 8001cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cc2:	f7fe ffc1 	bl	8000c48 <__aeabi_fsub>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	e00d      	b.n	8001ce8 <API_turnRight180+0xa0>
    } else if (target_yaw < 0.0) {
 8001ccc:	f04f 0100 	mov.w	r1, #0
 8001cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cd2:	f7ff fa61 	bl	8001198 <__aeabi_fcmplt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <API_turnRight180+0xa0>
        target_yaw += 360.0;
 8001cdc:	494a      	ldr	r1, [pc, #296]	; (8001e08 <API_turnRight180+0x1c0>)
 8001cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ce0:	f7fe ffb4 	bl	8000c4c <__addsf3>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    float mean = 0;
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    while (1) {
        currentYaw = CurrentYaw();
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 fea7 	bl	8003a44 <CurrentYaw>

        // Calculate the yaw difference and handle wrapping
        float yawDifference = currentYaw.yaw - target_yaw;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe ffa4 	bl	8000c48 <__aeabi_fsub>
 8001d00:	4603      	mov	r3, r0
 8001d02:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 8001d04:	493f      	ldr	r1, [pc, #252]	; (8001e04 <API_turnRight180+0x1bc>)
 8001d06:	6a38      	ldr	r0, [r7, #32]
 8001d08:	f7ff fa64 	bl	80011d4 <__aeabi_fcmpgt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <API_turnRight180+0xd8>
            yawDifference -= 360.0;
 8001d12:	493d      	ldr	r1, [pc, #244]	; (8001e08 <API_turnRight180+0x1c0>)
 8001d14:	6a38      	ldr	r0, [r7, #32]
 8001d16:	f7fe ff97 	bl	8000c48 <__aeabi_fsub>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	623b      	str	r3, [r7, #32]
 8001d1e:	e00c      	b.n	8001d3a <API_turnRight180+0xf2>
        } else if (yawDifference < -180.0) {
 8001d20:	493a      	ldr	r1, [pc, #232]	; (8001e0c <API_turnRight180+0x1c4>)
 8001d22:	6a38      	ldr	r0, [r7, #32]
 8001d24:	f7ff fa38 	bl	8001198 <__aeabi_fcmplt>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <API_turnRight180+0xf2>
            yawDifference += 360.0;
 8001d2e:	4936      	ldr	r1, [pc, #216]	; (8001e08 <API_turnRight180+0x1c0>)
 8001d30:	6a38      	ldr	r0, [r7, #32]
 8001d32:	f7fe ff8b 	bl	8000c4c <__addsf3>
 8001d36:	4603      	mov	r3, r0
 8001d38:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d40:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 8001d42:	4933      	ldr	r1, [pc, #204]	; (8001e10 <API_turnRight180+0x1c8>)
 8001d44:	69f8      	ldr	r0, [r7, #28]
 8001d46:	f7ff fa27 	bl	8001198 <__aeabi_fcmplt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d011      	beq.n	8001d74 <API_turnRight180+0x12c>
 8001d50:	4930      	ldr	r1, [pc, #192]	; (8001e14 <API_turnRight180+0x1cc>)
 8001d52:	69f8      	ldr	r0, [r7, #28]
 8001d54:	f7ff fa3e 	bl	80011d4 <__aeabi_fcmpgt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <API_turnRight180+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 8001d5e:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <API_turnRight180+0x1b4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <API_turnRight180+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
 8001d72:	e031      	b.n	8001dd8 <API_turnRight180+0x190>
        }
        else if (mean > 12 && mean < 30) {
 8001d74:	4928      	ldr	r1, [pc, #160]	; (8001e18 <API_turnRight180+0x1d0>)
 8001d76:	69f8      	ldr	r0, [r7, #28]
 8001d78:	f7ff fa2c 	bl	80011d4 <__aeabi_fcmpgt>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d011      	beq.n	8001da6 <API_turnRight180+0x15e>
 8001d82:	4926      	ldr	r1, [pc, #152]	; (8001e1c <API_turnRight180+0x1d4>)
 8001d84:	69f8      	ldr	r0, [r7, #28]
 8001d86:	f7ff fa07 	bl	8001198 <__aeabi_fcmplt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <API_turnRight180+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <API_turnRight180+0x1b4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <API_turnRight180+0x1b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
 8001da4:	e018      	b.n	8001dd8 <API_turnRight180+0x190>
        }
        else if (mean > 2 && mean < 13) {
 8001da6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001daa:	69f8      	ldr	r0, [r7, #28]
 8001dac:	f7ff fa12 	bl	80011d4 <__aeabi_fcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <API_turnRight180+0x190>
 8001db6:	491a      	ldr	r1, [pc, #104]	; (8001e20 <API_turnRight180+0x1d8>)
 8001db8:	69f8      	ldr	r0, [r7, #28]
 8001dba:	f7ff f9ed 	bl	8001198 <__aeabi_fcmplt>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <API_turnRight180+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300); // left
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <API_turnRight180+0x1b4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2450); // right
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <API_turnRight180+0x1b8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f640 1292 	movw	r2, #2450	; 0x992
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 3) {
 8001dd8:	4912      	ldr	r1, [pc, #72]	; (8001e24 <API_turnRight180+0x1dc>)
 8001dda:	69f8      	ldr	r0, [r7, #28]
 8001ddc:	f7ff f9dc 	bl	8001198 <__aeabi_fcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <API_turnRight180+0x1a4>
            stop();
 8001de6:	f000 f90f 	bl	8002008 <stop>
            return;
 8001dea:	e000      	b.n	8001dee <API_turnRight180+0x1a6>
    while (1) {
 8001dec:	e77f      	b.n	8001cee <API_turnRight180+0xa6>
        }
    }
}
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40010800 	.word	0x40010800
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	200002fc 	.word	0x200002fc
 8001e00:	200003d4 	.word	0x200003d4
 8001e04:	43340000 	.word	0x43340000
 8001e08:	43b40000 	.word	0x43b40000
 8001e0c:	c3340000 	.word	0xc3340000
 8001e10:	42480000 	.word	0x42480000
 8001e14:	41e80000 	.word	0x41e80000
 8001e18:	41400000 	.word	0x41400000
 8001e1c:	41f00000 	.word	0x41f00000
 8001e20:	41500000 	.word	0x41500000
 8001e24:	40400000 	.word	0x40400000

08001e28 <API_turnLeft180>:
void API_turnLeft180(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2120      	movs	r1, #32
 8001e32:	4869      	ldr	r0, [pc, #420]	; (8001fd8 <API_turnLeft180+0x1b0>)
 8001e34:	f005 faa3 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4867      	ldr	r0, [pc, #412]	; (8001fdc <API_turnLeft180+0x1b4>)
 8001e3e:	f005 fa9e 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
 8001e42:	2201      	movs	r2, #1
 8001e44:	2102      	movs	r1, #2
 8001e46:	4865      	ldr	r0, [pc, #404]	; (8001fdc <API_turnLeft180+0x1b4>)
 8001e48:	f005 fa99 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e52:	4862      	ldr	r0, [pc, #392]	; (8001fdc <API_turnLeft180+0x1b4>)
 8001e54:	f005 fa93 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e5e:	485f      	ldr	r0, [pc, #380]	; (8001fdc <API_turnLeft180+0x1b4>)
 8001e60:	f005 fa8d 	bl	800737e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
 8001e64:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <API_turnLeft180+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4150); // right
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <API_turnLeft180+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f241 0236 	movw	r2, #4150	; 0x1036
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
	bno055_euler_t lastYaw = CurrentYaw();
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fde1 	bl	8003a44 <CurrentYaw>
	bno055_euler_t currentYaw;
    float target_yaw = lastYaw.yaw - 180;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4958      	ldr	r1, [pc, #352]	; (8001fe8 <API_turnLeft180+0x1c0>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fede 	bl	8000c48 <__aeabi_fsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle angle wrapping
    if (target_yaw >= 360.0) {
 8001e90:	4956      	ldr	r1, [pc, #344]	; (8001fec <API_turnLeft180+0x1c4>)
 8001e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e94:	f7ff f994 	bl	80011c0 <__aeabi_fcmpge>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <API_turnLeft180+0x84>
        target_yaw -= 360.0;
 8001e9e:	4953      	ldr	r1, [pc, #332]	; (8001fec <API_turnLeft180+0x1c4>)
 8001ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ea2:	f7fe fed1 	bl	8000c48 <__aeabi_fsub>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	e00d      	b.n	8001ec8 <API_turnLeft180+0xa0>
    } else if (target_yaw < 0.0) {
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eb2:	f7ff f971 	bl	8001198 <__aeabi_fcmplt>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <API_turnLeft180+0xa0>
        target_yaw += 360.0;
 8001ebc:	494b      	ldr	r1, [pc, #300]	; (8001fec <API_turnLeft180+0x1c4>)
 8001ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ec0:	f7fe fec4 	bl	8000c4c <__addsf3>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    float mean = 0;
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    while (1) {
        currentYaw = CurrentYaw();
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f001 fdb7 	bl	8003a44 <CurrentYaw>

        // Calculate the yaw difference and handle wrapping
        float yawDifference = currentYaw.yaw - target_yaw;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe feb4 	bl	8000c48 <__aeabi_fsub>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	623b      	str	r3, [r7, #32]

        if (yawDifference > 180.0) {
 8001ee4:	4940      	ldr	r1, [pc, #256]	; (8001fe8 <API_turnLeft180+0x1c0>)
 8001ee6:	6a38      	ldr	r0, [r7, #32]
 8001ee8:	f7ff f974 	bl	80011d4 <__aeabi_fcmpgt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <API_turnLeft180+0xd8>
            yawDifference -= 360.0;
 8001ef2:	493e      	ldr	r1, [pc, #248]	; (8001fec <API_turnLeft180+0x1c4>)
 8001ef4:	6a38      	ldr	r0, [r7, #32]
 8001ef6:	f7fe fea7 	bl	8000c48 <__aeabi_fsub>
 8001efa:	4603      	mov	r3, r0
 8001efc:	623b      	str	r3, [r7, #32]
 8001efe:	e00c      	b.n	8001f1a <API_turnLeft180+0xf2>
        } else if (yawDifference < -180.0) {
 8001f00:	493b      	ldr	r1, [pc, #236]	; (8001ff0 <API_turnLeft180+0x1c8>)
 8001f02:	6a38      	ldr	r0, [r7, #32]
 8001f04:	f7ff f948 	bl	8001198 <__aeabi_fcmplt>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <API_turnLeft180+0xf2>
            yawDifference += 360.0;
 8001f0e:	4937      	ldr	r1, [pc, #220]	; (8001fec <API_turnLeft180+0x1c4>)
 8001f10:	6a38      	ldr	r0, [r7, #32]
 8001f12:	f7fe fe9b 	bl	8000c4c <__addsf3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	623b      	str	r3, [r7, #32]
        }

        mean = fabs(yawDifference) ;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f20:	61fb      	str	r3, [r7, #28]
        if (mean < 50 && mean > 29) {
 8001f22:	4934      	ldr	r1, [pc, #208]	; (8001ff4 <API_turnLeft180+0x1cc>)
 8001f24:	69f8      	ldr	r0, [r7, #28]
 8001f26:	f7ff f937 	bl	8001198 <__aeabi_fcmplt>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d011      	beq.n	8001f54 <API_turnLeft180+0x12c>
 8001f30:	4931      	ldr	r1, [pc, #196]	; (8001ff8 <API_turnLeft180+0x1d0>)
 8001f32:	69f8      	ldr	r0, [r7, #28]
 8001f34:	f7ff f94e 	bl	80011d4 <__aeabi_fcmpgt>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <API_turnLeft180+0x12c>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 3000); // left
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <API_turnLeft180+0x1b8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 3150); // right
 8001f48:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <API_turnLeft180+0x1bc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
 8001f52:	e031      	b.n	8001fb8 <API_turnLeft180+0x190>
        }
        else if (mean > 12 && mean < 30) {
 8001f54:	4929      	ldr	r1, [pc, #164]	; (8001ffc <API_turnLeft180+0x1d4>)
 8001f56:	69f8      	ldr	r0, [r7, #28]
 8001f58:	f7ff f93c 	bl	80011d4 <__aeabi_fcmpgt>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d011      	beq.n	8001f86 <API_turnLeft180+0x15e>
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <API_turnLeft180+0x1d8>)
 8001f64:	69f8      	ldr	r0, [r7, #28]
 8001f66:	f7ff f917 	bl	8001198 <__aeabi_fcmplt>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <API_turnLeft180+0x15e>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2500); // left
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <API_turnLeft180+0x1b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2650); // right
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <API_turnLeft180+0x1bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
 8001f84:	e018      	b.n	8001fb8 <API_turnLeft180+0x190>
        }
        else if (mean > 1 && mean < 13) {
 8001f86:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f8a:	69f8      	ldr	r0, [r7, #28]
 8001f8c:	f7ff f922 	bl	80011d4 <__aeabi_fcmpgt>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <API_turnLeft180+0x190>
 8001f96:	491b      	ldr	r1, [pc, #108]	; (8002004 <API_turnLeft180+0x1dc>)
 8001f98:	69f8      	ldr	r0, [r7, #28]
 8001f9a:	f7ff f8fd 	bl	8001198 <__aeabi_fcmplt>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <API_turnLeft180+0x190>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 2300); // left
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <API_turnLeft180+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 2450); // right
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <API_turnLeft180+0x1bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f640 1292 	movw	r2, #2450	; 0x992
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        if (mean < 2) {
 8001fb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fbc:	69f8      	ldr	r0, [r7, #28]
 8001fbe:	f7ff f8eb 	bl	8001198 <__aeabi_fcmplt>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <API_turnLeft180+0x1a6>
            stop();
 8001fc8:	f000 f81e 	bl	8002008 <stop>
            return;
 8001fcc:	e000      	b.n	8001fd0 <API_turnLeft180+0x1a8>
    while (1) {
 8001fce:	e77e      	b.n	8001ece <API_turnLeft180+0xa6>
        }
    }
}
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	200002fc 	.word	0x200002fc
 8001fe4:	200003d4 	.word	0x200003d4
 8001fe8:	43340000 	.word	0x43340000
 8001fec:	43b40000 	.word	0x43b40000
 8001ff0:	c3340000 	.word	0xc3340000
 8001ff4:	42480000 	.word	0x42480000
 8001ff8:	41e80000 	.word	0x41e80000
 8001ffc:	41400000 	.word	0x41400000
 8002000:	41f00000 	.word	0x41f00000
 8002004:	41500000 	.word	0x41500000

08002008 <stop>:
void stop(){
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0); //left
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <stop+0x50>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0);
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <stop+0x54>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800201c:	2201      	movs	r2, #1
 800201e:	2120      	movs	r1, #32
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <stop+0x58>)
 8002022:	f005 f9ac 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2101      	movs	r1, #1
 800202a:	480e      	ldr	r0, [pc, #56]	; (8002064 <stop+0x5c>)
 800202c:	f005 f9a7 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	2102      	movs	r1, #2
 8002034:	480b      	ldr	r0, [pc, #44]	; (8002064 <stop+0x5c>)
 8002036:	f005 f9a2 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <stop+0x5c>)
 8002042:	f005 f99c 	bl	800737e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <stop+0x5c>)
 800204e:	f005 f996 	bl	800737e <HAL_GPIO_WritePin>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002fc 	.word	0x200002fc
 800205c:	200003d4 	.word	0x200003d4
 8002060:	40010800 	.word	0x40010800
 8002064:	40010c00 	.word	0x40010c00

08002068 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b0af      	sub	sp, #188	; 0xbc
 800206c:	af2a      	add	r7, sp, #168	; 0xa8
 800206e:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	799b      	ldrb	r3, [r3, #6]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8002080:	687c      	ldr	r4, [r7, #4]
 8002082:	2301      	movs	r3, #1
 8002084:	9329      	str	r3, [sp, #164]	; 0xa4
 8002086:	f107 030e 	add.w	r3, r7, #14
 800208a:	9328      	str	r3, [sp, #160]	; 0xa0
 800208c:	2300      	movs	r3, #0
 800208e:	9327      	str	r3, [sp, #156]	; 0x9c
 8002090:	4668      	mov	r0, sp
 8002092:	f104 0310 	add.w	r3, r4, #16
 8002096:	229c      	movs	r2, #156	; 0x9c
 8002098:	4619      	mov	r1, r3
 800209a:	f009 fd29 	bl	800baf0 <memcpy>
 800209e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020a2:	f001 fbe4 	bl	800386e <bno055_read_regs>
 80020a6:	4603      	mov	r3, r0
 80020a8:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <bno055_init+0x4c>
        return err;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	e0b6      	b.n	8002222 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	2ba0      	cmp	r3, #160	; 0xa0
 80020b8:	d001      	beq.n	80020be <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 80020ba:	2306      	movs	r3, #6
 80020bc:	e0b1      	b.n	8002222 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80020be:	2100      	movs	r1, #0
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f001 faa2 	bl	800360a <bno055_set_opmode>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <bno055_init+0x6c>
        return err;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	e0a6      	b.n	8002222 <bno055_init+0x1ba>
    }
    HAL_Delay(2);
 80020d4:	2002      	movs	r0, #2
 80020d6:	f004 fa0b 	bl	80064f0 <HAL_Delay>
    bno055_reset(imu);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f001 fb81 	bl	80037e2 <bno055_reset>
    HAL_Delay(5000);
 80020e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80020e4:	f004 fa04 	bl	80064f0 <HAL_Delay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 80020e8:	2100      	movs	r1, #0
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f001 fb1c 	bl	8003728 <bno055_set_pwr_mode>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <bno055_init+0x96>
        return err;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	e091      	b.n	8002222 <bno055_init+0x1ba>
    }
    HAL_Delay(10);
 80020fe:	200a      	movs	r0, #10
 8002100:	f004 f9f6 	bl	80064f0 <HAL_Delay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8002104:	2100      	movs	r1, #0
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f001 fc14 	bl	8003934 <bno055_set_page>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <bno055_init+0xb2>
        return err;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	e083      	b.n	8002222 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 800211a:	200c      	movs	r0, #12
 800211c:	f004 f9e8 	bl	80064f0 <HAL_Delay>
    bno055_on(imu);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f001 fb81 	bl	8003828 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	791b      	ldrb	r3, [r3, #4]
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f001 fa6c 	bl	800360a <bno055_set_opmode>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <bno055_init+0xd8>
        return err;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	e070      	b.n	8002222 <bno055_init+0x1ba>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8002140:	2018      	movs	r0, #24
 8002142:	f004 f9d5 	bl	80064f0 <HAL_Delay>

    imu->temperature = &bno055_temperature;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a38      	ldr	r2, [pc, #224]	; (800222c <bno055_init+0x1c4>)
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
    imu->acc_x = &bno055_acc_x;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <bno055_init+0x1c8>)
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
    imu->acc_y = &bno055_acc_y;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a37      	ldr	r2, [pc, #220]	; (8002234 <bno055_init+0x1cc>)
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->acc_z = &bno055_acc_z;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a37      	ldr	r2, [pc, #220]	; (8002238 <bno055_init+0x1d0>)
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
    imu->acc = &bno055_acc;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a36      	ldr	r2, [pc, #216]	; (800223c <bno055_init+0x1d4>)
 8002162:	635a      	str	r2, [r3, #52]	; 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a36      	ldr	r2, [pc, #216]	; (8002240 <bno055_init+0x1d8>)
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a35      	ldr	r2, [pc, #212]	; (8002244 <bno055_init+0x1dc>)
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a35      	ldr	r2, [pc, #212]	; (8002248 <bno055_init+0x1e0>)
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
    imu->linear_acc = &bno055_linear_acc;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a34      	ldr	r2, [pc, #208]	; (800224c <bno055_init+0x1e4>)
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyro_x = &bno055_gyro_x;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a34      	ldr	r2, [pc, #208]	; (8002250 <bno055_init+0x1e8>)
 8002180:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyro_y = &bno055_gyro_y;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a33      	ldr	r2, [pc, #204]	; (8002254 <bno055_init+0x1ec>)
 8002186:	64da      	str	r2, [r3, #76]	; 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a33      	ldr	r2, [pc, #204]	; (8002258 <bno055_init+0x1f0>)
 800218c:	651a      	str	r2, [r3, #80]	; 0x50
    imu->gyro = &bno055_gyro;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a32      	ldr	r2, [pc, #200]	; (800225c <bno055_init+0x1f4>)
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
    imu->mag_x = &bno055_mag_x;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a32      	ldr	r2, [pc, #200]	; (8002260 <bno055_init+0x1f8>)
 8002198:	659a      	str	r2, [r3, #88]	; 0x58
    imu->mag_y = &bno055_mag_y;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a31      	ldr	r2, [pc, #196]	; (8002264 <bno055_init+0x1fc>)
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->mag_z = &bno055_mag_z;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a31      	ldr	r2, [pc, #196]	; (8002268 <bno055_init+0x200>)
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60
    imu->mag = &bno055_mag;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a30      	ldr	r2, [pc, #192]	; (800226c <bno055_init+0x204>)
 80021aa:	665a      	str	r2, [r3, #100]	; 0x64
    imu->gravity_x = &bno055_gravity_x;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a30      	ldr	r2, [pc, #192]	; (8002270 <bno055_init+0x208>)
 80021b0:	669a      	str	r2, [r3, #104]	; 0x68
    imu->gravity_y = &bno055_gravity_y;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <bno055_init+0x20c>)
 80021b6:	66da      	str	r2, [r3, #108]	; 0x6c
    imu->gravity_z = &bno055_gravity_z;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <bno055_init+0x210>)
 80021bc:	671a      	str	r2, [r3, #112]	; 0x70
    imu->gravity = &bno055_gravity;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2e      	ldr	r2, [pc, #184]	; (800227c <bno055_init+0x214>)
 80021c2:	675a      	str	r2, [r3, #116]	; 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a2e      	ldr	r2, [pc, #184]	; (8002280 <bno055_init+0x218>)
 80021c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    imu->euler_roll = &bno055_euler_roll;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a2d      	ldr	r2, [pc, #180]	; (8002284 <bno055_init+0x21c>)
 80021d0:	679a      	str	r2, [r3, #120]	; 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2c      	ldr	r2, [pc, #176]	; (8002288 <bno055_init+0x220>)
 80021d6:	67da      	str	r2, [r3, #124]	; 0x7c
    imu->euler = &bno055_euler;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a2c      	ldr	r2, [pc, #176]	; (800228c <bno055_init+0x224>)
 80021dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a2b      	ldr	r2, [pc, #172]	; (8002290 <bno055_init+0x228>)
 80021e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a2a      	ldr	r2, [pc, #168]	; (8002294 <bno055_init+0x22c>)
 80021ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a29      	ldr	r2, [pc, #164]	; (8002298 <bno055_init+0x230>)
 80021f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a28      	ldr	r2, [pc, #160]	; (800229c <bno055_init+0x234>)
 80021fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    imu->quaternion = &bno055_quaternion;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a27      	ldr	r2, [pc, #156]	; (80022a0 <bno055_init+0x238>)
 8002204:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    imu->acc_config = &bno055_acc_conf;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <bno055_init+0x23c>)
 800220c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <bno055_init+0x240>)
 8002214:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    imu->mag_config = &bno055_mag_conf;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a24      	ldr	r2, [pc, #144]	; (80022ac <bno055_init+0x244>)
 800221c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return BNO_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}
 800222a:	bf00      	nop
 800222c:	080022b1 	.word	0x080022b1
 8002230:	08002319 	.word	0x08002319
 8002234:	0800239d 	.word	0x0800239d
 8002238:	08002421 	.word	0x08002421
 800223c:	080024a5 	.word	0x080024a5
 8002240:	08002575 	.word	0x08002575
 8002244:	080025f9 	.word	0x080025f9
 8002248:	0800267d 	.word	0x0800267d
 800224c:	08002701 	.word	0x08002701
 8002250:	080027d1 	.word	0x080027d1
 8002254:	08002855 	.word	0x08002855
 8002258:	080028d9 	.word	0x080028d9
 800225c:	0800295d 	.word	0x0800295d
 8002260:	08002a2d 	.word	0x08002a2d
 8002264:	08002a9d 	.word	0x08002a9d
 8002268:	08002b0d 	.word	0x08002b0d
 800226c:	08002b7d 	.word	0x08002b7d
 8002270:	08002c3d 	.word	0x08002c3d
 8002274:	08002cc1 	.word	0x08002cc1
 8002278:	08002d45 	.word	0x08002d45
 800227c:	08002dc9 	.word	0x08002dc9
 8002280:	08002e99 	.word	0x08002e99
 8002284:	08002f1d 	.word	0x08002f1d
 8002288:	08002fa1 	.word	0x08002fa1
 800228c:	08003025 	.word	0x08003025
 8002290:	080030f5 	.word	0x080030f5
 8002294:	08003165 	.word	0x08003165
 8002298:	080031d5 	.word	0x080031d5
 800229c:	08003245 	.word	0x08003245
 80022a0:	080032b5 	.word	0x080032b5
 80022a4:	0800339d 	.word	0x0800339d
 80022a8:	0800346d 	.word	0x0800346d
 80022ac:	0800353b 	.word	0x0800353b

080022b0 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b0af      	sub	sp, #188	; 0xbc
 80022b4:	af2a      	add	r7, sp, #168	; 0xa8
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 80022be:	687c      	ldr	r4, [r7, #4]
 80022c0:	2301      	movs	r3, #1
 80022c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80022c4:	f107 030e 	add.w	r3, r7, #14
 80022c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80022ca:	2334      	movs	r3, #52	; 0x34
 80022cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80022ce:	4668      	mov	r0, sp
 80022d0:	f104 0310 	add.w	r3, r4, #16
 80022d4:	229c      	movs	r2, #156	; 0x9c
 80022d6:	4619      	mov	r1, r3
 80022d8:	f009 fc0a 	bl	800baf0 <memcpy>
 80022dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022e0:	f001 fac5 	bl	800386e <bno055_read_regs>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <bno055_temperature+0x42>
        return err;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	e00d      	b.n	800230e <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7bdb      	ldrb	r3, [r3, #15]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <bno055_temperature+0x54>
 80022fa:	7bbb      	ldrb	r3, [r7, #14]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	b25b      	sxtb	r3, r3
 8002302:	e001      	b.n	8002308 <bno055_temperature+0x58>
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	b25b      	sxtb	r3, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
	...

08002318 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b0af      	sub	sp, #188	; 0xbc
 800231c:	af2a      	add	r7, sp, #168	; 0xa8
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002322:	687c      	ldr	r4, [r7, #4]
 8002324:	2302      	movs	r3, #2
 8002326:	9329      	str	r3, [sp, #164]	; 0xa4
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	9328      	str	r3, [sp, #160]	; 0xa0
 800232e:	2308      	movs	r3, #8
 8002330:	9327      	str	r3, [sp, #156]	; 0x9c
 8002332:	4668      	mov	r0, sp
 8002334:	f104 0310 	add.w	r3, r4, #16
 8002338:	229c      	movs	r2, #156	; 0x9c
 800233a:	4619      	mov	r1, r3
 800233c:	f009 fbd8 	bl	800baf0 <memcpy>
 8002340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002344:	f001 fa93 	bl	800386e <bno055_read_regs>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <bno055_acc_x+0x3e>
        return err;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	e01b      	b.n	800238e <bno055_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002356:	7b7b      	ldrb	r3, [r7, #13]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	b21a      	sxth	r2, r3
 800235c:	7b3b      	ldrb	r3, [r7, #12]
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21b      	sxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fd25 	bl	8000db4 <__aeabi_i2f>
 800236a:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <bno055_acc_x+0x60>
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <bno055_acc_x+0x80>)
 8002376:	e001      	b.n	800237c <bno055_acc_x+0x64>
 8002378:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f7fe fe20 	bl	8000fc4 <__aeabi_fdiv>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800238c:	2300      	movs	r3, #0
};
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop
 8002398:	42c80000 	.word	0x42c80000

0800239c <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b0af      	sub	sp, #188	; 0xbc
 80023a0:	af2a      	add	r7, sp, #168	; 0xa8
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80023a6:	687c      	ldr	r4, [r7, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80023b2:	230a      	movs	r3, #10
 80023b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80023b6:	4668      	mov	r0, sp
 80023b8:	f104 0310 	add.w	r3, r4, #16
 80023bc:	229c      	movs	r2, #156	; 0x9c
 80023be:	4619      	mov	r1, r3
 80023c0:	f009 fb96 	bl	800baf0 <memcpy>
 80023c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023c8:	f001 fa51 	bl	800386e <bno055_read_regs>
 80023cc:	4603      	mov	r3, r0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <bno055_acc_y+0x3e>
        return err;
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	e01b      	b.n	8002412 <bno055_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80023da:	7b7b      	ldrb	r3, [r7, #13]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	b21a      	sxth	r2, r3
 80023e0:	7b3b      	ldrb	r3, [r7, #12]
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fce3 	bl	8000db4 <__aeabi_i2f>
 80023ee:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <bno055_acc_y+0x60>
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <bno055_acc_y+0x80>)
 80023fa:	e001      	b.n	8002400 <bno055_acc_y+0x64>
 80023fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f7fe fdde 	bl	8000fc4 <__aeabi_fdiv>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002410:	2300      	movs	r3, #0
};
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	bf00      	nop
 800241c:	42c80000 	.word	0x42c80000

08002420 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b0af      	sub	sp, #188	; 0xbc
 8002424:	af2a      	add	r7, sp, #168	; 0xa8
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800242a:	687c      	ldr	r4, [r7, #4]
 800242c:	2302      	movs	r3, #2
 800242e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	9328      	str	r3, [sp, #160]	; 0xa0
 8002436:	230c      	movs	r3, #12
 8002438:	9327      	str	r3, [sp, #156]	; 0x9c
 800243a:	4668      	mov	r0, sp
 800243c:	f104 0310 	add.w	r3, r4, #16
 8002440:	229c      	movs	r2, #156	; 0x9c
 8002442:	4619      	mov	r1, r3
 8002444:	f009 fb54 	bl	800baf0 <memcpy>
 8002448:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800244c:	f001 fa0f 	bl	800386e <bno055_read_regs>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <bno055_acc_z+0x3e>
        return err;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	e01b      	b.n	8002496 <bno055_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800245e:	7b7b      	ldrb	r3, [r7, #13]
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	b21a      	sxth	r2, r3
 8002464:	7b3b      	ldrb	r3, [r7, #12]
 8002466:	b21b      	sxth	r3, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	b21b      	sxth	r3, r3
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe fca1 	bl	8000db4 <__aeabi_i2f>
 8002472:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <bno055_acc_z+0x60>
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <bno055_acc_z+0x80>)
 800247e:	e001      	b.n	8002484 <bno055_acc_z+0x64>
 8002480:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f7fe fd9c 	bl	8000fc4 <__aeabi_fdiv>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002494:	2300      	movs	r3, #0
};
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bd90      	pop	{r4, r7, pc}
 800249e:	bf00      	nop
 80024a0:	42c80000 	.word	0x42c80000

080024a4 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b0b1      	sub	sp, #196	; 0xc4
 80024a8:	af2a      	add	r7, sp, #168	; 0xa8
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80024ae:	687c      	ldr	r4, [r7, #4]
 80024b0:	2306      	movs	r3, #6
 80024b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80024ba:	2308      	movs	r3, #8
 80024bc:	9327      	str	r3, [sp, #156]	; 0x9c
 80024be:	4668      	mov	r0, sp
 80024c0:	f104 0310 	add.w	r3, r4, #16
 80024c4:	229c      	movs	r2, #156	; 0x9c
 80024c6:	4619      	mov	r1, r3
 80024c8:	f009 fb12 	bl	800baf0 <memcpy>
 80024cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024d0:	f001 f9cd 	bl	800386e <bno055_read_regs>
 80024d4:	4603      	mov	r3, r0
 80024d6:	75fb      	strb	r3, [r7, #23]
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <bno055_acc+0x3e>
        return err;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	e042      	b.n	8002568 <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <bno055_acc+0x4a>
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <bno055_acc+0xcc>)
 80024ec:	e001      	b.n	80024f2 <bno055_acc+0x4e>
 80024ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80024f2:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80024f4:	7a7b      	ldrb	r3, [r7, #9]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	7a3b      	ldrb	r3, [r7, #8]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21b      	sxth	r3, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fc56 	bl	8000db4 <__aeabi_i2f>
 8002508:	4603      	mov	r3, r0
 800250a:	6939      	ldr	r1, [r7, #16]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fd59 	bl	8000fc4 <__aeabi_fdiv>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800251a:	7afb      	ldrb	r3, [r7, #11]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	b21a      	sxth	r2, r3
 8002520:	7abb      	ldrb	r3, [r7, #10]
 8002522:	b21b      	sxth	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b21b      	sxth	r3, r3
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fc43 	bl	8000db4 <__aeabi_i2f>
 800252e:	4603      	mov	r3, r0
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd46 	bl	8000fc4 <__aeabi_fdiv>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8002540:	7b7b      	ldrb	r3, [r7, #13]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	b21a      	sxth	r2, r3
 8002546:	7b3b      	ldrb	r3, [r7, #12]
 8002548:	b21b      	sxth	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b21b      	sxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fc30 	bl	8000db4 <__aeabi_i2f>
 8002554:	4603      	mov	r3, r0
 8002556:	6939      	ldr	r1, [r7, #16]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd33 	bl	8000fc4 <__aeabi_fdiv>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8002566:	2300      	movs	r3, #0
};
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	42c80000 	.word	0x42c80000

08002574 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b0af      	sub	sp, #188	; 0xbc
 8002578:	af2a      	add	r7, sp, #168	; 0xa8
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800257e:	687c      	ldr	r4, [r7, #4]
 8002580:	2302      	movs	r3, #2
 8002582:	9329      	str	r3, [sp, #164]	; 0xa4
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	9328      	str	r3, [sp, #160]	; 0xa0
 800258a:	2328      	movs	r3, #40	; 0x28
 800258c:	9327      	str	r3, [sp, #156]	; 0x9c
 800258e:	4668      	mov	r0, sp
 8002590:	f104 0310 	add.w	r3, r4, #16
 8002594:	229c      	movs	r2, #156	; 0x9c
 8002596:	4619      	mov	r1, r3
 8002598:	f009 faaa 	bl	800baf0 <memcpy>
 800259c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025a0:	f001 f965 	bl	800386e <bno055_read_regs>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <bno055_linear_acc_x+0x3e>
        return err;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	e01b      	b.n	80025ea <bno055_linear_acc_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80025b2:	7b7b      	ldrb	r3, [r7, #13]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	7b3b      	ldrb	r3, [r7, #12]
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	b21b      	sxth	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fbf7 	bl	8000db4 <__aeabi_i2f>
 80025c6:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <bno055_linear_acc_x+0x60>
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <bno055_linear_acc_x+0x80>)
 80025d2:	e001      	b.n	80025d8 <bno055_linear_acc_x+0x64>
 80025d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f7fe fcf2 	bl	8000fc4 <__aeabi_fdiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80025e8:	2300      	movs	r3, #0
};
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	42c80000 	.word	0x42c80000

080025f8 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b0af      	sub	sp, #188	; 0xbc
 80025fc:	af2a      	add	r7, sp, #168	; 0xa8
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002602:	687c      	ldr	r4, [r7, #4]
 8002604:	2302      	movs	r3, #2
 8002606:	9329      	str	r3, [sp, #164]	; 0xa4
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	9328      	str	r3, [sp, #160]	; 0xa0
 800260e:	232a      	movs	r3, #42	; 0x2a
 8002610:	9327      	str	r3, [sp, #156]	; 0x9c
 8002612:	4668      	mov	r0, sp
 8002614:	f104 0310 	add.w	r3, r4, #16
 8002618:	229c      	movs	r2, #156	; 0x9c
 800261a:	4619      	mov	r1, r3
 800261c:	f009 fa68 	bl	800baf0 <memcpy>
 8002620:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002624:	f001 f923 	bl	800386e <bno055_read_regs>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <bno055_linear_acc_y+0x3e>
        return err;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e01b      	b.n	800266e <bno055_linear_acc_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002636:	7b7b      	ldrb	r3, [r7, #13]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	7b3b      	ldrb	r3, [r7, #12]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b21b      	sxth	r3, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fbb5 	bl	8000db4 <__aeabi_i2f>
 800264a:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <bno055_linear_acc_y+0x60>
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <bno055_linear_acc_y+0x80>)
 8002656:	e001      	b.n	800265c <bno055_linear_acc_y+0x64>
 8002658:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f7fe fcb0 	bl	8000fc4 <__aeabi_fdiv>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800266c:	2300      	movs	r3, #0
};
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	42c80000 	.word	0x42c80000

0800267c <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b0af      	sub	sp, #188	; 0xbc
 8002680:	af2a      	add	r7, sp, #168	; 0xa8
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002686:	687c      	ldr	r4, [r7, #4]
 8002688:	2302      	movs	r3, #2
 800268a:	9329      	str	r3, [sp, #164]	; 0xa4
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	9328      	str	r3, [sp, #160]	; 0xa0
 8002692:	232c      	movs	r3, #44	; 0x2c
 8002694:	9327      	str	r3, [sp, #156]	; 0x9c
 8002696:	4668      	mov	r0, sp
 8002698:	f104 0310 	add.w	r3, r4, #16
 800269c:	229c      	movs	r2, #156	; 0x9c
 800269e:	4619      	mov	r1, r3
 80026a0:	f009 fa26 	bl	800baf0 <memcpy>
 80026a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026a8:	f001 f8e1 	bl	800386e <bno055_read_regs>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <bno055_linear_acc_z+0x3e>
        return err;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	e01b      	b.n	80026f2 <bno055_linear_acc_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80026ba:	7b7b      	ldrb	r3, [r7, #13]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	b21a      	sxth	r2, r3
 80026c0:	7b3b      	ldrb	r3, [r7, #12]
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fb73 	bl	8000db4 <__aeabi_i2f>
 80026ce:	4602      	mov	r2, r0
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <bno055_linear_acc_z+0x60>
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <bno055_linear_acc_z+0x80>)
 80026da:	e001      	b.n	80026e0 <bno055_linear_acc_z+0x64>
 80026dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    *buf = (s16)((data[1] << 8) | data[0]) /
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f7fe fc6e 	bl	8000fc4 <__aeabi_fdiv>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80026f0:	2300      	movs	r3, #0
};
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	42c80000 	.word	0x42c80000

08002700 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b0b1      	sub	sp, #196	; 0xc4
 8002704:	af2a      	add	r7, sp, #168	; 0xa8
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 800270a:	687c      	ldr	r4, [r7, #4]
 800270c:	2306      	movs	r3, #6
 800270e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	9328      	str	r3, [sp, #160]	; 0xa0
 8002716:	2328      	movs	r3, #40	; 0x28
 8002718:	9327      	str	r3, [sp, #156]	; 0x9c
 800271a:	4668      	mov	r0, sp
 800271c:	f104 0310 	add.w	r3, r4, #16
 8002720:	229c      	movs	r2, #156	; 0x9c
 8002722:	4619      	mov	r1, r3
 8002724:	f009 f9e4 	bl	800baf0 <memcpy>
 8002728:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800272c:	f001 f89f 	bl	800386e <bno055_read_regs>
 8002730:	4603      	mov	r3, r0
 8002732:	75fb      	strb	r3, [r7, #23]
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <bno055_linear_acc+0x3e>
        return err;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	e042      	b.n	80027c4 <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <bno055_linear_acc+0x4a>
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <bno055_linear_acc+0xcc>)
 8002748:	e001      	b.n	800274e <bno055_linear_acc+0x4e>
 800274a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800274e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002750:	7a7b      	ldrb	r3, [r7, #9]
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b21a      	sxth	r2, r3
 8002756:	7a3b      	ldrb	r3, [r7, #8]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b21b      	sxth	r3, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fb28 	bl	8000db4 <__aeabi_i2f>
 8002764:	4603      	mov	r3, r0
 8002766:	6939      	ldr	r1, [r7, #16]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fc2b 	bl	8000fc4 <__aeabi_fdiv>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	b21a      	sxth	r2, r3
 800277c:	7abb      	ldrb	r3, [r7, #10]
 800277e:	b21b      	sxth	r3, r3
 8002780:	4313      	orrs	r3, r2
 8002782:	b21b      	sxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fb15 	bl	8000db4 <__aeabi_i2f>
 800278a:	4603      	mov	r3, r0
 800278c:	6939      	ldr	r1, [r7, #16]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc18 	bl	8000fc4 <__aeabi_fdiv>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800279c:	7b7b      	ldrb	r3, [r7, #13]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	7b3b      	ldrb	r3, [r7, #12]
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fb02 	bl	8000db4 <__aeabi_i2f>
 80027b0:	4603      	mov	r3, r0
 80027b2:	6939      	ldr	r1, [r7, #16]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fc05 	bl	8000fc4 <__aeabi_fdiv>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 80027c2:	2300      	movs	r3, #0
};
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}
 80027cc:	42c80000 	.word	0x42c80000

080027d0 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b0af      	sub	sp, #188	; 0xbc
 80027d4:	af2a      	add	r7, sp, #168	; 0xa8
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80027da:	687c      	ldr	r4, [r7, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9329      	str	r3, [sp, #164]	; 0xa4
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80027e6:	2314      	movs	r3, #20
 80027e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80027ea:	4668      	mov	r0, sp
 80027ec:	f104 0310 	add.w	r3, r4, #16
 80027f0:	229c      	movs	r2, #156	; 0x9c
 80027f2:	4619      	mov	r1, r3
 80027f4:	f009 f97c 	bl	800baf0 <memcpy>
 80027f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027fc:	f001 f837 	bl	800386e <bno055_read_regs>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <bno055_gyro_x+0x3e>
        return err;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	e01b      	b.n	8002846 <bno055_gyro_x+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800280e:	7b7b      	ldrb	r3, [r7, #13]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21a      	sxth	r2, r3
 8002814:	7b3b      	ldrb	r3, [r7, #12]
 8002816:	b21b      	sxth	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	b21b      	sxth	r3, r3
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fac9 	bl	8000db4 <__aeabi_i2f>
 8002822:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <bno055_gyro_x+0x62>
 800282c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002830:	e000      	b.n	8002834 <bno055_gyro_x+0x64>
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <bno055_gyro_x+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002834:	4619      	mov	r1, r3
 8002836:	4610      	mov	r0, r2
 8002838:	f7fe fbc4 	bl	8000fc4 <__aeabi_fdiv>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002844:	2300      	movs	r3, #0
};
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	bf00      	nop
 8002850:	44610000 	.word	0x44610000

08002854 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b0af      	sub	sp, #188	; 0xbc
 8002858:	af2a      	add	r7, sp, #168	; 0xa8
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800285e:	687c      	ldr	r4, [r7, #4]
 8002860:	2302      	movs	r3, #2
 8002862:	9329      	str	r3, [sp, #164]	; 0xa4
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	9328      	str	r3, [sp, #160]	; 0xa0
 800286a:	2316      	movs	r3, #22
 800286c:	9327      	str	r3, [sp, #156]	; 0x9c
 800286e:	4668      	mov	r0, sp
 8002870:	f104 0310 	add.w	r3, r4, #16
 8002874:	229c      	movs	r2, #156	; 0x9c
 8002876:	4619      	mov	r1, r3
 8002878:	f009 f93a 	bl	800baf0 <memcpy>
 800287c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002880:	f000 fff5 	bl	800386e <bno055_read_regs>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <bno055_gyro_y+0x3e>
        return err;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	e01b      	b.n	80028ca <bno055_gyro_y+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002892:	7b7b      	ldrb	r3, [r7, #13]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	b21a      	sxth	r2, r3
 8002898:	7b3b      	ldrb	r3, [r7, #12]
 800289a:	b21b      	sxth	r3, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	b21b      	sxth	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fa87 	bl	8000db4 <__aeabi_i2f>
 80028a6:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <bno055_gyro_y+0x62>
 80028b0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80028b4:	e000      	b.n	80028b8 <bno055_gyro_y+0x64>
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <bno055_gyro_y+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f7fe fb82 	bl	8000fc4 <__aeabi_fdiv>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80028c8:	2300      	movs	r3, #0
};
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	44610000 	.word	0x44610000

080028d8 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b0af      	sub	sp, #188	; 0xbc
 80028dc:	af2a      	add	r7, sp, #168	; 0xa8
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80028e2:	687c      	ldr	r4, [r7, #4]
 80028e4:	2302      	movs	r3, #2
 80028e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80028ee:	2318      	movs	r3, #24
 80028f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80028f2:	4668      	mov	r0, sp
 80028f4:	f104 0310 	add.w	r3, r4, #16
 80028f8:	229c      	movs	r2, #156	; 0x9c
 80028fa:	4619      	mov	r1, r3
 80028fc:	f009 f8f8 	bl	800baf0 <memcpy>
 8002900:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002904:	f000 ffb3 	bl	800386e <bno055_read_regs>
 8002908:	4603      	mov	r3, r0
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <bno055_gyro_z+0x3e>
        return err;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	e01b      	b.n	800294e <bno055_gyro_z+0x76>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002916:	7b7b      	ldrb	r3, [r7, #13]
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	b21a      	sxth	r2, r3
 800291c:	7b3b      	ldrb	r3, [r7, #12]
 800291e:	b21b      	sxth	r3, r3
 8002920:	4313      	orrs	r3, r2
 8002922:	b21b      	sxth	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fa45 	bl	8000db4 <__aeabi_i2f>
 800292a:	4602      	mov	r2, r0
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <bno055_gyro_z+0x62>
 8002934:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002938:	e000      	b.n	800293c <bno055_gyro_z+0x64>
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <bno055_gyro_z+0x80>)
    *buf = (s16)((data[1] << 8) | data[0]) /
 800293c:	4619      	mov	r1, r3
 800293e:	4610      	mov	r0, r2
 8002940:	f7fe fb40 	bl	8000fc4 <__aeabi_fdiv>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800294c:	2300      	movs	r3, #0
};
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	bf00      	nop
 8002958:	44610000 	.word	0x44610000

0800295c <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b0b1      	sub	sp, #196	; 0xc4
 8002960:	af2a      	add	r7, sp, #168	; 0xa8
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002966:	687c      	ldr	r4, [r7, #4]
 8002968:	2306      	movs	r3, #6
 800296a:	9329      	str	r3, [sp, #164]	; 0xa4
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	9328      	str	r3, [sp, #160]	; 0xa0
 8002972:	2314      	movs	r3, #20
 8002974:	9327      	str	r3, [sp, #156]	; 0x9c
 8002976:	4668      	mov	r0, sp
 8002978:	f104 0310 	add.w	r3, r4, #16
 800297c:	229c      	movs	r2, #156	; 0x9c
 800297e:	4619      	mov	r1, r3
 8002980:	f009 f8b6 	bl	800baf0 <memcpy>
 8002984:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002988:	f000 ff71 	bl	800386e <bno055_read_regs>
 800298c:	4603      	mov	r3, r0
 800298e:	75fb      	strb	r3, [r7, #23]
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <bno055_gyro+0x3e>
        return err;
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	e042      	b.n	8002a20 <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <bno055_gyro+0x4c>
 80029a2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80029a6:	e000      	b.n	80029aa <bno055_gyro+0x4e>
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80029aa:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	7a3b      	ldrb	r3, [r7, #8]
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe f9fa 	bl	8000db4 <__aeabi_i2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	6939      	ldr	r1, [r7, #16]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fafd 	bl	8000fc4 <__aeabi_fdiv>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80029d2:	7afb      	ldrb	r3, [r7, #11]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	7abb      	ldrb	r3, [r7, #10]
 80029da:	b21b      	sxth	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b21b      	sxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe f9e7 	bl	8000db4 <__aeabi_i2f>
 80029e6:	4603      	mov	r3, r0
 80029e8:	6939      	ldr	r1, [r7, #16]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe faea 	bl	8000fc4 <__aeabi_fdiv>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80029f8:	7b7b      	ldrb	r3, [r7, #13]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	7b3b      	ldrb	r3, [r7, #12]
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b21b      	sxth	r3, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f9d4 	bl	8000db4 <__aeabi_i2f>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	6939      	ldr	r1, [r7, #16]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fad7 	bl	8000fc4 <__aeabi_fdiv>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd90      	pop	{r4, r7, pc}
 8002a28:	44610000 	.word	0x44610000

08002a2c <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b0af      	sub	sp, #188	; 0xbc
 8002a30:	af2a      	add	r7, sp, #168	; 0xa8
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002a36:	687c      	ldr	r4, [r7, #4]
 8002a38:	2302      	movs	r3, #2
 8002a3a:	9329      	str	r3, [sp, #164]	; 0xa4
 8002a3c:	f107 030c 	add.w	r3, r7, #12
 8002a40:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a42:	230e      	movs	r3, #14
 8002a44:	9327      	str	r3, [sp, #156]	; 0x9c
 8002a46:	4668      	mov	r0, sp
 8002a48:	f104 0310 	add.w	r3, r4, #16
 8002a4c:	229c      	movs	r2, #156	; 0x9c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f009 f84e 	bl	800baf0 <memcpy>
 8002a54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a58:	f000 ff09 	bl	800386e <bno055_read_regs>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <bno055_mag_x+0x3e>
        return err;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	e014      	b.n	8002a94 <bno055_mag_x+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002a6a:	7b7b      	ldrb	r3, [r7, #13]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	7b3b      	ldrb	r3, [r7, #12]
 8002a72:	b21b      	sxth	r3, r3
 8002a74:	4313      	orrs	r3, r2
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f99b 	bl	8000db4 <__aeabi_i2f>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fa9d 	bl	8000fc4 <__aeabi_fdiv>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd90      	pop	{r4, r7, pc}

08002a9c <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b0af      	sub	sp, #188	; 0xbc
 8002aa0:	af2a      	add	r7, sp, #168	; 0xa8
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002aa6:	687c      	ldr	r4, [r7, #4]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	9329      	str	r3, [sp, #164]	; 0xa4
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	9327      	str	r3, [sp, #156]	; 0x9c
 8002ab6:	4668      	mov	r0, sp
 8002ab8:	f104 0310 	add.w	r3, r4, #16
 8002abc:	229c      	movs	r2, #156	; 0x9c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f009 f816 	bl	800baf0 <memcpy>
 8002ac4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ac8:	f000 fed1 	bl	800386e <bno055_read_regs>
 8002acc:	4603      	mov	r3, r0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <bno055_mag_y+0x3e>
        return err;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	e014      	b.n	8002b04 <bno055_mag_y+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002ada:	7b7b      	ldrb	r3, [r7, #13]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	b21a      	sxth	r2, r3
 8002ae0:	7b3b      	ldrb	r3, [r7, #12]
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f963 	bl	8000db4 <__aeabi_i2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe fa65 	bl	8000fc4 <__aeabi_fdiv>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd90      	pop	{r4, r7, pc}

08002b0c <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b0af      	sub	sp, #188	; 0xbc
 8002b10:	af2a      	add	r7, sp, #168	; 0xa8
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002b16:	687c      	ldr	r4, [r7, #4]
 8002b18:	2302      	movs	r3, #2
 8002b1a:	9329      	str	r3, [sp, #164]	; 0xa4
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	9328      	str	r3, [sp, #160]	; 0xa0
 8002b22:	2312      	movs	r3, #18
 8002b24:	9327      	str	r3, [sp, #156]	; 0x9c
 8002b26:	4668      	mov	r0, sp
 8002b28:	f104 0310 	add.w	r3, r4, #16
 8002b2c:	229c      	movs	r2, #156	; 0x9c
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f008 ffde 	bl	800baf0 <memcpy>
 8002b34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b38:	f000 fe99 	bl	800386e <bno055_read_regs>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <bno055_mag_z+0x3e>
        return err;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	e014      	b.n	8002b74 <bno055_mag_z+0x68>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002b4a:	7b7b      	ldrb	r3, [r7, #13]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	b21a      	sxth	r2, r3
 8002b50:	7b3b      	ldrb	r3, [r7, #12]
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b21b      	sxth	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe f92b 	bl	8000db4 <__aeabi_i2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fa2d 	bl	8000fc4 <__aeabi_fdiv>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd90      	pop	{r4, r7, pc}

08002b7c <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b0af      	sub	sp, #188	; 0xbc
 8002b80:	af2a      	add	r7, sp, #168	; 0xa8
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002b86:	687c      	ldr	r4, [r7, #4]
 8002b88:	2306      	movs	r3, #6
 8002b8a:	9329      	str	r3, [sp, #164]	; 0xa4
 8002b8c:	f107 0308 	add.w	r3, r7, #8
 8002b90:	9328      	str	r3, [sp, #160]	; 0xa0
 8002b92:	230e      	movs	r3, #14
 8002b94:	9327      	str	r3, [sp, #156]	; 0x9c
 8002b96:	4668      	mov	r0, sp
 8002b98:	f104 0310 	add.w	r3, r4, #16
 8002b9c:	229c      	movs	r2, #156	; 0x9c
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f008 ffa6 	bl	800baf0 <memcpy>
 8002ba4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ba8:	f000 fe61 	bl	800386e <bno055_read_regs>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <bno055_mag+0x3e>
        return err;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	e03c      	b.n	8002c34 <bno055_mag+0xb8>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002bba:	7a7b      	ldrb	r3, [r7, #9]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	7a3b      	ldrb	r3, [r7, #8]
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f8f3 	bl	8000db4 <__aeabi_i2f>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f9f5 	bl	8000fc4 <__aeabi_fdiv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	601a      	str	r2, [r3, #0]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8002be2:	7afb      	ldrb	r3, [r7, #11]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	7abb      	ldrb	r3, [r7, #10]
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe f8df 	bl	8000db4 <__aeabi_i2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f9e1 	bl	8000fc4 <__aeabi_fdiv>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	605a      	str	r2, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8002c0a:	7b7b      	ldrb	r3, [r7, #13]
 8002c0c:	021b      	lsls	r3, r3, #8
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	7b3b      	ldrb	r3, [r7, #12]
 8002c12:	b21b      	sxth	r3, r3
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f8cb 	bl	8000db4 <__aeabi_i2f>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f9cd 	bl	8000fc4 <__aeabi_fdiv>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	609a      	str	r2, [r3, #8]

    return BNO_OK;
 8002c32:	2300      	movs	r3, #0
};
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}

08002c3c <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b0b1      	sub	sp, #196	; 0xc4
 8002c40:	af2a      	add	r7, sp, #168	; 0xa8
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002c46:	687c      	ldr	r4, [r7, #4]
 8002c48:	2302      	movs	r3, #2
 8002c4a:	9329      	str	r3, [sp, #164]	; 0xa4
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c52:	232e      	movs	r3, #46	; 0x2e
 8002c54:	9327      	str	r3, [sp, #156]	; 0x9c
 8002c56:	4668      	mov	r0, sp
 8002c58:	f104 0310 	add.w	r3, r4, #16
 8002c5c:	229c      	movs	r2, #156	; 0x9c
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f008 ff46 	bl	800baf0 <memcpy>
 8002c64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c68:	f000 fe01 	bl	800386e <bno055_read_regs>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	75fb      	strb	r3, [r7, #23]
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <bno055_gravity_x+0x3e>
        return err;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	e01c      	b.n	8002cb4 <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <bno055_gravity_x+0x4a>
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <bno055_gravity_x+0x80>)
 8002c84:	e001      	b.n	8002c8a <bno055_gravity_x+0x4e>
 8002c86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002c8a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002c8c:	7b7b      	ldrb	r3, [r7, #13]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	7b3b      	ldrb	r3, [r7, #12]
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b21b      	sxth	r3, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f88a 	bl	8000db4 <__aeabi_i2f>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	6939      	ldr	r1, [r7, #16]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f98d 	bl	8000fc4 <__aeabi_fdiv>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	42c80000 	.word	0x42c80000

08002cc0 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b0b1      	sub	sp, #196	; 0xc4
 8002cc4:	af2a      	add	r7, sp, #168	; 0xa8
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002cca:	687c      	ldr	r4, [r7, #4]
 8002ccc:	2302      	movs	r3, #2
 8002cce:	9329      	str	r3, [sp, #164]	; 0xa4
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	9328      	str	r3, [sp, #160]	; 0xa0
 8002cd6:	2330      	movs	r3, #48	; 0x30
 8002cd8:	9327      	str	r3, [sp, #156]	; 0x9c
 8002cda:	4668      	mov	r0, sp
 8002cdc:	f104 0310 	add.w	r3, r4, #16
 8002ce0:	229c      	movs	r2, #156	; 0x9c
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f008 ff04 	bl	800baf0 <memcpy>
 8002ce8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cec:	f000 fdbf 	bl	800386e <bno055_read_regs>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	75fb      	strb	r3, [r7, #23]
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <bno055_gravity_y+0x3e>
        return err;
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	e01c      	b.n	8002d38 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <bno055_gravity_y+0x4a>
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <bno055_gravity_y+0x80>)
 8002d08:	e001      	b.n	8002d0e <bno055_gravity_y+0x4e>
 8002d0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002d0e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002d10:	7b7b      	ldrb	r3, [r7, #13]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	7b3b      	ldrb	r3, [r7, #12]
 8002d18:	b21b      	sxth	r3, r3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b21b      	sxth	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe f848 	bl	8000db4 <__aeabi_i2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	6939      	ldr	r1, [r7, #16]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe f94b 	bl	8000fc4 <__aeabi_fdiv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}
 8002d40:	42c80000 	.word	0x42c80000

08002d44 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b0b1      	sub	sp, #196	; 0xc4
 8002d48:	af2a      	add	r7, sp, #168	; 0xa8
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002d4e:	687c      	ldr	r4, [r7, #4]
 8002d50:	2302      	movs	r3, #2
 8002d52:	9329      	str	r3, [sp, #164]	; 0xa4
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d5a:	2332      	movs	r3, #50	; 0x32
 8002d5c:	9327      	str	r3, [sp, #156]	; 0x9c
 8002d5e:	4668      	mov	r0, sp
 8002d60:	f104 0310 	add.w	r3, r4, #16
 8002d64:	229c      	movs	r2, #156	; 0x9c
 8002d66:	4619      	mov	r1, r3
 8002d68:	f008 fec2 	bl	800baf0 <memcpy>
 8002d6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d70:	f000 fd7d 	bl	800386e <bno055_read_regs>
 8002d74:	4603      	mov	r3, r0
 8002d76:	75fb      	strb	r3, [r7, #23]
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <bno055_gravity_z+0x3e>
        return err;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	e01c      	b.n	8002dbc <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <bno055_gravity_z+0x4a>
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <bno055_gravity_z+0x80>)
 8002d8c:	e001      	b.n	8002d92 <bno055_gravity_z+0x4e>
 8002d8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002d92:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002d94:	7b7b      	ldrb	r3, [r7, #13]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	b21a      	sxth	r2, r3
 8002d9a:	7b3b      	ldrb	r3, [r7, #12]
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b21b      	sxth	r3, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fe f806 	bl	8000db4 <__aeabi_i2f>
 8002da8:	4603      	mov	r3, r0
 8002daa:	6939      	ldr	r1, [r7, #16]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe f909 	bl	8000fc4 <__aeabi_fdiv>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	42c80000 	.word	0x42c80000

08002dc8 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b0b1      	sub	sp, #196	; 0xc4
 8002dcc:	af2a      	add	r7, sp, #168	; 0xa8
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002dd2:	687c      	ldr	r4, [r7, #4]
 8002dd4:	2306      	movs	r3, #6
 8002dd6:	9329      	str	r3, [sp, #164]	; 0xa4
 8002dd8:	f107 0308 	add.w	r3, r7, #8
 8002ddc:	9328      	str	r3, [sp, #160]	; 0xa0
 8002dde:	232e      	movs	r3, #46	; 0x2e
 8002de0:	9327      	str	r3, [sp, #156]	; 0x9c
 8002de2:	4668      	mov	r0, sp
 8002de4:	f104 0310 	add.w	r3, r4, #16
 8002de8:	229c      	movs	r2, #156	; 0x9c
 8002dea:	4619      	mov	r1, r3
 8002dec:	f008 fe80 	bl	800baf0 <memcpy>
 8002df0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002df4:	f000 fd3b 	bl	800386e <bno055_read_regs>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	75fb      	strb	r3, [r7, #23]
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <bno055_gravity+0x3e>
        return err;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	e042      	b.n	8002e8c <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <bno055_gravity+0x4a>
 8002e0e:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <bno055_gravity+0xcc>)
 8002e10:	e001      	b.n	8002e16 <bno055_gravity+0x4e>
 8002e12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e16:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002e18:	7a7b      	ldrb	r3, [r7, #9]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	b21a      	sxth	r2, r3
 8002e1e:	7a3b      	ldrb	r3, [r7, #8]
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4313      	orrs	r3, r2
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd ffc4 	bl	8000db4 <__aeabi_i2f>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	6939      	ldr	r1, [r7, #16]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f8c7 	bl	8000fc4 <__aeabi_fdiv>
 8002e36:	4603      	mov	r3, r0
 8002e38:	461a      	mov	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	7abb      	ldrb	r3, [r7, #10]
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd ffb1 	bl	8000db4 <__aeabi_i2f>
 8002e52:	4603      	mov	r3, r0
 8002e54:	6939      	ldr	r1, [r7, #16]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f8b4 	bl	8000fc4 <__aeabi_fdiv>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	605a      	str	r2, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8002e64:	7b7b      	ldrb	r3, [r7, #13]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	b21a      	sxth	r2, r3
 8002e6a:	7b3b      	ldrb	r3, [r7, #12]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd ff9e 	bl	8000db4 <__aeabi_i2f>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	6939      	ldr	r1, [r7, #16]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe f8a1 	bl	8000fc4 <__aeabi_fdiv>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	42c80000 	.word	0x42c80000

08002e98 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b0b1      	sub	sp, #196	; 0xc4
 8002e9c:	af2a      	add	r7, sp, #168	; 0xa8
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8002ea2:	687c      	ldr	r4, [r7, #4]
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	9329      	str	r3, [sp, #164]	; 0xa4
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	9328      	str	r3, [sp, #160]	; 0xa0
 8002eae:	231a      	movs	r3, #26
 8002eb0:	9327      	str	r3, [sp, #156]	; 0x9c
 8002eb2:	4668      	mov	r0, sp
 8002eb4:	f104 0310 	add.w	r3, r4, #16
 8002eb8:	229c      	movs	r2, #156	; 0x9c
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f008 fe18 	bl	800baf0 <memcpy>
 8002ec0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ec4:	f000 fcd3 	bl	800386e <bno055_read_regs>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	75fb      	strb	r3, [r7, #23]
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	e01c      	b.n	8002f10 <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <bno055_euler_yaw+0x4c>
 8002ede:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002ee2:	e000      	b.n	8002ee6 <bno055_euler_yaw+0x4e>
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002ee6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002ee8:	7b7b      	ldrb	r3, [r7, #13]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	b21a      	sxth	r2, r3
 8002eee:	7b3b      	ldrb	r3, [r7, #12]
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b21b      	sxth	r3, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd ff5c 	bl	8000db4 <__aeabi_i2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	6939      	ldr	r1, [r7, #16]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe f85f 	bl	8000fc4 <__aeabi_fdiv>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}
 8002f18:	44610000 	.word	0x44610000

08002f1c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b0b1      	sub	sp, #196	; 0xc4
 8002f20:	af2a      	add	r7, sp, #168	; 0xa8
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8002f26:	687c      	ldr	r4, [r7, #4]
 8002f28:	2302      	movs	r3, #2
 8002f2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f32:	231c      	movs	r3, #28
 8002f34:	9327      	str	r3, [sp, #156]	; 0x9c
 8002f36:	4668      	mov	r0, sp
 8002f38:	f104 0310 	add.w	r3, r4, #16
 8002f3c:	229c      	movs	r2, #156	; 0x9c
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f008 fdd6 	bl	800baf0 <memcpy>
 8002f44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f48:	f000 fc91 	bl	800386e <bno055_read_regs>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <bno055_euler_roll+0x3e>
        return err;
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	e01c      	b.n	8002f94 <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <bno055_euler_roll+0x4c>
 8002f62:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002f66:	e000      	b.n	8002f6a <bno055_euler_roll+0x4e>
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002f6a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002f6c:	7b7b      	ldrb	r3, [r7, #13]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	b21a      	sxth	r2, r3
 8002f72:	7b3b      	ldrb	r3, [r7, #12]
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd ff1a 	bl	8000db4 <__aeabi_i2f>
 8002f80:	4603      	mov	r3, r0
 8002f82:	6939      	ldr	r1, [r7, #16]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe f81d 	bl	8000fc4 <__aeabi_fdiv>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}
 8002f9c:	44610000 	.word	0x44610000

08002fa0 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b0b1      	sub	sp, #196	; 0xc4
 8002fa4:	af2a      	add	r7, sp, #168	; 0xa8
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8002faa:	687c      	ldr	r4, [r7, #4]
 8002fac:	2302      	movs	r3, #2
 8002fae:	9329      	str	r3, [sp, #164]	; 0xa4
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8002fb6:	231e      	movs	r3, #30
 8002fb8:	9327      	str	r3, [sp, #156]	; 0x9c
 8002fba:	4668      	mov	r0, sp
 8002fbc:	f104 0310 	add.w	r3, r4, #16
 8002fc0:	229c      	movs	r2, #156	; 0x9c
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f008 fd94 	bl	800baf0 <memcpy>
 8002fc8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fcc:	f000 fc4f 	bl	800386e <bno055_read_regs>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <bno055_euler_pitch+0x3e>
        return err;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	e01c      	b.n	8003018 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <bno055_euler_pitch+0x4c>
 8002fe6:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002fea:	e000      	b.n	8002fee <bno055_euler_pitch+0x4e>
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002fee:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002ff0:	7b7b      	ldrb	r3, [r7, #13]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	b21a      	sxth	r2, r3
 8002ff6:	7b3b      	ldrb	r3, [r7, #12]
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fed8 	bl	8000db4 <__aeabi_i2f>
 8003004:	4603      	mov	r3, r0
 8003006:	6939      	ldr	r1, [r7, #16]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd ffdb 	bl	8000fc4 <__aeabi_fdiv>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}
 8003020:	44610000 	.word	0x44610000

08003024 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b0b1      	sub	sp, #196	; 0xc4
 8003028:	af2a      	add	r7, sp, #168	; 0xa8
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 800302e:	687c      	ldr	r4, [r7, #4]
 8003030:	2306      	movs	r3, #6
 8003032:	9329      	str	r3, [sp, #164]	; 0xa4
 8003034:	f107 0308 	add.w	r3, r7, #8
 8003038:	9328      	str	r3, [sp, #160]	; 0xa0
 800303a:	231a      	movs	r3, #26
 800303c:	9327      	str	r3, [sp, #156]	; 0x9c
 800303e:	4668      	mov	r0, sp
 8003040:	f104 0310 	add.w	r3, r4, #16
 8003044:	229c      	movs	r2, #156	; 0x9c
 8003046:	4619      	mov	r1, r3
 8003048:	f008 fd52 	bl	800baf0 <memcpy>
 800304c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003050:	f000 fc0d 	bl	800386e <bno055_read_regs>
 8003054:	4603      	mov	r3, r0
 8003056:	75fb      	strb	r3, [r7, #23]
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	e042      	b.n	80030e8 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <bno055_euler+0x4c>
 800306a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800306e:	e000      	b.n	8003072 <bno055_euler+0x4e>
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003072:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8003074:	7a7b      	ldrb	r3, [r7, #9]
 8003076:	021b      	lsls	r3, r3, #8
 8003078:	b21a      	sxth	r2, r3
 800307a:	7a3b      	ldrb	r3, [r7, #8]
 800307c:	b21b      	sxth	r3, r3
 800307e:	4313      	orrs	r3, r2
 8003080:	b21b      	sxth	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fe96 	bl	8000db4 <__aeabi_i2f>
 8003088:	4603      	mov	r3, r0
 800308a:	6939      	ldr	r1, [r7, #16]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd ff99 	bl	8000fc4 <__aeabi_fdiv>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	609a      	str	r2, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 800309a:	7afb      	ldrb	r3, [r7, #11]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	b21a      	sxth	r2, r3
 80030a0:	7abb      	ldrb	r3, [r7, #10]
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	4313      	orrs	r3, r2
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fe83 	bl	8000db4 <__aeabi_i2f>
 80030ae:	4603      	mov	r3, r0
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd ff86 	bl	8000fc4 <__aeabi_fdiv>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	601a      	str	r2, [r3, #0]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 80030c0:	7b7b      	ldrb	r3, [r7, #13]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b21a      	sxth	r2, r3
 80030c6:	7b3b      	ldrb	r3, [r7, #12]
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fe70 	bl	8000db4 <__aeabi_i2f>
 80030d4:	4603      	mov	r3, r0
 80030d6:	6939      	ldr	r1, [r7, #16]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd ff73 	bl	8000fc4 <__aeabi_fdiv>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	605a      	str	r2, [r3, #4]
    return BNO_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	44610000 	.word	0x44610000

080030f4 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b0af      	sub	sp, #188	; 0xbc
 80030f8:	af2a      	add	r7, sp, #168	; 0xa8
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 80030fe:	687c      	ldr	r4, [r7, #4]
 8003100:	2302      	movs	r3, #2
 8003102:	9329      	str	r3, [sp, #164]	; 0xa4
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	9328      	str	r3, [sp, #160]	; 0xa0
 800310a:	2320      	movs	r3, #32
 800310c:	9327      	str	r3, [sp, #156]	; 0x9c
 800310e:	4668      	mov	r0, sp
 8003110:	f104 0310 	add.w	r3, r4, #16
 8003114:	229c      	movs	r2, #156	; 0x9c
 8003116:	4619      	mov	r1, r3
 8003118:	f008 fcea 	bl	800baf0 <memcpy>
 800311c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003120:	f000 fba5 	bl	800386e <bno055_read_regs>
 8003124:	4603      	mov	r3, r0
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <bno055_quaternion_w+0x3e>
        return err;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	e014      	b.n	800315c <bno055_quaternion_w+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003132:	7b7b      	ldrb	r3, [r7, #13]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	b21a      	sxth	r2, r3
 8003138:	7b3b      	ldrb	r3, [r7, #12]
 800313a:	b21b      	sxth	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	b21b      	sxth	r3, r3
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fe37 	bl	8000db4 <__aeabi_i2f>
 8003146:	4603      	mov	r3, r0
 8003148:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd ff39 	bl	8000fc4 <__aeabi_fdiv>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bd90      	pop	{r4, r7, pc}

08003164 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b0af      	sub	sp, #188	; 0xbc
 8003168:	af2a      	add	r7, sp, #168	; 0xa8
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800316e:	687c      	ldr	r4, [r7, #4]
 8003170:	2302      	movs	r3, #2
 8003172:	9329      	str	r3, [sp, #164]	; 0xa4
 8003174:	f107 030c 	add.w	r3, r7, #12
 8003178:	9328      	str	r3, [sp, #160]	; 0xa0
 800317a:	2322      	movs	r3, #34	; 0x22
 800317c:	9327      	str	r3, [sp, #156]	; 0x9c
 800317e:	4668      	mov	r0, sp
 8003180:	f104 0310 	add.w	r3, r4, #16
 8003184:	229c      	movs	r2, #156	; 0x9c
 8003186:	4619      	mov	r1, r3
 8003188:	f008 fcb2 	bl	800baf0 <memcpy>
 800318c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003190:	f000 fb6d 	bl	800386e <bno055_read_regs>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <bno055_quaternion_x+0x3e>
        return err;
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	e014      	b.n	80031cc <bno055_quaternion_x+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80031a2:	7b7b      	ldrb	r3, [r7, #13]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	7b3b      	ldrb	r3, [r7, #12]
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fdff 	bl	8000db4 <__aeabi_i2f>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd ff01 	bl	8000fc4 <__aeabi_fdiv>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b0af      	sub	sp, #188	; 0xbc
 80031d8:	af2a      	add	r7, sp, #168	; 0xa8
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80031de:	687c      	ldr	r4, [r7, #4]
 80031e0:	2302      	movs	r3, #2
 80031e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80031ea:	2324      	movs	r3, #36	; 0x24
 80031ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80031ee:	4668      	mov	r0, sp
 80031f0:	f104 0310 	add.w	r3, r4, #16
 80031f4:	229c      	movs	r2, #156	; 0x9c
 80031f6:	4619      	mov	r1, r3
 80031f8:	f008 fc7a 	bl	800baf0 <memcpy>
 80031fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003200:	f000 fb35 	bl	800386e <bno055_read_regs>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <bno055_quaternion_y+0x3e>
        return err;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	e014      	b.n	800323c <bno055_quaternion_y+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003212:	7b7b      	ldrb	r3, [r7, #13]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	b21a      	sxth	r2, r3
 8003218:	7b3b      	ldrb	r3, [r7, #12]
 800321a:	b21b      	sxth	r3, r3
 800321c:	4313      	orrs	r3, r2
 800321e:	b21b      	sxth	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fdc7 	bl	8000db4 <__aeabi_i2f>
 8003226:	4603      	mov	r3, r0
 8003228:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd fec9 	bl	8000fc4 <__aeabi_fdiv>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}

08003244 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b0af      	sub	sp, #188	; 0xbc
 8003248:	af2a      	add	r7, sp, #168	; 0xa8
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800324e:	687c      	ldr	r4, [r7, #4]
 8003250:	2302      	movs	r3, #2
 8003252:	9329      	str	r3, [sp, #164]	; 0xa4
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	9328      	str	r3, [sp, #160]	; 0xa0
 800325a:	2326      	movs	r3, #38	; 0x26
 800325c:	9327      	str	r3, [sp, #156]	; 0x9c
 800325e:	4668      	mov	r0, sp
 8003260:	f104 0310 	add.w	r3, r4, #16
 8003264:	229c      	movs	r2, #156	; 0x9c
 8003266:	4619      	mov	r1, r3
 8003268:	f008 fc42 	bl	800baf0 <memcpy>
 800326c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003270:	f000 fafd 	bl	800386e <bno055_read_regs>
 8003274:	4603      	mov	r3, r0
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <bno055_quaternion_z+0x3e>
        return err;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	e014      	b.n	80032ac <bno055_quaternion_z+0x68>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003282:	7b7b      	ldrb	r3, [r7, #13]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b21a      	sxth	r2, r3
 8003288:	7b3b      	ldrb	r3, [r7, #12]
 800328a:	b21b      	sxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b21b      	sxth	r3, r3
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fd8f 	bl	8000db4 <__aeabi_i2f>
 8003296:	4603      	mov	r3, r0
 8003298:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fe91 	bl	8000fc4 <__aeabi_fdiv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	601a      	str	r2, [r3, #0]
    return BNO_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd90      	pop	{r4, r7, pc}

080032b4 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b0b1      	sub	sp, #196	; 0xc4
 80032b8:	af2a      	add	r7, sp, #168	; 0xa8
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 80032be:	687c      	ldr	r4, [r7, #4]
 80032c0:	2308      	movs	r3, #8
 80032c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80032ca:	2320      	movs	r3, #32
 80032cc:	9327      	str	r3, [sp, #156]	; 0x9c
 80032ce:	4668      	mov	r0, sp
 80032d0:	f104 0310 	add.w	r3, r4, #16
 80032d4:	229c      	movs	r2, #156	; 0x9c
 80032d6:	4619      	mov	r1, r3
 80032d8:	f008 fc0a 	bl	800baf0 <memcpy>
 80032dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032e0:	f000 fac5 	bl	800386e <bno055_read_regs>
 80032e4:	4603      	mov	r3, r0
 80032e6:	75fb      	strb	r3, [r7, #23]
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <bno055_quaternion+0x3e>
        return err;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	e050      	b.n	8003394 <bno055_quaternion+0xe0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80032f2:	7b7b      	ldrb	r3, [r7, #13]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	b21a      	sxth	r2, r3
 80032f8:	7b3b      	ldrb	r3, [r7, #12]
 80032fa:	b21b      	sxth	r3, r3
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b21b      	sxth	r3, r3
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd fd57 	bl	8000db4 <__aeabi_i2f>
 8003306:	4603      	mov	r3, r0
 8003308:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd fe59 	bl	8000fc4 <__aeabi_fdiv>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	60da      	str	r2, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	b21a      	sxth	r2, r3
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	b21b      	sxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b21b      	sxth	r3, r3
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fd43 	bl	8000db4 <__aeabi_i2f>
 800332e:	4603      	mov	r3, r0
 8003330:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fe45 	bl	8000fc4 <__aeabi_fdiv>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8003342:	7c7b      	ldrb	r3, [r7, #17]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	b21a      	sxth	r2, r3
 8003348:	7c3b      	ldrb	r3, [r7, #16]
 800334a:	b21b      	sxth	r3, r3
 800334c:	4313      	orrs	r3, r2
 800334e:	b21b      	sxth	r3, r3
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fd2f 	bl	8000db4 <__aeabi_i2f>
 8003356:	4603      	mov	r3, r0
 8003358:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fe31 	bl	8000fc4 <__aeabi_fdiv>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 800336a:	7cfb      	ldrb	r3, [r7, #19]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	b21a      	sxth	r2, r3
 8003370:	7cbb      	ldrb	r3, [r7, #18]
 8003372:	b21b      	sxth	r3, r3
 8003374:	4313      	orrs	r3, r2
 8003376:	b21b      	sxth	r3, r3
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fd1b 	bl	8000db4 <__aeabi_i2f>
 800337e:	4603      	mov	r3, r0
 8003380:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fe1d 	bl	8000fc4 <__aeabi_fdiv>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	609a      	str	r2, [r3, #8]
    return BNO_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b0af      	sub	sp, #188	; 0xbc
 80033a0:	af2a      	add	r7, sp, #168	; 0xa8
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	70fb      	strb	r3, [r7, #3]
 80033ae:	460b      	mov	r3, r1
 80033b0:	70bb      	strb	r3, [r7, #2]
 80033b2:	4613      	mov	r3, r2
 80033b4:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80033b6:	2101      	movs	r1, #1
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fabb 	bl	8003934 <bno055_set_page>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <bno055_acc_conf+0x30>
        return err;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	e04b      	b.n	8003464 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80033cc:	2100      	movs	r1, #0
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f91b 	bl	800360a <bno055_set_opmode>
 80033d4:	4603      	mov	r3, r0
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <bno055_acc_conf+0x46>
        return err;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	e040      	b.n	8003464 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80033e2:	200c      	movs	r0, #12
 80033e4:	f003 f884 	bl	80064f0 <HAL_Delay>
    u8 config = range | bandwidth | mode;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	78bb      	ldrb	r3, [r7, #2]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 80033f8:	687c      	ldr	r4, [r7, #4]
 80033fa:	2301      	movs	r3, #1
 80033fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80033fe:	f107 030e 	add.w	r3, r7, #14
 8003402:	9328      	str	r3, [sp, #160]	; 0xa0
 8003404:	2308      	movs	r3, #8
 8003406:	9327      	str	r3, [sp, #156]	; 0x9c
 8003408:	4668      	mov	r0, sp
 800340a:	f104 0310 	add.w	r3, r4, #16
 800340e:	229c      	movs	r2, #156	; 0x9c
 8003410:	4619      	mov	r1, r3
 8003412:	f008 fb6d 	bl	800baf0 <memcpy>
 8003416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800341a:	f000 fa5e 	bl	80038da <bno055_write_regs>
 800341e:	4603      	mov	r3, r0
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <bno055_acc_conf+0x90>
        return err;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	e01b      	b.n	8003464 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	791b      	ldrb	r3, [r3, #4]
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8e9 	bl	800360a <bno055_set_opmode>
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <bno055_acc_conf+0xaa>
        return err;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	e00e      	b.n	8003464 <bno055_acc_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003446:	2018      	movs	r0, #24
 8003448:	f003 f852 	bl	80064f0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800344c:	2100      	movs	r1, #0
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa70 	bl	8003934 <bno055_set_page>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <bno055_acc_conf+0xc6>
        return err;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	e000      	b.n	8003464 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bd90      	pop	{r4, r7, pc}

0800346c <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	b0af      	sub	sp, #188	; 0xbc
 8003470:	af2a      	add	r7, sp, #168	; 0xa8
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	70fb      	strb	r3, [r7, #3]
 800347e:	460b      	mov	r3, r1
 8003480:	70bb      	strb	r3, [r7, #2]
 8003482:	4613      	mov	r3, r2
 8003484:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003486:	2101      	movs	r1, #1
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa53 	bl	8003934 <bno055_set_page>
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <bno055_gyr_conf+0x30>
        return err;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	e04a      	b.n	8003532 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800349c:	2100      	movs	r1, #0
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8b3 	bl	800360a <bno055_set_opmode>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <bno055_gyr_conf+0x46>
        return err;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	e03f      	b.n	8003532 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 80034b2:	200c      	movs	r0, #12
 80034b4:	f003 f81c 	bl	80064f0 <HAL_Delay>
    u8 config[2] = {range | bandwidth, mode};
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	78bb      	ldrb	r3, [r7, #2]
 80034bc:	4313      	orrs	r3, r2
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	733b      	strb	r3, [r7, #12]
 80034c2:	787b      	ldrb	r3, [r7, #1]
 80034c4:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 80034c6:	687c      	ldr	r4, [r7, #4]
 80034c8:	2302      	movs	r3, #2
 80034ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80034d2:	230a      	movs	r3, #10
 80034d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80034d6:	4668      	mov	r0, sp
 80034d8:	f104 0310 	add.w	r3, r4, #16
 80034dc:	229c      	movs	r2, #156	; 0x9c
 80034de:	4619      	mov	r1, r3
 80034e0:	f008 fb06 	bl	800baf0 <memcpy>
 80034e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80034e8:	f000 f9f7 	bl	80038da <bno055_write_regs>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	e01b      	b.n	8003532 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	791b      	ldrb	r3, [r3, #4]
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f882 	bl	800360a <bno055_set_opmode>
 8003506:	4603      	mov	r3, r0
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <bno055_gyr_conf+0xa8>
        return err;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	e00e      	b.n	8003532 <bno055_gyr_conf+0xc6>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003514:	2018      	movs	r0, #24
 8003516:	f002 ffeb 	bl	80064f0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 800351a:	2100      	movs	r1, #0
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fa09 	bl	8003934 <bno055_set_page>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <bno055_gyr_conf+0xc4>
        return err;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	e000      	b.n	8003532 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}

0800353a <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 800353a:	b590      	push	{r4, r7, lr}
 800353c:	b0af      	sub	sp, #188	; 0xbc
 800353e:	af2a      	add	r7, sp, #168	; 0xa8
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	4608      	mov	r0, r1
 8003544:	4611      	mov	r1, r2
 8003546:	461a      	mov	r2, r3
 8003548:	4603      	mov	r3, r0
 800354a:	70fb      	strb	r3, [r7, #3]
 800354c:	460b      	mov	r3, r1
 800354e:	70bb      	strb	r3, [r7, #2]
 8003550:	4613      	mov	r3, r2
 8003552:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003554:	2101      	movs	r1, #1
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f9ec 	bl	8003934 <bno055_set_page>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <bno055_mag_conf+0x30>
        return err;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	e04b      	b.n	8003602 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800356a:	2100      	movs	r1, #0
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f84c 	bl	800360a <bno055_set_opmode>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <bno055_mag_conf+0x46>
        return err;
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	e040      	b.n	8003602 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_CONFIG_TIME_DELAY + 5);
 8003580:	200c      	movs	r0, #12
 8003582:	f002 ffb5 	bl	80064f0 <HAL_Delay>
    u8 config = out_rate | pwr_mode | mode;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	78bb      	ldrb	r3, [r7, #2]
 800358a:	4313      	orrs	r3, r2
 800358c:	b2da      	uxtb	r2, r3
 800358e:	787b      	ldrb	r3, [r7, #1]
 8003590:	4313      	orrs	r3, r2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8003596:	687c      	ldr	r4, [r7, #4]
 8003598:	2301      	movs	r3, #1
 800359a:	9329      	str	r3, [sp, #164]	; 0xa4
 800359c:	f107 030e 	add.w	r3, r7, #14
 80035a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80035a2:	2309      	movs	r3, #9
 80035a4:	9327      	str	r3, [sp, #156]	; 0x9c
 80035a6:	4668      	mov	r0, sp
 80035a8:	f104 0310 	add.w	r3, r4, #16
 80035ac:	229c      	movs	r2, #156	; 0x9c
 80035ae:	4619      	mov	r1, r3
 80035b0:	f008 fa9e 	bl	800baf0 <memcpy>
 80035b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035b8:	f000 f98f 	bl	80038da <bno055_write_regs>
 80035bc:	4603      	mov	r3, r0
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <bno055_mag_conf+0x90>
        return err;
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	e01b      	b.n	8003602 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	791b      	ldrb	r3, [r3, #4]
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f81a 	bl	800360a <bno055_set_opmode>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <bno055_mag_conf+0xaa>
        return err;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	e00e      	b.n	8003602 <bno055_mag_conf+0xc8>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 80035e4:	2018      	movs	r0, #24
 80035e6:	f002 ff83 	bl	80064f0 <HAL_Delay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80035ea:	2100      	movs	r1, #0
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f9a1 	bl	8003934 <bno055_set_page>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <bno055_mag_conf+0xc6>
        return err;
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	e000      	b.n	8003602 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bd90      	pop	{r4, r7, pc}

0800360a <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 800360a:	b590      	push	{r4, r7, lr}
 800360c:	b0af      	sub	sp, #188	; 0xbc
 800360e:	af2a      	add	r7, sp, #168	; 0xa8
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 8003616:	687c      	ldr	r4, [r7, #4]
 8003618:	2301      	movs	r3, #1
 800361a:	9329      	str	r3, [sp, #164]	; 0xa4
 800361c:	1cfb      	adds	r3, r7, #3
 800361e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003620:	233d      	movs	r3, #61	; 0x3d
 8003622:	9327      	str	r3, [sp, #156]	; 0x9c
 8003624:	4668      	mov	r0, sp
 8003626:	f104 0310 	add.w	r3, r4, #16
 800362a:	229c      	movs	r2, #156	; 0x9c
 800362c:	4619      	mov	r1, r3
 800362e:	f008 fa5f 	bl	800baf0 <memcpy>
 8003632:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003636:	f000 f950 	bl	80038da <bno055_write_regs>
 800363a:	4603      	mov	r3, r0
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	e003      	b.n	8003650 <bno055_set_opmode+0x46>
    }
    HAL_Delay(BNO_ANY_TIME_DELAY + 5);
 8003648:	2018      	movs	r0, #24
 800364a:	f002 ff51 	bl	80064f0 <HAL_Delay>
    return BNO_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bd90      	pop	{r4, r7, pc}

08003658 <bno055_set_unit>:

error_bno bno055_set_unit(bno055_t* bno, const bno055_temp_unitsel_t t_unit,
                          const bno055_gyr_unitsel_t g_unit,
                          const bno055_acc_unitsel_t a_unit,
                          const bno055_eul_unitsel_t e_unit) {
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b0af      	sub	sp, #188	; 0xbc
 800365c:	af2a      	add	r7, sp, #168	; 0xa8
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	70fb      	strb	r3, [r7, #3]
 800366a:	460b      	mov	r3, r1
 800366c:	70bb      	strb	r3, [r7, #2]
 800366e:	4613      	mov	r3, r2
 8003670:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003672:	2100      	movs	r1, #0
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ffc8 	bl	800360a <bno055_set_opmode>
 800367a:	4603      	mov	r3, r0
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <bno055_set_unit+0x30>
        return err;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	e04b      	b.n	8003720 <bno055_set_unit+0xc8>
    }
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003688:	2100      	movs	r1, #0
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f952 	bl	8003934 <bno055_set_page>
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <bno055_set_unit+0x46>
        return err;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	e040      	b.n	8003720 <bno055_set_unit+0xc8>
    }
    uint8_t data = t_unit | g_unit | a_unit | e_unit;
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	78bb      	ldrb	r3, [r7, #2]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	787b      	ldrb	r3, [r7, #1]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_UNIT_SEL, &data, 1)) != BNO_OK) {
 80036b6:	687c      	ldr	r4, [r7, #4]
 80036b8:	2301      	movs	r3, #1
 80036ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80036bc:	f107 030e 	add.w	r3, r7, #14
 80036c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80036c2:	233b      	movs	r3, #59	; 0x3b
 80036c4:	9327      	str	r3, [sp, #156]	; 0x9c
 80036c6:	4668      	mov	r0, sp
 80036c8:	f104 0310 	add.w	r3, r4, #16
 80036cc:	229c      	movs	r2, #156	; 0x9c
 80036ce:	4619      	mov	r1, r3
 80036d0:	f008 fa0e 	bl	800baf0 <memcpy>
 80036d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80036d8:	f000 f8ff 	bl	80038da <bno055_write_regs>
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <bno055_set_unit+0x92>
        return err;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	e01a      	b.n	8003720 <bno055_set_unit+0xc8>
    }
    bno->_gyr_unit = g_unit;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	78ba      	ldrb	r2, [r7, #2]
 80036ee:	741a      	strb	r2, [r3, #16]
    bno->_acc_unit = a_unit;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	787a      	ldrb	r2, [r7, #1]
 80036f4:	739a      	strb	r2, [r3, #14]
    bno->_eul_unit = e_unit;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036fc:	745a      	strb	r2, [r3, #17]
    bno->_temp_unit = t_unit;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	73da      	strb	r2, [r3, #15]

    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	791b      	ldrb	r3, [r3, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff7d 	bl	800360a <bno055_set_opmode>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <bno055_set_unit+0xc6>
        return err;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	e000      	b.n	8003720 <bno055_set_unit+0xc8>
    }
    return BNO_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}

08003728 <bno055_set_pwr_mode>:

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b0af      	sub	sp, #188	; 0xbc
 800372c:	af2a      	add	r7, sp, #168	; 0xa8
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800373a:	2304      	movs	r3, #4
 800373c:	e04d      	b.n	80037da <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800373e:	2100      	movs	r1, #0
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff62 	bl	800360a <bno055_set_opmode>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <bno055_set_pwr_mode+0x2c>
        return err;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	e042      	b.n	80037da <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8003754:	2100      	movs	r1, #0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8ec 	bl	8003934 <bno055_set_page>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <bno055_set_pwr_mode+0x42>
        return err;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	e037      	b.n	80037da <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 800376a:	687c      	ldr	r4, [r7, #4]
 800376c:	2301      	movs	r3, #1
 800376e:	9329      	str	r3, [sp, #164]	; 0xa4
 8003770:	1cfb      	adds	r3, r7, #3
 8003772:	9328      	str	r3, [sp, #160]	; 0xa0
 8003774:	233e      	movs	r3, #62	; 0x3e
 8003776:	9327      	str	r3, [sp, #156]	; 0x9c
 8003778:	4668      	mov	r0, sp
 800377a:	f104 0310 	add.w	r3, r4, #16
 800377e:	229c      	movs	r2, #156	; 0x9c
 8003780:	4619      	mov	r1, r3
 8003782:	f008 f9b5 	bl	800baf0 <memcpy>
 8003786:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800378a:	f000 f8a6 	bl	80038da <bno055_write_regs>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	e01e      	b.n	80037da <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80037a2:	2100      	movs	r1, #0
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8c5 	bl	8003934 <bno055_set_page>
 80037aa:	4603      	mov	r3, r0
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <bno055_set_pwr_mode+0x90>
        return err;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	e010      	b.n	80037da <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	791b      	ldrb	r3, [r3, #4]
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff23 	bl	800360a <bno055_set_opmode>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <bno055_set_pwr_mode+0xaa>
        return err;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	e003      	b.n	80037da <bno055_set_pwr_mode+0xb2>
    }
    HAL_Delay(2);
 80037d2:	2002      	movs	r0, #2
 80037d4:	f002 fe8c 	bl	80064f0 <HAL_Delay>
    return BNO_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd90      	pop	{r4, r7, pc}

080037e2 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80037e2:	b590      	push	{r4, r7, lr}
 80037e4:	b0af      	sub	sp, #188	; 0xbc
 80037e6:	af2a      	add	r7, sp, #168	; 0xa8
 80037e8:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80037ea:	2320      	movs	r3, #32
 80037ec:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80037ee:	687c      	ldr	r4, [r7, #4]
 80037f0:	2301      	movs	r3, #1
 80037f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80037f4:	f107 030f 	add.w	r3, r7, #15
 80037f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80037fa:	233f      	movs	r3, #63	; 0x3f
 80037fc:	9327      	str	r3, [sp, #156]	; 0x9c
 80037fe:	4668      	mov	r0, sp
 8003800:	f104 0310 	add.w	r3, r4, #16
 8003804:	229c      	movs	r2, #156	; 0x9c
 8003806:	4619      	mov	r1, r3
 8003808:	f008 f972 	bl	800baf0 <memcpy>
 800380c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003810:	f000 f863 	bl	80038da <bno055_write_regs>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <bno055_reset+0x3e>
    }
    return BNO_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bd90      	pop	{r4, r7, pc}

08003828 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b0af      	sub	sp, #188	; 0xbc
 800382c:	af2a      	add	r7, sp, #168	; 0xa8
 800382e:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8003834:	687c      	ldr	r4, [r7, #4]
 8003836:	2301      	movs	r3, #1
 8003838:	9329      	str	r3, [sp, #164]	; 0xa4
 800383a:	f107 030f 	add.w	r3, r7, #15
 800383e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003840:	233f      	movs	r3, #63	; 0x3f
 8003842:	9327      	str	r3, [sp, #156]	; 0x9c
 8003844:	4668      	mov	r0, sp
 8003846:	f104 0310 	add.w	r3, r4, #16
 800384a:	229c      	movs	r2, #156	; 0x9c
 800384c:	4619      	mov	r1, r3
 800384e:	f008 f94f 	bl	800baf0 <memcpy>
 8003852:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003856:	f000 f840 	bl	80038da <bno055_write_regs>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <bno055_on+0x3e>
    }
    return BNO_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}

0800386e <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 800386e:	b084      	sub	sp, #16
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af02      	add	r7, sp, #8
 8003876:	f107 0c10 	add.w	ip, r7, #16
 800387a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 800387e:	6938      	ldr	r0, [r7, #16]
 8003880:	7dbb      	ldrb	r3, [r7, #22]
 8003882:	b299      	uxth	r1, r3
 8003884:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2301      	movs	r3, #1
 8003890:	f003 fed2 	bl	8007638 <HAL_I2C_Master_Transmit>
 8003894:	4603      	mov	r3, r0
 8003896:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 800389e:	2301      	movs	r3, #1
 80038a0:	e014      	b.n	80038cc <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 80038a2:	6938      	ldr	r0, [r7, #16]
 80038a4:	7dbb      	ldrb	r3, [r7, #22]
 80038a6:	b299      	uxth	r1, r3
 80038a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f04f 32ff 	mov.w	r2, #4294967295
 80038b2:	9200      	str	r2, [sp, #0]
 80038b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038b8:	f003 ffbc 	bl	8007834 <HAL_I2C_Master_Receive>
 80038bc:	4603      	mov	r3, r0
 80038be:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038d6:	b004      	add	sp, #16
 80038d8:	4770      	bx	lr

080038da <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80038da:	b084      	sub	sp, #16
 80038dc:	b5b0      	push	{r4, r5, r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af04      	add	r7, sp, #16
 80038e2:	f107 0418 	add.w	r4, r7, #24
 80038e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80038ea:	69b8      	ldr	r0, [r7, #24]
 80038ec:	7fbb      	ldrb	r3, [r7, #30]
 80038ee:	b299      	uxth	r1, r3
 80038f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038fa:	b29c      	uxth	r4, r3
 80038fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003900:	b29b      	uxth	r3, r3
 8003902:	f04f 35ff 	mov.w	r5, #4294967295
 8003906:	9502      	str	r5, [sp, #8]
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4623      	mov	r3, r4
 8003912:	f004 f9fb 	bl	8007d0c <HAL_I2C_Mem_Write>
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <bno055_write_regs+0x4a>
        return BNO_ERR_I2C;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <bno055_write_regs+0x4c>
    }
    return BNO_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003930:	b004      	add	sp, #16
 8003932:	4770      	bx	lr

08003934 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b0af      	sub	sp, #188	; 0xbc
 8003938:	af2a      	add	r7, sp, #168	; 0xa8
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7b5a      	ldrb	r2, [r3, #13]
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <bno055_set_page+0x1a>
        return BNO_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e024      	b.n	8003998 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d901      	bls.n	8003958 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8003954:	2302      	movs	r3, #2
 8003956:	e01f      	b.n	8003998 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8003958:	687c      	ldr	r4, [r7, #4]
 800395a:	2301      	movs	r3, #1
 800395c:	9329      	str	r3, [sp, #164]	; 0xa4
 800395e:	1cfb      	adds	r3, r7, #3
 8003960:	9328      	str	r3, [sp, #160]	; 0xa0
 8003962:	2307      	movs	r3, #7
 8003964:	9327      	str	r3, [sp, #156]	; 0x9c
 8003966:	4668      	mov	r0, sp
 8003968:	f104 0310 	add.w	r3, r4, #16
 800396c:	229c      	movs	r2, #156	; 0x9c
 800396e:	4619      	mov	r1, r3
 8003970:	f008 f8be 	bl	800baf0 <memcpy>
 8003974:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003978:	f7ff ffaf 	bl	80038da <bno055_write_regs>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <bno055_set_page+0x56>
        return err;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	e006      	b.n	8003998 <bno055_set_page+0x64>
    }
    imu->_page = page;
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	735a      	strb	r2, [r3, #13]
    HAL_Delay(2);
 8003990:	2002      	movs	r0, #2
 8003992:	f002 fdad 	bl	80064f0 <HAL_Delay>
    return BNO_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}

080039a0 <bno055_err_str>:

char* bno055_err_str(const error_bno err) {
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
    switch (err) {
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d81f      	bhi.n	80039f0 <bno055_err_str+0x50>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <bno055_err_str+0x18>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039d5 	.word	0x080039d5
 80039bc:	080039d9 	.word	0x080039d9
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	080039e1 	.word	0x080039e1
 80039cc:	080039e5 	.word	0x080039e5
 80039d0:	080039ed 	.word	0x080039ed
        case BNO_OK:
            return "[BNO] Ok!";
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <bno055_err_str+0x5c>)
 80039d6:	e00c      	b.n	80039f2 <bno055_err_str+0x52>
        case BNO_ERR_I2C:
            return "[BNO] I2C error!";
 80039d8:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <bno055_err_str+0x60>)
 80039da:	e00a      	b.n	80039f2 <bno055_err_str+0x52>
        case BNO_ERR_PAGE_TOO_HIGH:
            return "[BNO] Page setting to high.";
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <bno055_err_str+0x64>)
 80039de:	e008      	b.n	80039f2 <bno055_err_str+0x52>
        case BNO_ERR_NULL_PTR:
            return "[BNO] BNO struct is nullpointer.";
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <bno055_err_str+0x68>)
 80039e2:	e006      	b.n	80039f2 <bno055_err_str+0x52>
        case BNO_ERR_AXIS_REMAP:
            return "[BNO] Axis remap error!";
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <bno055_err_str+0x6c>)
 80039e6:	e004      	b.n	80039f2 <bno055_err_str+0x52>
        case BNO_ERR_SETTING_PAGE:
            return "[BNO] TODO";
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <bno055_err_str+0x70>)
 80039ea:	e002      	b.n	80039f2 <bno055_err_str+0x52>
        case BNO_ERR_WRONG_CHIP_ID:
            return "[BNO] Wrong Chip ID.";
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <bno055_err_str+0x74>)
 80039ee:	e000      	b.n	80039f2 <bno055_err_str+0x52>
    }
    return "[BNO] Ok!";
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <bno055_err_str+0x5c>)
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	0800f108 	.word	0x0800f108
 8003a00:	0800f114 	.word	0x0800f114
 8003a04:	0800f128 	.word	0x0800f128
 8003a08:	0800f144 	.word	0x0800f144
 8003a0c:	0800f168 	.word	0x0800f168
 8003a10:	0800f180 	.word	0x0800f180
 8003a14:	0800f18c 	.word	0x0800f18c

08003a18 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_ADC2_Init(void);
static void MX_ADC3_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4804      	ldr	r0, [pc, #16]	; (8003a40 <_write+0x28>)
 8003a30:	f006 fd7b 	bl	800a52a <HAL_UART_Transmit>
    return len;
 8003a34:	687b      	ldr	r3, [r7, #4]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000041c 	.word	0x2000041c

08003a44 <CurrentYaw>:

bno055_euler_t CurrentYaw(){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	 bno055_euler(&bno, &euler);
 8003a4c:	4906      	ldr	r1, [pc, #24]	; (8003a68 <CurrentYaw+0x24>)
 8003a4e:	4807      	ldr	r0, [pc, #28]	; (8003a6c <CurrentYaw+0x28>)
 8003a50:	f7ff fae8 	bl	8003024 <bno055_euler>
	 return euler;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <CurrentYaw+0x24>)
 8003a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20004428 	.word	0x20004428
 8003a6c:	20004378 	.word	0x20004378

08003a70 <distanceLeft>:
//				return;
//			}
//		}
//	}
}
double distanceLeft(){
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	double vol = 0;
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8003a86:	2300      	movs	r3, #0
 8003a88:	757b      	strb	r3, [r7, #21]
 8003a8a:	e016      	b.n	8003aba <distanceLeft+0x4a>
  	  	HAL_ADC_Start(&hadc3);
 8003a8c:	4830      	ldr	r0, [pc, #192]	; (8003b50 <distanceLeft+0xe0>)
 8003a8e:	f002 fe3d 	bl	800670c <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc3, 1000);
 8003a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a96:	482e      	ldr	r0, [pc, #184]	; (8003b50 <distanceLeft+0xe0>)
 8003a98:	f002 ff12 	bl	80068c0 <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc3);
 8003a9c:	482c      	ldr	r0, [pc, #176]	; (8003b50 <distanceLeft+0xe0>)
 8003a9e:	f003 f815 	bl	8006acc <HAL_ADC_GetValue>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
  	  	HAL_ADC_Stop(&hadc3);
 8003aa6:	482a      	ldr	r0, [pc, #168]	; (8003b50 <distanceLeft+0xe0>)
 8003aa8:	f002 fede 	bl	8006868 <HAL_ADC_Stop>
  	    total = total + ADC_VAL;
 8003aac:	8afa      	ldrh	r2, [r7, #22]
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8003ab4:	7d7b      	ldrb	r3, [r7, #21]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	757b      	strb	r3, [r7, #21]
 8003aba:	7d7b      	ldrb	r3, [r7, #21]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d9e5      	bls.n	8003a8c <distanceLeft+0x1c>
  	}

  	vol = (total/5*3.3)/4095;
 8003ac0:	8afb      	ldrh	r3, [r7, #22]
 8003ac2:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <distanceLeft+0xe4>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fd05 	bl	80004dc <__aeabi_i2d>
 8003ad2:	a319      	add	r3, pc, #100	; (adr r3, 8003b38 <distanceLeft+0xc8>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fd6a 	bl	80005b0 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	a316      	add	r3, pc, #88	; (adr r3, 8003b40 <distanceLeft+0xd0>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	f7fc fe8b 	bl	8000804 <__aeabi_ddiv>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1) - 0.7;
 8003af6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003afa:	f04f 0000 	mov.w	r0, #0
 8003afe:	4916      	ldr	r1, [pc, #88]	; (8003b58 <distanceLeft+0xe8>)
 8003b00:	f7fc fe80 	bl	8000804 <__aeabi_ddiv>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <distanceLeft+0xec>)
 8003b12:	f7fc fd4d 	bl	80005b0 <__aeabi_dmul>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	a30a      	add	r3, pc, #40	; (adr r3, 8003b48 <distanceLeft+0xd8>)
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f7fc fb8c 	bl	8000240 <__aeabi_dsub>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
}
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	66666666 	.word	0x66666666
 8003b3c:	400a6666 	.word	0x400a6666
 8003b40:	00000000 	.word	0x00000000
 8003b44:	40affe00 	.word	0x40affe00
 8003b48:	66666666 	.word	0x66666666
 8003b4c:	3fe66666 	.word	0x3fe66666
 8003b50:	20000278 	.word	0x20000278
 8003b54:	cccccccd 	.word	0xcccccccd
 8003b58:	3ff00000 	.word	0x3ff00000
 8003b5c:	402a0000 	.word	0x402a0000

08003b60 <distanceStraight>:
double distanceStraight(){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	double vol = 0;
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8003b76:	2300      	movs	r3, #0
 8003b78:	757b      	strb	r3, [r7, #21]
 8003b7a:	e016      	b.n	8003baa <distanceStraight+0x4a>
  	  	HAL_ADC_Start(&hadc2);
 8003b7c:	4830      	ldr	r0, [pc, #192]	; (8003c40 <distanceStraight+0xe0>)
 8003b7e:	f002 fdc5 	bl	800670c <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc2, 1000);
 8003b82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b86:	482e      	ldr	r0, [pc, #184]	; (8003c40 <distanceStraight+0xe0>)
 8003b88:	f002 fe9a 	bl	80068c0 <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 8003b8c:	482c      	ldr	r0, [pc, #176]	; (8003c40 <distanceStraight+0xe0>)
 8003b8e:	f002 ff9d 	bl	8006acc <HAL_ADC_GetValue>
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
  	  	HAL_ADC_Stop(&hadc2);
 8003b96:	482a      	ldr	r0, [pc, #168]	; (8003c40 <distanceStraight+0xe0>)
 8003b98:	f002 fe66 	bl	8006868 <HAL_ADC_Stop>
  	    total = total + ADC_VAL;
 8003b9c:	8afa      	ldrh	r2, [r7, #22]
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8003ba4:	7d7b      	ldrb	r3, [r7, #21]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	757b      	strb	r3, [r7, #21]
 8003baa:	7d7b      	ldrb	r3, [r7, #21]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d9e5      	bls.n	8003b7c <distanceStraight+0x1c>
  	}

  	vol = (total/5*3.3)/4095;
 8003bb0:	8afb      	ldrh	r3, [r7, #22]
 8003bb2:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <distanceStraight+0xe4>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	089b      	lsrs	r3, r3, #2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fc8d 	bl	80004dc <__aeabi_i2d>
 8003bc2:	a319      	add	r3, pc, #100	; (adr r3, 8003c28 <distanceStraight+0xc8>)
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f7fc fcf2 	bl	80005b0 <__aeabi_dmul>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	a316      	add	r3, pc, #88	; (adr r3, 8003c30 <distanceStraight+0xd0>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fe13 	bl	8000804 <__aeabi_ddiv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1)- 0.7;
 8003be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	4916      	ldr	r1, [pc, #88]	; (8003c48 <distanceStraight+0xe8>)
 8003bf0:	f7fc fe08 	bl	8000804 <__aeabi_ddiv>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <distanceStraight+0xec>)
 8003c02:	f7fc fcd5 	bl	80005b0 <__aeabi_dmul>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	a30a      	add	r3, pc, #40	; (adr r3, 8003c38 <distanceStraight+0xd8>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fc fb14 	bl	8000240 <__aeabi_dsub>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
}
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	66666666 	.word	0x66666666
 8003c2c:	400a6666 	.word	0x400a6666
 8003c30:	00000000 	.word	0x00000000
 8003c34:	40affe00 	.word	0x40affe00
 8003c38:	66666666 	.word	0x66666666
 8003c3c:	3fe66666 	.word	0x3fe66666
 8003c40:	20000248 	.word	0x20000248
 8003c44:	cccccccd 	.word	0xcccccccd
 8003c48:	3ff00000 	.word	0x3ff00000
 8003c4c:	402a0000 	.word	0x402a0000

08003c50 <distanceRight>:
double distanceRight(){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0

	uint16_t ADC_VAL;
	double vol = 0;
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8003c66:	2300      	movs	r3, #0
 8003c68:	757b      	strb	r3, [r7, #21]
 8003c6a:	e016      	b.n	8003c9a <distanceRight+0x4a>
  		HAL_ADC_Start(&hadc1);
 8003c6c:	4830      	ldr	r0, [pc, #192]	; (8003d30 <distanceRight+0xe0>)
 8003c6e:	f002 fd4d 	bl	800670c <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8003c72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c76:	482e      	ldr	r0, [pc, #184]	; (8003d30 <distanceRight+0xe0>)
 8003c78:	f002 fe22 	bl	80068c0 <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8003c7c:	482c      	ldr	r0, [pc, #176]	; (8003d30 <distanceRight+0xe0>)
 8003c7e:	f002 ff25 	bl	8006acc <HAL_ADC_GetValue>
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  	    total = total + ADC_VAL;
 8003c86:	8afa      	ldrh	r2, [r7, #22]
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	82fb      	strh	r3, [r7, #22]
  	    HAL_ADC_Stop(&hadc1);
 8003c8e:	4828      	ldr	r0, [pc, #160]	; (8003d30 <distanceRight+0xe0>)
 8003c90:	f002 fdea 	bl	8006868 <HAL_ADC_Stop>
  	for (uint8_t i = 0; i < 5; i++){
 8003c94:	7d7b      	ldrb	r3, [r7, #21]
 8003c96:	3301      	adds	r3, #1
 8003c98:	757b      	strb	r3, [r7, #21]
 8003c9a:	7d7b      	ldrb	r3, [r7, #21]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d9e5      	bls.n	8003c6c <distanceRight+0x1c>
  	}
  	vol = (total/5*3.3)/4095;
 8003ca0:	8afb      	ldrh	r3, [r7, #22]
 8003ca2:	4a24      	ldr	r2, [pc, #144]	; (8003d34 <distanceRight+0xe4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fc fc15 	bl	80004dc <__aeabi_i2d>
 8003cb2:	a319      	add	r3, pc, #100	; (adr r3, 8003d18 <distanceRight+0xc8>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fc7a 	bl	80005b0 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	a316      	add	r3, pc, #88	; (adr r3, 8003d20 <distanceRight+0xd0>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f7fc fd9b 	bl	8000804 <__aeabi_ddiv>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1) - 0.7;
 8003cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cda:	f04f 0000 	mov.w	r0, #0
 8003cde:	4916      	ldr	r1, [pc, #88]	; (8003d38 <distanceRight+0xe8>)
 8003ce0:	f7fc fd90 	bl	8000804 <__aeabi_ddiv>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <distanceRight+0xec>)
 8003cf2:	f7fc fc5d 	bl	80005b0 <__aeabi_dmul>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	a30a      	add	r3, pc, #40	; (adr r3, 8003d28 <distanceRight+0xd8>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fa9c 	bl	8000240 <__aeabi_dsub>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
}
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	66666666 	.word	0x66666666
 8003d1c:	400a6666 	.word	0x400a6666
 8003d20:	00000000 	.word	0x00000000
 8003d24:	40affe00 	.word	0x40affe00
 8003d28:	66666666 	.word	0x66666666
 8003d2c:	3fe66666 	.word	0x3fe66666
 8003d30:	20000218 	.word	0x20000218
 8003d34:	cccccccd 	.word	0xcccccccd
 8003d38:	3ff00000 	.word	0x3ff00000
 8003d3c:	402a0000 	.word	0x402a0000

08003d40 <isValid>:
//	fyaw = fyaw/1000;
//	printf("froll: %.2f fpitch: %.2f fyaw: %.2f\r\n",froll, fpitch, fyaw);
//	printf("Prove filter done!\r\n");
//}

bool isValid(int x, int y) {
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
    return (x >= 0 && x < rows && y >= 0 && y < cols);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	db0c      	blt.n	8003d6a <isValid+0x2a>
 8003d50:	2210      	movs	r2, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	da08      	bge.n	8003d6a <isValid+0x2a>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db05      	blt.n	8003d6a <isValid+0x2a>
 8003d5e:	2210      	movs	r2, #16
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4293      	cmp	r3, r2
 8003d64:	da01      	bge.n	8003d6a <isValid+0x2a>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <isValid+0x2c>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	b2db      	uxtb	r3, r3
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <init_arr>:
void init_arr(int arr[ROW][COL], int row, int col) {
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < row; i++) {
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e015      	b.n	8003dba <init_arr+0x3e>
        for (int j = 0; j < col; j++) {
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e00b      	b.n	8003dac <init_arr+0x30>
            arr[i][j] = -1;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	019b      	lsls	r3, r3, #6
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < col; j++) {
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3301      	adds	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	dbef      	blt.n	8003d94 <init_arr+0x18>
    for (int i = 0; i < row; i++) {
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	3301      	adds	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	dbe5      	blt.n	8003d8e <init_arr+0x12>
        }
    }
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
	...

08003dd0 <check_and_fill>:
void check_and_fill(int arr[ROW][COL],int row,int col,int value)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
    if(row<0 ||col<0||row>=16||col>=16||arr[row][col]!=-1)return;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	db2a      	blt.n	8003e3a <check_and_fill+0x6a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db27      	blt.n	8003e3a <check_and_fill+0x6a>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	dc24      	bgt.n	8003e3a <check_and_fill+0x6a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	dc21      	bgt.n	8003e3a <check_and_fill+0x6a>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d117      	bne.n	8003e3a <check_and_fill+0x6a>
    value+=1;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	603b      	str	r3, [r7, #0]
    coord point={row,col,value};
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	61fb      	str	r3, [r7, #28]
    pushQueue(&myQueue,point);
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e22:	4808      	ldr	r0, [pc, #32]	; (8003e44 <check_and_fill+0x74>)
 8003e24:	f001 fdc8 	bl	80059b8 <pushQueue>
    arr[row][col]=value;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6839      	ldr	r1, [r7, #0]
 8003e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e38:	e000      	b.n	8003e3c <check_and_fill+0x6c>
    if(row<0 ||col<0||row>=16||col>=16||arr[row][col]!=-1)return;
 8003e3a:	bf00      	nop
}
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20001490 	.word	0x20001490

08003e48 <init_flood>:

void init_flood(int arr[ROW][COL],int row,int col)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b094      	sub	sp, #80	; 0x50
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
    int count_=0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
    coord point={row,col,count_};
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
    pushQueue(&myQueue,point);
 8003e64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6a:	4841      	ldr	r0, [pc, #260]	; (8003f70 <init_flood+0x128>)
 8003e6c:	f001 fda4 	bl	80059b8 <pushQueue>
    arr[row][col]=0;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	019b      	lsls	r3, r3, #6
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point2={row+1,col,count_};
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3301      	adds	r3, #1
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    pushQueue(&myQueue,point2);
 8003e8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e94:	4836      	ldr	r0, [pc, #216]	; (8003f70 <init_flood+0x128>)
 8003e96:	f001 fd8f 	bl	80059b8 <pushQueue>
    arr[row+1][col]=0;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	019b      	lsls	r3, r3, #6
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point3={row,col+1,count_};
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb8:	633b      	str	r3, [r7, #48]	; 0x30
    pushQueue(&myQueue,point3);
 8003eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec0:	482b      	ldr	r0, [pc, #172]	; (8003f70 <init_flood+0x128>)
 8003ec2:	f001 fd79 	bl	80059b8 <pushQueue>
    arr[row][col+1]=0;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	3201      	adds	r2, #1
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point4={row+1,col+1,count_};
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	3301      	adds	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	623b      	str	r3, [r7, #32]
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
    pushQueue(&myQueue,point4);
 8003ee8:	f107 031c 	add.w	r3, r7, #28
 8003eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eee:	4820      	ldr	r0, [pc, #128]	; (8003f70 <init_flood+0x128>)
 8003ef0:	f001 fd62 	bl	80059b8 <pushQueue>
    arr[row+1][col+1]=0;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	019b      	lsls	r3, r3, #6
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	3201      	adds	r2, #1
 8003f02:	2100      	movs	r1, #0
 8003f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (!isEmptyQueue(&myQueue)) {
 8003f08:	e024      	b.n	8003f54 <init_flood+0x10c>
        coord frontCoord = peekQueue(&myQueue);
 8003f0a:	f107 0310 	add.w	r3, r7, #16
 8003f0e:	4918      	ldr	r1, [pc, #96]	; (8003f70 <init_flood+0x128>)
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 fd99 	bl	8005a48 <peekQueue>
        popQueue(&myQueue);
 8003f16:	4816      	ldr	r0, [pc, #88]	; (8003f70 <init_flood+0x128>)
 8003f18:	f001 fd7c 	bl	8005a14 <popQueue>
        check_and_fill(arr,frontCoord.row+1,frontCoord.col,frontCoord.value);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1c59      	adds	r1, r3, #1
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ff53 	bl	8003dd0 <check_and_fill>
        check_and_fill(arr,frontCoord.row-1,frontCoord.col,frontCoord.value);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1e59      	subs	r1, r3, #1
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff4c 	bl	8003dd0 <check_and_fill>
        check_and_fill(arr,frontCoord.row,frontCoord.col+1,frontCoord.value);
 8003f38:	6939      	ldr	r1, [r7, #16]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ff45 	bl	8003dd0 <check_and_fill>
        check_and_fill(arr,frontCoord.row,frontCoord.col-1,frontCoord.value);
 8003f46:	6939      	ldr	r1, [r7, #16]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	1e5a      	subs	r2, r3, #1
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff ff3e 	bl	8003dd0 <check_and_fill>
    while (!isEmptyQueue(&myQueue)) {
 8003f54:	4806      	ldr	r0, [pc, #24]	; (8003f70 <init_flood+0x128>)
 8003f56:	f001 fd02 	bl	800595e <isEmptyQueue>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f083 0301 	eor.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1d1      	bne.n	8003f0a <init_flood+0xc2>
    }
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	3750      	adds	r7, #80	; 0x50
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20001490 	.word	0x20001490

08003f74 <init_maze>:

void init_maze()
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
    for(int i =0;i<16;i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e03d      	b.n	8003ffc <init_maze+0x88>
    {
        for(int j=0;j<16;j++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	e034      	b.n	8003ff0 <init_maze+0x7c>
        {
            maze.cells[i][j].visited=0;
 8003f86:	4922      	ldr	r1, [pc, #136]	; (8004010 <init_maze+0x9c>)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	011a      	lsls	r2, r3, #4
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4413      	add	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	440b      	add	r3, r1
 8003f94:	3304      	adds	r3, #4
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]
            maze.cells[i][j].angle_update=90;
 8003f9a:	491d      	ldr	r1, [pc, #116]	; (8004010 <init_maze+0x9c>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	011a      	lsls	r2, r3, #4
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3308      	adds	r3, #8
 8003faa:	225a      	movs	r2, #90	; 0x5a
 8003fac:	601a      	str	r2, [r3, #0]
            maze.cells[i][j].dead=0;
 8003fae:	4918      	ldr	r1, [pc, #96]	; (8004010 <init_maze+0x9c>)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	011a      	lsls	r2, r3, #4
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	440b      	add	r3, r1
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
            for(int k = 0 ;k<4;k++)maze.cells[i][j].walls[k]=0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	e00d      	b.n	8003fe4 <init_maze+0x70>
 8003fc8:	4911      	ldr	r1, [pc, #68]	; (8004010 <init_maze+0x9c>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	011a      	lsls	r2, r3, #4
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	18ca      	adds	r2, r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	ddee      	ble.n	8003fc8 <init_maze+0x54>
        for(int j=0;j<16;j++)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	ddc7      	ble.n	8003f86 <init_maze+0x12>
    for(int i =0;i<16;i++)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	ddbe      	ble.n	8003f80 <init_maze+0xc>
        }
    }
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000490 	.word	0x20000490

08004014 <intToStr>:

void intToStr(int num, char *str) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
    sprintf(str, "%d", num);
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4903      	ldr	r1, [pc, #12]	; (8004030 <intToStr+0x1c>)
 8004022:	6838      	ldr	r0, [r7, #0]
 8004024:	f007 fbe0 	bl	800b7e8 <siprintf>
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	0800f1a4 	.word	0x0800f1a4

08004034 <cell_direction_adjust>:
cell_info cell_direction_adjust(cell_info cell)
{
 8004034:	b084      	sub	sp, #16
 8004036:	b490      	push	{r4, r7}
 8004038:	b088      	sub	sp, #32
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    cell_info cell_new;
    cell_new=cell;
 8004046:	f107 0408 	add.w	r4, r7, #8
 800404a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800404e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for(int i=0;i<4;i++)
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e051      	b.n	80040fe <cell_direction_adjust+0xca>
    {
        int ind = i;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	61bb      	str	r3, [r7, #24]

        switch(cell.angle_update)
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004064:	d00a      	beq.n	800407c <cell_direction_adjust+0x48>
 8004066:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800406a:	dc3a      	bgt.n	80040e2 <cell_direction_adjust+0xae>
 800406c:	2bb4      	cmp	r3, #180	; 0xb4
 800406e:	d025      	beq.n	80040bc <cell_direction_adjust+0x88>
 8004070:	2bb4      	cmp	r3, #180	; 0xb4
 8004072:	dc36      	bgt.n	80040e2 <cell_direction_adjust+0xae>
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <cell_direction_adjust+0x62>
 8004078:	2b5a      	cmp	r3, #90	; 0x5a
 800407a:	e032      	b.n	80040e2 <cell_direction_adjust+0xae>
        {
            case 90:
                break;
            case 270:
                if(i%2==0)ind+=1;
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d103      	bne.n	800408e <cell_direction_adjust+0x5a>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	3301      	adds	r3, #1
 800408a:	61bb      	str	r3, [r7, #24]
                else ind-=1;
                break;
 800408c:	e029      	b.n	80040e2 <cell_direction_adjust+0xae>
                else ind-=1;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	3b01      	subs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
                break;
 8004094:	e025      	b.n	80040e2 <cell_direction_adjust+0xae>
            case 0:
                if(i==0 || i ==1)ind+=2;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <cell_direction_adjust+0x6e>
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d103      	bne.n	80040aa <cell_direction_adjust+0x76>
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3302      	adds	r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]
                else if(i==2)ind=1;
                else ind=0;
                break;
 80040a8:	e01b      	b.n	80040e2 <cell_direction_adjust+0xae>
                else if(i==2)ind=1;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d102      	bne.n	80040b6 <cell_direction_adjust+0x82>
 80040b0:	2301      	movs	r3, #1
 80040b2:	61bb      	str	r3, [r7, #24]
                break;
 80040b4:	e015      	b.n	80040e2 <cell_direction_adjust+0xae>
                else ind=0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
                break;
 80040ba:	e012      	b.n	80040e2 <cell_direction_adjust+0xae>
            case 180:
                if(i==2 || i ==3)ind-=2;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d002      	beq.n	80040c8 <cell_direction_adjust+0x94>
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d103      	bne.n	80040d0 <cell_direction_adjust+0x9c>
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	3b02      	subs	r3, #2
 80040cc:	61bb      	str	r3, [r7, #24]
                else if(i==0)ind=3;
                else ind=2;
                break;
 80040ce:	e007      	b.n	80040e0 <cell_direction_adjust+0xac>
                else if(i==0)ind=3;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <cell_direction_adjust+0xa8>
 80040d6:	2303      	movs	r3, #3
 80040d8:	61bb      	str	r3, [r7, #24]
                break;
 80040da:	e001      	b.n	80040e0 <cell_direction_adjust+0xac>
                else ind=2;
 80040dc:	2302      	movs	r3, #2
 80040de:	61bb      	str	r3, [r7, #24]
                break;
 80040e0:	bf00      	nop
        }
        cell_new.walls[i]=cell.walls[ind];
 80040e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	4413      	add	r3, r2
 80040ea:	7819      	ldrb	r1, [r3, #0]
 80040ec:	f107 0208 	add.w	r2, r7, #8
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	4413      	add	r3, r2
 80040f4:	460a      	mov	r2, r1
 80040f6:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	3301      	adds	r3, #1
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b03      	cmp	r3, #3
 8004102:	ddaa      	ble.n	800405a <cell_direction_adjust+0x26>
    }
    return cell_new;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	461c      	mov	r4, r3
 8004108:	f107 0308 	add.w	r3, r7, #8
 800410c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800410e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bc90      	pop	{r4, r7}
 800411a:	b004      	add	sp, #16
 800411c:	4770      	bx	lr
	...

08004120 <update_walls>:

cell_info update_walls(int angle_now,int row,int col)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b093      	sub	sp, #76	; 0x4c
 8004124:	af02      	add	r7, sp, #8
 8004126:	61f8      	str	r0, [r7, #28]
 8004128:	61b9      	str	r1, [r7, #24]
 800412a:	617a      	str	r2, [r7, #20]
 800412c:	613b      	str	r3, [r7, #16]
    cell_info new_cell;
    new_cell.angle_update=angle_now;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
    distance_straight = distanceStraight();
 8004132:	f7ff fd15 	bl	8003b60 <distanceStraight>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	49a2      	ldr	r1, [pc, #648]	; (80043c4 <update_walls+0x2a4>)
 800413c:	e9c1 2300 	strd	r2, r3, [r1]
    distance_left = distanceLeft();
 8004140:	f7ff fc96 	bl	8003a70 <distanceLeft>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	499f      	ldr	r1, [pc, #636]	; (80043c8 <update_walls+0x2a8>)
 800414a:	e9c1 2300 	strd	r2, r3, [r1]
    distance_right = distanceRight();
 800414e:	f7ff fd7f 	bl	8003c50 <distanceRight>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	499d      	ldr	r1, [pc, #628]	; (80043cc <update_walls+0x2ac>)
 8004158:	e9c1 2300 	strd	r2, r3, [r1]
    bool boolfront = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool boolleft = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    bool boolright = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0){
 800416e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004172:	4897      	ldr	r0, [pc, #604]	; (80043d0 <update_walls+0x2b0>)
 8004174:	f003 f8ec 	bl	8007350 <HAL_GPIO_ReadPin>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <update_walls+0x66>
		boolleft = 1;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004184:	e00d      	b.n	80041a2 <update_walls+0x82>
	}
    else if(distance_left < 12){
 8004186:	4b90      	ldr	r3, [pc, #576]	; (80043c8 <update_walls+0x2a8>)
 8004188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	4b90      	ldr	r3, [pc, #576]	; (80043d4 <update_walls+0x2b4>)
 8004192:	f7fc fc7f 	bl	8000a94 <__aeabi_dcmplt>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <update_walls+0x82>
		boolleft = 1;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  }
	if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0){
 80041a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041a6:	488a      	ldr	r0, [pc, #552]	; (80043d0 <update_walls+0x2b0>)
 80041a8:	f003 f8d2 	bl	8007350 <HAL_GPIO_ReadPin>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <update_walls+0x9a>
		boolright = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80041b8:	e00d      	b.n	80041d6 <update_walls+0xb6>
	}
	else if(distance_right < 12){
 80041ba:	4b84      	ldr	r3, [pc, #528]	; (80043cc <update_walls+0x2ac>)
 80041bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b83      	ldr	r3, [pc, #524]	; (80043d4 <update_walls+0x2b4>)
 80041c6:	f7fc fc65 	bl	8000a94 <__aeabi_dcmplt>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <update_walls+0xb6>
		boolright = 1;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  }
	if(distance_straight < 12){
 80041d6:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <update_walls+0x2a4>)
 80041d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <update_walls+0x2b4>)
 80041e2:	f7fc fc57 	bl	8000a94 <__aeabi_dcmplt>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <update_walls+0xd2>
		boolfront = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	if(!boolfront){
 80041f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041f6:	f083 0301 	eor.w	r3, r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <update_walls+0xec>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8004200:	2200      	movs	r2, #0
 8004202:	2108      	movs	r1, #8
 8004204:	4872      	ldr	r0, [pc, #456]	; (80043d0 <update_walls+0x2b0>)
 8004206:	f003 f8ba 	bl	800737e <HAL_GPIO_WritePin>
 800420a:	e004      	b.n	8004216 <update_walls+0xf6>
	}
	else {
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800420c:	2201      	movs	r2, #1
 800420e:	2108      	movs	r1, #8
 8004210:	486f      	ldr	r0, [pc, #444]	; (80043d0 <update_walls+0x2b0>)
 8004212:	f003 f8b4 	bl	800737e <HAL_GPIO_WritePin>
	}
	if(!boolleft){
 8004216:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800421a:	f083 0301 	eor.w	r3, r3, #1
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d006      	beq.n	8004232 <update_walls+0x112>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 8004224:	2200      	movs	r2, #0
 8004226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800422a:	486b      	ldr	r0, [pc, #428]	; (80043d8 <update_walls+0x2b8>)
 800422c:	f003 f8a7 	bl	800737e <HAL_GPIO_WritePin>
 8004230:	e005      	b.n	800423e <update_walls+0x11e>
	}
	else{
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, SET);
 8004232:	2201      	movs	r2, #1
 8004234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004238:	4867      	ldr	r0, [pc, #412]	; (80043d8 <update_walls+0x2b8>)
 800423a:	f003 f8a0 	bl	800737e <HAL_GPIO_WritePin>
	}
	if(!boolright){
 800423e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004242:	f083 0301 	eor.w	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <update_walls+0x138>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 800424c:	2200      	movs	r2, #0
 800424e:	2120      	movs	r1, #32
 8004250:	4861      	ldr	r0, [pc, #388]	; (80043d8 <update_walls+0x2b8>)
 8004252:	f003 f894 	bl	800737e <HAL_GPIO_WritePin>
 8004256:	e004      	b.n	8004262 <update_walls+0x142>
	}
	else{
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
 8004258:	2201      	movs	r2, #1
 800425a:	2120      	movs	r1, #32
 800425c:	485e      	ldr	r0, [pc, #376]	; (80043d8 <update_walls+0x2b8>)
 800425e:	f003 f88e 	bl	800737e <HAL_GPIO_WritePin>
	}
    new_cell.walls[UP]=boolfront;
 8004262:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004266:	f887 3020 	strb.w	r3, [r7, #32]
    new_cell.walls[DOWN]=0;
 800426a:	2300      	movs	r3, #0
 800426c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    new_cell.walls[LEFT]=boolleft;
 8004270:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    new_cell.walls[RIGHT]=boolright;
 8004278:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800427c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    new_cell.dead=0;
 8004280:	2300      	movs	r3, #0
 8004282:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    new_cell.visited=1;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    maze.cells[row][col]=cell_direction_adjust(new_cell);
 800428c:	4953      	ldr	r1, [pc, #332]	; (80043dc <update_walls+0x2bc>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	011a      	lsls	r2, r3, #4
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	18cc      	adds	r4, r1, r3
 800429a:	4638      	mov	r0, r7
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	f107 0320 	add.w	r3, r7, #32
 80042a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a6:	f7ff fec5 	bl	8004034 <cell_direction_adjust>
 80042aa:	463b      	mov	r3, r7
 80042ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(new_cell.walls[UP]==1&&new_cell.walls[LEFT]==1&&new_cell.walls[RIGHT]==1&&row!=0&&col!=0)
 80042b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <update_walls+0x1ca>
 80042ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <update_walls+0x1ca>
 80042c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00f      	beq.n	80042ea <update_walls+0x1ca>
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <update_walls+0x1ca>
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <update_walls+0x1ca>
    {
        maze.cells[row][col].dead=1;
 80042d6:	4941      	ldr	r1, [pc, #260]	; (80043dc <update_walls+0x2bc>)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	011a      	lsls	r2, r3, #4
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	440b      	add	r3, r1
 80042e4:	330c      	adds	r3, #12
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
    }
    for(int i=0;i<4;i++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ee:	e05a      	b.n	80043a6 <update_walls+0x286>
    {
        int newRow=row+dy[i];
 80042f0:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <update_walls+0x2c0>)
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4413      	add	r3, r2
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
        int newCol=col+dx[i];
 80042fe:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <update_walls+0x2c4>)
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
        if(isValid(newRow,newCol))
 800430c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800430e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004310:	f7ff fd16 	bl	8003d40 <isValid>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d042      	beq.n	80043a0 <update_walls+0x280>
        {
            if(i==UP)maze.cells[newRow][newCol].walls[DOWN]=maze.cells[row][col].walls[UP];
 800431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431c:	2b00      	cmp	r3, #0
 800431e:	d112      	bne.n	8004346 <update_walls+0x226>
 8004320:	492e      	ldr	r1, [pc, #184]	; (80043dc <update_walls+0x2bc>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	011a      	lsls	r2, r3, #4
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4413      	add	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	440b      	add	r3, r1
 800432e:	7818      	ldrb	r0, [r3, #0]
 8004330:	492a      	ldr	r1, [pc, #168]	; (80043dc <update_walls+0x2bc>)
 8004332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004334:	011a      	lsls	r2, r3, #4
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	4413      	add	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	440b      	add	r3, r1
 800433e:	3301      	adds	r3, #1
 8004340:	4602      	mov	r2, r0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e02c      	b.n	80043a0 <update_walls+0x280>
            else if(i==LEFT)maze.cells[newRow][newCol].walls[RIGHT]=maze.cells[row][col].walls[LEFT];
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b02      	cmp	r3, #2
 800434a:	d113      	bne.n	8004374 <update_walls+0x254>
 800434c:	4923      	ldr	r1, [pc, #140]	; (80043dc <update_walls+0x2bc>)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	011a      	lsls	r2, r3, #4
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	440b      	add	r3, r1
 800435a:	3302      	adds	r3, #2
 800435c:	7818      	ldrb	r0, [r3, #0]
 800435e:	491f      	ldr	r1, [pc, #124]	; (80043dc <update_walls+0x2bc>)
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	011a      	lsls	r2, r3, #4
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	4413      	add	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	440b      	add	r3, r1
 800436c:	3303      	adds	r3, #3
 800436e:	4602      	mov	r2, r0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e015      	b.n	80043a0 <update_walls+0x280>
            else if(i==RIGHT)maze.cells[newRow][newCol].walls[LEFT]=maze.cells[row][col].walls[RIGHT];
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	2b03      	cmp	r3, #3
 8004378:	d112      	bne.n	80043a0 <update_walls+0x280>
 800437a:	4918      	ldr	r1, [pc, #96]	; (80043dc <update_walls+0x2bc>)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	011a      	lsls	r2, r3, #4
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4413      	add	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	440b      	add	r3, r1
 8004388:	3303      	adds	r3, #3
 800438a:	7818      	ldrb	r0, [r3, #0]
 800438c:	4913      	ldr	r1, [pc, #76]	; (80043dc <update_walls+0x2bc>)
 800438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004390:	011a      	lsls	r2, r3, #4
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	4413      	add	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	440b      	add	r3, r1
 800439a:	3302      	adds	r3, #2
 800439c:	4602      	mov	r2, r0
 800439e:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++)
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	3301      	adds	r3, #1
 80043a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	dda1      	ble.n	80042f0 <update_walls+0x1d0>
        }
    }
    return new_cell;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	461c      	mov	r4, r3
 80043b0:	f107 0320 	add.w	r3, r7, #32
 80043b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80043ba:	69f8      	ldr	r0, [r7, #28]
 80043bc:	3744      	adds	r7, #68	; 0x44
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd90      	pop	{r4, r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000468 	.word	0x20000468
 80043c8:	20000470 	.word	0x20000470
 80043cc:	20000478 	.word	0x20000478
 80043d0:	40010800 	.word	0x40010800
 80043d4:	40280000 	.word	0x40280000
 80043d8:	40010c00 	.word	0x40010c00
 80043dc:	20000490 	.word	0x20000490
 80043e0:	0800f244 	.word	0x0800f244
 80043e4:	0800f234 	.word	0x0800f234

080043e8 <go_to_cell>:
void go_to_cell(int *angle_now,int dir)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
    switch(dir)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d83e      	bhi.n	8004478 <go_to_cell+0x90>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <go_to_cell+0x18>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004479 	.word	0x08004479
 8004404:	08004415 	.word	0x08004415
 8004408:	0800441b 	.word	0x0800441b
 800440c:	0800444d 	.word	0x0800444d
 8004410:	08004463 	.word	0x08004463
            {
                case -1:
                    break;
                case UP:
                    API_moveForward();
 8004414:	f7fc ffc8 	bl	80013a8 <API_moveForward>
                    break;
 8004418:	e02f      	b.n	800447a <go_to_cell+0x92>
                case DOWN:
                    *angle_now-=180;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f1a3 02b4 	sub.w	r2, r3, #180	; 0xb4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]

                    if(distance_left < distance_right ){
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <go_to_cell+0xd0>)
 8004428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800442c:	4b23      	ldr	r3, [pc, #140]	; (80044bc <go_to_cell+0xd4>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f7fc fb2f 	bl	8000a94 <__aeabi_dcmplt>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <go_to_cell+0x5a>
                    	API_turnRight180();
 800443c:	f7fd fc04 	bl	8001c48 <API_turnRight180>
 8004440:	e001      	b.n	8004446 <go_to_cell+0x5e>
//                    	API_turnRight();
                    }
                    else{
                    	API_turnLeft180();
 8004442:	f7fd fcf1 	bl	8001e28 <API_turnLeft180>
//                    	API_turnLeft();
                    }
                    API_moveForward();
 8004446:	f7fc ffaf 	bl	80013a8 <API_moveForward>
                    break;
 800444a:	e016      	b.n	800447a <go_to_cell+0x92>
                case LEFT:
                    *angle_now+=90;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	601a      	str	r2, [r3, #0]
                    API_turnLeft();
 8004458:	f7fd fb04 	bl	8001a64 <API_turnLeft>
                    API_moveForward();
 800445c:	f7fc ffa4 	bl	80013a8 <API_moveForward>
                    break;
 8004460:	e00b      	b.n	800447a <go_to_cell+0x92>
                case RIGHT:
                    *angle_now-=90;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
                    API_turnRight();
 800446e:	f7fd fa07 	bl	8001880 <API_turnRight>
                    API_moveForward();
 8004472:	f7fc ff99 	bl	80013a8 <API_moveForward>
                    break;
 8004476:	e000      	b.n	800447a <go_to_cell+0x92>
                default:
                    break;
 8004478:	bf00      	nop
            }
            *angle_now = *angle_now % 360;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a10      	ldr	r2, [pc, #64]	; (80044c0 <go_to_cell+0xd8>)
 8004480:	fb82 1203 	smull	r1, r2, r2, r3
 8004484:	441a      	add	r2, r3
 8004486:	1211      	asrs	r1, r2, #8
 8004488:	17da      	asrs	r2, r3, #31
 800448a:	1a8a      	subs	r2, r1, r2
 800448c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004490:	fb01 f202 	mul.w	r2, r1, r2
 8004494:	1a9a      	subs	r2, r3, r2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
            // �?ảm bảo góc không bị âm
            if (*angle_now < 0) {
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da05      	bge.n	80044ae <go_to_cell+0xc6>
                *angle_now += 360;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
            }
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000470 	.word	0x20000470
 80044bc:	20000478 	.word	0x20000478
 80044c0:	b60b60b7 	.word	0xb60b60b7

080044c4 <check_wall_angle>:
bool check_wall_angle(cell_info cell,int *dir)
{
 80044c4:	b490      	push	{r4, r7}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	463c      	mov	r4, r7
 80044cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    switch(cell.angle_update)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80044d6:	d00a      	beq.n	80044ee <check_wall_angle+0x2a>
 80044d8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80044dc:	dc4d      	bgt.n	800457a <check_wall_angle+0xb6>
 80044de:	2bb4      	cmp	r3, #180	; 0xb4
 80044e0:	d031      	beq.n	8004546 <check_wall_angle+0x82>
 80044e2:	2bb4      	cmp	r3, #180	; 0xb4
 80044e4:	dc49      	bgt.n	800457a <check_wall_angle+0xb6>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d013      	beq.n	8004512 <check_wall_angle+0x4e>
 80044ea:	2b5a      	cmp	r3, #90	; 0x5a
 80044ec:	e045      	b.n	800457a <check_wall_angle+0xb6>
    {
        case 90:
            break;
        case 270:
            if(*dir%2==0)*dir+=1;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <check_wall_angle+0x42>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	601a      	str	r2, [r3, #0]
            else *dir-=1;
            break;
 8004504:	e039      	b.n	800457a <check_wall_angle+0xb6>
            else *dir-=1;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	601a      	str	r2, [r3, #0]
            break;
 8004510:	e033      	b.n	800457a <check_wall_angle+0xb6>
        case 0:
            if(*dir==0 || *dir ==1)*dir+=2;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <check_wall_angle+0x5e>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <check_wall_angle+0x6a>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	1c9a      	adds	r2, r3, #2
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	601a      	str	r2, [r3, #0]
            else if(*dir==2)*dir=1;
            else *dir=0;
            break;
 800452c:	e025      	b.n	800457a <check_wall_angle+0xb6>
            else if(*dir==2)*dir=1;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d103      	bne.n	800453e <check_wall_angle+0x7a>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]
            break;
 800453c:	e01d      	b.n	800457a <check_wall_angle+0xb6>
            else *dir=0;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
            break;
 8004544:	e019      	b.n	800457a <check_wall_angle+0xb6>
        case 180:
             if(*dir==2 || *dir ==3)*dir-=2;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d003      	beq.n	8004556 <check_wall_angle+0x92>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d105      	bne.n	8004562 <check_wall_angle+0x9e>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1e9a      	subs	r2, r3, #2
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	601a      	str	r2, [r3, #0]
            else if(*dir==0)*dir=3;
            else *dir=2;
            break;
 8004560:	e00a      	b.n	8004578 <check_wall_angle+0xb4>
            else if(*dir==0)*dir=3;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <check_wall_angle+0xae>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2203      	movs	r2, #3
 800456e:	601a      	str	r2, [r3, #0]
            break;
 8004570:	e002      	b.n	8004578 <check_wall_angle+0xb4>
            else *dir=2;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2202      	movs	r2, #2
 8004576:	601a      	str	r2, [r3, #0]
            break;
 8004578:	bf00      	nop
    }
    return cell.walls[*dir];
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3310      	adds	r3, #16
 8004580:	443b      	add	r3, r7
 8004582:	f813 3c10 	ldrb.w	r3, [r3, #-16]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bc90      	pop	{r4, r7}
 800458e:	4770      	bx	lr

08004590 <get_min_neighbour>:
coord get_min_neighbour(cell_info cell_wall,coord cur, int (*arr)[ROW][COL],bool change_)
{
 8004590:	b084      	sub	sp, #16
 8004592:	b590      	push	{r4, r7, lr}
 8004594:	b08f      	sub	sp, #60	; 0x3c
 8004596:	af02      	add	r7, sp, #8
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800459e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int min_neightbor=255;
 80045a2:	23ff      	movs	r3, #255	; 0xff
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    coord next_step;
    next_step.value=-1;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	61bb      	str	r3, [r7, #24]
    int ind;
    for (int dir = 0; dir < 4; ++dir) {
 80045ac:	2300      	movs	r3, #0
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b0:	e04e      	b.n	8004650 <get_min_neighbour+0xc0>
        int newRow = cur.row + dy[dir]; // 0 0 -1 1
 80045b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045b4:	492f      	ldr	r1, [pc, #188]	; (8004674 <get_min_neighbour+0xe4>)
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045bc:	4413      	add	r3, r2
 80045be:	623b      	str	r3, [r7, #32]
        int newCol = cur.col + dx[dir]; //1 -1 0 0
 80045c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045c2:	492d      	ldr	r1, [pc, #180]	; (8004678 <get_min_neighbour+0xe8>)
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045ca:	4413      	add	r3, r2
 80045cc:	61fb      	str	r3, [r7, #28]
        ind=dir;
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	60fb      	str	r3, [r7, #12]
        bool check_=cell_wall.walls[dir];
 80045d2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(change_)check_=check_wall_angle(cell_wall,&ind);
 80045e0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <get_min_neighbour+0x6e>
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f4:	f7ff ff66 	bl	80044c4 <check_wall_angle>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(isValid(newRow,newCol) && !check_)
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	6a38      	ldr	r0, [r7, #32]
 8004602:	f7ff fb9d 	bl	8003d40 <isValid>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01e      	beq.n	800464a <get_min_neighbour+0xba>
 800460c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004610:	f083 0301 	eor.w	r3, r3, #1
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <get_min_neighbour+0xba>
        {
            if((*arr)[newRow][newCol]<=min_neightbor)
 800461a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	0111      	lsls	r1, r2, #4
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	440a      	add	r2, r1
 8004624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800462a:	429a      	cmp	r2, r3
 800462c:	db0d      	blt.n	800464a <get_min_neighbour+0xba>
            {
                min_neightbor=(*arr)[newRow][newCol];
 800462e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004630:	6a3a      	ldr	r2, [r7, #32]
 8004632:	0111      	lsls	r1, r2, #4
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	440a      	add	r2, r1
 8004638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_step.row=newRow;
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	613b      	str	r3, [r7, #16]
                next_step.col=newCol;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	617b      	str	r3, [r7, #20]
                next_step.value=ind;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	61bb      	str	r3, [r7, #24]
    for (int dir = 0; dir < 4; ++dir) {
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	3301      	adds	r3, #1
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	2b03      	cmp	r3, #3
 8004654:	ddad      	ble.n	80045b2 <get_min_neighbour+0x22>
            }
        }
    }
    return next_step;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	461c      	mov	r4, r3
 800465a:	f107 0310 	add.w	r3, r7, #16
 800465e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	3734      	adds	r7, #52	; 0x34
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004670:	b004      	add	sp, #16
 8004672:	4770      	bx	lr
 8004674:	0800f244 	.word	0x0800f244
 8004678:	0800f234 	.word	0x0800f234

0800467c <flood>:
void flood(Stack *stack_flood,int (*arr)[ROW][COL])
{
 800467c:	b5b0      	push	{r4, r5, r7, lr}
 800467e:	b09a      	sub	sp, #104	; 0x68
 8004680:	af06      	add	r7, sp, #24
 8004682:	6178      	str	r0, [r7, #20]
 8004684:	6139      	str	r1, [r7, #16]
    // log_out("flood");
    coord cur_stack;
    coord next_step;

    while(!isEmptyStack(stack_flood))
 8004686:	e0a3      	b.n	80047d0 <flood+0x154>
    {

        cur_stack=peekStack(stack_flood);
 8004688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800468c:	6979      	ldr	r1, [r7, #20]
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fb02 	bl	8005c98 <peekStack>
        popStack(stack_flood);
 8004694:	463b      	mov	r3, r7
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	4618      	mov	r0, r3
 800469a:	f001 fac7 	bl	8005c2c <popStack>
        int min_neightbor=255;
 800469e:	23ff      	movs	r3, #255	; 0xff
 80046a0:	647b      	str	r3, [r7, #68]	; 0x44
        bool check_;

        next_step=get_min_neighbour(maze.cells[cur_stack.row][cur_stack.col],cur_stack,arr,0);
 80046a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80046aa:	4950      	ldr	r1, [pc, #320]	; (80047ec <flood+0x170>)
 80046ac:	0112      	lsls	r2, r2, #4
 80046ae:	4413      	add	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	440b      	add	r3, r1
 80046b4:	2200      	movs	r2, #0
 80046b6:	9205      	str	r2, [sp, #20]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	9204      	str	r2, [sp, #16]
 80046bc:	ac01      	add	r4, sp, #4
 80046be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80046c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	9200      	str	r2, [sp, #0]
 80046cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ce:	4628      	mov	r0, r5
 80046d0:	f7ff ff5e 	bl	8004590 <get_min_neighbour>

        min_neightbor=(*arr)[next_step.row][next_step.col];
 80046d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	0109      	lsls	r1, r1, #4
 80046dc:	440a      	add	r2, r1
 80046de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e2:	647b      	str	r3, [r7, #68]	; 0x44
        if((*arr)[cur_stack.row][cur_stack.col]-1 != min_neightbor )
 80046e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	0109      	lsls	r1, r1, #4
 80046ec:	440a      	add	r2, r1
 80046ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d053      	beq.n	80047a2 <flood+0x126>
        {
            for(int i =0 ;i<4;i++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046fe:	e03b      	b.n	8004778 <flood+0xfc>
            {
                coord cur_add;
                cur_add.row= cur_stack.row + dy[i]; // 0 0 -1 1
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	493b      	ldr	r1, [pc, #236]	; (80047f0 <flood+0x174>)
 8004704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004706:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800470a:	4413      	add	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
                cur_add.col= cur_stack.col + dx[i]; //1 -1 0 0
 800470e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004710:	4938      	ldr	r1, [pc, #224]	; (80047f4 <flood+0x178>)
 8004712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004714:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004718:	4413      	add	r3, r2
 800471a:	61fb      	str	r3, [r7, #28]
                check_=maze.cells[cur_stack.row][cur_stack.col].walls[i];
 800471c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	4932      	ldr	r1, [pc, #200]	; (80047ec <flood+0x170>)
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	4413      	add	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	18ca      	adds	r2, r1, r3
 800472a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472c:	4413      	add	r3, r2
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                if(isValid(cur_add.row,cur_add.col) &&(*arr)[cur_add.row][cur_add.col]!=0&&!check_)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fb00 	bl	8003d40 <isValid>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <flood+0xf6>
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	0109      	lsls	r1, r1, #4
 800474e:	440a      	add	r2, r1
 8004750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00c      	beq.n	8004772 <flood+0xf6>
 8004758:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800475c:	f083 0301 	eor.w	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <flood+0xf6>
                {
                    pushStack(stack_flood,cur_add);
 8004766:	f107 0318 	add.w	r3, r7, #24
 800476a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f001 fa2e 	bl	8005bce <pushStack>
            for(int i =0 ;i<4;i++)
 8004772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004774:	3301      	adds	r3, #1
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477a:	2b03      	cmp	r3, #3
 800477c:	ddc0      	ble.n	8004700 <flood+0x84>
                }
            }
            if((*arr)[cur_stack.row][cur_stack.col]!=0)(*arr)[cur_stack.row][cur_stack.col]=min_neightbor+1;
 800477e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	0109      	lsls	r1, r1, #4
 8004786:	440a      	add	r2, r1
 8004788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <flood+0x126>
 8004790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004796:	1c59      	adds	r1, r3, #1
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	0100      	lsls	r0, r0, #4
 800479c:	4402      	add	r2, r0
 800479e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        int stack_size=sizeStack(stack_flood);
 80047a2:	6978      	ldr	r0, [r7, #20]
 80047a4:	f001 faa8 	bl	8005cf8 <sizeStack>
 80047a8:	63f8      	str	r0, [r7, #60]	; 0x3c
        if(stack_size>=35){
 80047aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ac:	2b22      	cmp	r3, #34	; 0x22
 80047ae:	dd0f      	ble.n	80047d0 <flood+0x154>
            for(int i=0;i<stack_size;i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b4:	e007      	b.n	80047c6 <flood+0x14a>
            {
                popStack(stack_flood);
 80047b6:	463b      	mov	r3, r7
 80047b8:	6979      	ldr	r1, [r7, #20]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 fa36 	bl	8005c2c <popStack>
            for(int i=0;i<stack_size;i++)
 80047c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c2:	3301      	adds	r3, #1
 80047c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	dbf3      	blt.n	80047b6 <flood+0x13a>
            }
            return;
 80047ce:	e009      	b.n	80047e4 <flood+0x168>
    while(!isEmptyStack(stack_flood))
 80047d0:	6978      	ldr	r0, [r7, #20]
 80047d2:	f001 f9d3 	bl	8005b7c <isEmptyStack>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f083 0301 	eor.w	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47f af52 	bne.w	8004688 <flood+0xc>
        }
    }
}
 80047e4:	3750      	adds	r7, #80	; 0x50
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000490 	.word	0x20000490
 80047f0:	0800f244 	.word	0x0800f244
 80047f4:	0800f234 	.word	0x0800f234

080047f8 <floodfill>:
coord floodfill(coord start,coord dest,int (*arr)[ROW][COL],int *angle_now)
{
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 80047fe:	b08c      	sub	sp, #48	; 0x30
 8004800:	af06      	add	r7, sp, #24
 8004802:	f607 6418 	addw	r4, r7, #3608	; 0xe18
 8004806:	f6a4 640c 	subw	r4, r4, #3596	; 0xe0c
 800480a:	6020      	str	r0, [r4, #0]
 800480c:	f607 6018 	addw	r0, r7, #3608	; 0xe18
 8004810:	f6a0 6018 	subw	r0, r0, #3608	; 0xe18
 8004814:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Queue path_queue;
    initializeQueue(&path_queue);
 8004818:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 800481c:	f103 0318 	add.w	r3, r3, #24
 8004820:	3b2c      	subs	r3, #44	; 0x2c
 8004822:	4618      	mov	r0, r3
 8004824:	f001 f883 	bl	800592e <initializeQueue>

    pushQueue(&path_queue,start);
 8004828:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800482c:	f6a3 6318 	subw	r3, r3, #3608	; 0xe18
 8004830:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 8004834:	f100 0018 	add.w	r0, r0, #24
 8004838:	382c      	subs	r0, #44	; 0x2c
 800483a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800483c:	f001 f8bc 	bl	80059b8 <pushQueue>
    coord cur=start;
 8004840:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8004844:	f103 0318 	add.w	r3, r3, #24
 8004848:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 800484c:	f607 6218 	addw	r2, r7, #3608	; 0xe18
 8004850:	f6a2 6218 	subw	r2, r2, #3608	; 0xe18
 8004854:	ca07      	ldmia	r2, {r0, r1, r2}
 8004856:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    cell_info new_cell;

    Stack stack_flood;
    initializeStack(&stack_flood);
 800485a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800485e:	3b6c      	subs	r3, #108	; 0x6c
 8004860:	4618      	mov	r0, r3
 8004862:	f001 f97a 	bl	8005b5a <initializeStack>

    pushStack(&stack_flood,start);
 8004866:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800486a:	f6a3 6318 	subw	r3, r3, #3608	; 0xe18
 800486e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8004872:	386c      	subs	r0, #108	; 0x6c
 8004874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004876:	f001 f9aa 	bl	8005bce <pushStack>

    int path_distance_value_find=0;
 800487a:	2300      	movs	r3, #0
 800487c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8004880:	f102 0214 	add.w	r2, r2, #20
 8004884:	6013      	str	r3, [r2, #0]
    // int save_row,save_col;
    coord next_step;

    while(1)
    {
        if(!isEmptyQueue(&path_queue)) // dua ra quyet dinh va go
 8004886:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 800488a:	f103 0318 	add.w	r3, r3, #24
 800488e:	3b2c      	subs	r3, #44	; 0x2c
 8004890:	4618      	mov	r0, r3
 8004892:	f001 f864 	bl	800595e <isEmptyQueue>
 8004896:	4603      	mov	r3, r0
 8004898:	f083 0301 	eor.w	r3, r3, #1
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80bb 	beq.w	8004a1a <floodfill+0x222>
        {
            cur = peekQueue(&path_queue);
 80048a4:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 80048a8:	f103 0318 	add.w	r3, r3, #24
 80048ac:	f6a3 62f8 	subw	r2, r3, #3832	; 0xef8
 80048b0:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80048b4:	f103 0318 	add.w	r3, r3, #24
 80048b8:	3b2c      	subs	r3, #44	; 0x2c
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f001 f8c3 	bl	8005a48 <peekQueue>

            new_cell=update_walls(*angle_now,cur.row,cur.col);
 80048c2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80048c6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 80048d2:	f103 0318 	add.w	r3, r3, #24
 80048d6:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 80048e0:	f103 0318 	add.w	r3, r3, #24
 80048e4:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f507 5078 	add.w	r0, r7, #15872	; 0x3e00
 80048ee:	f100 0018 	add.w	r0, r0, #24
 80048f2:	f6a0 7008 	subw	r0, r0, #3848	; 0xf08
 80048f6:	f7ff fc13 	bl	8004120 <update_walls>

            if((*arr)[cur.row][cur.col]==(*arr)[dest.row][dest.col]){
 80048fa:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 80048fe:	f103 0318 	add.w	r3, r3, #24
 8004902:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 800490c:	f103 0318 	add.w	r3, r3, #24
 8004910:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 800491a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0109      	lsls	r1, r1, #4
 8004922:	440a      	add	r2, r1
 8004924:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004928:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 800492c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8004936:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8004940:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	0100      	lsls	r0, r0, #4
 8004948:	4401      	add	r1, r0
 800494a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800494e:	429a      	cmp	r2, r3
 8004950:	d065      	beq.n	8004a1e <floodfill+0x226>
                break;
            }
            flood(&stack_flood,arr);
 8004952:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004956:	3b6c      	subs	r3, #108	; 0x6c
 8004958:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 800495c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8004960:	6811      	ldr	r1, [r2, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fe8a 	bl	800467c <flood>
            popQueue(&path_queue);
 8004968:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 800496c:	f103 0318 	add.w	r3, r3, #24
 8004970:	3b2c      	subs	r3, #44	; 0x2c
 8004972:	4618      	mov	r0, r3
 8004974:	f001 f84e 	bl	8005a14 <popQueue>
            next_step=get_min_neighbour(new_cell,cur,arr,1);
 8004978:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800497c:	f6a3 55f8 	subw	r5, r3, #3576	; 0xdf8
 8004980:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8004984:	f103 0318 	add.w	r3, r3, #24
 8004988:	f6a3 7308 	subw	r3, r3, #3848	; 0xf08
 800498c:	2201      	movs	r2, #1
 800498e:	9205      	str	r2, [sp, #20]
 8004990:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8004994:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	9204      	str	r2, [sp, #16]
 800499c:	f507 5278 	add.w	r2, r7, #15872	; 0x3e00
 80049a0:	f102 0218 	add.w	r2, r2, #24
 80049a4:	f6a2 62f8 	subw	r2, r2, #3832	; 0xef8
 80049a8:	ac01      	add	r4, sp, #4
 80049aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80049ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	9200      	str	r2, [sp, #0]
 80049b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b6:	4628      	mov	r0, r5
 80049b8:	f7ff fdea 	bl	8004590 <get_min_neighbour>
            pushQueue(&path_queue,next_step);
 80049bc:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80049c0:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 80049c4:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 80049c8:	f100 0018 	add.w	r0, r0, #24
 80049cc:	382c      	subs	r0, #44	; 0x2c
 80049ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d0:	f000 fff2 	bl	80059b8 <pushQueue>
            pushStack(&stack_flood,next_step);
 80049d4:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80049d8:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 80049dc:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80049e0:	386c      	subs	r0, #108	; 0x6c
 80049e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e4:	f001 f8f3 	bl	8005bce <pushStack>
            go_to_cell(angle_now,next_step.value);
 80049e8:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80049ec:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4619      	mov	r1, r3
 80049f4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80049f8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f7ff fcf3 	bl	80043e8 <go_to_cell>
            path_distance_value_find++;
 8004a02:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8004a06:	f103 0314 	add.w	r3, r3, #20
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8004a12:	f102 0214 	add.w	r2, r2, #20
 8004a16:	6013      	str	r3, [r2, #0]
        if(!isEmptyQueue(&path_queue)) // dua ra quyet dinh va go
 8004a18:	e735      	b.n	8004886 <floodfill+0x8e>
        }
        else{
            break;
 8004a1a:	bf00      	nop
 8004a1c:	e009      	b.n	8004a32 <floodfill+0x23a>
                break;
 8004a1e:	bf00      	nop
        }
    }

    while(!isEmptyQueue(&path_queue)) popQueue(&path_queue);
 8004a20:	e007      	b.n	8004a32 <floodfill+0x23a>
 8004a22:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8004a26:	f103 0318 	add.w	r3, r3, #24
 8004a2a:	3b2c      	subs	r3, #44	; 0x2c
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fff1 	bl	8005a14 <popQueue>
 8004a32:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8004a36:	f103 0318 	add.w	r3, r3, #24
 8004a3a:	3b2c      	subs	r3, #44	; 0x2c
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 ff8e 	bl	800595e <isEmptyQueue>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f083 0301 	eor.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e9      	bne.n	8004a22 <floodfill+0x22a>

    coord p_return={next_step.row,next_step.col,0};
 8004a4e:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004a52:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004a5c:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004a66:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004a70:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004a7a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8004a7e:	2200      	movs	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
    return p_return;
 8004a82:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004a86:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f607 6218 	addw	r2, r7, #3608	; 0xe18
 8004a90:	f6a2 6204 	subw	r2, r2, #3588	; 0xe04
 8004a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8004a9a:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8004a9e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004ab0 <init_flood_start>:
void init_flood_start(int (*arr)[ROW][COL],int row_,int col_,int back_)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b09a      	sub	sp, #104	; 0x68
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
    int count_=0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	65bb      	str	r3, [r7, #88]	; 0x58
    for(int i=0;i<16;i++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ac6:	e037      	b.n	8004b38 <init_flood_start+0x88>
    {
        for(int j = 0 ;j<16;j++)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	663b      	str	r3, [r7, #96]	; 0x60
 8004acc:	e02e      	b.n	8004b2c <init_flood_start+0x7c>
        {
            (*arr)[i][j]=-1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ad2:	0111      	lsls	r1, r2, #4
 8004ad4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ad6:	440a      	add	r2, r1
 8004ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8004adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if(back_==2&&maze.cells[i][j].visited==false){
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d11f      	bne.n	8004b26 <init_flood_start+0x76>
 8004ae6:	496b      	ldr	r1, [pc, #428]	; (8004c94 <init_flood_start+0x1e4>)
 8004ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aea:	011a      	lsls	r2, r3, #4
 8004aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aee:	4413      	add	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	440b      	add	r3, r1
 8004af4:	3304      	adds	r3, #4
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f083 0301 	eor.w	r3, r3, #1
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d011      	beq.n	8004b26 <init_flood_start+0x76>
                (*arr)[i][j]=255;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b06:	0111      	lsls	r1, r2, #4
 8004b08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b0a:	440a      	add	r2, r1
 8004b0c:	21ff      	movs	r1, #255	; 0xff
 8004b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                maze.cells[i][j].dead=true;
 8004b12:	4960      	ldr	r1, [pc, #384]	; (8004c94 <init_flood_start+0x1e4>)
 8004b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b16:	011a      	lsls	r2, r3, #4
 8004b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1a:	4413      	add	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	440b      	add	r3, r1
 8004b20:	330c      	adds	r3, #12
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
        for(int j = 0 ;j<16;j++)
 8004b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b28:	3301      	adds	r3, #1
 8004b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2e:	2b0f      	cmp	r3, #15
 8004b30:	ddcd      	ble.n	8004ace <init_flood_start+0x1e>
    for(int i=0;i<16;i++)
 8004b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b34:	3301      	adds	r3, #1
 8004b36:	667b      	str	r3, [r7, #100]	; 0x64
 8004b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	ddc4      	ble.n	8004ac8 <init_flood_start+0x18>
            }
        }
    }
    if(back_!=1)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d043      	beq.n	8004bcc <init_flood_start+0x11c>
    {
        coord point2={row_+1,col_,count_};
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3301      	adds	r3, #1
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        pushQueue(&myQueue,point2);
 8004b52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b58:	484f      	ldr	r0, [pc, #316]	; (8004c98 <init_flood_start+0x1e8>)
 8004b5a:	f000 ff2d 	bl	80059b8 <pushQueue>
        (*arr)[row_+1][col_]=0;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	0111      	lsls	r1, r2, #4
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	440a      	add	r2, r1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        coord point3={row_,col_+1,count_};
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3301      	adds	r3, #1
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b7c:	633b      	str	r3, [r7, #48]	; 0x30
        pushQueue(&myQueue,point3);
 8004b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b84:	4844      	ldr	r0, [pc, #272]	; (8004c98 <init_flood_start+0x1e8>)
 8004b86:	f000 ff17 	bl	80059b8 <pushQueue>
        (*arr)[row_][col_+1]=0;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	0109      	lsls	r1, r1, #4
 8004b94:	440a      	add	r2, r1
 8004b96:	2100      	movs	r1, #0
 8004b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        coord point4={row_+1,col_+1,count_};
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	623b      	str	r3, [r7, #32]
 8004ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
        pushQueue(&myQueue,point4);
 8004bac:	f107 031c 	add.w	r3, r7, #28
 8004bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb2:	4839      	ldr	r0, [pc, #228]	; (8004c98 <init_flood_start+0x1e8>)
 8004bb4:	f000 ff00 	bl	80059b8 <pushQueue>
        (*arr)[row_+1][col_+1]=0;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	0109      	lsls	r1, r1, #4
 8004bc4:	440a      	add	r2, r1
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    coord point={row_,col_,count_};
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd6:	64bb      	str	r3, [r7, #72]	; 0x48
    pushQueue(&myQueue,point);
 8004bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bde:	482e      	ldr	r0, [pc, #184]	; (8004c98 <init_flood_start+0x1e8>)
 8004be0:	f000 feea 	bl	80059b8 <pushQueue>
    (*arr)[row_][col_]=0;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	0111      	lsls	r1, r2, #4
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	440a      	add	r2, r1
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while(!isEmptyQueue(&myQueue))
 8004bf4:	e040      	b.n	8004c78 <init_flood_start+0x1c8>
    {
        coord frontCoord = peekQueue(&myQueue);
 8004bf6:	f107 0310 	add.w	r3, r7, #16
 8004bfa:	4927      	ldr	r1, [pc, #156]	; (8004c98 <init_flood_start+0x1e8>)
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 ff23 	bl	8005a48 <peekQueue>
        popQueue(&myQueue);
 8004c02:	4825      	ldr	r0, [pc, #148]	; (8004c98 <init_flood_start+0x1e8>)
 8004c04:	f000 ff06 	bl	8005a14 <popQueue>
          for (int i = 0; i < 4; ++i) {
 8004c08:	2300      	movs	r3, #0
 8004c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c0c:	e029      	b.n	8004c62 <init_flood_start+0x1b2>
                int newRow = frontCoord.row + dy[i]; // 0 0 -1 1
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4922      	ldr	r1, [pc, #136]	; (8004c9c <init_flood_start+0x1ec>)
 8004c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c18:	4413      	add	r3, r2
 8004c1a:	657b      	str	r3, [r7, #84]	; 0x54
                int newCol = frontCoord.col + dx[i]; //1 -1 0 0
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4920      	ldr	r1, [pc, #128]	; (8004ca0 <init_flood_start+0x1f0>)
 8004c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004c26:	4413      	add	r3, r2
 8004c28:	653b      	str	r3, [r7, #80]	; 0x50
                bool check_=maze.cells[frontCoord.row][frontCoord.col].walls[i];
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4919      	ldr	r1, [pc, #100]	; (8004c94 <init_flood_start+0x1e4>)
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	4413      	add	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	18ca      	adds	r2, r1, r3
 8004c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3a:	4413      	add	r3, r2
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(!check_)check_and_fill(*arr,newRow,newCol,frontCoord.value);
 8004c42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c46:	f083 0301 	eor.w	r3, r3, #1
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <init_flood_start+0x1ac>
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff f8ba 	bl	8003dd0 <check_and_fill>
          for (int i = 0; i < 4; ++i) {
 8004c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5e:	3301      	adds	r3, #1
 8004c60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	ddd2      	ble.n	8004c0e <init_flood_start+0x15e>
          }
          if(sizeQueue(&myQueue)>120){
 8004c68:	480b      	ldr	r0, [pc, #44]	; (8004c98 <init_flood_start+0x1e8>)
 8004c6a:	f000 ff1f 	bl	8005aac <sizeQueue>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b78      	cmp	r3, #120	; 0x78
 8004c72:	dd01      	ble.n	8004c78 <init_flood_start+0x1c8>
            break;
 8004c74:	bf00      	nop
          }
    }
}
 8004c76:	e008      	b.n	8004c8a <init_flood_start+0x1da>
    while(!isEmptyQueue(&myQueue))
 8004c78:	4807      	ldr	r0, [pc, #28]	; (8004c98 <init_flood_start+0x1e8>)
 8004c7a:	f000 fe70 	bl	800595e <isEmptyQueue>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f083 0301 	eor.w	r3, r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1b5      	bne.n	8004bf6 <init_flood_start+0x146>
}
 8004c8a:	bf00      	nop
 8004c8c:	3768      	adds	r7, #104	; 0x68
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000490 	.word	0x20000490
 8004c98:	20001490 	.word	0x20001490
 8004c9c:	0800f244 	.word	0x0800f244
 8004ca0:	0800f234 	.word	0x0800f234

08004ca4 <shorted_path_go>:

void shorted_path_go(int (*arr)[ROW][COL],int angle_now,coord start,coord dest)
{
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	b590      	push	{r4, r7, lr}
 8004ca8:	f6ad 7df4 	subw	sp, sp, #4084	; 0xff4
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	f507 647f 	add.w	r4, r7, #4080	; 0xff0
 8004cb2:	f6a4 74ec 	subw	r4, r4, #4076	; 0xfec
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	f507 607f 	add.w	r0, r7, #4080	; 0xff0
 8004cbc:	f5a0 607f 	sub.w	r0, r0, #4080	; 0xff0
 8004cc0:	6001      	str	r1, [r0, #0]
 8004cc2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8004cc6:	e881 000c 	stmia.w	r1, {r2, r3}
    QueueInt next_dir_path;
    initializeQueueInt(&next_dir_path);
 8004cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 ff01 	bl	8005ad6 <initializeQueueInt>

    int save_row,save_col;
    coord cur=start;
 8004cd4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004cd8:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004cdc:	461c      	mov	r4, r3
 8004cde:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for(int i=0;i<(*arr)[start.row][start.col];i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8004cf0:	e0af      	b.n	8004e52 <shorted_path_go+0x1ae>
    {
            int next_dir=-1;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
            int newRow;
            int newCol;
            for (int dir = 0; dir < 4; ++dir) {
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
 8004d00:	e071      	b.n	8004de6 <shorted_path_go+0x142>
                newRow = cur.row + dy[dir]; // 0 0 -1 1
 8004d02:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004d06:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4960      	ldr	r1, [pc, #384]	; (8004e90 <shorted_path_go+0x1ec>)
 8004d0e:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8004d12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d16:	4413      	add	r3, r2
 8004d18:	f8c7 3fd8 	str.w	r3, [r7, #4056]	; 0xfd8
                newCol = cur.col + dx[dir]; //1 -1 0 0
 8004d1c:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004d20:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	495b      	ldr	r1, [pc, #364]	; (8004e94 <shorted_path_go+0x1f0>)
 8004d28:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8004d2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004d30:	4413      	add	r3, r2
 8004d32:	f8c7 3fd4 	str.w	r3, [r7, #4052]	; 0xfd4
                bool check_=maze.cells[cur.row][cur.col].walls[dir];
 8004d36:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004d3a:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004d44:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4953      	ldr	r1, [pc, #332]	; (8004e98 <shorted_path_go+0x1f4>)
 8004d4c:	0112      	lsls	r2, r2, #4
 8004d4e:	4413      	add	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	18ca      	adds	r2, r1, r3
 8004d54:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8004d58:	4413      	add	r3, r2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f887 3fd3 	strb.w	r3, [r7, #4051]	; 0xfd3
                if(isValid(newRow,newCol) && !check_)
 8004d60:	f8d7 1fd4 	ldr.w	r1, [r7, #4052]	; 0xfd4
 8004d64:	f8d7 0fd8 	ldr.w	r0, [r7, #4056]	; 0xfd8
 8004d68:	f7fe ffea 	bl	8003d40 <isValid>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d034      	beq.n	8004ddc <shorted_path_go+0x138>
 8004d72:	f897 3fd3 	ldrb.w	r3, [r7, #4051]	; 0xfd3
 8004d76:	f083 0301 	eor.w	r3, r3, #1
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02d      	beq.n	8004ddc <shorted_path_go+0x138>
                {
                    if((*arr)[newRow][newCol]<(*arr)[cur.row][cur.col])
 8004d80:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004d84:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8d7 2fd8 	ldr.w	r2, [r7, #4056]	; 0xfd8
 8004d8e:	0111      	lsls	r1, r2, #4
 8004d90:	f8d7 2fd4 	ldr.w	r2, [r7, #4052]	; 0xfd4
 8004d94:	440a      	add	r2, r1
 8004d96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d9a:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004d9e:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004da8:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004dac:	6859      	ldr	r1, [r3, #4]
 8004dae:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004db2:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	0100      	lsls	r0, r0, #4
 8004dba:	4401      	add	r1, r0
 8004dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	da0b      	bge.n	8004ddc <shorted_path_go+0x138>
                    {
                        next_dir=dir;
 8004dc4:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8004dc8:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
                        save_row=newRow;
 8004dcc:	f8d7 3fd8 	ldr.w	r3, [r7, #4056]	; 0xfd8
 8004dd0:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
                        save_col=newCol;
 8004dd4:	f8d7 3fd4 	ldr.w	r3, [r7, #4052]	; 0xfd4
 8004dd8:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
            for (int dir = 0; dir < 4; ++dir) {
 8004ddc:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8004de0:	3301      	adds	r3, #1
 8004de2:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
 8004de6:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	dd89      	ble.n	8004d02 <shorted_path_go+0x5e>
                    }
                }
            }
            if(next_dir!=-1)
 8004dee:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	; 0xfe0
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d027      	beq.n	8004e48 <shorted_path_go+0x1a4>
            {
                cur.row=save_row;
 8004df8:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004dfc:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004e00:	f8d7 2fec 	ldr.w	r2, [r7, #4076]	; 0xfec
 8004e04:	601a      	str	r2, [r3, #0]
                cur.col=save_col;
 8004e06:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004e0a:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8004e0e:	f8d7 2fe8 	ldr.w	r2, [r7, #4072]	; 0xfe8
 8004e12:	605a      	str	r2, [r3, #4]
                pushQueueInt(&next_dir_path,next_dir);
 8004e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e18:	f8d7 1fe0 	ldr.w	r1, [r7, #4064]	; 0xfe0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fe7e 	bl	8005b1e <pushQueueInt>
                char value[20];
                intToStr((*arr)[save_row][save_col], value);
 8004e22:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004e26:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f8d7 2fec 	ldr.w	r2, [r7, #4076]	; 0xfec
 8004e30:	0111      	lsls	r1, r2, #4
 8004e32:	f8d7 2fe8 	ldr.w	r2, [r7, #4072]	; 0xfe8
 8004e36:	440a      	add	r2, r1
 8004e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3c:	f107 0208 	add.w	r2, r7, #8
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff f8e6 	bl	8004014 <intToStr>
    for(int i=0;i<(*arr)[start.row][start.col];i++)
 8004e48:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8004e52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004e5c:	f103 0304 	add.w	r3, r3, #4
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8004e66:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	0109      	lsls	r1, r1, #4
 8004e6e:	440a      	add	r2, r1
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	f8d7 2fe4 	ldr.w	r2, [r7, #4068]	; 0xfe4
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	f6ff af3a 	blt.w	8004cf2 <shorted_path_go+0x4e>

            }
    }
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	f607 77f4 	addw	r7, r7, #4084	; 0xff4
 8004e86:	46bd      	mov	sp, r7
 8004e88:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004e8c:	b002      	add	sp, #8
 8004e8e:	4770      	bx	lr
 8004e90:	0800f244 	.word	0x0800f244
 8004e94:	0800f234 	.word	0x0800f234
 8004e98:	20000490 	.word	0x20000490

08004e9c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eac:	d10a      	bne.n	8004ec4 <HAL_TIM_IC_CaptureCallback+0x28>
    {
        counterTim2 = __HAL_TIM_GET_COUNTER(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	4a0d      	ldr	r2, [pc, #52]	; (8004eec <HAL_TIM_IC_CaptureCallback+0x50>)
 8004eb6:	6013      	str	r3, [r2, #0]
        countTim2 = (int16_t)counterTim2;
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <HAL_TIM_IC_CaptureCallback+0x50>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b21a      	sxth	r2, r3
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8004ec0:	801a      	strh	r2, [r3, #0]
    else if (htim->Instance == TIM3)
    {
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
        countTim3 = (int16_t)counterTim3;
    }
}
 8004ec2:	e00e      	b.n	8004ee2 <HAL_TIM_IC_CaptureCallback+0x46>
    else if (htim->Instance == TIM3)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d109      	bne.n	8004ee2 <HAL_TIM_IC_CaptureCallback+0x46>
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8004ed6:	6013      	str	r3, [r2, #0]
        countTim3 = (int16_t)counterTim3;
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	b21a      	sxth	r2, r3
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <HAL_TIM_IC_CaptureCallback+0x60>)
 8004ee0:	801a      	strh	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	20000480 	.word	0x20000480
 8004ef0:	20000484 	.word	0x20000484
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	20000488 	.word	0x20000488
 8004efc:	2000048c 	.word	0x2000048c

08004f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f02:	f2ad 5d04 	subw	sp, sp, #1284	; 0x504
 8004f06:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f08:	f001 fa90 	bl	800642c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f0c:	f000 f95a 	bl	80051c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f10:	f000 fc82 	bl	8005818 <MX_GPIO_Init>
  MX_ADC1_Init();
 8004f14:	f000 f9b2 	bl	800527c <MX_ADC1_Init>
  MX_I2C1_Init();
 8004f18:	f000 fa6a 	bl	80053f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004f1c:	f000 fa96 	bl	800544c <MX_TIM1_Init>
  MX_TIM2_Init();
 8004f20:	f000 fb32 	bl	8005588 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004f24:	f000 fb84 	bl	8005630 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004f28:	f000 fbd6 	bl	80056d8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004f2c:	f000 fc4a 	bl	80057c4 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8004f30:	f000 f9e2 	bl	80052f8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004f34:	f000 fa1e 	bl	8005374 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8004f38:	213c      	movs	r1, #60	; 0x3c
 8004f3a:	4895      	ldr	r0, [pc, #596]	; (8005190 <main+0x290>)
 8004f3c:	f004 fb9e 	bl	800967c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8004f40:	213c      	movs	r1, #60	; 0x3c
 8004f42:	4894      	ldr	r0, [pc, #592]	; (8005194 <main+0x294>)
 8004f44:	f004 fb9a 	bl	800967c <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004f48:	210c      	movs	r1, #12
 8004f4a:	4893      	ldr	r0, [pc, #588]	; (8005198 <main+0x298>)
 8004f4c:	f004 fa3a 	bl	80093c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004f50:	210c      	movs	r1, #12
 8004f52:	4892      	ldr	r0, [pc, #584]	; (800519c <main+0x29c>)
 8004f54:	f004 fa36 	bl	80093c4 <HAL_TIM_PWM_Start>
//    while(1){
//  	  distance_straight = distanceStraight();
//  	  distance_left = distanceLeft();
//  	  distance_right = distanceRight();
//    }
  bno = (bno055_t){
 8004f58:	4b91      	ldr	r3, [pc, #580]	; (80051a0 <main+0x2a0>)
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	23ac      	movs	r3, #172	; 0xac
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2100      	movs	r1, #0
 8004f62:	f006 fd39 	bl	800b9d8 <memset>
 8004f66:	4b8e      	ldr	r3, [pc, #568]	; (80051a0 <main+0x2a0>)
 8004f68:	4a8e      	ldr	r2, [pc, #568]	; (80051a4 <main+0x2a4>)
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	4b8c      	ldr	r3, [pc, #560]	; (80051a0 <main+0x2a0>)
 8004f6e:	2208      	movs	r2, #8
 8004f70:	711a      	strb	r2, [r3, #4]
 8004f72:	4b8b      	ldr	r3, [pc, #556]	; (80051a0 <main+0x2a0>)
 8004f74:	2228      	movs	r2, #40	; 0x28
 8004f76:	719a      	strb	r2, [r3, #6]
        .i2c = &hi2c1, .addr = BNO_ADDR_ALT, .mode = BNO_MODE_IMU, ._temp_unit = 0,
        // .ptr = &bno,
    };
    HAL_Delay(1000);
 8004f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f7c:	f001 fab8 	bl	80064f0 <HAL_Delay>

    if ((err = bno055_init(&bno)) == BNO_OK) {
 8004f80:	4887      	ldr	r0, [pc, #540]	; (80051a0 <main+0x2a0>)
 8004f82:	f7fd f871 	bl	8002068 <bno055_init>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b87      	ldr	r3, [pc, #540]	; (80051a8 <main+0x2a8>)
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	4b86      	ldr	r3, [pc, #536]	; (80051a8 <main+0x2a8>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <main+0xa4>
        printf("BNO055 init success\r\n");
 8004f96:	4885      	ldr	r0, [pc, #532]	; (80051ac <main+0x2ac>)
 8004f98:	f006 fc1e 	bl	800b7d8 <puts>
        HAL_Delay(100);
 8004f9c:	2064      	movs	r0, #100	; 0x64
 8004f9e:	f001 faa7 	bl	80064f0 <HAL_Delay>
 8004fa2:	e00d      	b.n	8004fc0 <main+0xc0>
    } else {
        printf("BNO055 init failed\r\n");
 8004fa4:	4882      	ldr	r0, [pc, #520]	; (80051b0 <main+0x2b0>)
 8004fa6:	f006 fc17 	bl	800b7d8 <puts>
        printf("%s\n", bno055_err_str(err));
 8004faa:	4b7f      	ldr	r3, [pc, #508]	; (80051a8 <main+0x2a8>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fcf6 	bl	80039a0 <bno055_err_str>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f006 fc0e 	bl	800b7d8 <puts>
        Error_Handler();
 8004fbc:	f000 fcb2 	bl	8005924 <Error_Handler>
    }
    HAL_Delay(100);
 8004fc0:	2064      	movs	r0, #100	; 0x64
 8004fc2:	f001 fa95 	bl	80064f0 <HAL_Delay>
    err = bno055_set_unit(&bno, BNO_TEMP_UNIT_C, BNO_GYR_UNIT_DPS,
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4873      	ldr	r0, [pc, #460]	; (80051a0 <main+0x2a0>)
 8004fd2:	f7fe fb41 	bl	8003658 <bno055_set_unit>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b73      	ldr	r3, [pc, #460]	; (80051a8 <main+0x2a8>)
 8004fdc:	701a      	strb	r2, [r3, #0]
                          BNO_ACC_UNITSEL_M_S2, BNO_EUL_UNIT_DEG);
    if (err != BNO_OK) {
 8004fde:	4b72      	ldr	r3, [pc, #456]	; (80051a8 <main+0x2a8>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d006      	beq.n	8004ff4 <main+0xf4>
        printf("[BNO] Failed to set units. Err: %d\r\n", err);
 8004fe6:	4b70      	ldr	r3, [pc, #448]	; (80051a8 <main+0x2a8>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	4871      	ldr	r0, [pc, #452]	; (80051b4 <main+0x2b4>)
 8004fee:	f006 fb8d 	bl	800b70c <iprintf>
 8004ff2:	e002      	b.n	8004ffa <main+0xfa>
    } else {
        printf("[BNO] Unit selection success\r\n");
 8004ff4:	4870      	ldr	r0, [pc, #448]	; (80051b8 <main+0x2b8>)
 8004ff6:	f006 fbef 	bl	800b7d8 <puts>
    }
    bno055_euler(&bno, &euler);
 8004ffa:	4970      	ldr	r1, [pc, #448]	; (80051bc <main+0x2bc>)
 8004ffc:	4868      	ldr	r0, [pc, #416]	; (80051a0 <main+0x2a0>)
 8004ffe:	f7fe f811 	bl	8003024 <bno055_euler>
    HAL_Delay(100);
 8005002:	2064      	movs	r0, #100	; 0x64
 8005004:	f001 fa74 	bl	80064f0 <HAL_Delay>
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,4000); //left
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,4120); // right
//	HAL_Delay(2000);
//	stop();
//    while(1);
  initializeQueue(&myQueue);
 8005008:	486d      	ldr	r0, [pc, #436]	; (80051c0 <main+0x2c0>)
 800500a:	f000 fc90 	bl	800592e <initializeQueue>
  int arr[ROW][COL];

  init_arr(arr,ROW,COL);
 800500e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005012:	2210      	movs	r2, #16
 8005014:	2110      	movs	r1, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe feb0 	bl	8003d7c <init_arr>
  init_flood(arr,7,7);
 800501c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005020:	2207      	movs	r2, #7
 8005022:	2107      	movs	r1, #7
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe ff0f 	bl	8003e48 <init_flood>
  init_maze();
 800502a:	f7fe ffa3 	bl	8003f74 <init_maze>
  coord start={0,0,arr[0][0]};
 800502e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005032:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800503e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8005042:	2200      	movs	r2, #0
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800504a:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005054:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8005058:	609a      	str	r2, [r3, #8]
  coord dest={7,7,arr[7][7]};
 800505a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800505e:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8005062:	2207      	movs	r2, #7
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800506a:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 800506e:	2207      	movs	r2, #7
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005076:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800507a:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 800507e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005082:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8005086:	609a      	str	r2, [r3, #8]
  int angle_now=90;
 8005088:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800508c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8005090:	225a      	movs	r2, #90	; 0x5a
 8005092:	601a      	str	r2, [r3, #0]
  coord new_coord;
  new_coord = floodfill(start,dest,&arr,&angle_now);
 8005094:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005098:	f2a3 45d4 	subw	r5, r3, #1236	; 0x4d4
 800509c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80050a0:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80050a4:	f107 0220 	add.w	r2, r7, #32
 80050a8:	9204      	str	r2, [sp, #16]
 80050aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80050ae:	9203      	str	r2, [sp, #12]
 80050b0:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80050b4:	f2a2 42c4 	subw	r2, r2, #1220	; 0x4c4
 80050b8:	466c      	mov	r4, sp
 80050ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80050bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050c2:	4628      	mov	r0, r5
 80050c4:	f7ff fb98 	bl	80047f8 <floodfill>

  init_flood_start(&arr,0,0,1);
 80050c8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80050cc:	2301      	movs	r3, #1
 80050ce:	2200      	movs	r2, #0
 80050d0:	2100      	movs	r1, #0
 80050d2:	f7ff fced 	bl	8004ab0 <init_flood_start>
  new_coord=floodfill(new_coord,start,&arr,&angle_now);
 80050d6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80050da:	f2a3 46d4 	subw	r6, r3, #1236	; 0x4d4
 80050de:	463d      	mov	r5, r7
 80050e0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80050e4:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 80050e8:	f107 0220 	add.w	r2, r7, #32
 80050ec:	9204      	str	r2, [sp, #16]
 80050ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80050f2:	9203      	str	r2, [sp, #12]
 80050f4:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80050f8:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 80050fc:	466c      	mov	r4, sp
 80050fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8005100:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005106:	4628      	mov	r0, r5
 8005108:	f7ff fb76 	bl	80047f8 <floodfill>
 800510c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005110:	f5a3 629d 	sub.w	r2, r3, #1256	; 0x4e8
 8005114:	4633      	mov	r3, r6
 8005116:	ca07      	ldmia	r2, {r0, r1, r2}
 8005118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  init_flood_start(&arr,7,7,2);
 800511c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005120:	2302      	movs	r3, #2
 8005122:	2207      	movs	r2, #7
 8005124:	2107      	movs	r1, #7
 8005126:	f7ff fcc3 	bl	8004ab0 <init_flood_start>
  shorted_path_go(&arr,angle_now,new_coord,dest);
 800512a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800512e:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8005132:	681e      	ldr	r6, [r3, #0]
 8005134:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005138:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800513c:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8005140:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8005144:	f2a2 42c4 	subw	r2, r2, #1220	; 0x4c4
 8005148:	ac01      	add	r4, sp, #4
 800514a:	ca07      	ldmia	r2, {r0, r1, r2}
 800514c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	9200      	str	r2, [sp, #0]
 8005154:	cb0c      	ldmia	r3, {r2, r3}
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	f7ff fda3 	bl	8004ca4 <shorted_path_go>
  floodfill(start,dest,&arr,&angle_now);
 800515e:	463d      	mov	r5, r7
 8005160:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005164:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8005168:	f107 0220 	add.w	r2, r7, #32
 800516c:	9204      	str	r2, [sp, #16]
 800516e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005172:	9203      	str	r2, [sp, #12]
 8005174:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 8005178:	f2a2 42c4 	subw	r2, r2, #1220	; 0x4c4
 800517c:	466c      	mov	r4, sp
 800517e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005186:	4628      	mov	r0, r5
 8005188:	f7ff fb36 	bl	80047f8 <floodfill>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800518c:	e7fe      	b.n	800518c <main+0x28c>
 800518e:	bf00      	nop
 8005190:	20000344 	.word	0x20000344
 8005194:	2000038c 	.word	0x2000038c
 8005198:	200002fc 	.word	0x200002fc
 800519c:	200003d4 	.word	0x200003d4
 80051a0:	20004378 	.word	0x20004378
 80051a4:	200002a8 	.word	0x200002a8
 80051a8:	20004424 	.word	0x20004424
 80051ac:	0800f1a8 	.word	0x0800f1a8
 80051b0:	0800f1c0 	.word	0x0800f1c0
 80051b4:	0800f1d4 	.word	0x0800f1d4
 80051b8:	0800f1fc 	.word	0x0800f1fc
 80051bc:	20004428 	.word	0x20004428
 80051c0:	20001490 	.word	0x20001490

080051c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b096      	sub	sp, #88	; 0x58
 80051c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051ce:	2228      	movs	r2, #40	; 0x28
 80051d0:	2100      	movs	r1, #0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f006 fc00 	bl	800b9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051d8:	f107 031c 	add.w	r3, r7, #28
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	609a      	str	r2, [r3, #8]
 80051e4:	60da      	str	r2, [r3, #12]
 80051e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	605a      	str	r2, [r3, #4]
 80051f0:	609a      	str	r2, [r3, #8]
 80051f2:	60da      	str	r2, [r3, #12]
 80051f4:	611a      	str	r2, [r3, #16]
 80051f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005202:	2300      	movs	r3, #0
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005206:	2301      	movs	r3, #1
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800520a:	2302      	movs	r3, #2
 800520c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800520e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005212:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005218:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800521a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800521e:	4618      	mov	r0, r3
 8005220:	f003 fa8a 	bl	8008738 <HAL_RCC_OscConfig>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800522a:	f000 fb7b 	bl	8005924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800522e:	230f      	movs	r3, #15
 8005230:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005232:	2302      	movs	r3, #2
 8005234:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800523a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005240:	2300      	movs	r3, #0
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005244:	f107 031c 	add.w	r3, r7, #28
 8005248:	2102      	movs	r1, #2
 800524a:	4618      	mov	r0, r3
 800524c:	f003 fcf6 	bl	8008c3c <HAL_RCC_ClockConfig>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005256:	f000 fb65 	bl	8005924 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800525a:	2302      	movs	r3, #2
 800525c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	4618      	mov	r0, r3
 8005266:	f003 fe77 	bl	8008f58 <HAL_RCCEx_PeriphCLKConfig>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8005270:	f000 fb58 	bl	8005924 <Error_Handler>
  }
}
 8005274:	bf00      	nop
 8005276:	3758      	adds	r7, #88	; 0x58
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	605a      	str	r2, [r3, #4]
 800528a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800528c:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <MX_ADC1_Init+0x74>)
 800528e:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <MX_ADC1_Init+0x78>)
 8005290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <MX_ADC1_Init+0x74>)
 8005294:	2200      	movs	r2, #0
 8005296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005298:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <MX_ADC1_Init+0x74>)
 800529a:	2200      	movs	r2, #0
 800529c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <MX_ADC1_Init+0x74>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <MX_ADC1_Init+0x74>)
 80052a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80052aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052ac:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <MX_ADC1_Init+0x74>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80052b2:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <MX_ADC1_Init+0x74>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80052b8:	480d      	ldr	r0, [pc, #52]	; (80052f0 <MX_ADC1_Init+0x74>)
 80052ba:	f001 f93d 	bl	8006538 <HAL_ADC_Init>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80052c4:	f000 fb2e 	bl	8005924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80052d0:	2307      	movs	r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80052d4:	1d3b      	adds	r3, r7, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4805      	ldr	r0, [pc, #20]	; (80052f0 <MX_ADC1_Init+0x74>)
 80052da:	f001 fc03 	bl	8006ae4 <HAL_ADC_ConfigChannel>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80052e4:	f000 fb1e 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000218 	.word	0x20000218
 80052f4:	40012400 	.word	0x40012400

080052f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <MX_ADC2_Init+0x74>)
 800530a:	4a19      	ldr	r2, [pc, #100]	; (8005370 <MX_ADC2_Init+0x78>)
 800530c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <MX_ADC2_Init+0x74>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <MX_ADC2_Init+0x74>)
 8005316:	2200      	movs	r2, #0
 8005318:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <MX_ADC2_Init+0x74>)
 800531c:	2200      	movs	r2, #0
 800531e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005320:	4b12      	ldr	r3, [pc, #72]	; (800536c <MX_ADC2_Init+0x74>)
 8005322:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005326:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005328:	4b10      	ldr	r3, [pc, #64]	; (800536c <MX_ADC2_Init+0x74>)
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <MX_ADC2_Init+0x74>)
 8005330:	2201      	movs	r2, #1
 8005332:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005334:	480d      	ldr	r0, [pc, #52]	; (800536c <MX_ADC2_Init+0x74>)
 8005336:	f001 f8ff 	bl	8006538 <HAL_ADC_Init>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8005340:	f000 faf0 	bl	8005924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005344:	2301      	movs	r3, #1
 8005346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005348:	2301      	movs	r3, #1
 800534a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800534c:	2307      	movs	r3, #7
 800534e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4805      	ldr	r0, [pc, #20]	; (800536c <MX_ADC2_Init+0x74>)
 8005356:	f001 fbc5 	bl	8006ae4 <HAL_ADC_ConfigChannel>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8005360:	f000 fae0 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000248 	.word	0x20000248
 8005370:	40012800 	.word	0x40012800

08005374 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8005384:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <MX_ADC3_Init+0x74>)
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <MX_ADC3_Init+0x78>)
 8005388:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800538a:	4b17      	ldr	r3, [pc, #92]	; (80053e8 <MX_ADC3_Init+0x74>)
 800538c:	2200      	movs	r2, #0
 800538e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <MX_ADC3_Init+0x74>)
 8005392:	2200      	movs	r2, #0
 8005394:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <MX_ADC3_Init+0x74>)
 8005398:	2200      	movs	r2, #0
 800539a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800539c:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <MX_ADC3_Init+0x74>)
 800539e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80053a2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <MX_ADC3_Init+0x74>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <MX_ADC3_Init+0x74>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80053b0:	480d      	ldr	r0, [pc, #52]	; (80053e8 <MX_ADC3_Init+0x74>)
 80053b2:	f001 f8c1 	bl	8006538 <HAL_ADC_Init>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 80053bc:	f000 fab2 	bl	8005924 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80053c0:	230b      	movs	r3, #11
 80053c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80053c4:	2301      	movs	r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80053c8:	2306      	movs	r3, #6
 80053ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80053cc:	1d3b      	adds	r3, r7, #4
 80053ce:	4619      	mov	r1, r3
 80053d0:	4805      	ldr	r0, [pc, #20]	; (80053e8 <MX_ADC3_Init+0x74>)
 80053d2:	f001 fb87 	bl	8006ae4 <HAL_ADC_ConfigChannel>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 80053dc:	f000 faa2 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000278 	.word	0x20000278
 80053ec:	40013c00 	.word	0x40013c00

080053f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80053f4:	4b12      	ldr	r3, [pc, #72]	; (8005440 <MX_I2C1_Init+0x50>)
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <MX_I2C1_Init+0x54>)
 80053f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <MX_I2C1_Init+0x50>)
 80053fc:	4a12      	ldr	r2, [pc, #72]	; (8005448 <MX_I2C1_Init+0x58>)
 80053fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <MX_I2C1_Init+0x50>)
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005406:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <MX_I2C1_Init+0x50>)
 8005408:	2200      	movs	r2, #0
 800540a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <MX_I2C1_Init+0x50>)
 800540e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005412:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005414:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <MX_I2C1_Init+0x50>)
 8005416:	2200      	movs	r2, #0
 8005418:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <MX_I2C1_Init+0x50>)
 800541c:	2200      	movs	r2, #0
 800541e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <MX_I2C1_Init+0x50>)
 8005422:	2200      	movs	r2, #0
 8005424:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <MX_I2C1_Init+0x50>)
 8005428:	2200      	movs	r2, #0
 800542a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800542c:	4804      	ldr	r0, [pc, #16]	; (8005440 <MX_I2C1_Init+0x50>)
 800542e:	f001 ffbf 	bl	80073b0 <HAL_I2C_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005438:	f000 fa74 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800543c:	bf00      	nop
 800543e:	bd80      	pop	{r7, pc}
 8005440:	200002a8 	.word	0x200002a8
 8005444:	40005400 	.word	0x40005400
 8005448:	000186a0 	.word	0x000186a0

0800544c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b096      	sub	sp, #88	; 0x58
 8005450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800546a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	605a      	str	r2, [r3, #4]
 8005474:	609a      	str	r2, [r3, #8]
 8005476:	60da      	str	r2, [r3, #12]
 8005478:	611a      	str	r2, [r3, #16]
 800547a:	615a      	str	r2, [r3, #20]
 800547c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	2220      	movs	r2, #32
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f006 faa7 	bl	800b9d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800548a:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <MX_TIM1_Init+0x134>)
 800548c:	4a3d      	ldr	r2, [pc, #244]	; (8005584 <MX_TIM1_Init+0x138>)
 800548e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8005490:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <MX_TIM1_Init+0x134>)
 8005492:	2211      	movs	r2, #17
 8005494:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005496:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <MX_TIM1_Init+0x134>)
 8005498:	2200      	movs	r2, #0
 800549a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800549c:	4b38      	ldr	r3, [pc, #224]	; (8005580 <MX_TIM1_Init+0x134>)
 800549e:	f242 720f 	movw	r2, #9999	; 0x270f
 80054a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054a4:	4b36      	ldr	r3, [pc, #216]	; (8005580 <MX_TIM1_Init+0x134>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80054aa:	4b35      	ldr	r3, [pc, #212]	; (8005580 <MX_TIM1_Init+0x134>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b0:	4b33      	ldr	r3, [pc, #204]	; (8005580 <MX_TIM1_Init+0x134>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80054b6:	4832      	ldr	r0, [pc, #200]	; (8005580 <MX_TIM1_Init+0x134>)
 80054b8:	f003 fedc 	bl	8009274 <HAL_TIM_Base_Init>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80054c2:	f000 fa2f 	bl	8005924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80054cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80054d0:	4619      	mov	r1, r3
 80054d2:	482b      	ldr	r0, [pc, #172]	; (8005580 <MX_TIM1_Init+0x134>)
 80054d4:	f004 fb32 	bl	8009b3c <HAL_TIM_ConfigClockSource>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80054de:	f000 fa21 	bl	8005924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80054e2:	4827      	ldr	r0, [pc, #156]	; (8005580 <MX_TIM1_Init+0x134>)
 80054e4:	f003 ff15 	bl	8009312 <HAL_TIM_PWM_Init>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80054ee:	f000 fa19 	bl	8005924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054f2:	2300      	movs	r3, #0
 80054f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80054fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054fe:	4619      	mov	r1, r3
 8005500:	481f      	ldr	r0, [pc, #124]	; (8005580 <MX_TIM1_Init+0x134>)
 8005502:	f004 fef3 	bl	800a2ec <HAL_TIMEx_MasterConfigSynchronization>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800550c:	f000 fa0a 	bl	8005924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005510:	2360      	movs	r3, #96	; 0x60
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005518:	2300      	movs	r3, #0
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005520:	2300      	movs	r3, #0
 8005522:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005524:	2300      	movs	r3, #0
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800552c:	220c      	movs	r2, #12
 800552e:	4619      	mov	r1, r3
 8005530:	4813      	ldr	r0, [pc, #76]	; (8005580 <MX_TIM1_Init+0x134>)
 8005532:	f004 fa41 	bl	80099b8 <HAL_TIM_PWM_ConfigChannel>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800553c:	f000 f9f2 	bl	8005924 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005540:	2300      	movs	r3, #0
 8005542:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005544:	2300      	movs	r3, #0
 8005546:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005558:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4807      	ldr	r0, [pc, #28]	; (8005580 <MX_TIM1_Init+0x134>)
 8005564:	f004 ff2e 	bl	800a3c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800556e:	f000 f9d9 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005572:	4803      	ldr	r0, [pc, #12]	; (8005580 <MX_TIM1_Init+0x134>)
 8005574:	f000 fdac 	bl	80060d0 <HAL_TIM_MspPostInit>

}
 8005578:	bf00      	nop
 800557a:	3758      	adds	r7, #88	; 0x58
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200002fc 	.word	0x200002fc
 8005584:	40012c00 	.word	0x40012c00

08005588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	; 0x30
 800558c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800558e:	f107 030c 	add.w	r3, r7, #12
 8005592:	2224      	movs	r2, #36	; 0x24
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f006 fa1e 	bl	800b9d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800559c:	1d3b      	adds	r3, r7, #4
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80055a4:	4b21      	ldr	r3, [pc, #132]	; (800562c <MX_TIM2_Init+0xa4>)
 80055a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80055ac:	4b1f      	ldr	r3, [pc, #124]	; (800562c <MX_TIM2_Init+0xa4>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055b2:	4b1e      	ldr	r3, [pc, #120]	; (800562c <MX_TIM2_Init+0xa4>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80055b8:	4b1c      	ldr	r3, [pc, #112]	; (800562c <MX_TIM2_Init+0xa4>)
 80055ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055c0:	4b1a      	ldr	r3, [pc, #104]	; (800562c <MX_TIM2_Init+0xa4>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055c6:	4b19      	ldr	r3, [pc, #100]	; (800562c <MX_TIM2_Init+0xa4>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80055cc:	2303      	movs	r3, #3
 80055ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80055d0:	2302      	movs	r3, #2
 80055d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80055d4:	2301      	movs	r3, #1
 80055d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80055d8:	2300      	movs	r3, #0
 80055da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80055e0:	2302      	movs	r3, #2
 80055e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80055e4:	2301      	movs	r3, #1
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80055e8:	2300      	movs	r3, #0
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	4619      	mov	r1, r3
 80055f6:	480d      	ldr	r0, [pc, #52]	; (800562c <MX_TIM2_Init+0xa4>)
 80055f8:	f003 ff9e 	bl	8009538 <HAL_TIM_Encoder_Init>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005602:	f000 f98f 	bl	8005924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005606:	2300      	movs	r3, #0
 8005608:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4806      	ldr	r0, [pc, #24]	; (800562c <MX_TIM2_Init+0xa4>)
 8005614:	f004 fe6a 	bl	800a2ec <HAL_TIMEx_MasterConfigSynchronization>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800561e:	f000 f981 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005622:	bf00      	nop
 8005624:	3730      	adds	r7, #48	; 0x30
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000344 	.word	0x20000344

08005630 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08c      	sub	sp, #48	; 0x30
 8005634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	2224      	movs	r2, #36	; 0x24
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f006 f9ca 	bl	800b9d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005644:	1d3b      	adds	r3, r7, #4
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800564c:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <MX_TIM3_Init+0xa0>)
 800564e:	4a21      	ldr	r2, [pc, #132]	; (80056d4 <MX_TIM3_Init+0xa4>)
 8005650:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005652:	4b1f      	ldr	r3, [pc, #124]	; (80056d0 <MX_TIM3_Init+0xa0>)
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <MX_TIM3_Init+0xa0>)
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800565e:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <MX_TIM3_Init+0xa0>)
 8005660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005664:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005666:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <MX_TIM3_Init+0xa0>)
 8005668:	2200      	movs	r2, #0
 800566a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <MX_TIM3_Init+0xa0>)
 800566e:	2200      	movs	r2, #0
 8005670:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005672:	2303      	movs	r3, #3
 8005674:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005676:	2302      	movs	r3, #2
 8005678:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005686:	2302      	movs	r3, #2
 8005688:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800568a:	2301      	movs	r3, #1
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800568e:	2300      	movs	r3, #0
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005696:	f107 030c 	add.w	r3, r7, #12
 800569a:	4619      	mov	r1, r3
 800569c:	480c      	ldr	r0, [pc, #48]	; (80056d0 <MX_TIM3_Init+0xa0>)
 800569e:	f003 ff4b 	bl	8009538 <HAL_TIM_Encoder_Init>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80056a8:	f000 f93c 	bl	8005924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ac:	2300      	movs	r3, #0
 80056ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056b4:	1d3b      	adds	r3, r7, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4805      	ldr	r0, [pc, #20]	; (80056d0 <MX_TIM3_Init+0xa0>)
 80056ba:	f004 fe17 	bl	800a2ec <HAL_TIMEx_MasterConfigSynchronization>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80056c4:	f000 f92e 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056c8:	bf00      	nop
 80056ca:	3730      	adds	r7, #48	; 0x30
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	2000038c 	.word	0x2000038c
 80056d4:	40000400 	.word	0x40000400

080056d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	609a      	str	r2, [r3, #8]
 80056ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056ec:	f107 0320 	add.w	r3, r7, #32
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	60da      	str	r2, [r3, #12]
 8005702:	611a      	str	r2, [r3, #16]
 8005704:	615a      	str	r2, [r3, #20]
 8005706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <MX_TIM4_Init+0xe4>)
 800570a:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <MX_TIM4_Init+0xe8>)
 800570c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 800570e:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <MX_TIM4_Init+0xe4>)
 8005710:	2211      	movs	r2, #17
 8005712:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005714:	4b29      	ldr	r3, [pc, #164]	; (80057bc <MX_TIM4_Init+0xe4>)
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800571a:	4b28      	ldr	r3, [pc, #160]	; (80057bc <MX_TIM4_Init+0xe4>)
 800571c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005720:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005722:	4b26      	ldr	r3, [pc, #152]	; (80057bc <MX_TIM4_Init+0xe4>)
 8005724:	2200      	movs	r2, #0
 8005726:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005728:	4b24      	ldr	r3, [pc, #144]	; (80057bc <MX_TIM4_Init+0xe4>)
 800572a:	2200      	movs	r2, #0
 800572c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800572e:	4823      	ldr	r0, [pc, #140]	; (80057bc <MX_TIM4_Init+0xe4>)
 8005730:	f003 fda0 	bl	8009274 <HAL_TIM_Base_Init>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800573a:	f000 f8f3 	bl	8005924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800573e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005748:	4619      	mov	r1, r3
 800574a:	481c      	ldr	r0, [pc, #112]	; (80057bc <MX_TIM4_Init+0xe4>)
 800574c:	f004 f9f6 	bl	8009b3c <HAL_TIM_ConfigClockSource>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005756:	f000 f8e5 	bl	8005924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800575a:	4818      	ldr	r0, [pc, #96]	; (80057bc <MX_TIM4_Init+0xe4>)
 800575c:	f003 fdd9 	bl	8009312 <HAL_TIM_PWM_Init>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005766:	f000 f8dd 	bl	8005924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005772:	f107 0320 	add.w	r3, r7, #32
 8005776:	4619      	mov	r1, r3
 8005778:	4810      	ldr	r0, [pc, #64]	; (80057bc <MX_TIM4_Init+0xe4>)
 800577a:	f004 fdb7 	bl	800a2ec <HAL_TIMEx_MasterConfigSynchronization>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005784:	f000 f8ce 	bl	8005924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005788:	2360      	movs	r3, #96	; 0x60
 800578a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	220c      	movs	r2, #12
 800579c:	4619      	mov	r1, r3
 800579e:	4807      	ldr	r0, [pc, #28]	; (80057bc <MX_TIM4_Init+0xe4>)
 80057a0:	f004 f90a 	bl	80099b8 <HAL_TIM_PWM_ConfigChannel>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80057aa:	f000 f8bb 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80057ae:	4803      	ldr	r0, [pc, #12]	; (80057bc <MX_TIM4_Init+0xe4>)
 80057b0:	f000 fc8e 	bl	80060d0 <HAL_TIM_MspPostInit>

}
 80057b4:	bf00      	nop
 80057b6:	3738      	adds	r7, #56	; 0x38
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	200003d4 	.word	0x200003d4
 80057c0:	40000800 	.word	0x40000800

080057c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80057c8:	4b11      	ldr	r3, [pc, #68]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057ca:	4a12      	ldr	r2, [pc, #72]	; (8005814 <MX_USART1_UART_Init+0x50>)
 80057cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80057d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057d8:	2200      	movs	r2, #0
 80057da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057de:	2200      	movs	r2, #0
 80057e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057ea:	220c      	movs	r2, #12
 80057ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057ee:	4b08      	ldr	r3, [pc, #32]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057fa:	4805      	ldr	r0, [pc, #20]	; (8005810 <MX_USART1_UART_Init+0x4c>)
 80057fc:	f004 fe45 	bl	800a48a <HAL_UART_Init>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005806:	f000 f88d 	bl	8005924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800580a:	bf00      	nop
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	2000041c 	.word	0x2000041c
 8005814:	40013800 	.word	0x40013800

08005818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800581e:	f107 0310 	add.w	r3, r7, #16
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	609a      	str	r2, [r3, #8]
 800582a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800582c:	4b3a      	ldr	r3, [pc, #232]	; (8005918 <MX_GPIO_Init+0x100>)
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	4a39      	ldr	r2, [pc, #228]	; (8005918 <MX_GPIO_Init+0x100>)
 8005832:	f043 0320 	orr.w	r3, r3, #32
 8005836:	6193      	str	r3, [r2, #24]
 8005838:	4b37      	ldr	r3, [pc, #220]	; (8005918 <MX_GPIO_Init+0x100>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005844:	4b34      	ldr	r3, [pc, #208]	; (8005918 <MX_GPIO_Init+0x100>)
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	4a33      	ldr	r2, [pc, #204]	; (8005918 <MX_GPIO_Init+0x100>)
 800584a:	f043 0310 	orr.w	r3, r3, #16
 800584e:	6193      	str	r3, [r2, #24]
 8005850:	4b31      	ldr	r3, [pc, #196]	; (8005918 <MX_GPIO_Init+0x100>)
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800585c:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <MX_GPIO_Init+0x100>)
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <MX_GPIO_Init+0x100>)
 8005862:	f043 0304 	orr.w	r3, r3, #4
 8005866:	6193      	str	r3, [r2, #24]
 8005868:	4b2b      	ldr	r3, [pc, #172]	; (8005918 <MX_GPIO_Init+0x100>)
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005874:	4b28      	ldr	r3, [pc, #160]	; (8005918 <MX_GPIO_Init+0x100>)
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <MX_GPIO_Init+0x100>)
 800587a:	f043 0308 	orr.w	r3, r3, #8
 800587e:	6193      	str	r3, [r2, #24]
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <MX_GPIO_Init+0x100>)
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 800588c:	2200      	movs	r2, #0
 800588e:	2138      	movs	r1, #56	; 0x38
 8005890:	4822      	ldr	r0, [pc, #136]	; (800591c <MX_GPIO_Init+0x104>)
 8005892:	f001 fd74 	bl	800737e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 8005896:	2200      	movs	r2, #0
 8005898:	f64c 4133 	movw	r1, #52275	; 0xcc33
 800589c:	4820      	ldr	r0, [pc, #128]	; (8005920 <MX_GPIO_Init+0x108>)
 800589e:	f001 fd6e 	bl	800737e <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_Pin LED1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|STBY_Pin;
 80058a2:	2338      	movs	r3, #56	; 0x38
 80058a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058a6:	2301      	movs	r3, #1
 80058a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ae:	2302      	movs	r3, #2
 80058b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	4619      	mov	r1, r3
 80058b8:	4818      	ldr	r0, [pc, #96]	; (800591c <MX_GPIO_Init+0x104>)
 80058ba:	f001 fbb5 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI2_Pin AI1_Pin BI1_Pin BI2_Pin
                           LED5_Pin LED6_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 80058be:	f64c 4333 	movw	r3, #52275	; 0xcc33
 80058c2:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058c4:	2301      	movs	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058cc:	2302      	movs	r3, #2
 80058ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058d0:	f107 0310 	add.w	r3, r7, #16
 80058d4:	4619      	mov	r1, r3
 80058d6:	4812      	ldr	r0, [pc, #72]	; (8005920 <MX_GPIO_Init+0x108>)
 80058d8:	f001 fba6 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80058dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80058e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058e6:	2301      	movs	r3, #1
 80058e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058ea:	f107 0310 	add.w	r3, r7, #16
 80058ee:	4619      	mov	r1, r3
 80058f0:	480b      	ldr	r0, [pc, #44]	; (8005920 <MX_GPIO_Init+0x108>)
 80058f2:	f001 fb99 	bl	8007028 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Right_Pin Sensor_Left_Pin */
  GPIO_InitStruct.Pin = Sensor_Right_Pin|Sensor_Left_Pin;
 80058f6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80058fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005900:	2301      	movs	r3, #1
 8005902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005904:	f107 0310 	add.w	r3, r7, #16
 8005908:	4619      	mov	r1, r3
 800590a:	4804      	ldr	r0, [pc, #16]	; (800591c <MX_GPIO_Init+0x104>)
 800590c:	f001 fb8c 	bl	8007028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005910:	bf00      	nop
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40021000 	.word	0x40021000
 800591c:	40010800 	.word	0x40010800
 8005920:	40010c00 	.word	0x40010c00

08005924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005928:	b672      	cpsid	i
}
 800592a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800592c:	e7fe      	b.n	800592c <Error_Handler+0x8>

0800592e <initializeQueue>:
#include "queue.h"


void initializeQueue(Queue* q)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
    q->front = -1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800593c:	461a      	mov	r2, r3
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
    q->rear = 0;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800594c:	461a      	mov	r2, r3
 800594e:	2300      	movs	r3, #0
 8005950:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <isEmptyQueue>:

bool isEmptyQueue(Queue* q) { 
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
    return (q->front == q->rear - 1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800596c:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005976:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 800597a:	3b01      	subs	r3, #1
 800597c:	429a      	cmp	r2, r3
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	b2db      	uxtb	r3, r3
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <isFullQueue>:

bool isFullQueue(Queue* q) { 
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
    return (q->rear == MAX_SIZE); 
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800599e:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 80059a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <pushQueue>:

void pushQueue(Queue* q, coord value)
{
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	4638      	mov	r0, r7
 80059c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (isFullQueue(q)) {
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ffe2 	bl	8005990 <isFullQueue>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d11c      	bne.n	8005a0c <pushQueue+0x54>
        return;
    }
    q->items[q->rear] = value;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059d8:	f8d3 2ee4 	ldr.w	r2, [r3, #3812]	; 0xee4
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	461c      	mov	r4, r3
 80059ea:	463b      	mov	r3, r7
 80059ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    q->rear++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059fa:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 80059fe:	3301      	adds	r3, #1
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005a06:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
 8005a0a:	e000      	b.n	8005a0e <pushQueue+0x56>
        return;
 8005a0c:	bf00      	nop
}
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd90      	pop	{r4, r7, pc}

08005a14 <popQueue>:

void popQueue(Queue* q)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
    if (isEmptyQueue(q)) {
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff9e 	bl	800595e <isEmptyQueue>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <popQueue+0x2c>
        return;
    }
    q->front++;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a2e:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8005a32:	3301      	adds	r3, #1
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005a3a:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
 8005a3e:	e000      	b.n	8005a42 <popQueue+0x2e>
        return;
 8005a40:	bf00      	nop
}
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <peekQueue>:

coord peekQueue(Queue* q)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
    if (isEmptyQueue(q)) {
 8005a52:	6838      	ldr	r0, [r7, #0]
 8005a54:	f7ff ff83 	bl	800595e <isEmptyQueue>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00e      	beq.n	8005a7c <peekQueue+0x34>
        coord empty = {-1, -1, -1};
 8005a5e:	4a12      	ldr	r2, [pc, #72]	; (8005aa8 <peekQueue+0x60>)
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return empty;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	461c      	mov	r4, r3
 8005a6e:	f107 030c 	add.w	r3, r7, #12
 8005a72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return q->items[q->front + 1];
}
 8005a7a:	e010      	b.n	8005a9e <peekQueue+0x56>
    return q->items[q->front + 1];
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a82:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	18ca      	adds	r2, r1, r3
 8005a96:	4603      	mov	r3, r0
 8005a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd90      	pop	{r4, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	0800f21c 	.word	0x0800f21c

08005aac <sizeQueue>:


int sizeQueue(Queue* q){
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
    return q->rear - q->front - 1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005aba:	f8d3 2ee4 	ldr.w	r2, [r3, #3812]	; 0xee4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ac4:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	3b01      	subs	r3, #1
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr

08005ad6 <initializeQueueInt>:
#include "queue_int.h"


void initializeQueueInt(QueueInt* q)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
    q->front = -1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	f8c3 2fa0 	str.w	r2, [r3, #4000]	; 0xfa0
    q->rear = 0;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <isFullQueueInt>:

bool isEmptyQueueInt(QueueInt* q) { 
    return (q->front == q->rear - 1);
}

bool isFullQueueInt(QueueInt* q) { 
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
    return (q->rear == MAX_SIZE); 
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8005b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b0c:	bf0c      	ite	eq
 8005b0e:	2301      	moveq	r3, #1
 8005b10:	2300      	movne	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr

08005b1e <pushQueueInt>:

void pushQueueInt(QueueInt* q, int value)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
    if (isFullQueueInt(q)) {
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff ffe6 	bl	8005afa <isFullQueueInt>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <pushQueueInt+0x34>
        return;
    }
    q->items[q->rear] = value;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    q->rear++;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
 8005b50:	e000      	b.n	8005b54 <pushQueueInt+0x36>
        return;
 8005b52:	bf00      	nop
}
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <initializeStack>:
#include "stack.h"

void initializeStack(Stack *stack) {
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
    stack->top = -1;  
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6e:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <isEmptyStack>:

bool isEmptyStack(Stack *stack) {
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
    return stack->top == -1;  
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b8a:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <isFullStack>:

bool isFullStack(Stack *stack) {
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
    return stack->top == MAX_SIZE - 1;  
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bb2:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8005bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <pushStack>:

void pushStack(Stack *stack, coord value) {
 8005bce:	b590      	push	{r4, r7, lr}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (isFullStack(stack)) {
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7ff ffe1 	bl	8005ba4 <isFullStack>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d11c      	bne.n	8005c22 <pushStack+0x54>
        return;
    }
    stack->arr[++stack->top] = value;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bee:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005bfa:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c04:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 8005c08:	68f9      	ldr	r1, [r7, #12]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	461c      	mov	r4, r3
 8005c16:	463b      	mov	r3, r7
 8005c18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c20:	e000      	b.n	8005c24 <pushStack+0x56>
        return;
 8005c22:	bf00      	nop
}
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd90      	pop	{r4, r7, pc}
	...

08005c2c <popStack>:

coord popStack(Stack *stack) {
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
    if (isEmptyStack(stack)) {
 8005c36:	6838      	ldr	r0, [r7, #0]
 8005c38:	f7ff ffa0 	bl	8005b7c <isEmptyStack>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00e      	beq.n	8005c60 <popStack+0x34>
        coord error = {-1, -1, -1}; // or any other error indication
 8005c42:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <popStack+0x68>)
 8005c44:	f107 030c 	add.w	r3, r7, #12
 8005c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return error;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	461c      	mov	r4, r3
 8005c52:	f107 030c 	add.w	r3, r7, #12
 8005c56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return stack->arr[stack->top--];
}
 8005c5e:	e015      	b.n	8005c8c <popStack+0x60>
    return stack->arr[stack->top--];
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c66:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 8005c6a:	1e53      	subs	r3, r2, #1
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8005c72:	f8c1 3ee0 	str.w	r3, [r1, #3808]	; 0xee0
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	18ca      	adds	r2, r1, r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8005c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd90      	pop	{r4, r7, pc}
 8005c94:	0800f228 	.word	0x0800f228

08005c98 <peekStack>:

coord peekStack(Stack *stack) {
 8005c98:	b590      	push	{r4, r7, lr}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
    if (isEmptyStack(stack)) {
 8005ca2:	6838      	ldr	r0, [r7, #0]
 8005ca4:	f7ff ff6a 	bl	8005b7c <isEmptyStack>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00e      	beq.n	8005ccc <peekStack+0x34>
        coord error = {-1, -1, -1}; // or any other error indication
 8005cae:	4a11      	ldr	r2, [pc, #68]	; (8005cf4 <peekStack+0x5c>)
 8005cb0:	f107 030c 	add.w	r3, r7, #12
 8005cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return error;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	461c      	mov	r4, r3
 8005cbe:	f107 030c 	add.w	r3, r7, #12
 8005cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return stack->arr[stack->top];
}
 8005cca:	e00f      	b.n	8005cec <peekStack+0x54>
    return stack->arr[stack->top];
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cd2:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	18ca      	adds	r2, r1, r3
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ce8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd90      	pop	{r4, r7, pc}
 8005cf4:	0800f228 	.word	0x0800f228

08005cf8 <sizeStack>:
int sizeStack(Stack *stack){
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
    return stack->top + 1;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d06:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8005d0a:	3301      	adds	r3, #1
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <HAL_MspInit+0x5c>)
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <HAL_MspInit+0x5c>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6193      	str	r3, [r2, #24]
 8005d2a:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <HAL_MspInit+0x5c>)
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <HAL_MspInit+0x5c>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <HAL_MspInit+0x5c>)
 8005d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d40:	61d3      	str	r3, [r2, #28]
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <HAL_MspInit+0x5c>)
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_MspInit+0x60>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	4a04      	ldr	r2, [pc, #16]	; (8005d78 <HAL_MspInit+0x60>)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40010000 	.word	0x40010000

08005d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08c      	sub	sp, #48	; 0x30
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d84:	f107 0320 	add.w	r3, r7, #32
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a3c      	ldr	r2, [pc, #240]	; (8005e88 <HAL_ADC_MspInit+0x10c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d122      	bne.n	8005de2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	4a3a      	ldr	r2, [pc, #232]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005da6:	6193      	str	r3, [r2, #24]
 8005da8:	4b38      	ldr	r3, [pc, #224]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db4:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	4a34      	ldr	r2, [pc, #208]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005dba:	f043 0304 	orr.w	r3, r3, #4
 8005dbe:	6193      	str	r3, [r2, #24]
 8005dc0:	4b32      	ldr	r3, [pc, #200]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd4:	f107 0320 	add.w	r3, r7, #32
 8005dd8:	4619      	mov	r1, r3
 8005dda:	482d      	ldr	r0, [pc, #180]	; (8005e90 <HAL_ADC_MspInit+0x114>)
 8005ddc:	f001 f924 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005de0:	e04e      	b.n	8005e80 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2b      	ldr	r2, [pc, #172]	; (8005e94 <HAL_ADC_MspInit+0x118>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d122      	bne.n	8005e32 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005dec:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	4a26      	ldr	r2, [pc, #152]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005df6:	6193      	str	r3, [r2, #24]
 8005df8:	4b24      	ldr	r3, [pc, #144]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e04:	4b21      	ldr	r3, [pc, #132]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e0a:	f043 0304 	orr.w	r3, r3, #4
 8005e0e:	6193      	str	r3, [r2, #24]
 8005e10:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e20:	2303      	movs	r3, #3
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e24:	f107 0320 	add.w	r3, r7, #32
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4819      	ldr	r0, [pc, #100]	; (8005e90 <HAL_ADC_MspInit+0x114>)
 8005e2c:	f001 f8fc 	bl	8007028 <HAL_GPIO_Init>
}
 8005e30:	e026      	b.n	8005e80 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a18      	ldr	r2, [pc, #96]	; (8005e98 <HAL_ADC_MspInit+0x11c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d121      	bne.n	8005e80 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005e3c:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	4a12      	ldr	r2, [pc, #72]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e46:	6193      	str	r3, [r2, #24]
 8005e48:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e5a:	f043 0310 	orr.w	r3, r3, #16
 8005e5e:	6193      	str	r3, [r2, #24]
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <HAL_ADC_MspInit+0x110>)
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e70:	2303      	movs	r3, #3
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e74:	f107 0320 	add.w	r3, r7, #32
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4808      	ldr	r0, [pc, #32]	; (8005e9c <HAL_ADC_MspInit+0x120>)
 8005e7c:	f001 f8d4 	bl	8007028 <HAL_GPIO_Init>
}
 8005e80:	bf00      	nop
 8005e82:	3730      	adds	r7, #48	; 0x30
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40012400 	.word	0x40012400
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	40010800 	.word	0x40010800
 8005e94:	40012800 	.word	0x40012800
 8005e98:	40013c00 	.word	0x40013c00
 8005e9c:	40011000 	.word	0x40011000

08005ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ea8:	f107 0310 	add.w	r3, r7, #16
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <HAL_I2C_MspInit+0x70>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d123      	bne.n	8005f08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <HAL_I2C_MspInit+0x74>)
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <HAL_I2C_MspInit+0x74>)
 8005ec6:	f043 0308 	orr.w	r3, r3, #8
 8005eca:	6193      	str	r3, [r2, #24]
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_I2C_MspInit+0x74>)
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ed8:	23c0      	movs	r3, #192	; 0xc0
 8005eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005edc:	2312      	movs	r3, #18
 8005ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ee4:	f107 0310 	add.w	r3, r7, #16
 8005ee8:	4619      	mov	r1, r3
 8005eea:	480b      	ldr	r0, [pc, #44]	; (8005f18 <HAL_I2C_MspInit+0x78>)
 8005eec:	f001 f89c 	bl	8007028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ef0:	4b08      	ldr	r3, [pc, #32]	; (8005f14 <HAL_I2C_MspInit+0x74>)
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <HAL_I2C_MspInit+0x74>)
 8005ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005efa:	61d3      	str	r3, [r2, #28]
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_I2C_MspInit+0x74>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f08:	bf00      	nop
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40005400 	.word	0x40005400
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40010c00 	.word	0x40010c00

08005f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <HAL_TIM_Base_MspInit+0x58>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d10c      	bne.n	8005f48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <HAL_TIM_Base_MspInit+0x5c>)
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <HAL_TIM_Base_MspInit+0x5c>)
 8005f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f38:	6193      	str	r3, [r2, #24]
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <HAL_TIM_Base_MspInit+0x5c>)
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005f46:	e010      	b.n	8005f6a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0b      	ldr	r2, [pc, #44]	; (8005f7c <HAL_TIM_Base_MspInit+0x60>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d10b      	bne.n	8005f6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_TIM_Base_MspInit+0x5c>)
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <HAL_TIM_Base_MspInit+0x5c>)
 8005f58:	f043 0304 	orr.w	r3, r3, #4
 8005f5c:	61d3      	str	r3, [r2, #28]
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_TIM_Base_MspInit+0x5c>)
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	60bb      	str	r3, [r7, #8]
 8005f68:	68bb      	ldr	r3, [r7, #8]
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40000800 	.word	0x40000800

08005f80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f88:	f107 031c 	add.w	r3, r7, #28
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9e:	d157      	bne.n	8006050 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005fa0:	4b46      	ldr	r3, [pc, #280]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	4a45      	ldr	r2, [pc, #276]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	61d3      	str	r3, [r2, #28]
 8005fac:	4b43      	ldr	r3, [pc, #268]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb8:	4b40      	ldr	r3, [pc, #256]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	4a3f      	ldr	r2, [pc, #252]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	6193      	str	r3, [r2, #24]
 8005fc4:	4b3d      	ldr	r3, [pc, #244]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd0:	4b3a      	ldr	r3, [pc, #232]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	4a39      	ldr	r2, [pc, #228]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fd6:	f043 0308 	orr.w	r3, r3, #8
 8005fda:	6193      	str	r3, [r2, #24]
 8005fdc:	4b37      	ldr	r3, [pc, #220]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff6:	f107 031c 	add.w	r3, r7, #28
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4830      	ldr	r0, [pc, #192]	; (80060c0 <HAL_TIM_Encoder_MspInit+0x140>)
 8005ffe:	f001 f813 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006002:	2308      	movs	r3, #8
 8006004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006006:	2300      	movs	r3, #0
 8006008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800600e:	f107 031c 	add.w	r3, r7, #28
 8006012:	4619      	mov	r1, r3
 8006014:	482b      	ldr	r0, [pc, #172]	; (80060c4 <HAL_TIM_Encoder_MspInit+0x144>)
 8006016:	f001 f807 	bl	8007028 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800601a:	4b2b      	ldr	r3, [pc, #172]	; (80060c8 <HAL_TIM_Encoder_MspInit+0x148>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006038:	4a23      	ldr	r2, [pc, #140]	; (80060c8 <HAL_TIM_Encoder_MspInit+0x148>)
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	201c      	movs	r0, #28
 8006044:	f000 ffb9 	bl	8006fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006048:	201c      	movs	r0, #28
 800604a:	f000 ffd2 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800604e:	e030      	b.n	80060b2 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <HAL_TIM_Encoder_MspInit+0x14c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d12b      	bne.n	80060b2 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800605a:	4b18      	ldr	r3, [pc, #96]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	61d3      	str	r3, [r2, #28]
 8006066:	4b15      	ldr	r3, [pc, #84]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	4a11      	ldr	r2, [pc, #68]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8006078:	f043 0304 	orr.w	r3, r3, #4
 800607c:	6193      	str	r3, [r2, #24]
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <HAL_TIM_Encoder_MspInit+0x13c>)
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800608a:	23c0      	movs	r3, #192	; 0xc0
 800608c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006092:	2300      	movs	r3, #0
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006096:	f107 031c 	add.w	r3, r7, #28
 800609a:	4619      	mov	r1, r3
 800609c:	4808      	ldr	r0, [pc, #32]	; (80060c0 <HAL_TIM_Encoder_MspInit+0x140>)
 800609e:	f000 ffc3 	bl	8007028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80060a2:	2200      	movs	r2, #0
 80060a4:	2100      	movs	r1, #0
 80060a6:	201d      	movs	r0, #29
 80060a8:	f000 ff87 	bl	8006fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060ac:	201d      	movs	r0, #29
 80060ae:	f000 ffa0 	bl	8006ff2 <HAL_NVIC_EnableIRQ>
}
 80060b2:	bf00      	nop
 80060b4:	3730      	adds	r7, #48	; 0x30
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40010800 	.word	0x40010800
 80060c4:	40010c00 	.word	0x40010c00
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40000400 	.word	0x40000400

080060d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d8:	f107 0310 	add.w	r3, r7, #16
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <HAL_TIM_MspPostInit+0x98>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d119      	bne.n	8006124 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f0:	4b1e      	ldr	r3, [pc, #120]	; (800616c <HAL_TIM_MspPostInit+0x9c>)
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_TIM_MspPostInit+0x9c>)
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	6193      	str	r3, [r2, #24]
 80060fc:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_TIM_MspPostInit+0x9c>)
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800610c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610e:	2302      	movs	r3, #2
 8006110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006112:	2302      	movs	r3, #2
 8006114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006116:	f107 0310 	add.w	r3, r7, #16
 800611a:	4619      	mov	r1, r3
 800611c:	4814      	ldr	r0, [pc, #80]	; (8006170 <HAL_TIM_MspPostInit+0xa0>)
 800611e:	f000 ff83 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006122:	e01d      	b.n	8006160 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a12      	ldr	r2, [pc, #72]	; (8006174 <HAL_TIM_MspPostInit+0xa4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d118      	bne.n	8006160 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_TIM_MspPostInit+0x9c>)
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	4a0e      	ldr	r2, [pc, #56]	; (800616c <HAL_TIM_MspPostInit+0x9c>)
 8006134:	f043 0308 	orr.w	r3, r3, #8
 8006138:	6193      	str	r3, [r2, #24]
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_TIM_MspPostInit+0x9c>)
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614c:	2302      	movs	r3, #2
 800614e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006150:	2302      	movs	r3, #2
 8006152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006154:	f107 0310 	add.w	r3, r7, #16
 8006158:	4619      	mov	r1, r3
 800615a:	4807      	ldr	r0, [pc, #28]	; (8006178 <HAL_TIM_MspPostInit+0xa8>)
 800615c:	f000 ff64 	bl	8007028 <HAL_GPIO_Init>
}
 8006160:	bf00      	nop
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40021000 	.word	0x40021000
 8006170:	40010800 	.word	0x40010800
 8006174:	40000800 	.word	0x40000800
 8006178:	40010c00 	.word	0x40010c00

0800617c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006184:	f107 0310 	add.w	r3, r7, #16
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1c      	ldr	r2, [pc, #112]	; (8006208 <HAL_UART_MspInit+0x8c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d131      	bne.n	8006200 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800619c:	4b1b      	ldr	r3, [pc, #108]	; (800620c <HAL_UART_MspInit+0x90>)
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	4a1a      	ldr	r2, [pc, #104]	; (800620c <HAL_UART_MspInit+0x90>)
 80061a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061a6:	6193      	str	r3, [r2, #24]
 80061a8:	4b18      	ldr	r3, [pc, #96]	; (800620c <HAL_UART_MspInit+0x90>)
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061b4:	4b15      	ldr	r3, [pc, #84]	; (800620c <HAL_UART_MspInit+0x90>)
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4a14      	ldr	r2, [pc, #80]	; (800620c <HAL_UART_MspInit+0x90>)
 80061ba:	f043 0304 	orr.w	r3, r3, #4
 80061be:	6193      	str	r3, [r2, #24]
 80061c0:	4b12      	ldr	r3, [pc, #72]	; (800620c <HAL_UART_MspInit+0x90>)
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80061cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d2:	2302      	movs	r3, #2
 80061d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061d6:	2303      	movs	r3, #3
 80061d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061da:	f107 0310 	add.w	r3, r7, #16
 80061de:	4619      	mov	r1, r3
 80061e0:	480b      	ldr	r0, [pc, #44]	; (8006210 <HAL_UART_MspInit+0x94>)
 80061e2:	f000 ff21 	bl	8007028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80061e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f4:	f107 0310 	add.w	r3, r7, #16
 80061f8:	4619      	mov	r1, r3
 80061fa:	4805      	ldr	r0, [pc, #20]	; (8006210 <HAL_UART_MspInit+0x94>)
 80061fc:	f000 ff14 	bl	8007028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006200:	bf00      	nop
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40013800 	.word	0x40013800
 800620c:	40021000 	.word	0x40021000
 8006210:	40010800 	.word	0x40010800

08006214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006218:	e7fe      	b.n	8006218 <NMI_Handler+0x4>

0800621a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800621a:	b480      	push	{r7}
 800621c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800621e:	e7fe      	b.n	800621e <HardFault_Handler+0x4>

08006220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006224:	e7fe      	b.n	8006224 <MemManage_Handler+0x4>

08006226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006226:	b480      	push	{r7}
 8006228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800622a:	e7fe      	b.n	800622a <BusFault_Handler+0x4>

0800622c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006230:	e7fe      	b.n	8006230 <UsageFault_Handler+0x4>

08006232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006232:	b480      	push	{r7}
 8006234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800623e:	b480      	push	{r7}
 8006240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006242:	bf00      	nop
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800624a:	b480      	push	{r7}
 800624c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800624e:	bf00      	nop
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800625a:	f000 f92d 	bl	80064b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006268:	4802      	ldr	r0, [pc, #8]	; (8006274 <TIM2_IRQHandler+0x10>)
 800626a:	f003 fab5 	bl	80097d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800626e:	bf00      	nop
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000344 	.word	0x20000344

08006278 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800627c:	4802      	ldr	r0, [pc, #8]	; (8006288 <TIM3_IRQHandler+0x10>)
 800627e:	f003 faab 	bl	80097d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000038c 	.word	0x2000038c

0800628c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return 1;
 8006290:	2301      	movs	r3, #1
}
 8006292:	4618      	mov	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr

0800629a <_kill>:

int _kill(int pid, int sig)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80062a4:	f005 fbea 	bl	800ba7c <__errno>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2216      	movs	r2, #22
 80062ac:	601a      	str	r2, [r3, #0]
  return -1;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_exit>:

void _exit (int status)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80062c2:	f04f 31ff 	mov.w	r1, #4294967295
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff ffe7 	bl	800629a <_kill>
  while (1) {}    /* Make sure we hang here */
 80062cc:	e7fe      	b.n	80062cc <_exit+0x12>

080062ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	e00a      	b.n	80062f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80062e0:	f3af 8000 	nop.w
 80062e4:	4601      	mov	r1, r0
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	60ba      	str	r2, [r7, #8]
 80062ec:	b2ca      	uxtb	r2, r1
 80062ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	3301      	adds	r3, #1
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	dbf0      	blt.n	80062e0 <_read+0x12>
  }

  return len;
 80062fe:	687b      	ldr	r3, [r7, #4]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <_close>:
  }
  return len;
}

int _close(int file)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006314:	4618      	mov	r0, r3
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800632e:	605a      	str	r2, [r3, #4]
  return 0;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <_isatty>:

int _isatty(int file)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006344:	2301      	movs	r3, #1
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <_sbrk+0x5c>)
 8006372:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <_sbrk+0x60>)
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800637c:	4b13      	ldr	r3, [pc, #76]	; (80063cc <_sbrk+0x64>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <_sbrk+0x64>)
 8006386:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <_sbrk+0x68>)
 8006388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800638a:	4b10      	ldr	r3, [pc, #64]	; (80063cc <_sbrk+0x64>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	429a      	cmp	r2, r3
 8006396:	d207      	bcs.n	80063a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006398:	f005 fb70 	bl	800ba7c <__errno>
 800639c:	4603      	mov	r3, r0
 800639e:	220c      	movs	r2, #12
 80063a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295
 80063a6:	e009      	b.n	80063bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80063a8:	4b08      	ldr	r3, [pc, #32]	; (80063cc <_sbrk+0x64>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80063ae:	4b07      	ldr	r3, [pc, #28]	; (80063cc <_sbrk+0x64>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4413      	add	r3, r2
 80063b6:	4a05      	ldr	r2, [pc, #20]	; (80063cc <_sbrk+0x64>)
 80063b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	2000c000 	.word	0x2000c000
 80063c8:	00000400 	.word	0x00000400
 80063cc:	20004434 	.word	0x20004434
 80063d0:	20004588 	.word	0x20004588

080063d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80063d8:	bf00      	nop
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr

080063e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80063e0:	f7ff fff8 	bl	80063d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80063e4:	480b      	ldr	r0, [pc, #44]	; (8006414 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80063e6:	490c      	ldr	r1, [pc, #48]	; (8006418 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80063e8:	4a0c      	ldr	r2, [pc, #48]	; (800641c <LoopFillZerobss+0x16>)
  movs r3, #0
 80063ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063ec:	e002      	b.n	80063f4 <LoopCopyDataInit>

080063ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063f2:	3304      	adds	r3, #4

080063f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80063f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063f8:	d3f9      	bcc.n	80063ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80063fc:	4c09      	ldr	r4, [pc, #36]	; (8006424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006400:	e001      	b.n	8006406 <LoopFillZerobss>

08006402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006404:	3204      	adds	r2, #4

08006406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006408:	d3fb      	bcc.n	8006402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800640a:	f005 fb3d 	bl	800ba88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800640e:	f7fe fd77 	bl	8004f00 <main>
  bx lr
 8006412:	4770      	bx	lr
  ldr r0, =_sdata
 8006414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006418:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800641c:	0800f6c8 	.word	0x0800f6c8
  ldr r2, =_sbss
 8006420:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006424:	20004588 	.word	0x20004588

08006428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006428:	e7fe      	b.n	8006428 <ADC1_2_IRQHandler>
	...

0800642c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <HAL_Init+0x28>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a07      	ldr	r2, [pc, #28]	; (8006454 <HAL_Init+0x28>)
 8006436:	f043 0310 	orr.w	r3, r3, #16
 800643a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800643c:	2003      	movs	r0, #3
 800643e:	f000 fdb1 	bl	8006fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006442:	200f      	movs	r0, #15
 8006444:	f000 f808 	bl	8006458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006448:	f7ff fc66 	bl	8005d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40022000 	.word	0x40022000

08006458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <HAL_InitTick+0x54>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b12      	ldr	r3, [pc, #72]	; (80064b0 <HAL_InitTick+0x58>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	4619      	mov	r1, r3
 800646a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800646e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fdc9 	bl	800700e <HAL_SYSTICK_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e00e      	b.n	80064a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0f      	cmp	r3, #15
 800648a:	d80a      	bhi.n	80064a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800648c:	2200      	movs	r2, #0
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	f000 fd91 	bl	8006fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006498:	4a06      	ldr	r2, [pc, #24]	; (80064b4 <HAL_InitTick+0x5c>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000004 	.word	0x20000004
 80064b0:	2000000c 	.word	0x2000000c
 80064b4:	20000008 	.word	0x20000008

080064b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <HAL_IncTick+0x1c>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <HAL_IncTick+0x20>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4413      	add	r3, r2
 80064c8:	4a03      	ldr	r2, [pc, #12]	; (80064d8 <HAL_IncTick+0x20>)
 80064ca:	6013      	str	r3, [r2, #0]
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr
 80064d4:	2000000c 	.word	0x2000000c
 80064d8:	20004438 	.word	0x20004438

080064dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return uwTick;
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <HAL_GetTick+0x10>)
 80064e2:	681b      	ldr	r3, [r3, #0]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	20004438 	.word	0x20004438

080064f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064f8:	f7ff fff0 	bl	80064dc <HAL_GetTick>
 80064fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d005      	beq.n	8006516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <HAL_Delay+0x44>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006516:	bf00      	nop
 8006518:	f7ff ffe0 	bl	80064dc <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	429a      	cmp	r2, r3
 8006526:	d8f7      	bhi.n	8006518 <HAL_Delay+0x28>
  {
  }
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	2000000c 	.word	0x2000000c

08006538 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e0ce      	b.n	80066f8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fc00 	bl	8005d7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fc03 	bl	8006d88 <ADC_ConversionStop_Disable>
 8006582:	4603      	mov	r3, r0
 8006584:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 80a9 	bne.w	80066e6 <HAL_ADC_Init+0x1ae>
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 80a5 	bne.w	80066e6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065a4:	f023 0302 	bic.w	r3, r3, #2
 80065a8:	f043 0202 	orr.w	r2, r3, #2
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4951      	ldr	r1, [pc, #324]	; (8006700 <HAL_ADC_Init+0x1c8>)
 80065ba:	428b      	cmp	r3, r1
 80065bc:	d10a      	bne.n	80065d4 <HAL_ADC_Init+0x9c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80065c6:	d002      	beq.n	80065ce <HAL_ADC_Init+0x96>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	e004      	b.n	80065d8 <HAL_ADC_Init+0xa0>
 80065ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80065d2:	e001      	b.n	80065d8 <HAL_ADC_Init+0xa0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80065d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7b1b      	ldrb	r3, [r3, #12]
 80065de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80065e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f0:	d003      	beq.n	80065fa <HAL_ADC_Init+0xc2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d102      	bne.n	8006600 <HAL_ADC_Init+0xc8>
 80065fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065fe:	e000      	b.n	8006602 <HAL_ADC_Init+0xca>
 8006600:	2300      	movs	r3, #0
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	7d1b      	ldrb	r3, [r3, #20]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d119      	bne.n	8006644 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7b1b      	ldrb	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	3b01      	subs	r3, #1
 800661e:	035a      	lsls	r2, r3, #13
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	e00b      	b.n	8006644 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	f043 0201 	orr.w	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	4b29      	ldr	r3, [pc, #164]	; (8006704 <HAL_ADC_Init+0x1cc>)
 8006660:	4013      	ands	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	430b      	orrs	r3, r1
 800666a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d003      	beq.n	800667e <HAL_ADC_Init+0x146>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d104      	bne.n	8006688 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	3b01      	subs	r3, #1
 8006684:	051b      	lsls	r3, r3, #20
 8006686:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	430a      	orrs	r2, r1
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	4b19      	ldr	r3, [pc, #100]	; (8006708 <HAL_ADC_Init+0x1d0>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d10b      	bne.n	80066c4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80066c2:	e018      	b.n	80066f6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	f023 0312 	bic.w	r3, r3, #18
 80066cc:	f043 0210 	orr.w	r2, r3, #16
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	f043 0201 	orr.w	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80066e4:	e007      	b.n	80066f6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ea:	f043 0210 	orr.w	r2, r3, #16
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40013c00 	.word	0x40013c00
 8006704:	ffe1f7fd 	.word	0xffe1f7fd
 8006708:	ff1f0efe 	.word	0xff1f0efe

0800670c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <HAL_ADC_Start+0x1a>
 8006722:	2302      	movs	r3, #2
 8006724:	e098      	b.n	8006858 <HAL_ADC_Start+0x14c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fad0 	bl	8006cd4 <ADC_Enable>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 8087 	bne.w	800684e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a41      	ldr	r2, [pc, #260]	; (8006860 <HAL_ADC_Start+0x154>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d105      	bne.n	800676a <HAL_ADC_Start+0x5e>
 800675e:	4b41      	ldr	r3, [pc, #260]	; (8006864 <HAL_ADC_Start+0x158>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d115      	bne.n	8006796 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006780:	2b00      	cmp	r3, #0
 8006782:	d026      	beq.n	80067d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800678c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006794:	e01d      	b.n	80067d2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <HAL_ADC_Start+0x158>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d004      	beq.n	80067b6 <HAL_ADC_Start+0xaa>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a2b      	ldr	r2, [pc, #172]	; (8006860 <HAL_ADC_Start+0x154>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10d      	bne.n	80067d2 <HAL_ADC_Start+0xc6>
 80067b6:	4b2b      	ldr	r3, [pc, #172]	; (8006864 <HAL_ADC_Start+0x158>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80067ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d006      	beq.n	80067ec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	f023 0206 	bic.w	r2, r3, #6
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80067ea:	e002      	b.n	80067f2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0202 	mvn.w	r2, #2
 8006802:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800680e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006812:	d113      	bne.n	800683c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006818:	4a11      	ldr	r2, [pc, #68]	; (8006860 <HAL_ADC_Start+0x154>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d105      	bne.n	800682a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <HAL_ADC_Start+0x158>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006826:	2b00      	cmp	r3, #0
 8006828:	d108      	bne.n	800683c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006838:	609a      	str	r2, [r3, #8]
 800683a:	e00c      	b.n	8006856 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	e003      	b.n	8006856 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40012800 	.word	0x40012800
 8006864:	40012400 	.word	0x40012400

08006868 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_ADC_Stop+0x1a>
 800687e:	2302      	movs	r3, #2
 8006880:	e01a      	b.n	80068b8 <HAL_ADC_Stop+0x50>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa7c 	bl	8006d88 <ADC_ConversionStop_Disable>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	f043 0201 	orr.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80068c0:	b590      	push	{r4, r7, lr}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80068d6:	f7ff fe01 	bl	80064dc <HAL_GetTick>
 80068da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e0d3      	b.n	8006aaa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690c:	2b00      	cmp	r3, #0
 800690e:	d131      	bne.n	8006974 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800691a:	2b00      	cmp	r3, #0
 800691c:	d12a      	bne.n	8006974 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800691e:	e021      	b.n	8006964 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d01d      	beq.n	8006964 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d007      	beq.n	800693e <HAL_ADC_PollForConversion+0x7e>
 800692e:	f7ff fdd5 	bl	80064dc <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d212      	bcs.n	8006964 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10b      	bne.n	8006964 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f043 0204 	orr.w	r2, r3, #4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e0a2      	b.n	8006aaa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0d6      	beq.n	8006920 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8006972:	e070      	b.n	8006a56 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8006974:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <HAL_ADC_PollForConversion+0x1f4>)
 8006976:	681c      	ldr	r4, [r3, #0]
 8006978:	2002      	movs	r0, #2
 800697a:	f002 fba3 	bl	80090c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800697e:	4603      	mov	r3, r0
 8006980:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6919      	ldr	r1, [r3, #16]
 800698a:	4b4b      	ldr	r3, [pc, #300]	; (8006ab8 <HAL_ADC_PollForConversion+0x1f8>)
 800698c:	400b      	ands	r3, r1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d118      	bne.n	80069c4 <HAL_ADC_PollForConversion+0x104>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68d9      	ldr	r1, [r3, #12]
 8006998:	4b48      	ldr	r3, [pc, #288]	; (8006abc <HAL_ADC_PollForConversion+0x1fc>)
 800699a:	400b      	ands	r3, r1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d111      	bne.n	80069c4 <HAL_ADC_PollForConversion+0x104>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6919      	ldr	r1, [r3, #16]
 80069a6:	4b46      	ldr	r3, [pc, #280]	; (8006ac0 <HAL_ADC_PollForConversion+0x200>)
 80069a8:	400b      	ands	r3, r1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d108      	bne.n	80069c0 <HAL_ADC_PollForConversion+0x100>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68d9      	ldr	r1, [r3, #12]
 80069b4:	4b43      	ldr	r3, [pc, #268]	; (8006ac4 <HAL_ADC_PollForConversion+0x204>)
 80069b6:	400b      	ands	r3, r1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <HAL_ADC_PollForConversion+0x100>
 80069bc:	2314      	movs	r3, #20
 80069be:	e020      	b.n	8006a02 <HAL_ADC_PollForConversion+0x142>
 80069c0:	2329      	movs	r3, #41	; 0x29
 80069c2:	e01e      	b.n	8006a02 <HAL_ADC_PollForConversion+0x142>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6919      	ldr	r1, [r3, #16]
 80069ca:	4b3d      	ldr	r3, [pc, #244]	; (8006ac0 <HAL_ADC_PollForConversion+0x200>)
 80069cc:	400b      	ands	r3, r1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_ADC_PollForConversion+0x120>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68d9      	ldr	r1, [r3, #12]
 80069d8:	4b3a      	ldr	r3, [pc, #232]	; (8006ac4 <HAL_ADC_PollForConversion+0x204>)
 80069da:	400b      	ands	r3, r1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00d      	beq.n	80069fc <HAL_ADC_PollForConversion+0x13c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6919      	ldr	r1, [r3, #16]
 80069e6:	4b38      	ldr	r3, [pc, #224]	; (8006ac8 <HAL_ADC_PollForConversion+0x208>)
 80069e8:	400b      	ands	r3, r1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <HAL_ADC_PollForConversion+0x140>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68d9      	ldr	r1, [r3, #12]
 80069f4:	4b34      	ldr	r3, [pc, #208]	; (8006ac8 <HAL_ADC_PollForConversion+0x208>)
 80069f6:	400b      	ands	r3, r1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_ADC_PollForConversion+0x140>
 80069fc:	2354      	movs	r3, #84	; 0x54
 80069fe:	e000      	b.n	8006a02 <HAL_ADC_PollForConversion+0x142>
 8006a00:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8006a02:	fb02 f303 	mul.w	r3, r2, r3
 8006a06:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006a08:	e021      	b.n	8006a4e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d01a      	beq.n	8006a48 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <HAL_ADC_PollForConversion+0x168>
 8006a18:	f7ff fd60 	bl	80064dc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d20f      	bcs.n	8006a48 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d90b      	bls.n	8006a48 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	f043 0204 	orr.w	r2, r3, #4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e030      	b.n	8006aaa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d8d9      	bhi.n	8006a0a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f06f 0212 	mvn.w	r2, #18
 8006a5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006a76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006a7a:	d115      	bne.n	8006aa8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d111      	bne.n	8006aa8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d105      	bne.n	8006aa8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	f043 0201 	orr.w	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd90      	pop	{r4, r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000004 	.word	0x20000004
 8006ab8:	24924924 	.word	0x24924924
 8006abc:	00924924 	.word	0x00924924
 8006ac0:	12492492 	.word	0x12492492
 8006ac4:	00492492 	.word	0x00492492
 8006ac8:	00249249 	.word	0x00249249

08006acc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_ADC_ConfigChannel+0x20>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e0dc      	b.n	8006cbe <HAL_ADC_ConfigChannel+0x1da>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	d81c      	bhi.n	8006b4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	3b05      	subs	r3, #5
 8006b26:	221f      	movs	r2, #31
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	4019      	ands	r1, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3b05      	subs	r3, #5
 8006b40:	fa00 f203 	lsl.w	r2, r0, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8006b4c:	e03c      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b0c      	cmp	r3, #12
 8006b54:	d81c      	bhi.n	8006b90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	3b23      	subs	r3, #35	; 0x23
 8006b68:	221f      	movs	r2, #31
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	4019      	ands	r1, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	3b23      	subs	r3, #35	; 0x23
 8006b82:	fa00 f203 	lsl.w	r2, r0, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b8e:	e01b      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	3b41      	subs	r3, #65	; 0x41
 8006ba2:	221f      	movs	r2, #31
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	4019      	ands	r1, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	3b41      	subs	r3, #65	; 0x41
 8006bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b09      	cmp	r3, #9
 8006bce:	d91c      	bls.n	8006c0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4413      	add	r3, r2
 8006be0:	3b1e      	subs	r3, #30
 8006be2:	2207      	movs	r2, #7
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	43db      	mvns	r3, r3
 8006bea:	4019      	ands	r1, r3
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6898      	ldr	r0, [r3, #8]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3b1e      	subs	r3, #30
 8006bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e019      	b.n	8006c3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6919      	ldr	r1, [r3, #16]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4413      	add	r3, r2
 8006c1a:	2207      	movs	r2, #7
 8006c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c20:	43db      	mvns	r3, r3
 8006c22:	4019      	ands	r1, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6898      	ldr	r0, [r3, #8]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	fa00 f203 	lsl.w	r2, r0, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b10      	cmp	r3, #16
 8006c44:	d003      	beq.n	8006c4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006c4a:	2b11      	cmp	r3, #17
 8006c4c:	d132      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1d      	ldr	r2, [pc, #116]	; (8006cc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d125      	bne.n	8006ca4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d126      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006c74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d11a      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <HAL_ADC_ConfigChannel+0x1e8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	0c9a      	lsrs	r2, r3, #18
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006c94:	e002      	b.n	8006c9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f9      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x1b2>
 8006ca2:	e007      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	f043 0220 	orr.w	r2, r3, #32
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr
 8006cc8:	40012400 	.word	0x40012400
 8006ccc:	20000004 	.word	0x20000004
 8006cd0:	431bde83 	.word	0x431bde83

08006cd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d040      	beq.n	8006d74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0201 	orr.w	r2, r2, #1
 8006d00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d02:	4b1f      	ldr	r3, [pc, #124]	; (8006d80 <ADC_Enable+0xac>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1f      	ldr	r2, [pc, #124]	; (8006d84 <ADC_Enable+0xb0>)
 8006d08:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0c:	0c9b      	lsrs	r3, r3, #18
 8006d0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006d10:	e002      	b.n	8006d18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f9      	bne.n	8006d12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d1e:	f7ff fbdd 	bl	80064dc <HAL_GetTick>
 8006d22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006d24:	e01f      	b.n	8006d66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d26:	f7ff fbd9 	bl	80064dc <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d918      	bls.n	8006d66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d011      	beq.n	8006d66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	f043 0210 	orr.w	r2, r3, #16
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d52:	f043 0201 	orr.w	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e007      	b.n	8006d76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d1d8      	bne.n	8006d26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000004 	.word	0x20000004
 8006d84:	431bde83 	.word	0x431bde83

08006d88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d12e      	bne.n	8006e00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0201 	bic.w	r2, r2, #1
 8006db0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006db2:	f7ff fb93 	bl	80064dc <HAL_GetTick>
 8006db6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006db8:	e01b      	b.n	8006df2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006dba:	f7ff fb8f 	bl	80064dc <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d914      	bls.n	8006df2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10d      	bne.n	8006df2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	f043 0210 	orr.w	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	f043 0201 	orr.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e007      	b.n	8006e02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d0dc      	beq.n	8006dba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e3e:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	60d3      	str	r3, [r2, #12]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000ed00 	.word	0xe000ed00

08006e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <__NVIC_GetPriorityGrouping+0x18>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f003 0307 	and.w	r3, r3, #7
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	db0b      	blt.n	8006e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	f003 021f 	and.w	r2, r3, #31
 8006e88:	4906      	ldr	r1, [pc, #24]	; (8006ea4 <__NVIC_EnableIRQ+0x34>)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	2001      	movs	r0, #1
 8006e92:	fa00 f202 	lsl.w	r2, r0, r2
 8006e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr
 8006ea4:	e000e100 	.word	0xe000e100

08006ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	db0a      	blt.n	8006ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	490c      	ldr	r1, [pc, #48]	; (8006ef4 <__NVIC_SetPriority+0x4c>)
 8006ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec6:	0112      	lsls	r2, r2, #4
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	440b      	add	r3, r1
 8006ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ed0:	e00a      	b.n	8006ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	4908      	ldr	r1, [pc, #32]	; (8006ef8 <__NVIC_SetPriority+0x50>)
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	3b04      	subs	r3, #4
 8006ee0:	0112      	lsls	r2, r2, #4
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	440b      	add	r3, r1
 8006ee6:	761a      	strb	r2, [r3, #24]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	e000e100 	.word	0xe000e100
 8006ef8:	e000ed00 	.word	0xe000ed00

08006efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b089      	sub	sp, #36	; 0x24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f1c3 0307 	rsb	r3, r3, #7
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	bf28      	it	cs
 8006f1a:	2304      	movcs	r3, #4
 8006f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	3304      	adds	r3, #4
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d902      	bls.n	8006f2c <NVIC_EncodePriority+0x30>
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3b03      	subs	r3, #3
 8006f2a:	e000      	b.n	8006f2e <NVIC_EncodePriority+0x32>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f30:	f04f 32ff 	mov.w	r2, #4294967295
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	43da      	mvns	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	401a      	ands	r2, r3
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f44:	f04f 31ff 	mov.w	r1, #4294967295
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4e:	43d9      	mvns	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f54:	4313      	orrs	r3, r2
         );
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3724      	adds	r7, #36	; 0x24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f70:	d301      	bcc.n	8006f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f72:	2301      	movs	r3, #1
 8006f74:	e00f      	b.n	8006f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f76:	4a0a      	ldr	r2, [pc, #40]	; (8006fa0 <SysTick_Config+0x40>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f7e:	210f      	movs	r1, #15
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	f7ff ff90 	bl	8006ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <SysTick_Config+0x40>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f8e:	4b04      	ldr	r3, [pc, #16]	; (8006fa0 <SysTick_Config+0x40>)
 8006f90:	2207      	movs	r2, #7
 8006f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	e000e010 	.word	0xe000e010

08006fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff ff2d 	bl	8006e0c <__NVIC_SetPriorityGrouping>
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006fcc:	f7ff ff42 	bl	8006e54 <__NVIC_GetPriorityGrouping>
 8006fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	68b9      	ldr	r1, [r7, #8]
 8006fd6:	6978      	ldr	r0, [r7, #20]
 8006fd8:	f7ff ff90 	bl	8006efc <NVIC_EncodePriority>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff ff5f 	bl	8006ea8 <__NVIC_SetPriority>
}
 8006fea:	bf00      	nop
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff ff35 	bl	8006e70 <__NVIC_EnableIRQ>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff ffa2 	bl	8006f60 <SysTick_Config>
 800701c:	4603      	mov	r3, r0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007028:	b480      	push	{r7}
 800702a:	b08b      	sub	sp, #44	; 0x2c
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007032:	2300      	movs	r3, #0
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007036:	2300      	movs	r3, #0
 8007038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800703a:	e179      	b.n	8007330 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800703c:	2201      	movs	r2, #1
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	4013      	ands	r3, r2
 800704e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	429a      	cmp	r2, r3
 8007056:	f040 8168 	bne.w	800732a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	4a96      	ldr	r2, [pc, #600]	; (80072b8 <HAL_GPIO_Init+0x290>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d05e      	beq.n	8007122 <HAL_GPIO_Init+0xfa>
 8007064:	4a94      	ldr	r2, [pc, #592]	; (80072b8 <HAL_GPIO_Init+0x290>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d875      	bhi.n	8007156 <HAL_GPIO_Init+0x12e>
 800706a:	4a94      	ldr	r2, [pc, #592]	; (80072bc <HAL_GPIO_Init+0x294>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d058      	beq.n	8007122 <HAL_GPIO_Init+0xfa>
 8007070:	4a92      	ldr	r2, [pc, #584]	; (80072bc <HAL_GPIO_Init+0x294>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d86f      	bhi.n	8007156 <HAL_GPIO_Init+0x12e>
 8007076:	4a92      	ldr	r2, [pc, #584]	; (80072c0 <HAL_GPIO_Init+0x298>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d052      	beq.n	8007122 <HAL_GPIO_Init+0xfa>
 800707c:	4a90      	ldr	r2, [pc, #576]	; (80072c0 <HAL_GPIO_Init+0x298>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d869      	bhi.n	8007156 <HAL_GPIO_Init+0x12e>
 8007082:	4a90      	ldr	r2, [pc, #576]	; (80072c4 <HAL_GPIO_Init+0x29c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d04c      	beq.n	8007122 <HAL_GPIO_Init+0xfa>
 8007088:	4a8e      	ldr	r2, [pc, #568]	; (80072c4 <HAL_GPIO_Init+0x29c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d863      	bhi.n	8007156 <HAL_GPIO_Init+0x12e>
 800708e:	4a8e      	ldr	r2, [pc, #568]	; (80072c8 <HAL_GPIO_Init+0x2a0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d046      	beq.n	8007122 <HAL_GPIO_Init+0xfa>
 8007094:	4a8c      	ldr	r2, [pc, #560]	; (80072c8 <HAL_GPIO_Init+0x2a0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d85d      	bhi.n	8007156 <HAL_GPIO_Init+0x12e>
 800709a:	2b12      	cmp	r3, #18
 800709c:	d82a      	bhi.n	80070f4 <HAL_GPIO_Init+0xcc>
 800709e:	2b12      	cmp	r3, #18
 80070a0:	d859      	bhi.n	8007156 <HAL_GPIO_Init+0x12e>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <HAL_GPIO_Init+0x80>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	08007123 	.word	0x08007123
 80070ac:	080070fd 	.word	0x080070fd
 80070b0:	0800710f 	.word	0x0800710f
 80070b4:	08007151 	.word	0x08007151
 80070b8:	08007157 	.word	0x08007157
 80070bc:	08007157 	.word	0x08007157
 80070c0:	08007157 	.word	0x08007157
 80070c4:	08007157 	.word	0x08007157
 80070c8:	08007157 	.word	0x08007157
 80070cc:	08007157 	.word	0x08007157
 80070d0:	08007157 	.word	0x08007157
 80070d4:	08007157 	.word	0x08007157
 80070d8:	08007157 	.word	0x08007157
 80070dc:	08007157 	.word	0x08007157
 80070e0:	08007157 	.word	0x08007157
 80070e4:	08007157 	.word	0x08007157
 80070e8:	08007157 	.word	0x08007157
 80070ec:	08007105 	.word	0x08007105
 80070f0:	08007119 	.word	0x08007119
 80070f4:	4a75      	ldr	r2, [pc, #468]	; (80072cc <HAL_GPIO_Init+0x2a4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80070fa:	e02c      	b.n	8007156 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	623b      	str	r3, [r7, #32]
          break;
 8007102:	e029      	b.n	8007158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	3304      	adds	r3, #4
 800710a:	623b      	str	r3, [r7, #32]
          break;
 800710c:	e024      	b.n	8007158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	3308      	adds	r3, #8
 8007114:	623b      	str	r3, [r7, #32]
          break;
 8007116:	e01f      	b.n	8007158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	330c      	adds	r3, #12
 800711e:	623b      	str	r3, [r7, #32]
          break;
 8007120:	e01a      	b.n	8007158 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800712a:	2304      	movs	r3, #4
 800712c:	623b      	str	r3, [r7, #32]
          break;
 800712e:	e013      	b.n	8007158 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d105      	bne.n	8007144 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007138:	2308      	movs	r3, #8
 800713a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	611a      	str	r2, [r3, #16]
          break;
 8007142:	e009      	b.n	8007158 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007144:	2308      	movs	r3, #8
 8007146:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	615a      	str	r2, [r3, #20]
          break;
 800714e:	e003      	b.n	8007158 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007150:	2300      	movs	r3, #0
 8007152:	623b      	str	r3, [r7, #32]
          break;
 8007154:	e000      	b.n	8007158 <HAL_GPIO_Init+0x130>
          break;
 8007156:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	d801      	bhi.n	8007162 <HAL_GPIO_Init+0x13a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	e001      	b.n	8007166 <HAL_GPIO_Init+0x13e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2bff      	cmp	r3, #255	; 0xff
 800716c:	d802      	bhi.n	8007174 <HAL_GPIO_Init+0x14c>
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	e002      	b.n	800717a <HAL_GPIO_Init+0x152>
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	3b08      	subs	r3, #8
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	210f      	movs	r1, #15
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	fa01 f303 	lsl.w	r3, r1, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	401a      	ands	r2, r3
 800718c:	6a39      	ldr	r1, [r7, #32]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	fa01 f303 	lsl.w	r3, r1, r3
 8007194:	431a      	orrs	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80c1 	beq.w	800732a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80071a8:	4b49      	ldr	r3, [pc, #292]	; (80072d0 <HAL_GPIO_Init+0x2a8>)
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	4a48      	ldr	r2, [pc, #288]	; (80072d0 <HAL_GPIO_Init+0x2a8>)
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	6193      	str	r3, [r2, #24]
 80071b4:	4b46      	ldr	r3, [pc, #280]	; (80072d0 <HAL_GPIO_Init+0x2a8>)
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80071c0:	4a44      	ldr	r2, [pc, #272]	; (80072d4 <HAL_GPIO_Init+0x2ac>)
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	3302      	adds	r3, #2
 80071c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	220f      	movs	r2, #15
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	43db      	mvns	r3, r3
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4013      	ands	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a3c      	ldr	r2, [pc, #240]	; (80072d8 <HAL_GPIO_Init+0x2b0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d01f      	beq.n	800722c <HAL_GPIO_Init+0x204>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a3b      	ldr	r2, [pc, #236]	; (80072dc <HAL_GPIO_Init+0x2b4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d019      	beq.n	8007228 <HAL_GPIO_Init+0x200>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a3a      	ldr	r2, [pc, #232]	; (80072e0 <HAL_GPIO_Init+0x2b8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_GPIO_Init+0x1fc>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a39      	ldr	r2, [pc, #228]	; (80072e4 <HAL_GPIO_Init+0x2bc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00d      	beq.n	8007220 <HAL_GPIO_Init+0x1f8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a38      	ldr	r2, [pc, #224]	; (80072e8 <HAL_GPIO_Init+0x2c0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d007      	beq.n	800721c <HAL_GPIO_Init+0x1f4>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a37      	ldr	r2, [pc, #220]	; (80072ec <HAL_GPIO_Init+0x2c4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d101      	bne.n	8007218 <HAL_GPIO_Init+0x1f0>
 8007214:	2305      	movs	r3, #5
 8007216:	e00a      	b.n	800722e <HAL_GPIO_Init+0x206>
 8007218:	2306      	movs	r3, #6
 800721a:	e008      	b.n	800722e <HAL_GPIO_Init+0x206>
 800721c:	2304      	movs	r3, #4
 800721e:	e006      	b.n	800722e <HAL_GPIO_Init+0x206>
 8007220:	2303      	movs	r3, #3
 8007222:	e004      	b.n	800722e <HAL_GPIO_Init+0x206>
 8007224:	2302      	movs	r3, #2
 8007226:	e002      	b.n	800722e <HAL_GPIO_Init+0x206>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <HAL_GPIO_Init+0x206>
 800722c:	2300      	movs	r3, #0
 800722e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007230:	f002 0203 	and.w	r2, r2, #3
 8007234:	0092      	lsls	r2, r2, #2
 8007236:	4093      	lsls	r3, r2
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800723e:	4925      	ldr	r1, [pc, #148]	; (80072d4 <HAL_GPIO_Init+0x2ac>)
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	3302      	adds	r3, #2
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d006      	beq.n	8007266 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007258:	4b25      	ldr	r3, [pc, #148]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	4924      	ldr	r1, [pc, #144]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	4313      	orrs	r3, r2
 8007262:	608b      	str	r3, [r1, #8]
 8007264:	e006      	b.n	8007274 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007266:	4b22      	ldr	r3, [pc, #136]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	43db      	mvns	r3, r3
 800726e:	4920      	ldr	r1, [pc, #128]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 8007270:	4013      	ands	r3, r2
 8007272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d006      	beq.n	800728e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007280:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	491a      	ldr	r1, [pc, #104]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	4313      	orrs	r3, r2
 800728a:	60cb      	str	r3, [r1, #12]
 800728c:	e006      	b.n	800729c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800728e:	4b18      	ldr	r3, [pc, #96]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	43db      	mvns	r3, r3
 8007296:	4916      	ldr	r1, [pc, #88]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 8007298:	4013      	ands	r3, r2
 800729a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d025      	beq.n	80072f4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	4910      	ldr	r1, [pc, #64]	; (80072f0 <HAL_GPIO_Init+0x2c8>)
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	604b      	str	r3, [r1, #4]
 80072b4:	e025      	b.n	8007302 <HAL_GPIO_Init+0x2da>
 80072b6:	bf00      	nop
 80072b8:	10320000 	.word	0x10320000
 80072bc:	10310000 	.word	0x10310000
 80072c0:	10220000 	.word	0x10220000
 80072c4:	10210000 	.word	0x10210000
 80072c8:	10120000 	.word	0x10120000
 80072cc:	10110000 	.word	0x10110000
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40010000 	.word	0x40010000
 80072d8:	40010800 	.word	0x40010800
 80072dc:	40010c00 	.word	0x40010c00
 80072e0:	40011000 	.word	0x40011000
 80072e4:	40011400 	.word	0x40011400
 80072e8:	40011800 	.word	0x40011800
 80072ec:	40011c00 	.word	0x40011c00
 80072f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <HAL_GPIO_Init+0x324>)
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	43db      	mvns	r3, r3
 80072fc:	4913      	ldr	r1, [pc, #76]	; (800734c <HAL_GPIO_Init+0x324>)
 80072fe:	4013      	ands	r3, r2
 8007300:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d006      	beq.n	800731c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <HAL_GPIO_Init+0x324>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	490e      	ldr	r1, [pc, #56]	; (800734c <HAL_GPIO_Init+0x324>)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	4313      	orrs	r3, r2
 8007318:	600b      	str	r3, [r1, #0]
 800731a:	e006      	b.n	800732a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_GPIO_Init+0x324>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	43db      	mvns	r3, r3
 8007324:	4909      	ldr	r1, [pc, #36]	; (800734c <HAL_GPIO_Init+0x324>)
 8007326:	4013      	ands	r3, r2
 8007328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	3301      	adds	r3, #1
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	fa22 f303 	lsr.w	r3, r2, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	f47f ae7e 	bne.w	800703c <HAL_GPIO_Init+0x14>
  }
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	372c      	adds	r7, #44	; 0x2c
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr
 800734c:	40010400 	.word	0x40010400

08007350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	887b      	ldrh	r3, [r7, #2]
 8007362:	4013      	ands	r3, r2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
 800736c:	e001      	b.n	8007372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	bc80      	pop	{r7}
 800737c:	4770      	bx	lr

0800737e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	807b      	strh	r3, [r7, #2]
 800738a:	4613      	mov	r3, r2
 800738c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800738e:	787b      	ldrb	r3, [r7, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007394:	887a      	ldrh	r2, [r7, #2]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800739a:	e003      	b.n	80073a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800739c:	887b      	ldrh	r3, [r7, #2]
 800739e:	041a      	lsls	r2, r3, #16
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	611a      	str	r2, [r3, #16]
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr
	...

080073b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e12b      	b.n	800761a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fe fd62 	bl	8005ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2224      	movs	r2, #36	; 0x24
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007414:	f001 fd5a 	bl	8008ecc <HAL_RCC_GetPCLK1Freq>
 8007418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	4a81      	ldr	r2, [pc, #516]	; (8007624 <HAL_I2C_Init+0x274>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d807      	bhi.n	8007434 <HAL_I2C_Init+0x84>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a80      	ldr	r2, [pc, #512]	; (8007628 <HAL_I2C_Init+0x278>)
 8007428:	4293      	cmp	r3, r2
 800742a:	bf94      	ite	ls
 800742c:	2301      	movls	r3, #1
 800742e:	2300      	movhi	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	e006      	b.n	8007442 <HAL_I2C_Init+0x92>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4a7d      	ldr	r2, [pc, #500]	; (800762c <HAL_I2C_Init+0x27c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	bf94      	ite	ls
 800743c:	2301      	movls	r3, #1
 800743e:	2300      	movhi	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e0e7      	b.n	800761a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4a78      	ldr	r2, [pc, #480]	; (8007630 <HAL_I2C_Init+0x280>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	0c9b      	lsrs	r3, r3, #18
 8007454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	4a6a      	ldr	r2, [pc, #424]	; (8007624 <HAL_I2C_Init+0x274>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d802      	bhi.n	8007484 <HAL_I2C_Init+0xd4>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	3301      	adds	r3, #1
 8007482:	e009      	b.n	8007498 <HAL_I2C_Init+0xe8>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	4a69      	ldr	r2, [pc, #420]	; (8007634 <HAL_I2C_Init+0x284>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	099b      	lsrs	r3, r3, #6
 8007496:	3301      	adds	r3, #1
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	430b      	orrs	r3, r1
 800749e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80074aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	495c      	ldr	r1, [pc, #368]	; (8007624 <HAL_I2C_Init+0x274>)
 80074b4:	428b      	cmp	r3, r1
 80074b6:	d819      	bhi.n	80074ec <HAL_I2C_Init+0x13c>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	1e59      	subs	r1, r3, #1
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80074c6:	1c59      	adds	r1, r3, #1
 80074c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80074cc:	400b      	ands	r3, r1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <HAL_I2C_Init+0x138>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	1e59      	subs	r1, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80074e0:	3301      	adds	r3, #1
 80074e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e6:	e051      	b.n	800758c <HAL_I2C_Init+0x1dc>
 80074e8:	2304      	movs	r3, #4
 80074ea:	e04f      	b.n	800758c <HAL_I2C_Init+0x1dc>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d111      	bne.n	8007518 <HAL_I2C_Init+0x168>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1e58      	subs	r0, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6859      	ldr	r1, [r3, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	440b      	add	r3, r1
 8007502:	fbb0 f3f3 	udiv	r3, r0, r3
 8007506:	3301      	adds	r3, #1
 8007508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e012      	b.n	800753e <HAL_I2C_Init+0x18e>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1e58      	subs	r0, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6859      	ldr	r1, [r3, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	0099      	lsls	r1, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	fbb0 f3f3 	udiv	r3, r0, r3
 800752e:	3301      	adds	r3, #1
 8007530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007534:	2b00      	cmp	r3, #0
 8007536:	bf0c      	ite	eq
 8007538:	2301      	moveq	r3, #1
 800753a:	2300      	movne	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <HAL_I2C_Init+0x196>
 8007542:	2301      	movs	r3, #1
 8007544:	e022      	b.n	800758c <HAL_I2C_Init+0x1dc>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10e      	bne.n	800756c <HAL_I2C_Init+0x1bc>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1e58      	subs	r0, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6859      	ldr	r1, [r3, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	440b      	add	r3, r1
 800755c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007560:	3301      	adds	r3, #1
 8007562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756a:	e00f      	b.n	800758c <HAL_I2C_Init+0x1dc>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	1e58      	subs	r0, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6859      	ldr	r1, [r3, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	0099      	lsls	r1, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007582:	3301      	adds	r3, #1
 8007584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	6809      	ldr	r1, [r1, #0]
 8007590:	4313      	orrs	r3, r2
 8007592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69da      	ldr	r2, [r3, #28]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80075ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6911      	ldr	r1, [r2, #16]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	68d2      	ldr	r2, [r2, #12]
 80075c6:	4311      	orrs	r1, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	000186a0 	.word	0x000186a0
 8007628:	001e847f 	.word	0x001e847f
 800762c:	003d08ff 	.word	0x003d08ff
 8007630:	431bde83 	.word	0x431bde83
 8007634:	10624dd3 	.word	0x10624dd3

08007638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	461a      	mov	r2, r3
 8007644:	460b      	mov	r3, r1
 8007646:	817b      	strh	r3, [r7, #10]
 8007648:	4613      	mov	r3, r2
 800764a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800764c:	f7fe ff46 	bl	80064dc <HAL_GetTick>
 8007650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b20      	cmp	r3, #32
 800765c:	f040 80e0 	bne.w	8007820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	2319      	movs	r3, #25
 8007666:	2201      	movs	r2, #1
 8007668:	4970      	ldr	r1, [pc, #448]	; (800782c <HAL_I2C_Master_Transmit+0x1f4>)
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fe2e 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007676:	2302      	movs	r3, #2
 8007678:	e0d3      	b.n	8007822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_I2C_Master_Transmit+0x50>
 8007684:	2302      	movs	r3, #2
 8007686:	e0cc      	b.n	8007822 <HAL_I2C_Master_Transmit+0x1ea>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b01      	cmp	r3, #1
 800769c:	d007      	beq.n	80076ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0201 	orr.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2221      	movs	r2, #33	; 0x21
 80076c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2210      	movs	r2, #16
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	893a      	ldrh	r2, [r7, #8]
 80076de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4a50      	ldr	r2, [pc, #320]	; (8007830 <HAL_I2C_Master_Transmit+0x1f8>)
 80076ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80076f0:	8979      	ldrh	r1, [r7, #10]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fc02 	bl	8007f00 <I2C_MasterRequestWrite>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e08d      	b.n	8007822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800771c:	e066      	b.n	80077ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	6a39      	ldr	r1, [r7, #32]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 feec 	bl	8008500 <I2C_WaitOnTXEFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	2b04      	cmp	r3, #4
 8007734:	d107      	bne.n	8007746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e06b      	b.n	8007822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b04      	cmp	r3, #4
 8007786:	d11b      	bne.n	80077c0 <HAL_I2C_Master_Transmit+0x188>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800778c:	2b00      	cmp	r3, #0
 800778e:	d017      	beq.n	80077c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	781a      	ldrb	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	6a39      	ldr	r1, [r7, #32]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fee3 	bl	8008590 <I2C_WaitOnBTFFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00d      	beq.n	80077ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	d107      	bne.n	80077e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e01a      	b.n	8007822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d194      	bne.n	800771e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e000      	b.n	8007822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	00100002 	.word	0x00100002
 8007830:	ffff0000 	.word	0xffff0000

08007834 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08c      	sub	sp, #48	; 0x30
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	461a      	mov	r2, r3
 8007840:	460b      	mov	r3, r1
 8007842:	817b      	strh	r3, [r7, #10]
 8007844:	4613      	mov	r3, r2
 8007846:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800784c:	f7fe fe46 	bl	80064dc <HAL_GetTick>
 8007850:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b20      	cmp	r3, #32
 800785c:	f040 824b 	bne.w	8007cf6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	2319      	movs	r3, #25
 8007866:	2201      	movs	r2, #1
 8007868:	497f      	ldr	r1, [pc, #508]	; (8007a68 <HAL_I2C_Master_Receive+0x234>)
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 fd2e 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
 8007878:	e23e      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_I2C_Master_Receive+0x54>
 8007884:	2302      	movs	r3, #2
 8007886:	e237      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b01      	cmp	r3, #1
 800789c:	d007      	beq.n	80078ae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2222      	movs	r2, #34	; 0x22
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2210      	movs	r2, #16
 80078ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	893a      	ldrh	r2, [r7, #8]
 80078de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4a5f      	ldr	r2, [pc, #380]	; (8007a6c <HAL_I2C_Master_Receive+0x238>)
 80078ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80078f0:	8979      	ldrh	r1, [r7, #10]
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fb84 	bl	8008004 <I2C_MasterRequestRead>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e1f8      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d113      	bne.n	8007936 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	e1cc      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793a:	2b01      	cmp	r3, #1
 800793c:	d11e      	bne.n	800797c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800794e:	b672      	cpsid	i
}
 8007950:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007952:	2300      	movs	r3, #0
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007976:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007978:	b662      	cpsie	i
}
 800797a:	e035      	b.n	80079e8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007980:	2b02      	cmp	r3, #2
 8007982:	d11e      	bne.n	80079c2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007992:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007994:	b672      	cpsid	i
}
 8007996:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80079be:	b662      	cpsie	i
}
 80079c0:	e012      	b.n	80079e8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	613b      	str	r3, [r7, #16]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80079e8:	e172      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	f200 811f 	bhi.w	8007c32 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d123      	bne.n	8007a44 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fe0d 	bl	8008620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e173      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a42:	e145      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d152      	bne.n	8007af2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2200      	movs	r2, #0
 8007a54:	4906      	ldr	r1, [pc, #24]	; (8007a70 <HAL_I2C_Master_Receive+0x23c>)
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fc38 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e148      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
 8007a66:	bf00      	nop
 8007a68:	00100002 	.word	0x00100002
 8007a6c:	ffff0000 	.word	0xffff0000
 8007a70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007a74:	b672      	cpsid	i
}
 8007a76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007aba:	b662      	cpsie	i
}
 8007abc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ada:	3b01      	subs	r3, #1
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007af0:	e0ee      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2200      	movs	r2, #0
 8007afa:	4981      	ldr	r1, [pc, #516]	; (8007d00 <HAL_I2C_Master_Receive+0x4cc>)
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fbe5 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0f5      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b1c:	b672      	cpsid	i
}
 8007b1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b52:	4b6c      	ldr	r3, [pc, #432]	; (8007d04 <HAL_I2C_Master_Receive+0x4d0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	08db      	lsrs	r3, r3, #3
 8007b58:	4a6b      	ldr	r2, [pc, #428]	; (8007d08 <HAL_I2C_Master_Receive+0x4d4>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	0a1a      	lsrs	r2, r3, #8
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	00da      	lsls	r2, r3, #3
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d118      	bne.n	8007baa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f043 0220 	orr.w	r2, r3, #32
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8007b9a:	b662      	cpsie	i
}
 8007b9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e0a6      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d1d9      	bne.n	8007b6c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007bfa:	b662      	cpsie	i
}
 8007bfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c30:	e04e      	b.n	8007cd0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fcf2 	bl	8008620 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e058      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d124      	bne.n	8007cd0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d107      	bne.n	8007c9e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c9c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f47f ae88 	bne.w	80079ea <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e000      	b.n	8007cf8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8007cf6:	2302      	movs	r3, #2
  }
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3728      	adds	r7, #40	; 0x28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	00010004 	.word	0x00010004
 8007d04:	20000004 	.word	0x20000004
 8007d08:	14f8b589 	.word	0x14f8b589

08007d0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	817b      	strh	r3, [r7, #10]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	813b      	strh	r3, [r7, #8]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d26:	f7fe fbd9 	bl	80064dc <HAL_GetTick>
 8007d2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	f040 80d9 	bne.w	8007eec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	2319      	movs	r3, #25
 8007d40:	2201      	movs	r2, #1
 8007d42:	496d      	ldr	r1, [pc, #436]	; (8007ef8 <HAL_I2C_Mem_Write+0x1ec>)
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fac1 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d50:	2302      	movs	r3, #2
 8007d52:	e0cc      	b.n	8007eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <HAL_I2C_Mem_Write+0x56>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e0c5      	b.n	8007eee <HAL_I2C_Mem_Write+0x1e2>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d007      	beq.n	8007d88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2221      	movs	r2, #33	; 0x21
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2240      	movs	r2, #64	; 0x40
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a3a      	ldr	r2, [r7, #32]
 8007db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4a4d      	ldr	r2, [pc, #308]	; (8007efc <HAL_I2C_Mem_Write+0x1f0>)
 8007dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dca:	88f8      	ldrh	r0, [r7, #6]
 8007dcc:	893a      	ldrh	r2, [r7, #8]
 8007dce:	8979      	ldrh	r1, [r7, #10]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	4603      	mov	r3, r0
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f9e0 	bl	80081a0 <I2C_RequestMemoryWrite>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d052      	beq.n	8007e8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e081      	b.n	8007eee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fb86 	bl	8008500 <I2C_WaitOnTXEFlagUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d107      	bne.n	8007e12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e06b      	b.n	8007eee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d11b      	bne.n	8007e8c <HAL_I2C_Mem_Write+0x180>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d017      	beq.n	8007e8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	781a      	ldrb	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3b01      	subs	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1aa      	bne.n	8007dea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fb79 	bl	8008590 <I2C_WaitOnBTFFlagUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00d      	beq.n	8007ec0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d107      	bne.n	8007ebc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e016      	b.n	8007eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e000      	b.n	8007eee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	00100002 	.word	0x00100002
 8007efc:	ffff0000 	.word	0xffff0000

08007f00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d006      	beq.n	8007f2a <I2C_MasterRequestWrite+0x2a>
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d003      	beq.n	8007f2a <I2C_MasterRequestWrite+0x2a>
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f28:	d108      	bne.n	8007f3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e00b      	b.n	8007f54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	2b12      	cmp	r3, #18
 8007f42:	d107      	bne.n	8007f54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f9b3 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00d      	beq.n	8007f88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7a:	d103      	bne.n	8007f84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e035      	b.n	8007ff4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f90:	d108      	bne.n	8007fa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f92:	897b      	ldrh	r3, [r7, #10]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fa0:	611a      	str	r2, [r3, #16]
 8007fa2:	e01b      	b.n	8007fdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fa4:	897b      	ldrh	r3, [r7, #10]
 8007fa6:	11db      	asrs	r3, r3, #7
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0306 	and.w	r3, r3, #6
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f063 030f 	orn	r3, r3, #15
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	490e      	ldr	r1, [pc, #56]	; (8007ffc <I2C_MasterRequestWrite+0xfc>)
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f9fc 	bl	80083c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e010      	b.n	8007ff4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007fd2:	897b      	ldrh	r3, [r7, #10]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4907      	ldr	r1, [pc, #28]	; (8008000 <I2C_MasterRequestWrite+0x100>)
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f9ec 	bl	80083c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	00010008 	.word	0x00010008
 8008000:	00010002 	.word	0x00010002

08008004 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	460b      	mov	r3, r1
 8008012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008028:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d006      	beq.n	800803e <I2C_MasterRequestRead+0x3a>
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d003      	beq.n	800803e <I2C_MasterRequestRead+0x3a>
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800803c:	d108      	bne.n	8008050 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e00b      	b.n	8008068 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008054:	2b11      	cmp	r3, #17
 8008056:	d107      	bne.n	8008068 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f929 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808e:	d103      	bne.n	8008098 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e079      	b.n	8008190 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080a4:	d108      	bne.n	80080b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080a6:	897b      	ldrh	r3, [r7, #10]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]
 80080b6:	e05f      	b.n	8008178 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080b8:	897b      	ldrh	r3, [r7, #10]
 80080ba:	11db      	asrs	r3, r3, #7
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	f003 0306 	and.w	r3, r3, #6
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f063 030f 	orn	r3, r3, #15
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	4930      	ldr	r1, [pc, #192]	; (8008198 <I2C_MasterRequestRead+0x194>)
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 f972 	bl	80083c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e054      	b.n	8008190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080e6:	897b      	ldrh	r3, [r7, #10]
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4929      	ldr	r1, [pc, #164]	; (800819c <I2C_MasterRequestRead+0x198>)
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f962 	bl	80083c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e044      	b.n	8008190 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008106:	2300      	movs	r3, #0
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800812a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f8c7 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008152:	d103      	bne.n	800815c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800815a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e017      	b.n	8008190 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008160:	897b      	ldrh	r3, [r7, #10]
 8008162:	11db      	asrs	r3, r3, #7
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0306 	and.w	r3, r3, #6
 800816a:	b2db      	uxtb	r3, r3
 800816c:	f063 030e 	orn	r3, r3, #14
 8008170:	b2da      	uxtb	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4907      	ldr	r1, [pc, #28]	; (800819c <I2C_MasterRequestRead+0x198>)
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f91e 	bl	80083c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	00010008 	.word	0x00010008
 800819c:	00010002 	.word	0x00010002

080081a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	461a      	mov	r2, r3
 80081ae:	4603      	mov	r3, r0
 80081b0:	817b      	strh	r3, [r7, #10]
 80081b2:	460b      	mov	r3, r1
 80081b4:	813b      	strh	r3, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f878 	bl	80082cc <I2C_WaitOnFlagUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f0:	d103      	bne.n	80081fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e05f      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081fe:	897b      	ldrh	r3, [r7, #10]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800820c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	6a3a      	ldr	r2, [r7, #32]
 8008212:	492d      	ldr	r1, [pc, #180]	; (80082c8 <I2C_RequestMemoryWrite+0x128>)
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f8d3 	bl	80083c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e04c      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	617b      	str	r3, [r7, #20]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800823a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823c:	6a39      	ldr	r1, [r7, #32]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f95e 	bl	8008500 <I2C_WaitOnTXEFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	2b04      	cmp	r3, #4
 8008250:	d107      	bne.n	8008262 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e02b      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d105      	bne.n	8008278 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800826c:	893b      	ldrh	r3, [r7, #8]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	611a      	str	r2, [r3, #16]
 8008276:	e021      	b.n	80082bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008278:	893b      	ldrh	r3, [r7, #8]
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	b29b      	uxth	r3, r3
 800827e:	b2da      	uxtb	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008288:	6a39      	ldr	r1, [r7, #32]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f938 	bl	8008500 <I2C_WaitOnTXEFlagUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00d      	beq.n	80082b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	2b04      	cmp	r3, #4
 800829c:	d107      	bne.n	80082ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e005      	b.n	80082be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082b2:	893b      	ldrh	r3, [r7, #8]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	00010002 	.word	0x00010002

080082cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082dc:	e048      	b.n	8008370 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d044      	beq.n	8008370 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082e6:	f7fe f8f9 	bl	80064dc <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d302      	bcc.n	80082fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d139      	bne.n	8008370 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	0c1b      	lsrs	r3, r3, #16
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b01      	cmp	r3, #1
 8008304:	d10d      	bne.n	8008322 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	43da      	mvns	r2, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4013      	ands	r3, r2
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	bf0c      	ite	eq
 8008318:	2301      	moveq	r3, #1
 800831a:	2300      	movne	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	e00c      	b.n	800833c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	43da      	mvns	r2, r3
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4013      	ands	r3, r2
 800832e:	b29b      	uxth	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	bf0c      	ite	eq
 8008334:	2301      	moveq	r3, #1
 8008336:	2300      	movne	r3, #0
 8008338:	b2db      	uxtb	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	429a      	cmp	r2, r3
 8008340:	d116      	bne.n	8008370 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f043 0220 	orr.w	r2, r3, #32
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e023      	b.n	80083b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b01      	cmp	r3, #1
 8008378:	d10d      	bne.n	8008396 <I2C_WaitOnFlagUntilTimeout+0xca>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	43da      	mvns	r2, r3
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4013      	ands	r3, r2
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	bf0c      	ite	eq
 800838c:	2301      	moveq	r3, #1
 800838e:	2300      	movne	r3, #0
 8008390:	b2db      	uxtb	r3, r3
 8008392:	461a      	mov	r2, r3
 8008394:	e00c      	b.n	80083b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	43da      	mvns	r2, r3
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4013      	ands	r3, r2
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	461a      	mov	r2, r3
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d093      	beq.n	80082de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083ce:	e071      	b.n	80084b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083de:	d123      	bne.n	8008428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	f043 0204 	orr.w	r2, r3, #4
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e067      	b.n	80084f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842e:	d041      	beq.n	80084b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008430:	f7fe f854 	bl	80064dc <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d302      	bcc.n	8008446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d136      	bne.n	80084b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	0c1b      	lsrs	r3, r3, #16
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	d10c      	bne.n	800846a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	43da      	mvns	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4013      	ands	r3, r2
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	bf14      	ite	ne
 8008462:	2301      	movne	r3, #1
 8008464:	2300      	moveq	r3, #0
 8008466:	b2db      	uxtb	r3, r3
 8008468:	e00b      	b.n	8008482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	43da      	mvns	r2, r3
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	4013      	ands	r3, r2
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	bf14      	ite	ne
 800847c:	2301      	movne	r3, #1
 800847e:	2300      	moveq	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d016      	beq.n	80084b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	f043 0220 	orr.w	r2, r3, #32
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e021      	b.n	80084f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d10c      	bne.n	80084d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	43da      	mvns	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4013      	ands	r3, r2
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bf14      	ite	ne
 80084d0:	2301      	movne	r3, #1
 80084d2:	2300      	moveq	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	e00b      	b.n	80084f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	43da      	mvns	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4013      	ands	r3, r2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2301      	movne	r3, #1
 80084ec:	2300      	moveq	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f47f af6d 	bne.w	80083d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800850c:	e034      	b.n	8008578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f8e3 	bl	80086da <I2C_IsAcknowledgeFailed>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e034      	b.n	8008588 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008524:	d028      	beq.n	8008578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008526:	f7fd ffd9 	bl	80064dc <HAL_GetTick>
 800852a:	4602      	mov	r2, r0
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	d302      	bcc.n	800853c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d11d      	bne.n	8008578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008546:	2b80      	cmp	r3, #128	; 0x80
 8008548:	d016      	beq.n	8008578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	f043 0220 	orr.w	r2, r3, #32
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e007      	b.n	8008588 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008582:	2b80      	cmp	r3, #128	; 0x80
 8008584:	d1c3      	bne.n	800850e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800859c:	e034      	b.n	8008608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f89b 	bl	80086da <I2C_IsAcknowledgeFailed>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e034      	b.n	8008618 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d028      	beq.n	8008608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b6:	f7fd ff91 	bl	80064dc <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	68ba      	ldr	r2, [r7, #8]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d302      	bcc.n	80085cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d11d      	bne.n	8008608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f003 0304 	and.w	r3, r3, #4
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d016      	beq.n	8008608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	f043 0220 	orr.w	r2, r3, #32
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e007      	b.n	8008618 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b04      	cmp	r3, #4
 8008614:	d1c3      	bne.n	800859e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800862c:	e049      	b.n	80086c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b10      	cmp	r3, #16
 800863a:	d119      	bne.n	8008670 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f06f 0210 	mvn.w	r2, #16
 8008644:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e030      	b.n	80086d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008670:	f7fd ff34 	bl	80064dc <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	429a      	cmp	r2, r3
 800867e:	d302      	bcc.n	8008686 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d11d      	bne.n	80086c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b40      	cmp	r3, #64	; 0x40
 8008692:	d016      	beq.n	80086c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f043 0220 	orr.w	r2, r3, #32
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e007      	b.n	80086d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086cc:	2b40      	cmp	r3, #64	; 0x40
 80086ce:	d1ae      	bne.n	800862e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f0:	d11b      	bne.n	800872a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2220      	movs	r2, #32
 8008706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f043 0204 	orr.w	r2, r3, #4
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	bc80      	pop	{r7}
 8008734:	4770      	bx	lr
	...

08008738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e272      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 8087 	beq.w	8008866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008758:	4b92      	ldr	r3, [pc, #584]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f003 030c 	and.w	r3, r3, #12
 8008760:	2b04      	cmp	r3, #4
 8008762:	d00c      	beq.n	800877e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008764:	4b8f      	ldr	r3, [pc, #572]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f003 030c 	and.w	r3, r3, #12
 800876c:	2b08      	cmp	r3, #8
 800876e:	d112      	bne.n	8008796 <HAL_RCC_OscConfig+0x5e>
 8008770:	4b8c      	ldr	r3, [pc, #560]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800877c:	d10b      	bne.n	8008796 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800877e:	4b89      	ldr	r3, [pc, #548]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d06c      	beq.n	8008864 <HAL_RCC_OscConfig+0x12c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d168      	bne.n	8008864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e24c      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879e:	d106      	bne.n	80087ae <HAL_RCC_OscConfig+0x76>
 80087a0:	4b80      	ldr	r3, [pc, #512]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a7f      	ldr	r2, [pc, #508]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	e02e      	b.n	800880c <HAL_RCC_OscConfig+0xd4>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCC_OscConfig+0x98>
 80087b6:	4b7b      	ldr	r3, [pc, #492]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a7a      	ldr	r2, [pc, #488]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	4b78      	ldr	r3, [pc, #480]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a77      	ldr	r2, [pc, #476]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e01d      	b.n	800880c <HAL_RCC_OscConfig+0xd4>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087d8:	d10c      	bne.n	80087f4 <HAL_RCC_OscConfig+0xbc>
 80087da:	4b72      	ldr	r3, [pc, #456]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a71      	ldr	r2, [pc, #452]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	4b6f      	ldr	r3, [pc, #444]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a6e      	ldr	r2, [pc, #440]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e00b      	b.n	800880c <HAL_RCC_OscConfig+0xd4>
 80087f4:	4b6b      	ldr	r3, [pc, #428]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a6a      	ldr	r2, [pc, #424]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80087fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	4b68      	ldr	r3, [pc, #416]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a67      	ldr	r2, [pc, #412]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800880a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d013      	beq.n	800883c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008814:	f7fd fe62 	bl	80064dc <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800881c:	f7fd fe5e 	bl	80064dc <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b64      	cmp	r3, #100	; 0x64
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e200      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800882e:	4b5d      	ldr	r3, [pc, #372]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f0      	beq.n	800881c <HAL_RCC_OscConfig+0xe4>
 800883a:	e014      	b.n	8008866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800883c:	f7fd fe4e 	bl	80064dc <HAL_GetTick>
 8008840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008844:	f7fd fe4a 	bl	80064dc <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b64      	cmp	r3, #100	; 0x64
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e1ec      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008856:	4b53      	ldr	r3, [pc, #332]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0x10c>
 8008862:	e000      	b.n	8008866 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d063      	beq.n	800893a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008872:	4b4c      	ldr	r3, [pc, #304]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f003 030c 	and.w	r3, r3, #12
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800887e:	4b49      	ldr	r3, [pc, #292]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f003 030c 	and.w	r3, r3, #12
 8008886:	2b08      	cmp	r3, #8
 8008888:	d11c      	bne.n	80088c4 <HAL_RCC_OscConfig+0x18c>
 800888a:	4b46      	ldr	r3, [pc, #280]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d116      	bne.n	80088c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008896:	4b43      	ldr	r3, [pc, #268]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <HAL_RCC_OscConfig+0x176>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d001      	beq.n	80088ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e1c0      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ae:	4b3d      	ldr	r3, [pc, #244]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4939      	ldr	r1, [pc, #228]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088c2:	e03a      	b.n	800893a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d020      	beq.n	800890e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088cc:	4b36      	ldr	r3, [pc, #216]	; (80089a8 <HAL_RCC_OscConfig+0x270>)
 80088ce:	2201      	movs	r2, #1
 80088d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d2:	f7fd fe03 	bl	80064dc <HAL_GetTick>
 80088d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088d8:	e008      	b.n	80088ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088da:	f7fd fdff 	bl	80064dc <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d901      	bls.n	80088ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e1a1      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ec:	4b2d      	ldr	r3, [pc, #180]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f0      	beq.n	80088da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f8:	4b2a      	ldr	r3, [pc, #168]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	4927      	ldr	r1, [pc, #156]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008908:	4313      	orrs	r3, r2
 800890a:	600b      	str	r3, [r1, #0]
 800890c:	e015      	b.n	800893a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800890e:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <HAL_RCC_OscConfig+0x270>)
 8008910:	2200      	movs	r2, #0
 8008912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008914:	f7fd fde2 	bl	80064dc <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800891a:	e008      	b.n	800892e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800891c:	f7fd fdde 	bl	80064dc <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b02      	cmp	r3, #2
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e180      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800892e:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1f0      	bne.n	800891c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0308 	and.w	r3, r3, #8
 8008942:	2b00      	cmp	r3, #0
 8008944:	d03a      	beq.n	80089bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d019      	beq.n	8008982 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800894e:	4b17      	ldr	r3, [pc, #92]	; (80089ac <HAL_RCC_OscConfig+0x274>)
 8008950:	2201      	movs	r2, #1
 8008952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008954:	f7fd fdc2 	bl	80064dc <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800895a:	e008      	b.n	800896e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800895c:	f7fd fdbe 	bl	80064dc <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e160      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800896e:	4b0d      	ldr	r3, [pc, #52]	; (80089a4 <HAL_RCC_OscConfig+0x26c>)
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0f0      	beq.n	800895c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800897a:	2001      	movs	r0, #1
 800897c:	f000 face 	bl	8008f1c <RCC_Delay>
 8008980:	e01c      	b.n	80089bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008982:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <HAL_RCC_OscConfig+0x274>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008988:	f7fd fda8 	bl	80064dc <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800898e:	e00f      	b.n	80089b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008990:	f7fd fda4 	bl	80064dc <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d908      	bls.n	80089b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e146      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
 80089a2:	bf00      	nop
 80089a4:	40021000 	.word	0x40021000
 80089a8:	42420000 	.word	0x42420000
 80089ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089b0:	4b92      	ldr	r3, [pc, #584]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e9      	bne.n	8008990 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80a6 	beq.w	8008b16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089ce:	4b8b      	ldr	r3, [pc, #556]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10d      	bne.n	80089f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089da:	4b88      	ldr	r3, [pc, #544]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4a87      	ldr	r2, [pc, #540]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 80089e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089e4:	61d3      	str	r3, [r2, #28]
 80089e6:	4b85      	ldr	r3, [pc, #532]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ee:	60bb      	str	r3, [r7, #8]
 80089f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089f2:	2301      	movs	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089f6:	4b82      	ldr	r3, [pc, #520]	; (8008c00 <HAL_RCC_OscConfig+0x4c8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d118      	bne.n	8008a34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a02:	4b7f      	ldr	r3, [pc, #508]	; (8008c00 <HAL_RCC_OscConfig+0x4c8>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a7e      	ldr	r2, [pc, #504]	; (8008c00 <HAL_RCC_OscConfig+0x4c8>)
 8008a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a0e:	f7fd fd65 	bl	80064dc <HAL_GetTick>
 8008a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a14:	e008      	b.n	8008a28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a16:	f7fd fd61 	bl	80064dc <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b64      	cmp	r3, #100	; 0x64
 8008a22:	d901      	bls.n	8008a28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e103      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a28:	4b75      	ldr	r3, [pc, #468]	; (8008c00 <HAL_RCC_OscConfig+0x4c8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0f0      	beq.n	8008a16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d106      	bne.n	8008a4a <HAL_RCC_OscConfig+0x312>
 8008a3c:	4b6f      	ldr	r3, [pc, #444]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	4a6e      	ldr	r2, [pc, #440]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a42:	f043 0301 	orr.w	r3, r3, #1
 8008a46:	6213      	str	r3, [r2, #32]
 8008a48:	e02d      	b.n	8008aa6 <HAL_RCC_OscConfig+0x36e>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10c      	bne.n	8008a6c <HAL_RCC_OscConfig+0x334>
 8008a52:	4b6a      	ldr	r3, [pc, #424]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	4a69      	ldr	r2, [pc, #420]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a58:	f023 0301 	bic.w	r3, r3, #1
 8008a5c:	6213      	str	r3, [r2, #32]
 8008a5e:	4b67      	ldr	r3, [pc, #412]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	4a66      	ldr	r2, [pc, #408]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a64:	f023 0304 	bic.w	r3, r3, #4
 8008a68:	6213      	str	r3, [r2, #32]
 8008a6a:	e01c      	b.n	8008aa6 <HAL_RCC_OscConfig+0x36e>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	2b05      	cmp	r3, #5
 8008a72:	d10c      	bne.n	8008a8e <HAL_RCC_OscConfig+0x356>
 8008a74:	4b61      	ldr	r3, [pc, #388]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	4a60      	ldr	r2, [pc, #384]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a7a:	f043 0304 	orr.w	r3, r3, #4
 8008a7e:	6213      	str	r3, [r2, #32]
 8008a80:	4b5e      	ldr	r3, [pc, #376]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	4a5d      	ldr	r2, [pc, #372]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	6213      	str	r3, [r2, #32]
 8008a8c:	e00b      	b.n	8008aa6 <HAL_RCC_OscConfig+0x36e>
 8008a8e:	4b5b      	ldr	r3, [pc, #364]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	4a5a      	ldr	r2, [pc, #360]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a94:	f023 0301 	bic.w	r3, r3, #1
 8008a98:	6213      	str	r3, [r2, #32]
 8008a9a:	4b58      	ldr	r3, [pc, #352]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	4a57      	ldr	r2, [pc, #348]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008aa0:	f023 0304 	bic.w	r3, r3, #4
 8008aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d015      	beq.n	8008ada <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aae:	f7fd fd15 	bl	80064dc <HAL_GetTick>
 8008ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ab4:	e00a      	b.n	8008acc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ab6:	f7fd fd11 	bl	80064dc <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d901      	bls.n	8008acc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e0b1      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008acc:	4b4b      	ldr	r3, [pc, #300]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0ee      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x37e>
 8008ad8:	e014      	b.n	8008b04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ada:	f7fd fcff 	bl	80064dc <HAL_GetTick>
 8008ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ae0:	e00a      	b.n	8008af8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae2:	f7fd fcfb 	bl	80064dc <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d901      	bls.n	8008af8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e09b      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008af8:	4b40      	ldr	r3, [pc, #256]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1ee      	bne.n	8008ae2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d105      	bne.n	8008b16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b0a:	4b3c      	ldr	r3, [pc, #240]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	4a3b      	ldr	r2, [pc, #236]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 8087 	beq.w	8008c2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b20:	4b36      	ldr	r3, [pc, #216]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f003 030c 	and.w	r3, r3, #12
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d061      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d146      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b34:	4b33      	ldr	r3, [pc, #204]	; (8008c04 <HAL_RCC_OscConfig+0x4cc>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b3a:	f7fd fccf 	bl	80064dc <HAL_GetTick>
 8008b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b40:	e008      	b.n	8008b54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b42:	f7fd fccb 	bl	80064dc <HAL_GetTick>
 8008b46:	4602      	mov	r2, r0
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d901      	bls.n	8008b54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e06d      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b54:	4b29      	ldr	r3, [pc, #164]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1f0      	bne.n	8008b42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b68:	d108      	bne.n	8008b7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008b6a:	4b24      	ldr	r3, [pc, #144]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	4921      	ldr	r1, [pc, #132]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b7c:	4b1f      	ldr	r3, [pc, #124]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a19      	ldr	r1, [r3, #32]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	491b      	ldr	r1, [pc, #108]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b94:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <HAL_RCC_OscConfig+0x4cc>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b9a:	f7fd fc9f 	bl	80064dc <HAL_GetTick>
 8008b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba2:	f7fd fc9b 	bl	80064dc <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e03d      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008bb4:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0f0      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x46a>
 8008bc0:	e035      	b.n	8008c2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc2:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <HAL_RCC_OscConfig+0x4cc>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc8:	f7fd fc88 	bl	80064dc <HAL_GetTick>
 8008bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bce:	e008      	b.n	8008be2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bd0:	f7fd fc84 	bl	80064dc <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d901      	bls.n	8008be2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e026      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008be2:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <HAL_RCC_OscConfig+0x4c4>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1f0      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x498>
 8008bee:	e01e      	b.n	8008c2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e019      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	40007000 	.word	0x40007000
 8008c04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008c08:	4b0b      	ldr	r3, [pc, #44]	; (8008c38 <HAL_RCC_OscConfig+0x500>)
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d106      	bne.n	8008c2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d001      	beq.n	8008c2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	40021000 	.word	0x40021000

08008c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e0d0      	b.n	8008df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c50:	4b6a      	ldr	r3, [pc, #424]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d910      	bls.n	8008c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c5e:	4b67      	ldr	r3, [pc, #412]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f023 0207 	bic.w	r2, r3, #7
 8008c66:	4965      	ldr	r1, [pc, #404]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c6e:	4b63      	ldr	r3, [pc, #396]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d001      	beq.n	8008c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0b8      	b.n	8008df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d020      	beq.n	8008cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c98:	4b59      	ldr	r3, [pc, #356]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	4a58      	ldr	r2, [pc, #352]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d005      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cb0:	4b53      	ldr	r3, [pc, #332]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4a52      	ldr	r2, [pc, #328]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008cb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cbc:	4b50      	ldr	r3, [pc, #320]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	494d      	ldr	r1, [pc, #308]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d040      	beq.n	8008d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ce2:	4b47      	ldr	r3, [pc, #284]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d115      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e07f      	b.n	8008df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d107      	bne.n	8008d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cfa:	4b41      	ldr	r3, [pc, #260]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e073      	b.n	8008df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d0a:	4b3d      	ldr	r3, [pc, #244]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e06b      	b.n	8008df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d1a:	4b39      	ldr	r3, [pc, #228]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f023 0203 	bic.w	r2, r3, #3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4936      	ldr	r1, [pc, #216]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d2c:	f7fd fbd6 	bl	80064dc <HAL_GetTick>
 8008d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d32:	e00a      	b.n	8008d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d34:	f7fd fbd2 	bl	80064dc <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e053      	b.n	8008df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d4a:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f003 020c 	and.w	r2, r3, #12
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d1eb      	bne.n	8008d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d5c:	4b27      	ldr	r3, [pc, #156]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d210      	bcs.n	8008d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d6a:	4b24      	ldr	r3, [pc, #144]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f023 0207 	bic.w	r2, r3, #7
 8008d72:	4922      	ldr	r1, [pc, #136]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d7a:	4b20      	ldr	r3, [pc, #128]	; (8008dfc <HAL_RCC_ClockConfig+0x1c0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	683a      	ldr	r2, [r7, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d001      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e032      	b.n	8008df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d008      	beq.n	8008daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d98:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	4916      	ldr	r1, [pc, #88]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0308 	and.w	r3, r3, #8
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008db6:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	490e      	ldr	r1, [pc, #56]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008dca:	f000 f821 	bl	8008e10 <HAL_RCC_GetSysClockFreq>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <HAL_RCC_ClockConfig+0x1c4>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	091b      	lsrs	r3, r3, #4
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	490a      	ldr	r1, [pc, #40]	; (8008e04 <HAL_RCC_ClockConfig+0x1c8>)
 8008ddc:	5ccb      	ldrb	r3, [r1, r3]
 8008dde:	fa22 f303 	lsr.w	r3, r2, r3
 8008de2:	4a09      	ldr	r2, [pc, #36]	; (8008e08 <HAL_RCC_ClockConfig+0x1cc>)
 8008de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <HAL_RCC_ClockConfig+0x1d0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fd fb34 	bl	8006458 <HAL_InitTick>

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	40022000 	.word	0x40022000
 8008e00:	40021000 	.word	0x40021000
 8008e04:	0800f254 	.word	0x0800f254
 8008e08:	20000004 	.word	0x20000004
 8008e0c:	20000008 	.word	0x20000008

08008e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60bb      	str	r3, [r7, #8]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	2300      	movs	r3, #0
 8008e24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008e2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f003 030c 	and.w	r3, r3, #12
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d002      	beq.n	8008e40 <HAL_RCC_GetSysClockFreq+0x30>
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	d003      	beq.n	8008e46 <HAL_RCC_GetSysClockFreq+0x36>
 8008e3e:	e027      	b.n	8008e90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e42:	613b      	str	r3, [r7, #16]
      break;
 8008e44:	e027      	b.n	8008e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	0c9b      	lsrs	r3, r3, #18
 8008e4a:	f003 030f 	and.w	r3, r3, #15
 8008e4e:	4a17      	ldr	r2, [pc, #92]	; (8008eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8008e50:	5cd3      	ldrb	r3, [r2, r3]
 8008e52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d010      	beq.n	8008e80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e5e:	4b11      	ldr	r3, [pc, #68]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	0c5b      	lsrs	r3, r3, #17
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	4a11      	ldr	r2, [pc, #68]	; (8008eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008e6a:	5cd3      	ldrb	r3, [r2, r3]
 8008e6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a0d      	ldr	r2, [pc, #52]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e72:	fb03 f202 	mul.w	r2, r3, r2
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e004      	b.n	8008e8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a0c      	ldr	r2, [pc, #48]	; (8008eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008e84:	fb02 f303 	mul.w	r3, r2, r3
 8008e88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	613b      	str	r3, [r7, #16]
      break;
 8008e8e:	e002      	b.n	8008e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e90:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8008e92:	613b      	str	r3, [r7, #16]
      break;
 8008e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e96:	693b      	ldr	r3, [r7, #16]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40021000 	.word	0x40021000
 8008ea8:	007a1200 	.word	0x007a1200
 8008eac:	0800f26c 	.word	0x0800f26c
 8008eb0:	0800f27c 	.word	0x0800f27c
 8008eb4:	003d0900 	.word	0x003d0900

08008eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr
 8008ec8:	20000004 	.word	0x20000004

08008ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ed0:	f7ff fff2 	bl	8008eb8 <HAL_RCC_GetHCLKFreq>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	4903      	ldr	r1, [pc, #12]	; (8008ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ee2:	5ccb      	ldrb	r3, [r1, r3]
 8008ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	0800f264 	.word	0x0800f264

08008ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ef8:	f7ff ffde 	bl	8008eb8 <HAL_RCC_GetHCLKFreq>
 8008efc:	4602      	mov	r2, r0
 8008efe:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	0adb      	lsrs	r3, r3, #11
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	4903      	ldr	r1, [pc, #12]	; (8008f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f0a:	5ccb      	ldrb	r3, [r1, r3]
 8008f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40021000 	.word	0x40021000
 8008f18:	0800f264 	.word	0x0800f264

08008f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <RCC_Delay+0x34>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a0a      	ldr	r2, [pc, #40]	; (8008f54 <RCC_Delay+0x38>)
 8008f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2e:	0a5b      	lsrs	r3, r3, #9
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008f38:	bf00      	nop
  }
  while (Delay --);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	1e5a      	subs	r2, r3, #1
 8008f3e:	60fa      	str	r2, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1f9      	bne.n	8008f38 <RCC_Delay+0x1c>
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bc80      	pop	{r7}
 8008f4e:	4770      	bx	lr
 8008f50:	20000004 	.word	0x20000004
 8008f54:	10624dd3 	.word	0x10624dd3

08008f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d07d      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008f74:	2300      	movs	r3, #0
 8008f76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f78:	4b4f      	ldr	r3, [pc, #316]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10d      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f84:	4b4c      	ldr	r3, [pc, #304]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	4a4b      	ldr	r2, [pc, #300]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8e:	61d3      	str	r3, [r2, #28]
 8008f90:	4b49      	ldr	r3, [pc, #292]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fa0:	4b46      	ldr	r3, [pc, #280]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d118      	bne.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fac:	4b43      	ldr	r3, [pc, #268]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a42      	ldr	r2, [pc, #264]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fb8:	f7fd fa90 	bl	80064dc <HAL_GetTick>
 8008fbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fc0:	f7fd fa8c 	bl	80064dc <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b64      	cmp	r3, #100	; 0x64
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e06d      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fd2:	4b3a      	ldr	r3, [pc, #232]	; (80090bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008fde:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fe6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d02e      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d027      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ffc:	4b2e      	ldr	r3, [pc, #184]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009004:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009006:	4b2e      	ldr	r3, [pc, #184]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009008:	2201      	movs	r2, #1
 800900a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800900c:	4b2c      	ldr	r3, [pc, #176]	; (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009012:	4a29      	ldr	r2, [pc, #164]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d014      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009022:	f7fd fa5b 	bl	80064dc <HAL_GetTick>
 8009026:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009028:	e00a      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800902a:	f7fd fa57 	bl	80064dc <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	f241 3288 	movw	r2, #5000	; 0x1388
 8009038:	4293      	cmp	r3, r2
 800903a:	d901      	bls.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e036      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009040:	4b1d      	ldr	r3, [pc, #116]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0ee      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800904c:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4917      	ldr	r1, [pc, #92]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800905a:	4313      	orrs	r3, r2
 800905c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d105      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009064:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	4a13      	ldr	r2, [pc, #76]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800906a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800906e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d008      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800907c:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	490b      	ldr	r1, [pc, #44]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800908a:	4313      	orrs	r3, r2
 800908c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0310 	and.w	r3, r3, #16
 8009096:	2b00      	cmp	r3, #0
 8009098:	d008      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800909a:	4b07      	ldr	r3, [pc, #28]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	4904      	ldr	r1, [pc, #16]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	40021000 	.word	0x40021000
 80090bc:	40007000 	.word	0x40007000
 80090c0:	42420440 	.word	0x42420440

080090c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	2300      	movs	r3, #0
 80090d2:	61fb      	str	r3, [r7, #28]
 80090d4:	2300      	movs	r3, #0
 80090d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	2300      	movs	r3, #0
 80090de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	2b0f      	cmp	r3, #15
 80090e6:	f200 80af 	bhi.w	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80090ea:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80090ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f0:	080091c7 	.word	0x080091c7
 80090f4:	0800922d 	.word	0x0800922d
 80090f8:	08009249 	.word	0x08009249
 80090fc:	080091b7 	.word	0x080091b7
 8009100:	08009249 	.word	0x08009249
 8009104:	08009249 	.word	0x08009249
 8009108:	08009249 	.word	0x08009249
 800910c:	080091bf 	.word	0x080091bf
 8009110:	08009249 	.word	0x08009249
 8009114:	08009249 	.word	0x08009249
 8009118:	08009249 	.word	0x08009249
 800911c:	08009249 	.word	0x08009249
 8009120:	08009249 	.word	0x08009249
 8009124:	08009249 	.word	0x08009249
 8009128:	08009249 	.word	0x08009249
 800912c:	08009131 	.word	0x08009131
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8009130:	4b4a      	ldr	r3, [pc, #296]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009136:	4b49      	ldr	r3, [pc, #292]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8084 	beq.w	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	0c9b      	lsrs	r3, r3, #18
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	4a44      	ldr	r2, [pc, #272]	; (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800914e:	5cd3      	ldrb	r3, [r2, r3]
 8009150:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d015      	beq.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800915c:	4b3f      	ldr	r3, [pc, #252]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	0c5b      	lsrs	r3, r3, #17
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	4a3f      	ldr	r2, [pc, #252]	; (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8009168:	5cd3      	ldrb	r3, [r2, r3]
 800916a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00d      	beq.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009176:	4a3c      	ldr	r2, [pc, #240]	; (8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	fbb2 f2f3 	udiv	r2, r2, r3
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	fb02 f303 	mul.w	r3, r2, r3
 8009184:	61fb      	str	r3, [r7, #28]
 8009186:	e004      	b.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	4a38      	ldr	r2, [pc, #224]	; (800926c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800918c:	fb02 f303 	mul.w	r3, r2, r3
 8009190:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009192:	4b32      	ldr	r3, [pc, #200]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800919a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800919e:	d102      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80091a4:	e052      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4a31      	ldr	r2, [pc, #196]	; (8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80091ac:	fba2 2303 	umull	r2, r3, r2, r3
 80091b0:	085b      	lsrs	r3, r3, #1
 80091b2:	61bb      	str	r3, [r7, #24]
      break;
 80091b4:	e04a      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80091b6:	f7ff fe2b 	bl	8008e10 <HAL_RCC_GetSysClockFreq>
 80091ba:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80091bc:	e049      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80091be:	f7ff fe27 	bl	8008e10 <HAL_RCC_GetSysClockFreq>
 80091c2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80091c4:	e045      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80091c6:	4b25      	ldr	r3, [pc, #148]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d6:	d108      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80091e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e6:	61bb      	str	r3, [r7, #24]
 80091e8:	e01f      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091f4:	d109      	bne.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80091f6:	4b19      	ldr	r3, [pc, #100]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8009202:	f649 4340 	movw	r3, #40000	; 0x9c40
 8009206:	61bb      	str	r3, [r7, #24]
 8009208:	e00f      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009214:	d11c      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8009216:	4b11      	ldr	r3, [pc, #68]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d016      	beq.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8009222:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009226:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8009228:	e012      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800922a:	e011      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800922c:	f7ff fe62 	bl	8008ef4 <HAL_RCC_GetPCLK2Freq>
 8009230:	4602      	mov	r2, r0
 8009232:	4b0a      	ldr	r3, [pc, #40]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	0b9b      	lsrs	r3, r3, #14
 8009238:	f003 0303 	and.w	r3, r3, #3
 800923c:	3301      	adds	r3, #1
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	fbb2 f3f3 	udiv	r3, r2, r3
 8009244:	61bb      	str	r3, [r7, #24]
      break;
 8009246:	e004      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8009248:	bf00      	nop
 800924a:	e002      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800924c:	bf00      	nop
 800924e:	e000      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8009250:	bf00      	nop
    }
  }
  return (frequency);
 8009252:	69bb      	ldr	r3, [r7, #24]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	40021000 	.word	0x40021000
 8009260:	0800f280 	.word	0x0800f280
 8009264:	0800f290 	.word	0x0800f290
 8009268:	007a1200 	.word	0x007a1200
 800926c:	003d0900 	.word	0x003d0900
 8009270:	aaaaaaab 	.word	0xaaaaaaab

08009274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e041      	b.n	800930a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fc fe3e 	bl	8005f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f000 fd2e 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e041      	b.n	80093a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d106      	bne.n	800933e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f839 	bl	80093b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3304      	adds	r3, #4
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f000 fcdf 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr
	...

080093c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <HAL_TIM_PWM_Start+0x24>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	bf14      	ite	ne
 80093e0:	2301      	movne	r3, #1
 80093e2:	2300      	moveq	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	e022      	b.n	800942e <HAL_TIM_PWM_Start+0x6a>
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d109      	bne.n	8009402 <HAL_TIM_PWM_Start+0x3e>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	bf14      	ite	ne
 80093fa:	2301      	movne	r3, #1
 80093fc:	2300      	moveq	r3, #0
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	e015      	b.n	800942e <HAL_TIM_PWM_Start+0x6a>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b08      	cmp	r3, #8
 8009406:	d109      	bne.n	800941c <HAL_TIM_PWM_Start+0x58>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b01      	cmp	r3, #1
 8009412:	bf14      	ite	ne
 8009414:	2301      	movne	r3, #1
 8009416:	2300      	moveq	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	e008      	b.n	800942e <HAL_TIM_PWM_Start+0x6a>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b01      	cmp	r3, #1
 8009426:	bf14      	ite	ne
 8009428:	2301      	movne	r3, #1
 800942a:	2300      	moveq	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e072      	b.n	800951c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <HAL_TIM_PWM_Start+0x82>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009444:	e013      	b.n	800946e <HAL_TIM_PWM_Start+0xaa>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b04      	cmp	r3, #4
 800944a:	d104      	bne.n	8009456 <HAL_TIM_PWM_Start+0x92>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009454:	e00b      	b.n	800946e <HAL_TIM_PWM_Start+0xaa>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b08      	cmp	r3, #8
 800945a:	d104      	bne.n	8009466 <HAL_TIM_PWM_Start+0xa2>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009464:	e003      	b.n	800946e <HAL_TIM_PWM_Start+0xaa>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2201      	movs	r2, #1
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 ff14 	bl	800a2a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a28      	ldr	r2, [pc, #160]	; (8009524 <HAL_TIM_PWM_Start+0x160>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d004      	beq.n	8009490 <HAL_TIM_PWM_Start+0xcc>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a27      	ldr	r2, [pc, #156]	; (8009528 <HAL_TIM_PWM_Start+0x164>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d101      	bne.n	8009494 <HAL_TIM_PWM_Start+0xd0>
 8009490:	2301      	movs	r3, #1
 8009492:	e000      	b.n	8009496 <HAL_TIM_PWM_Start+0xd2>
 8009494:	2300      	movs	r3, #0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a1d      	ldr	r2, [pc, #116]	; (8009524 <HAL_TIM_PWM_Start+0x160>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d018      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x122>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1b      	ldr	r2, [pc, #108]	; (8009528 <HAL_TIM_PWM_Start+0x164>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d013      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x122>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c6:	d00e      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x122>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a17      	ldr	r2, [pc, #92]	; (800952c <HAL_TIM_PWM_Start+0x168>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d009      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x122>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a16      	ldr	r2, [pc, #88]	; (8009530 <HAL_TIM_PWM_Start+0x16c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d004      	beq.n	80094e6 <HAL_TIM_PWM_Start+0x122>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a14      	ldr	r2, [pc, #80]	; (8009534 <HAL_TIM_PWM_Start+0x170>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d111      	bne.n	800950a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2b06      	cmp	r3, #6
 80094f6:	d010      	beq.n	800951a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009508:	e007      	b.n	800951a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f042 0201 	orr.w	r2, r2, #1
 8009518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	40012c00 	.word	0x40012c00
 8009528:	40013400 	.word	0x40013400
 800952c:	40000400 	.word	0x40000400
 8009530:	40000800 	.word	0x40000800
 8009534:	40000c00 	.word	0x40000c00

08009538 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e093      	b.n	8009674 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7fc fd0d 	bl	8005f80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2202      	movs	r2, #2
 800956a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800957c:	f023 0307 	bic.w	r3, r3, #7
 8009580:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3304      	adds	r3, #4
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f000 fbc1 	bl	8009d14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	021b      	lsls	r3, r3, #8
 80095ca:	4313      	orrs	r3, r2
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095d8:	f023 030c 	bic.w	r3, r3, #12
 80095dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	021b      	lsls	r3, r3, #8
 80095f4:	4313      	orrs	r3, r2
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	011a      	lsls	r2, r3, #4
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	031b      	lsls	r3, r3, #12
 8009608:	4313      	orrs	r3, r2
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	4313      	orrs	r3, r2
 800960e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009616:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685a      	ldr	r2, [r3, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	4313      	orrs	r3, r2
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800968c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009694:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800969c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d110      	bne.n	80096ce <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d102      	bne.n	80096b8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096b2:	7b7b      	ldrb	r3, [r7, #13]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d001      	beq.n	80096bc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e089      	b.n	80097d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096cc:	e031      	b.n	8009732 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d110      	bne.n	80096f6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d102      	bne.n	80096e0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80096da:	7b3b      	ldrb	r3, [r7, #12]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d001      	beq.n	80096e4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e075      	b.n	80097d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096f4:	e01d      	b.n	8009732 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d108      	bne.n	800970e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d105      	bne.n	800970e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009702:	7b7b      	ldrb	r3, [r7, #13]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d102      	bne.n	800970e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009708:	7b3b      	ldrb	r3, [r7, #12]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d001      	beq.n	8009712 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e05e      	b.n	80097d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2202      	movs	r2, #2
 800971e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2202      	movs	r2, #2
 8009726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2202      	movs	r2, #2
 800972e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b04      	cmp	r3, #4
 800973c:	d010      	beq.n	8009760 <HAL_TIM_Encoder_Start_IT+0xe4>
 800973e:	e01f      	b.n	8009780 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2201      	movs	r2, #1
 8009746:	2100      	movs	r1, #0
 8009748:	4618      	mov	r0, r3
 800974a:	f000 fdab 	bl	800a2a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0202 	orr.w	r2, r2, #2
 800975c:	60da      	str	r2, [r3, #12]
      break;
 800975e:	e02e      	b.n	80097be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2201      	movs	r2, #1
 8009766:	2104      	movs	r1, #4
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fd9b 	bl	800a2a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0204 	orr.w	r2, r2, #4
 800977c:	60da      	str	r2, [r3, #12]
      break;
 800977e:	e01e      	b.n	80097be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2201      	movs	r2, #1
 8009786:	2100      	movs	r1, #0
 8009788:	4618      	mov	r0, r3
 800978a:	f000 fd8b 	bl	800a2a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2201      	movs	r2, #1
 8009794:	2104      	movs	r1, #4
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fd84 	bl	800a2a4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0202 	orr.w	r2, r2, #2
 80097aa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0204 	orr.w	r2, r2, #4
 80097ba:	60da      	str	r2, [r3, #12]
      break;
 80097bc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0201 	orr.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d020      	beq.n	800983c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01b      	beq.n	800983c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f06f 0202 	mvn.w	r2, #2
 800980c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7fb fb3a 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8009828:	e005      	b.n	8009836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa56 	bl	8009cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fa5c 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b00      	cmp	r3, #0
 8009844:	d020      	beq.n	8009888 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01b      	beq.n	8009888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f06f 0204 	mvn.w	r2, #4
 8009858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2202      	movs	r2, #2
 800985e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fb fb14 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8009874:	e005      	b.n	8009882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fa30 	bl	8009cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fa36 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f003 0308 	and.w	r3, r3, #8
 800988e:	2b00      	cmp	r3, #0
 8009890:	d020      	beq.n	80098d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f003 0308 	and.w	r3, r3, #8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d01b      	beq.n	80098d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f06f 0208 	mvn.w	r2, #8
 80098a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2204      	movs	r2, #4
 80098aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7fb faee 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 80098c0:	e005      	b.n	80098ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fa0a 	bl	8009cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa10 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f003 0310 	and.w	r3, r3, #16
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d020      	beq.n	8009920 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01b      	beq.n	8009920 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0210 	mvn.w	r2, #16
 80098f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2208      	movs	r2, #8
 80098f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7fb fac8 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 800990c:	e005      	b.n	800991a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f9e4 	bl	8009cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f9ea 	bl	8009cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00c      	beq.n	8009944 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d007      	beq.n	8009944 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f06f 0201 	mvn.w	r2, #1
 800993c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f9c3 	bl	8009cca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00c      	beq.n	8009968 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fd88 	bl	800a478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00c      	beq.n	800998c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d007      	beq.n	800998c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f9ba 	bl	8009d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00c      	beq.n	80099b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d007      	beq.n	80099b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f06f 0220 	mvn.w	r2, #32
 80099a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fd5b 	bl	800a466 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d101      	bne.n	80099d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099d2:	2302      	movs	r3, #2
 80099d4:	e0ae      	b.n	8009b34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b0c      	cmp	r3, #12
 80099e2:	f200 809f 	bhi.w	8009b24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a21 	.word	0x08009a21
 80099f0:	08009b25 	.word	0x08009b25
 80099f4:	08009b25 	.word	0x08009b25
 80099f8:	08009b25 	.word	0x08009b25
 80099fc:	08009a61 	.word	0x08009a61
 8009a00:	08009b25 	.word	0x08009b25
 8009a04:	08009b25 	.word	0x08009b25
 8009a08:	08009b25 	.word	0x08009b25
 8009a0c:	08009aa3 	.word	0x08009aa3
 8009a10:	08009b25 	.word	0x08009b25
 8009a14:	08009b25 	.word	0x08009b25
 8009a18:	08009b25 	.word	0x08009b25
 8009a1c:	08009ae3 	.word	0x08009ae3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68b9      	ldr	r1, [r7, #8]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 f9fa 	bl	8009e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f042 0208 	orr.w	r2, r2, #8
 8009a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0204 	bic.w	r2, r2, #4
 8009a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6999      	ldr	r1, [r3, #24]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	619a      	str	r2, [r3, #24]
      break;
 8009a5e:	e064      	b.n	8009b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 fa4a 	bl	8009f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	699a      	ldr	r2, [r3, #24]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6999      	ldr	r1, [r3, #24]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	021a      	lsls	r2, r3, #8
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	619a      	str	r2, [r3, #24]
      break;
 8009aa0:	e043      	b.n	8009b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 fa9d 	bl	8009fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69da      	ldr	r2, [r3, #28]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 0208 	orr.w	r2, r2, #8
 8009abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0204 	bic.w	r2, r2, #4
 8009acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69d9      	ldr	r1, [r3, #28]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	691a      	ldr	r2, [r3, #16]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	61da      	str	r2, [r3, #28]
      break;
 8009ae0:	e023      	b.n	8009b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 faf1 	bl	800a0d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	69da      	ldr	r2, [r3, #28]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	69da      	ldr	r2, [r3, #28]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69d9      	ldr	r1, [r3, #28]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	021a      	lsls	r2, r3, #8
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	61da      	str	r2, [r3, #28]
      break;
 8009b22:	e002      	b.n	8009b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	75fb      	strb	r3, [r7, #23]
      break;
 8009b28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d101      	bne.n	8009b58 <HAL_TIM_ConfigClockSource+0x1c>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e0b4      	b.n	8009cc2 <HAL_TIM_ConfigClockSource+0x186>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b90:	d03e      	beq.n	8009c10 <HAL_TIM_ConfigClockSource+0xd4>
 8009b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b96:	f200 8087 	bhi.w	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9e:	f000 8086 	beq.w	8009cae <HAL_TIM_ConfigClockSource+0x172>
 8009ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba6:	d87f      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba8:	2b70      	cmp	r3, #112	; 0x70
 8009baa:	d01a      	beq.n	8009be2 <HAL_TIM_ConfigClockSource+0xa6>
 8009bac:	2b70      	cmp	r3, #112	; 0x70
 8009bae:	d87b      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb0:	2b60      	cmp	r3, #96	; 0x60
 8009bb2:	d050      	beq.n	8009c56 <HAL_TIM_ConfigClockSource+0x11a>
 8009bb4:	2b60      	cmp	r3, #96	; 0x60
 8009bb6:	d877      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb8:	2b50      	cmp	r3, #80	; 0x50
 8009bba:	d03c      	beq.n	8009c36 <HAL_TIM_ConfigClockSource+0xfa>
 8009bbc:	2b50      	cmp	r3, #80	; 0x50
 8009bbe:	d873      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	d058      	beq.n	8009c76 <HAL_TIM_ConfigClockSource+0x13a>
 8009bc4:	2b40      	cmp	r3, #64	; 0x40
 8009bc6:	d86f      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc8:	2b30      	cmp	r3, #48	; 0x30
 8009bca:	d064      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x15a>
 8009bcc:	2b30      	cmp	r3, #48	; 0x30
 8009bce:	d86b      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd0:	2b20      	cmp	r3, #32
 8009bd2:	d060      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x15a>
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d867      	bhi.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d05c      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x15a>
 8009bdc:	2b10      	cmp	r3, #16
 8009bde:	d05a      	beq.n	8009c96 <HAL_TIM_ConfigClockSource+0x15a>
 8009be0:	e062      	b.n	8009ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bf2:	f000 fb38 	bl	800a266 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	609a      	str	r2, [r3, #8]
      break;
 8009c0e:	e04f      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c20:	f000 fb21 	bl	800a266 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	689a      	ldr	r2, [r3, #8]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c32:	609a      	str	r2, [r3, #8]
      break;
 8009c34:	e03c      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c42:	461a      	mov	r2, r3
 8009c44:	f000 fa98 	bl	800a178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2150      	movs	r1, #80	; 0x50
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 faef 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 8009c54:	e02c      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c62:	461a      	mov	r2, r3
 8009c64:	f000 fab6 	bl	800a1d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2160      	movs	r1, #96	; 0x60
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fadf 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 8009c74:	e01c      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c82:	461a      	mov	r2, r3
 8009c84:	f000 fa78 	bl	800a178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2140      	movs	r1, #64	; 0x40
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 facf 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 8009c94:	e00c      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	f000 fac6 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 8009ca6:	e003      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	73fb      	strb	r3, [r7, #15]
      break;
 8009cac:	e000      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009cd2:	bf00      	nop
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bc80      	pop	{r7}
 8009cec:	4770      	bx	lr

08009cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bc80      	pop	{r7}
 8009d10:	4770      	bx	lr
	...

08009d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a39      	ldr	r2, [pc, #228]	; (8009e0c <TIM_Base_SetConfig+0xf8>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d013      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a38      	ldr	r2, [pc, #224]	; (8009e10 <TIM_Base_SetConfig+0xfc>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d00f      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3a:	d00b      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a35      	ldr	r2, [pc, #212]	; (8009e14 <TIM_Base_SetConfig+0x100>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a34      	ldr	r2, [pc, #208]	; (8009e18 <TIM_Base_SetConfig+0x104>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a33      	ldr	r2, [pc, #204]	; (8009e1c <TIM_Base_SetConfig+0x108>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a28      	ldr	r2, [pc, #160]	; (8009e0c <TIM_Base_SetConfig+0xf8>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d013      	beq.n	8009d96 <TIM_Base_SetConfig+0x82>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a27      	ldr	r2, [pc, #156]	; (8009e10 <TIM_Base_SetConfig+0xfc>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d00f      	beq.n	8009d96 <TIM_Base_SetConfig+0x82>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d7c:	d00b      	beq.n	8009d96 <TIM_Base_SetConfig+0x82>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a24      	ldr	r2, [pc, #144]	; (8009e14 <TIM_Base_SetConfig+0x100>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d007      	beq.n	8009d96 <TIM_Base_SetConfig+0x82>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a23      	ldr	r2, [pc, #140]	; (8009e18 <TIM_Base_SetConfig+0x104>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d003      	beq.n	8009d96 <TIM_Base_SetConfig+0x82>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a22      	ldr	r2, [pc, #136]	; (8009e1c <TIM_Base_SetConfig+0x108>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d108      	bne.n	8009da8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a0f      	ldr	r2, [pc, #60]	; (8009e0c <TIM_Base_SetConfig+0xf8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_Base_SetConfig+0xc8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a0e      	ldr	r2, [pc, #56]	; (8009e10 <TIM_Base_SetConfig+0xfc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d103      	bne.n	8009de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	691a      	ldr	r2, [r3, #16]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d005      	beq.n	8009e02 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f023 0201 	bic.w	r2, r3, #1
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	611a      	str	r2, [r3, #16]
  }
}
 8009e02:	bf00      	nop
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr
 8009e0c:	40012c00 	.word	0x40012c00
 8009e10:	40013400 	.word	0x40013400
 8009e14:	40000400 	.word	0x40000400
 8009e18:	40000800 	.word	0x40000800
 8009e1c:	40000c00 	.word	0x40000c00

08009e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	f023 0201 	bic.w	r2, r3, #1
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f023 0302 	bic.w	r3, r3, #2
 8009e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a20      	ldr	r2, [pc, #128]	; (8009ef8 <TIM_OC1_SetConfig+0xd8>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d003      	beq.n	8009e84 <TIM_OC1_SetConfig+0x64>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a1f      	ldr	r2, [pc, #124]	; (8009efc <TIM_OC1_SetConfig+0xdc>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d10c      	bne.n	8009e9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	f023 0308 	bic.w	r3, r3, #8
 8009e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f023 0304 	bic.w	r3, r3, #4
 8009e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <TIM_OC1_SetConfig+0xd8>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d003      	beq.n	8009eae <TIM_OC1_SetConfig+0x8e>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a14      	ldr	r2, [pc, #80]	; (8009efc <TIM_OC1_SetConfig+0xdc>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d111      	bne.n	8009ed2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	621a      	str	r2, [r3, #32]
}
 8009eec:	bf00      	nop
 8009eee:	371c      	adds	r7, #28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bc80      	pop	{r7}
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	40012c00 	.word	0x40012c00
 8009efc:	40013400 	.word	0x40013400

08009f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a1b      	ldr	r3, [r3, #32]
 8009f14:	f023 0210 	bic.w	r2, r3, #16
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f023 0320 	bic.w	r3, r3, #32
 8009f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a21      	ldr	r2, [pc, #132]	; (8009fe0 <TIM_OC2_SetConfig+0xe0>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d003      	beq.n	8009f68 <TIM_OC2_SetConfig+0x68>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a20      	ldr	r2, [pc, #128]	; (8009fe4 <TIM_OC2_SetConfig+0xe4>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d10d      	bne.n	8009f84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	011b      	lsls	r3, r3, #4
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <TIM_OC2_SetConfig+0xe0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d003      	beq.n	8009f94 <TIM_OC2_SetConfig+0x94>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <TIM_OC2_SetConfig+0xe4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d113      	bne.n	8009fbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bc80      	pop	{r7}
 8009fde:	4770      	bx	lr
 8009fe0:	40012c00 	.word	0x40012c00
 8009fe4:	40013400 	.word	0x40013400

08009fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0303 	bic.w	r3, r3, #3
 800a01e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a21      	ldr	r2, [pc, #132]	; (800a0c8 <TIM_OC3_SetConfig+0xe0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d003      	beq.n	800a04e <TIM_OC3_SetConfig+0x66>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a20      	ldr	r2, [pc, #128]	; (800a0cc <TIM_OC3_SetConfig+0xe4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d10d      	bne.n	800a06a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <TIM_OC3_SetConfig+0xe0>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d003      	beq.n	800a07a <TIM_OC3_SetConfig+0x92>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a15      	ldr	r2, [pc, #84]	; (800a0cc <TIM_OC3_SetConfig+0xe4>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d113      	bne.n	800a0a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	621a      	str	r2, [r3, #32]
}
 800a0bc:	bf00      	nop
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bc80      	pop	{r7}
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	40012c00 	.word	0x40012c00
 800a0cc:	40013400 	.word	0x40013400

0800a0d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a11a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	031b      	lsls	r3, r3, #12
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	4313      	orrs	r3, r2
 800a126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a11      	ldr	r2, [pc, #68]	; (800a170 <TIM_OC4_SetConfig+0xa0>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d003      	beq.n	800a138 <TIM_OC4_SetConfig+0x68>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a10      	ldr	r2, [pc, #64]	; (800a174 <TIM_OC4_SetConfig+0xa4>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d109      	bne.n	800a14c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a13e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	019b      	lsls	r3, r3, #6
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4313      	orrs	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bc80      	pop	{r7}
 800a16e:	4770      	bx	lr
 800a170:	40012c00 	.word	0x40012c00
 800a174:	40013400 	.word	0x40013400

0800a178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f023 0201 	bic.w	r2, r3, #1
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f023 030a 	bic.w	r3, r3, #10
 800a1b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	621a      	str	r2, [r3, #32]
}
 800a1ca:	bf00      	nop
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr

0800a1d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	f023 0210 	bic.w	r2, r3, #16
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	031b      	lsls	r3, r3, #12
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	4313      	orrs	r3, r2
 800a208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a210:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	011b      	lsls	r3, r3, #4
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	4313      	orrs	r3, r2
 800a21a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	621a      	str	r2, [r3, #32]
}
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr

0800a232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	f043 0307 	orr.w	r3, r3, #7
 800a254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	609a      	str	r2, [r3, #8]
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	bc80      	pop	{r7}
 800a264:	4770      	bx	lr

0800a266 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a266:	b480      	push	{r7}
 800a268:	b087      	sub	sp, #28
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	607a      	str	r2, [r7, #4]
 800a272:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a280:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	021a      	lsls	r2, r3, #8
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	431a      	orrs	r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	4313      	orrs	r3, r2
 800a292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	609a      	str	r2, [r3, #8]
}
 800a29a:	bf00      	nop
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bc80      	pop	{r7}
 800a2a2:	4770      	bx	lr

0800a2a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f003 031f 	and.w	r3, r3, #31
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6a1a      	ldr	r2, [r3, #32]
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	401a      	ands	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a1a      	ldr	r2, [r3, #32]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f003 031f 	and.w	r3, r3, #31
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	621a      	str	r2, [r3, #32]
}
 800a2e2:	bf00      	nop
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bc80      	pop	{r7}
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d101      	bne.n	800a304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a300:	2302      	movs	r3, #2
 800a302:	e050      	b.n	800a3a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a32a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a1b      	ldr	r2, [pc, #108]	; (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d018      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a19      	ldr	r2, [pc, #100]	; (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d013      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a35a:	d00e      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a15      	ldr	r2, [pc, #84]	; (800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d009      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a14      	ldr	r2, [pc, #80]	; (800a3bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d004      	beq.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a12      	ldr	r2, [pc, #72]	; (800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d10c      	bne.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bc80      	pop	{r7}
 800a3ae:	4770      	bx	lr
 800a3b0:	40012c00 	.word	0x40012c00
 800a3b4:	40013400 	.word	0x40013400
 800a3b8:	40000400 	.word	0x40000400
 800a3bc:	40000800 	.word	0x40000800
 800a3c0:	40000c00 	.word	0x40000c00

0800a3c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d101      	bne.n	800a3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e03d      	b.n	800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	4313      	orrs	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	4313      	orrs	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	bc80      	pop	{r7}
 800a464:	4770      	bx	lr

0800a466 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	bc80      	pop	{r7}
 800a476:	4770      	bx	lr

0800a478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	bc80      	pop	{r7}
 800a488:	4770      	bx	lr

0800a48a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e042      	b.n	800a522 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7fb fe63 	bl	800617c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2224      	movs	r2, #36	; 0x24
 800a4ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f972 	bl	800a7b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	695a      	ldr	r2, [r3, #20]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a502:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2220      	movs	r2, #32
 800a50e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2220      	movs	r2, #32
 800a516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b08a      	sub	sp, #40	; 0x28
 800a52e:	af02      	add	r7, sp, #8
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	603b      	str	r3, [r7, #0]
 800a536:	4613      	mov	r3, r2
 800a538:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b20      	cmp	r3, #32
 800a548:	d175      	bne.n	800a636 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <HAL_UART_Transmit+0x2c>
 800a550:	88fb      	ldrh	r3, [r7, #6]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e06e      	b.n	800a638 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2221      	movs	r2, #33	; 0x21
 800a564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a568:	f7fb ffb8 	bl	80064dc <HAL_GetTick>
 800a56c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	88fa      	ldrh	r2, [r7, #6]
 800a572:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	88fa      	ldrh	r2, [r7, #6]
 800a578:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a582:	d108      	bne.n	800a596 <HAL_UART_Transmit+0x6c>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d104      	bne.n	800a596 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	61bb      	str	r3, [r7, #24]
 800a594:	e003      	b.n	800a59e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a59e:	e02e      	b.n	800a5fe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2180      	movs	r1, #128	; 0x80
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 f848 	bl	800a640 <UART_WaitOnFlagUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d005      	beq.n	800a5c2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e03a      	b.n	800a638 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10b      	bne.n	800a5e0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	3302      	adds	r3, #2
 800a5dc:	61bb      	str	r3, [r7, #24]
 800a5de:	e007      	b.n	800a5f0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a602:	b29b      	uxth	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1cb      	bne.n	800a5a0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2200      	movs	r2, #0
 800a610:	2140      	movs	r1, #64	; 0x40
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f000 f814 	bl	800a640 <UART_WaitOnFlagUntilTimeout>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d005      	beq.n	800a62a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2220      	movs	r2, #32
 800a622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	e006      	b.n	800a638 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2220      	movs	r2, #32
 800a62e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	e000      	b.n	800a638 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a636:	2302      	movs	r3, #2
  }
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	4613      	mov	r3, r2
 800a64e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a650:	e03b      	b.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a658:	d037      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65a:	f7fb ff3f 	bl	80064dc <HAL_GetTick>
 800a65e:	4602      	mov	r2, r0
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	6a3a      	ldr	r2, [r7, #32]
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <UART_WaitOnFlagUntilTimeout+0x30>
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e03a      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	f003 0304 	and.w	r3, r3, #4
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d023      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x8a>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b80      	cmp	r3, #128	; 0x80
 800a686:	d020      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x8a>
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b40      	cmp	r3, #64	; 0x40
 800a68c:	d01d      	beq.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0308 	and.w	r3, r3, #8
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d116      	bne.n	800a6ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a69c:	2300      	movs	r3, #0
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	617b      	str	r3, [r7, #20]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	617b      	str	r3, [r7, #20]
 800a6b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f81d 	bl	800a6f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e00f      	b.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	bf0c      	ite	eq
 800a6da:	2301      	moveq	r3, #1
 800a6dc:	2300      	movne	r3, #0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d0b4      	beq.n	800a652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b095      	sub	sp, #84	; 0x54
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	330c      	adds	r3, #12
 800a700:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a710:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	330c      	adds	r3, #12
 800a718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a71a:	643a      	str	r2, [r7, #64]	; 0x40
 800a71c:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e5      	bne.n	800a6fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3314      	adds	r3, #20
 800a734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	e853 3f00 	ldrex	r3, [r3]
 800a73c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	f023 0301 	bic.w	r3, r3, #1
 800a744:	64bb      	str	r3, [r7, #72]	; 0x48
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3314      	adds	r3, #20
 800a74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a74e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a756:	e841 2300 	strex	r3, r2, [r1]
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1e5      	bne.n	800a72e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a766:	2b01      	cmp	r3, #1
 800a768:	d119      	bne.n	800a79e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	330c      	adds	r3, #12
 800a770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	60bb      	str	r3, [r7, #8]
   return(result);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	f023 0310 	bic.w	r3, r3, #16
 800a780:	647b      	str	r3, [r7, #68]	; 0x44
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	330c      	adds	r3, #12
 800a788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a78a:	61ba      	str	r2, [r7, #24]
 800a78c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	6979      	ldr	r1, [r7, #20]
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	613b      	str	r3, [r7, #16]
   return(result);
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e5      	bne.n	800a76a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7ac:	bf00      	nop
 800a7ae:	3754      	adds	r7, #84	; 0x54
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689a      	ldr	r2, [r3, #8]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a7f2:	f023 030c 	bic.w	r3, r3, #12
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	6812      	ldr	r2, [r2, #0]
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a2c      	ldr	r2, [pc, #176]	; (800a8cc <UART_SetConfig+0x114>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d103      	bne.n	800a828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a820:	f7fe fb68 	bl	8008ef4 <HAL_RCC_GetPCLK2Freq>
 800a824:	60f8      	str	r0, [r7, #12]
 800a826:	e002      	b.n	800a82e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a828:	f7fe fb50 	bl	8008ecc <HAL_RCC_GetPCLK1Freq>
 800a82c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009a      	lsls	r2, r3, #2
 800a838:	441a      	add	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	fbb2 f3f3 	udiv	r3, r2, r3
 800a844:	4a22      	ldr	r2, [pc, #136]	; (800a8d0 <UART_SetConfig+0x118>)
 800a846:	fba2 2303 	umull	r2, r3, r2, r3
 800a84a:	095b      	lsrs	r3, r3, #5
 800a84c:	0119      	lsls	r1, r3, #4
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	009a      	lsls	r2, r3, #2
 800a858:	441a      	add	r2, r3
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	fbb2 f2f3 	udiv	r2, r2, r3
 800a864:	4b1a      	ldr	r3, [pc, #104]	; (800a8d0 <UART_SetConfig+0x118>)
 800a866:	fba3 0302 	umull	r0, r3, r3, r2
 800a86a:	095b      	lsrs	r3, r3, #5
 800a86c:	2064      	movs	r0, #100	; 0x64
 800a86e:	fb00 f303 	mul.w	r3, r0, r3
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	011b      	lsls	r3, r3, #4
 800a876:	3332      	adds	r3, #50	; 0x32
 800a878:	4a15      	ldr	r2, [pc, #84]	; (800a8d0 <UART_SetConfig+0x118>)
 800a87a:	fba2 2303 	umull	r2, r3, r2, r3
 800a87e:	095b      	lsrs	r3, r3, #5
 800a880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a884:	4419      	add	r1, r3
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009a      	lsls	r2, r3, #2
 800a890:	441a      	add	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	fbb2 f2f3 	udiv	r2, r2, r3
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <UART_SetConfig+0x118>)
 800a89e:	fba3 0302 	umull	r0, r3, r3, r2
 800a8a2:	095b      	lsrs	r3, r3, #5
 800a8a4:	2064      	movs	r0, #100	; 0x64
 800a8a6:	fb00 f303 	mul.w	r3, r0, r3
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	011b      	lsls	r3, r3, #4
 800a8ae:	3332      	adds	r3, #50	; 0x32
 800a8b0:	4a07      	ldr	r2, [pc, #28]	; (800a8d0 <UART_SetConfig+0x118>)
 800a8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b6:	095b      	lsrs	r3, r3, #5
 800a8b8:	f003 020f 	and.w	r2, r3, #15
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	440a      	add	r2, r1
 800a8c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	40013800 	.word	0x40013800
 800a8d0:	51eb851f 	.word	0x51eb851f

0800a8d4 <__cvt>:
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8da:	461f      	mov	r7, r3
 800a8dc:	bfbb      	ittet	lt
 800a8de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a8e2:	461f      	movlt	r7, r3
 800a8e4:	2300      	movge	r3, #0
 800a8e6:	232d      	movlt	r3, #45	; 0x2d
 800a8e8:	b088      	sub	sp, #32
 800a8ea:	4614      	mov	r4, r2
 800a8ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a8f0:	7013      	strb	r3, [r2, #0]
 800a8f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a8f8:	f023 0820 	bic.w	r8, r3, #32
 800a8fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a900:	d005      	beq.n	800a90e <__cvt+0x3a>
 800a902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a906:	d100      	bne.n	800a90a <__cvt+0x36>
 800a908:	3501      	adds	r5, #1
 800a90a:	2302      	movs	r3, #2
 800a90c:	e000      	b.n	800a910 <__cvt+0x3c>
 800a90e:	2303      	movs	r3, #3
 800a910:	aa07      	add	r2, sp, #28
 800a912:	9204      	str	r2, [sp, #16]
 800a914:	aa06      	add	r2, sp, #24
 800a916:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a91a:	e9cd 3500 	strd	r3, r5, [sp]
 800a91e:	4622      	mov	r2, r4
 800a920:	463b      	mov	r3, r7
 800a922:	f001 f981 	bl	800bc28 <_dtoa_r>
 800a926:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a92a:	4606      	mov	r6, r0
 800a92c:	d102      	bne.n	800a934 <__cvt+0x60>
 800a92e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a930:	07db      	lsls	r3, r3, #31
 800a932:	d522      	bpl.n	800a97a <__cvt+0xa6>
 800a934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a938:	eb06 0905 	add.w	r9, r6, r5
 800a93c:	d110      	bne.n	800a960 <__cvt+0x8c>
 800a93e:	7833      	ldrb	r3, [r6, #0]
 800a940:	2b30      	cmp	r3, #48	; 0x30
 800a942:	d10a      	bne.n	800a95a <__cvt+0x86>
 800a944:	2200      	movs	r2, #0
 800a946:	2300      	movs	r3, #0
 800a948:	4620      	mov	r0, r4
 800a94a:	4639      	mov	r1, r7
 800a94c:	f7f6 f898 	bl	8000a80 <__aeabi_dcmpeq>
 800a950:	b918      	cbnz	r0, 800a95a <__cvt+0x86>
 800a952:	f1c5 0501 	rsb	r5, r5, #1
 800a956:	f8ca 5000 	str.w	r5, [sl]
 800a95a:	f8da 3000 	ldr.w	r3, [sl]
 800a95e:	4499      	add	r9, r3
 800a960:	2200      	movs	r2, #0
 800a962:	2300      	movs	r3, #0
 800a964:	4620      	mov	r0, r4
 800a966:	4639      	mov	r1, r7
 800a968:	f7f6 f88a 	bl	8000a80 <__aeabi_dcmpeq>
 800a96c:	b108      	cbz	r0, 800a972 <__cvt+0x9e>
 800a96e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a972:	2230      	movs	r2, #48	; 0x30
 800a974:	9b07      	ldr	r3, [sp, #28]
 800a976:	454b      	cmp	r3, r9
 800a978:	d307      	bcc.n	800a98a <__cvt+0xb6>
 800a97a:	4630      	mov	r0, r6
 800a97c:	9b07      	ldr	r3, [sp, #28]
 800a97e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a980:	1b9b      	subs	r3, r3, r6
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	b008      	add	sp, #32
 800a986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98a:	1c59      	adds	r1, r3, #1
 800a98c:	9107      	str	r1, [sp, #28]
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	e7f0      	b.n	800a974 <__cvt+0xa0>

0800a992 <__exponent>:
 800a992:	4603      	mov	r3, r0
 800a994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a996:	2900      	cmp	r1, #0
 800a998:	f803 2b02 	strb.w	r2, [r3], #2
 800a99c:	bfb6      	itet	lt
 800a99e:	222d      	movlt	r2, #45	; 0x2d
 800a9a0:	222b      	movge	r2, #43	; 0x2b
 800a9a2:	4249      	neglt	r1, r1
 800a9a4:	2909      	cmp	r1, #9
 800a9a6:	7042      	strb	r2, [r0, #1]
 800a9a8:	dd2a      	ble.n	800aa00 <__exponent+0x6e>
 800a9aa:	f10d 0207 	add.w	r2, sp, #7
 800a9ae:	4617      	mov	r7, r2
 800a9b0:	260a      	movs	r6, #10
 800a9b2:	fb91 f5f6 	sdiv	r5, r1, r6
 800a9b6:	4694      	mov	ip, r2
 800a9b8:	fb06 1415 	mls	r4, r6, r5, r1
 800a9bc:	3430      	adds	r4, #48	; 0x30
 800a9be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	2c63      	cmp	r4, #99	; 0x63
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	f102 32ff 	add.w	r2, r2, #4294967295
 800a9cc:	dcf1      	bgt.n	800a9b2 <__exponent+0x20>
 800a9ce:	3130      	adds	r1, #48	; 0x30
 800a9d0:	f1ac 0402 	sub.w	r4, ip, #2
 800a9d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a9d8:	4622      	mov	r2, r4
 800a9da:	1c41      	adds	r1, r0, #1
 800a9dc:	42ba      	cmp	r2, r7
 800a9de:	d30a      	bcc.n	800a9f6 <__exponent+0x64>
 800a9e0:	f10d 0209 	add.w	r2, sp, #9
 800a9e4:	eba2 020c 	sub.w	r2, r2, ip
 800a9e8:	42bc      	cmp	r4, r7
 800a9ea:	bf88      	it	hi
 800a9ec:	2200      	movhi	r2, #0
 800a9ee:	4413      	add	r3, r2
 800a9f0:	1a18      	subs	r0, r3, r0
 800a9f2:	b003      	add	sp, #12
 800a9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a9fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a9fe:	e7ed      	b.n	800a9dc <__exponent+0x4a>
 800aa00:	2330      	movs	r3, #48	; 0x30
 800aa02:	3130      	adds	r1, #48	; 0x30
 800aa04:	7083      	strb	r3, [r0, #2]
 800aa06:	70c1      	strb	r1, [r0, #3]
 800aa08:	1d03      	adds	r3, r0, #4
 800aa0a:	e7f1      	b.n	800a9f0 <__exponent+0x5e>

0800aa0c <_printf_float>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	b091      	sub	sp, #68	; 0x44
 800aa12:	460c      	mov	r4, r1
 800aa14:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800aa18:	4616      	mov	r6, r2
 800aa1a:	461f      	mov	r7, r3
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	f000 ffe3 	bl	800b9e8 <_localeconv_r>
 800aa22:	6803      	ldr	r3, [r0, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	9309      	str	r3, [sp, #36]	; 0x24
 800aa28:	f7f5 fbfe 	bl	8000228 <strlen>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	930e      	str	r3, [sp, #56]	; 0x38
 800aa30:	f8d8 3000 	ldr.w	r3, [r8]
 800aa34:	900a      	str	r0, [sp, #40]	; 0x28
 800aa36:	3307      	adds	r3, #7
 800aa38:	f023 0307 	bic.w	r3, r3, #7
 800aa3c:	f103 0208 	add.w	r2, r3, #8
 800aa40:	f894 9018 	ldrb.w	r9, [r4, #24]
 800aa44:	f8d4 b000 	ldr.w	fp, [r4]
 800aa48:	f8c8 2000 	str.w	r2, [r8]
 800aa4c:	e9d3 a800 	ldrd	sl, r8, [r3]
 800aa50:	4652      	mov	r2, sl
 800aa52:	4643      	mov	r3, r8
 800aa54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa58:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800aa5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa5e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa62:	4650      	mov	r0, sl
 800aa64:	4b9c      	ldr	r3, [pc, #624]	; (800acd8 <_printf_float+0x2cc>)
 800aa66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa68:	f7f6 f83c 	bl	8000ae4 <__aeabi_dcmpun>
 800aa6c:	bb70      	cbnz	r0, 800aacc <_printf_float+0xc0>
 800aa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa72:	4650      	mov	r0, sl
 800aa74:	4b98      	ldr	r3, [pc, #608]	; (800acd8 <_printf_float+0x2cc>)
 800aa76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa78:	f7f6 f816 	bl	8000aa8 <__aeabi_dcmple>
 800aa7c:	bb30      	cbnz	r0, 800aacc <_printf_float+0xc0>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2300      	movs	r3, #0
 800aa82:	4650      	mov	r0, sl
 800aa84:	4641      	mov	r1, r8
 800aa86:	f7f6 f805 	bl	8000a94 <__aeabi_dcmplt>
 800aa8a:	b110      	cbz	r0, 800aa92 <_printf_float+0x86>
 800aa8c:	232d      	movs	r3, #45	; 0x2d
 800aa8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa92:	4a92      	ldr	r2, [pc, #584]	; (800acdc <_printf_float+0x2d0>)
 800aa94:	4b92      	ldr	r3, [pc, #584]	; (800ace0 <_printf_float+0x2d4>)
 800aa96:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aa9a:	bf94      	ite	ls
 800aa9c:	4690      	movls	r8, r2
 800aa9e:	4698      	movhi	r8, r3
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	f04f 0a00 	mov.w	sl, #0
 800aaa6:	6123      	str	r3, [r4, #16]
 800aaa8:	f02b 0304 	bic.w	r3, fp, #4
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	4633      	mov	r3, r6
 800aab0:	4621      	mov	r1, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	9700      	str	r7, [sp, #0]
 800aab6:	aa0f      	add	r2, sp, #60	; 0x3c
 800aab8:	f000 f9d6 	bl	800ae68 <_printf_common>
 800aabc:	3001      	adds	r0, #1
 800aabe:	f040 8090 	bne.w	800abe2 <_printf_float+0x1d6>
 800aac2:	f04f 30ff 	mov.w	r0, #4294967295
 800aac6:	b011      	add	sp, #68	; 0x44
 800aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aacc:	4652      	mov	r2, sl
 800aace:	4643      	mov	r3, r8
 800aad0:	4650      	mov	r0, sl
 800aad2:	4641      	mov	r1, r8
 800aad4:	f7f6 f806 	bl	8000ae4 <__aeabi_dcmpun>
 800aad8:	b148      	cbz	r0, 800aaee <_printf_float+0xe2>
 800aada:	f1b8 0f00 	cmp.w	r8, #0
 800aade:	bfb8      	it	lt
 800aae0:	232d      	movlt	r3, #45	; 0x2d
 800aae2:	4a80      	ldr	r2, [pc, #512]	; (800ace4 <_printf_float+0x2d8>)
 800aae4:	bfb8      	it	lt
 800aae6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aaea:	4b7f      	ldr	r3, [pc, #508]	; (800ace8 <_printf_float+0x2dc>)
 800aaec:	e7d3      	b.n	800aa96 <_printf_float+0x8a>
 800aaee:	6863      	ldr	r3, [r4, #4]
 800aaf0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	d142      	bne.n	800ab7e <_printf_float+0x172>
 800aaf8:	2306      	movs	r3, #6
 800aafa:	6063      	str	r3, [r4, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	9206      	str	r2, [sp, #24]
 800ab00:	aa0e      	add	r2, sp, #56	; 0x38
 800ab02:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ab06:	aa0d      	add	r2, sp, #52	; 0x34
 800ab08:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ab0c:	9203      	str	r2, [sp, #12]
 800ab0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ab12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	4652      	mov	r2, sl
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4643      	mov	r3, r8
 800ab22:	910b      	str	r1, [sp, #44]	; 0x2c
 800ab24:	f7ff fed6 	bl	800a8d4 <__cvt>
 800ab28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	2947      	cmp	r1, #71	; 0x47
 800ab2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab30:	d108      	bne.n	800ab44 <_printf_float+0x138>
 800ab32:	1cc8      	adds	r0, r1, #3
 800ab34:	db02      	blt.n	800ab3c <_printf_float+0x130>
 800ab36:	6863      	ldr	r3, [r4, #4]
 800ab38:	4299      	cmp	r1, r3
 800ab3a:	dd40      	ble.n	800abbe <_printf_float+0x1b2>
 800ab3c:	f1a9 0902 	sub.w	r9, r9, #2
 800ab40:	fa5f f989 	uxtb.w	r9, r9
 800ab44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ab48:	d81f      	bhi.n	800ab8a <_printf_float+0x17e>
 800ab4a:	464a      	mov	r2, r9
 800ab4c:	3901      	subs	r1, #1
 800ab4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab52:	910d      	str	r1, [sp, #52]	; 0x34
 800ab54:	f7ff ff1d 	bl	800a992 <__exponent>
 800ab58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab5a:	4682      	mov	sl, r0
 800ab5c:	1813      	adds	r3, r2, r0
 800ab5e:	2a01      	cmp	r2, #1
 800ab60:	6123      	str	r3, [r4, #16]
 800ab62:	dc02      	bgt.n	800ab6a <_printf_float+0x15e>
 800ab64:	6822      	ldr	r2, [r4, #0]
 800ab66:	07d2      	lsls	r2, r2, #31
 800ab68:	d501      	bpl.n	800ab6e <_printf_float+0x162>
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	6123      	str	r3, [r4, #16]
 800ab6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d09b      	beq.n	800aaae <_printf_float+0xa2>
 800ab76:	232d      	movs	r3, #45	; 0x2d
 800ab78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab7c:	e797      	b.n	800aaae <_printf_float+0xa2>
 800ab7e:	2947      	cmp	r1, #71	; 0x47
 800ab80:	d1bc      	bne.n	800aafc <_printf_float+0xf0>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1ba      	bne.n	800aafc <_printf_float+0xf0>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e7b7      	b.n	800aafa <_printf_float+0xee>
 800ab8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ab8e:	d118      	bne.n	800abc2 <_printf_float+0x1b6>
 800ab90:	2900      	cmp	r1, #0
 800ab92:	6863      	ldr	r3, [r4, #4]
 800ab94:	dd0b      	ble.n	800abae <_printf_float+0x1a2>
 800ab96:	6121      	str	r1, [r4, #16]
 800ab98:	b913      	cbnz	r3, 800aba0 <_printf_float+0x194>
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	07d0      	lsls	r0, r2, #31
 800ab9e:	d502      	bpl.n	800aba6 <_printf_float+0x19a>
 800aba0:	3301      	adds	r3, #1
 800aba2:	440b      	add	r3, r1
 800aba4:	6123      	str	r3, [r4, #16]
 800aba6:	f04f 0a00 	mov.w	sl, #0
 800abaa:	65a1      	str	r1, [r4, #88]	; 0x58
 800abac:	e7df      	b.n	800ab6e <_printf_float+0x162>
 800abae:	b913      	cbnz	r3, 800abb6 <_printf_float+0x1aa>
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	07d2      	lsls	r2, r2, #31
 800abb4:	d501      	bpl.n	800abba <_printf_float+0x1ae>
 800abb6:	3302      	adds	r3, #2
 800abb8:	e7f4      	b.n	800aba4 <_printf_float+0x198>
 800abba:	2301      	movs	r3, #1
 800abbc:	e7f2      	b.n	800aba4 <_printf_float+0x198>
 800abbe:	f04f 0967 	mov.w	r9, #103	; 0x67
 800abc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abc4:	4299      	cmp	r1, r3
 800abc6:	db05      	blt.n	800abd4 <_printf_float+0x1c8>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	6121      	str	r1, [r4, #16]
 800abcc:	07d8      	lsls	r0, r3, #31
 800abce:	d5ea      	bpl.n	800aba6 <_printf_float+0x19a>
 800abd0:	1c4b      	adds	r3, r1, #1
 800abd2:	e7e7      	b.n	800aba4 <_printf_float+0x198>
 800abd4:	2900      	cmp	r1, #0
 800abd6:	bfcc      	ite	gt
 800abd8:	2201      	movgt	r2, #1
 800abda:	f1c1 0202 	rsble	r2, r1, #2
 800abde:	4413      	add	r3, r2
 800abe0:	e7e0      	b.n	800aba4 <_printf_float+0x198>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	055a      	lsls	r2, r3, #21
 800abe6:	d407      	bmi.n	800abf8 <_printf_float+0x1ec>
 800abe8:	6923      	ldr	r3, [r4, #16]
 800abea:	4642      	mov	r2, r8
 800abec:	4631      	mov	r1, r6
 800abee:	4628      	mov	r0, r5
 800abf0:	47b8      	blx	r7
 800abf2:	3001      	adds	r0, #1
 800abf4:	d12b      	bne.n	800ac4e <_printf_float+0x242>
 800abf6:	e764      	b.n	800aac2 <_printf_float+0xb6>
 800abf8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800abfc:	f240 80dd 	bls.w	800adba <_printf_float+0x3ae>
 800ac00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac04:	2200      	movs	r2, #0
 800ac06:	2300      	movs	r3, #0
 800ac08:	f7f5 ff3a 	bl	8000a80 <__aeabi_dcmpeq>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d033      	beq.n	800ac78 <_printf_float+0x26c>
 800ac10:	2301      	movs	r3, #1
 800ac12:	4631      	mov	r1, r6
 800ac14:	4628      	mov	r0, r5
 800ac16:	4a35      	ldr	r2, [pc, #212]	; (800acec <_printf_float+0x2e0>)
 800ac18:	47b8      	blx	r7
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	f43f af51 	beq.w	800aac2 <_printf_float+0xb6>
 800ac20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac24:	429a      	cmp	r2, r3
 800ac26:	db02      	blt.n	800ac2e <_printf_float+0x222>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	07d8      	lsls	r0, r3, #31
 800ac2c:	d50f      	bpl.n	800ac4e <_printf_float+0x242>
 800ac2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac32:	4631      	mov	r1, r6
 800ac34:	4628      	mov	r0, r5
 800ac36:	47b8      	blx	r7
 800ac38:	3001      	adds	r0, #1
 800ac3a:	f43f af42 	beq.w	800aac2 <_printf_float+0xb6>
 800ac3e:	f04f 0800 	mov.w	r8, #0
 800ac42:	f104 091a 	add.w	r9, r4, #26
 800ac46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	4543      	cmp	r3, r8
 800ac4c:	dc09      	bgt.n	800ac62 <_printf_float+0x256>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	079b      	lsls	r3, r3, #30
 800ac52:	f100 8104 	bmi.w	800ae5e <_printf_float+0x452>
 800ac56:	68e0      	ldr	r0, [r4, #12]
 800ac58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac5a:	4298      	cmp	r0, r3
 800ac5c:	bfb8      	it	lt
 800ac5e:	4618      	movlt	r0, r3
 800ac60:	e731      	b.n	800aac6 <_printf_float+0xba>
 800ac62:	2301      	movs	r3, #1
 800ac64:	464a      	mov	r2, r9
 800ac66:	4631      	mov	r1, r6
 800ac68:	4628      	mov	r0, r5
 800ac6a:	47b8      	blx	r7
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	f43f af28 	beq.w	800aac2 <_printf_float+0xb6>
 800ac72:	f108 0801 	add.w	r8, r8, #1
 800ac76:	e7e6      	b.n	800ac46 <_printf_float+0x23a>
 800ac78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dc38      	bgt.n	800acf0 <_printf_float+0x2e4>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	4631      	mov	r1, r6
 800ac82:	4628      	mov	r0, r5
 800ac84:	4a19      	ldr	r2, [pc, #100]	; (800acec <_printf_float+0x2e0>)
 800ac86:	47b8      	blx	r7
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f43f af1a 	beq.w	800aac2 <_printf_float+0xb6>
 800ac8e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ac92:	4313      	orrs	r3, r2
 800ac94:	d102      	bne.n	800ac9c <_printf_float+0x290>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	07d9      	lsls	r1, r3, #31
 800ac9a:	d5d8      	bpl.n	800ac4e <_printf_float+0x242>
 800ac9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aca0:	4631      	mov	r1, r6
 800aca2:	4628      	mov	r0, r5
 800aca4:	47b8      	blx	r7
 800aca6:	3001      	adds	r0, #1
 800aca8:	f43f af0b 	beq.w	800aac2 <_printf_float+0xb6>
 800acac:	f04f 0900 	mov.w	r9, #0
 800acb0:	f104 0a1a 	add.w	sl, r4, #26
 800acb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb6:	425b      	negs	r3, r3
 800acb8:	454b      	cmp	r3, r9
 800acba:	dc01      	bgt.n	800acc0 <_printf_float+0x2b4>
 800acbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acbe:	e794      	b.n	800abea <_printf_float+0x1de>
 800acc0:	2301      	movs	r3, #1
 800acc2:	4652      	mov	r2, sl
 800acc4:	4631      	mov	r1, r6
 800acc6:	4628      	mov	r0, r5
 800acc8:	47b8      	blx	r7
 800acca:	3001      	adds	r0, #1
 800accc:	f43f aef9 	beq.w	800aac2 <_printf_float+0xb6>
 800acd0:	f109 0901 	add.w	r9, r9, #1
 800acd4:	e7ee      	b.n	800acb4 <_printf_float+0x2a8>
 800acd6:	bf00      	nop
 800acd8:	7fefffff 	.word	0x7fefffff
 800acdc:	0800f292 	.word	0x0800f292
 800ace0:	0800f296 	.word	0x0800f296
 800ace4:	0800f29a 	.word	0x0800f29a
 800ace8:	0800f29e 	.word	0x0800f29e
 800acec:	0800f2a2 	.word	0x0800f2a2
 800acf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acf4:	429a      	cmp	r2, r3
 800acf6:	bfa8      	it	ge
 800acf8:	461a      	movge	r2, r3
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	4691      	mov	r9, r2
 800acfe:	dc37      	bgt.n	800ad70 <_printf_float+0x364>
 800ad00:	f04f 0b00 	mov.w	fp, #0
 800ad04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad08:	f104 021a 	add.w	r2, r4, #26
 800ad0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ad10:	ebaa 0309 	sub.w	r3, sl, r9
 800ad14:	455b      	cmp	r3, fp
 800ad16:	dc33      	bgt.n	800ad80 <_printf_float+0x374>
 800ad18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	db3b      	blt.n	800ad98 <_printf_float+0x38c>
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	07da      	lsls	r2, r3, #31
 800ad24:	d438      	bmi.n	800ad98 <_printf_float+0x38c>
 800ad26:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ad2a:	eba2 0903 	sub.w	r9, r2, r3
 800ad2e:	eba2 020a 	sub.w	r2, r2, sl
 800ad32:	4591      	cmp	r9, r2
 800ad34:	bfa8      	it	ge
 800ad36:	4691      	movge	r9, r2
 800ad38:	f1b9 0f00 	cmp.w	r9, #0
 800ad3c:	dc34      	bgt.n	800ada8 <_printf_float+0x39c>
 800ad3e:	f04f 0800 	mov.w	r8, #0
 800ad42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad46:	f104 0a1a 	add.w	sl, r4, #26
 800ad4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad4e:	1a9b      	subs	r3, r3, r2
 800ad50:	eba3 0309 	sub.w	r3, r3, r9
 800ad54:	4543      	cmp	r3, r8
 800ad56:	f77f af7a 	ble.w	800ac4e <_printf_float+0x242>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	4652      	mov	r2, sl
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b8      	blx	r7
 800ad64:	3001      	adds	r0, #1
 800ad66:	f43f aeac 	beq.w	800aac2 <_printf_float+0xb6>
 800ad6a:	f108 0801 	add.w	r8, r8, #1
 800ad6e:	e7ec      	b.n	800ad4a <_printf_float+0x33e>
 800ad70:	4613      	mov	r3, r2
 800ad72:	4631      	mov	r1, r6
 800ad74:	4642      	mov	r2, r8
 800ad76:	4628      	mov	r0, r5
 800ad78:	47b8      	blx	r7
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d1c0      	bne.n	800ad00 <_printf_float+0x2f4>
 800ad7e:	e6a0      	b.n	800aac2 <_printf_float+0xb6>
 800ad80:	2301      	movs	r3, #1
 800ad82:	4631      	mov	r1, r6
 800ad84:	4628      	mov	r0, r5
 800ad86:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f ae99 	beq.w	800aac2 <_printf_float+0xb6>
 800ad90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad92:	f10b 0b01 	add.w	fp, fp, #1
 800ad96:	e7b9      	b.n	800ad0c <_printf_float+0x300>
 800ad98:	4631      	mov	r1, r6
 800ad9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad9e:	4628      	mov	r0, r5
 800ada0:	47b8      	blx	r7
 800ada2:	3001      	adds	r0, #1
 800ada4:	d1bf      	bne.n	800ad26 <_printf_float+0x31a>
 800ada6:	e68c      	b.n	800aac2 <_printf_float+0xb6>
 800ada8:	464b      	mov	r3, r9
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	eb08 020a 	add.w	r2, r8, sl
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	d1c2      	bne.n	800ad3e <_printf_float+0x332>
 800adb8:	e683      	b.n	800aac2 <_printf_float+0xb6>
 800adba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adbc:	2a01      	cmp	r2, #1
 800adbe:	dc01      	bgt.n	800adc4 <_printf_float+0x3b8>
 800adc0:	07db      	lsls	r3, r3, #31
 800adc2:	d539      	bpl.n	800ae38 <_printf_float+0x42c>
 800adc4:	2301      	movs	r3, #1
 800adc6:	4642      	mov	r2, r8
 800adc8:	4631      	mov	r1, r6
 800adca:	4628      	mov	r0, r5
 800adcc:	47b8      	blx	r7
 800adce:	3001      	adds	r0, #1
 800add0:	f43f ae77 	beq.w	800aac2 <_printf_float+0xb6>
 800add4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800add8:	4631      	mov	r1, r6
 800adda:	4628      	mov	r0, r5
 800addc:	47b8      	blx	r7
 800adde:	3001      	adds	r0, #1
 800ade0:	f43f ae6f 	beq.w	800aac2 <_printf_float+0xb6>
 800ade4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ade8:	2200      	movs	r2, #0
 800adea:	2300      	movs	r3, #0
 800adec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800adf0:	f7f5 fe46 	bl	8000a80 <__aeabi_dcmpeq>
 800adf4:	b9d8      	cbnz	r0, 800ae2e <_printf_float+0x422>
 800adf6:	f109 33ff 	add.w	r3, r9, #4294967295
 800adfa:	f108 0201 	add.w	r2, r8, #1
 800adfe:	4631      	mov	r1, r6
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b8      	blx	r7
 800ae04:	3001      	adds	r0, #1
 800ae06:	d10e      	bne.n	800ae26 <_printf_float+0x41a>
 800ae08:	e65b      	b.n	800aac2 <_printf_float+0xb6>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	464a      	mov	r2, r9
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4628      	mov	r0, r5
 800ae12:	47b8      	blx	r7
 800ae14:	3001      	adds	r0, #1
 800ae16:	f43f ae54 	beq.w	800aac2 <_printf_float+0xb6>
 800ae1a:	f108 0801 	add.w	r8, r8, #1
 800ae1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae20:	3b01      	subs	r3, #1
 800ae22:	4543      	cmp	r3, r8
 800ae24:	dcf1      	bgt.n	800ae0a <_printf_float+0x3fe>
 800ae26:	4653      	mov	r3, sl
 800ae28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae2c:	e6de      	b.n	800abec <_printf_float+0x1e0>
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	f104 091a 	add.w	r9, r4, #26
 800ae36:	e7f2      	b.n	800ae1e <_printf_float+0x412>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	4642      	mov	r2, r8
 800ae3c:	e7df      	b.n	800adfe <_printf_float+0x3f2>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	464a      	mov	r2, r9
 800ae42:	4631      	mov	r1, r6
 800ae44:	4628      	mov	r0, r5
 800ae46:	47b8      	blx	r7
 800ae48:	3001      	adds	r0, #1
 800ae4a:	f43f ae3a 	beq.w	800aac2 <_printf_float+0xb6>
 800ae4e:	f108 0801 	add.w	r8, r8, #1
 800ae52:	68e3      	ldr	r3, [r4, #12]
 800ae54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae56:	1a5b      	subs	r3, r3, r1
 800ae58:	4543      	cmp	r3, r8
 800ae5a:	dcf0      	bgt.n	800ae3e <_printf_float+0x432>
 800ae5c:	e6fb      	b.n	800ac56 <_printf_float+0x24a>
 800ae5e:	f04f 0800 	mov.w	r8, #0
 800ae62:	f104 0919 	add.w	r9, r4, #25
 800ae66:	e7f4      	b.n	800ae52 <_printf_float+0x446>

0800ae68 <_printf_common>:
 800ae68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae6c:	4616      	mov	r6, r2
 800ae6e:	4699      	mov	r9, r3
 800ae70:	688a      	ldr	r2, [r1, #8]
 800ae72:	690b      	ldr	r3, [r1, #16]
 800ae74:	4607      	mov	r7, r0
 800ae76:	4293      	cmp	r3, r2
 800ae78:	bfb8      	it	lt
 800ae7a:	4613      	movlt	r3, r2
 800ae7c:	6033      	str	r3, [r6, #0]
 800ae7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae82:	460c      	mov	r4, r1
 800ae84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae88:	b10a      	cbz	r2, 800ae8e <_printf_common+0x26>
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	6033      	str	r3, [r6, #0]
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	0699      	lsls	r1, r3, #26
 800ae92:	bf42      	ittt	mi
 800ae94:	6833      	ldrmi	r3, [r6, #0]
 800ae96:	3302      	addmi	r3, #2
 800ae98:	6033      	strmi	r3, [r6, #0]
 800ae9a:	6825      	ldr	r5, [r4, #0]
 800ae9c:	f015 0506 	ands.w	r5, r5, #6
 800aea0:	d106      	bne.n	800aeb0 <_printf_common+0x48>
 800aea2:	f104 0a19 	add.w	sl, r4, #25
 800aea6:	68e3      	ldr	r3, [r4, #12]
 800aea8:	6832      	ldr	r2, [r6, #0]
 800aeaa:	1a9b      	subs	r3, r3, r2
 800aeac:	42ab      	cmp	r3, r5
 800aeae:	dc2b      	bgt.n	800af08 <_printf_common+0xa0>
 800aeb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aeb4:	1e13      	subs	r3, r2, #0
 800aeb6:	6822      	ldr	r2, [r4, #0]
 800aeb8:	bf18      	it	ne
 800aeba:	2301      	movne	r3, #1
 800aebc:	0692      	lsls	r2, r2, #26
 800aebe:	d430      	bmi.n	800af22 <_printf_common+0xba>
 800aec0:	4649      	mov	r1, r9
 800aec2:	4638      	mov	r0, r7
 800aec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aec8:	47c0      	blx	r8
 800aeca:	3001      	adds	r0, #1
 800aecc:	d023      	beq.n	800af16 <_printf_common+0xae>
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	6922      	ldr	r2, [r4, #16]
 800aed2:	f003 0306 	and.w	r3, r3, #6
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	bf14      	ite	ne
 800aeda:	2500      	movne	r5, #0
 800aedc:	6833      	ldreq	r3, [r6, #0]
 800aede:	f04f 0600 	mov.w	r6, #0
 800aee2:	bf08      	it	eq
 800aee4:	68e5      	ldreq	r5, [r4, #12]
 800aee6:	f104 041a 	add.w	r4, r4, #26
 800aeea:	bf08      	it	eq
 800aeec:	1aed      	subeq	r5, r5, r3
 800aeee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aef2:	bf08      	it	eq
 800aef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aef8:	4293      	cmp	r3, r2
 800aefa:	bfc4      	itt	gt
 800aefc:	1a9b      	subgt	r3, r3, r2
 800aefe:	18ed      	addgt	r5, r5, r3
 800af00:	42b5      	cmp	r5, r6
 800af02:	d11a      	bne.n	800af3a <_printf_common+0xd2>
 800af04:	2000      	movs	r0, #0
 800af06:	e008      	b.n	800af1a <_printf_common+0xb2>
 800af08:	2301      	movs	r3, #1
 800af0a:	4652      	mov	r2, sl
 800af0c:	4649      	mov	r1, r9
 800af0e:	4638      	mov	r0, r7
 800af10:	47c0      	blx	r8
 800af12:	3001      	adds	r0, #1
 800af14:	d103      	bne.n	800af1e <_printf_common+0xb6>
 800af16:	f04f 30ff 	mov.w	r0, #4294967295
 800af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1e:	3501      	adds	r5, #1
 800af20:	e7c1      	b.n	800aea6 <_printf_common+0x3e>
 800af22:	2030      	movs	r0, #48	; 0x30
 800af24:	18e1      	adds	r1, r4, r3
 800af26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af30:	4422      	add	r2, r4
 800af32:	3302      	adds	r3, #2
 800af34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af38:	e7c2      	b.n	800aec0 <_printf_common+0x58>
 800af3a:	2301      	movs	r3, #1
 800af3c:	4622      	mov	r2, r4
 800af3e:	4649      	mov	r1, r9
 800af40:	4638      	mov	r0, r7
 800af42:	47c0      	blx	r8
 800af44:	3001      	adds	r0, #1
 800af46:	d0e6      	beq.n	800af16 <_printf_common+0xae>
 800af48:	3601      	adds	r6, #1
 800af4a:	e7d9      	b.n	800af00 <_printf_common+0x98>

0800af4c <_printf_i>:
 800af4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af50:	7e0f      	ldrb	r7, [r1, #24]
 800af52:	4691      	mov	r9, r2
 800af54:	2f78      	cmp	r7, #120	; 0x78
 800af56:	4680      	mov	r8, r0
 800af58:	460c      	mov	r4, r1
 800af5a:	469a      	mov	sl, r3
 800af5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af62:	d807      	bhi.n	800af74 <_printf_i+0x28>
 800af64:	2f62      	cmp	r7, #98	; 0x62
 800af66:	d80a      	bhi.n	800af7e <_printf_i+0x32>
 800af68:	2f00      	cmp	r7, #0
 800af6a:	f000 80d5 	beq.w	800b118 <_printf_i+0x1cc>
 800af6e:	2f58      	cmp	r7, #88	; 0x58
 800af70:	f000 80c1 	beq.w	800b0f6 <_printf_i+0x1aa>
 800af74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af7c:	e03a      	b.n	800aff4 <_printf_i+0xa8>
 800af7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af82:	2b15      	cmp	r3, #21
 800af84:	d8f6      	bhi.n	800af74 <_printf_i+0x28>
 800af86:	a101      	add	r1, pc, #4	; (adr r1, 800af8c <_printf_i+0x40>)
 800af88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af8c:	0800afe5 	.word	0x0800afe5
 800af90:	0800aff9 	.word	0x0800aff9
 800af94:	0800af75 	.word	0x0800af75
 800af98:	0800af75 	.word	0x0800af75
 800af9c:	0800af75 	.word	0x0800af75
 800afa0:	0800af75 	.word	0x0800af75
 800afa4:	0800aff9 	.word	0x0800aff9
 800afa8:	0800af75 	.word	0x0800af75
 800afac:	0800af75 	.word	0x0800af75
 800afb0:	0800af75 	.word	0x0800af75
 800afb4:	0800af75 	.word	0x0800af75
 800afb8:	0800b0ff 	.word	0x0800b0ff
 800afbc:	0800b025 	.word	0x0800b025
 800afc0:	0800b0b9 	.word	0x0800b0b9
 800afc4:	0800af75 	.word	0x0800af75
 800afc8:	0800af75 	.word	0x0800af75
 800afcc:	0800b121 	.word	0x0800b121
 800afd0:	0800af75 	.word	0x0800af75
 800afd4:	0800b025 	.word	0x0800b025
 800afd8:	0800af75 	.word	0x0800af75
 800afdc:	0800af75 	.word	0x0800af75
 800afe0:	0800b0c1 	.word	0x0800b0c1
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	1d1a      	adds	r2, r3, #4
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	602a      	str	r2, [r5, #0]
 800afec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aff4:	2301      	movs	r3, #1
 800aff6:	e0a0      	b.n	800b13a <_printf_i+0x1ee>
 800aff8:	6820      	ldr	r0, [r4, #0]
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	0607      	lsls	r7, r0, #24
 800affe:	f103 0104 	add.w	r1, r3, #4
 800b002:	6029      	str	r1, [r5, #0]
 800b004:	d501      	bpl.n	800b00a <_printf_i+0xbe>
 800b006:	681e      	ldr	r6, [r3, #0]
 800b008:	e003      	b.n	800b012 <_printf_i+0xc6>
 800b00a:	0646      	lsls	r6, r0, #25
 800b00c:	d5fb      	bpl.n	800b006 <_printf_i+0xba>
 800b00e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b012:	2e00      	cmp	r6, #0
 800b014:	da03      	bge.n	800b01e <_printf_i+0xd2>
 800b016:	232d      	movs	r3, #45	; 0x2d
 800b018:	4276      	negs	r6, r6
 800b01a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b01e:	230a      	movs	r3, #10
 800b020:	4859      	ldr	r0, [pc, #356]	; (800b188 <_printf_i+0x23c>)
 800b022:	e012      	b.n	800b04a <_printf_i+0xfe>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	6820      	ldr	r0, [r4, #0]
 800b028:	1d19      	adds	r1, r3, #4
 800b02a:	6029      	str	r1, [r5, #0]
 800b02c:	0605      	lsls	r5, r0, #24
 800b02e:	d501      	bpl.n	800b034 <_printf_i+0xe8>
 800b030:	681e      	ldr	r6, [r3, #0]
 800b032:	e002      	b.n	800b03a <_printf_i+0xee>
 800b034:	0641      	lsls	r1, r0, #25
 800b036:	d5fb      	bpl.n	800b030 <_printf_i+0xe4>
 800b038:	881e      	ldrh	r6, [r3, #0]
 800b03a:	2f6f      	cmp	r7, #111	; 0x6f
 800b03c:	bf0c      	ite	eq
 800b03e:	2308      	moveq	r3, #8
 800b040:	230a      	movne	r3, #10
 800b042:	4851      	ldr	r0, [pc, #324]	; (800b188 <_printf_i+0x23c>)
 800b044:	2100      	movs	r1, #0
 800b046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b04a:	6865      	ldr	r5, [r4, #4]
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	bfa8      	it	ge
 800b050:	6821      	ldrge	r1, [r4, #0]
 800b052:	60a5      	str	r5, [r4, #8]
 800b054:	bfa4      	itt	ge
 800b056:	f021 0104 	bicge.w	r1, r1, #4
 800b05a:	6021      	strge	r1, [r4, #0]
 800b05c:	b90e      	cbnz	r6, 800b062 <_printf_i+0x116>
 800b05e:	2d00      	cmp	r5, #0
 800b060:	d04b      	beq.n	800b0fa <_printf_i+0x1ae>
 800b062:	4615      	mov	r5, r2
 800b064:	fbb6 f1f3 	udiv	r1, r6, r3
 800b068:	fb03 6711 	mls	r7, r3, r1, r6
 800b06c:	5dc7      	ldrb	r7, [r0, r7]
 800b06e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b072:	4637      	mov	r7, r6
 800b074:	42bb      	cmp	r3, r7
 800b076:	460e      	mov	r6, r1
 800b078:	d9f4      	bls.n	800b064 <_printf_i+0x118>
 800b07a:	2b08      	cmp	r3, #8
 800b07c:	d10b      	bne.n	800b096 <_printf_i+0x14a>
 800b07e:	6823      	ldr	r3, [r4, #0]
 800b080:	07de      	lsls	r6, r3, #31
 800b082:	d508      	bpl.n	800b096 <_printf_i+0x14a>
 800b084:	6923      	ldr	r3, [r4, #16]
 800b086:	6861      	ldr	r1, [r4, #4]
 800b088:	4299      	cmp	r1, r3
 800b08a:	bfde      	ittt	le
 800b08c:	2330      	movle	r3, #48	; 0x30
 800b08e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b092:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b096:	1b52      	subs	r2, r2, r5
 800b098:	6122      	str	r2, [r4, #16]
 800b09a:	464b      	mov	r3, r9
 800b09c:	4621      	mov	r1, r4
 800b09e:	4640      	mov	r0, r8
 800b0a0:	f8cd a000 	str.w	sl, [sp]
 800b0a4:	aa03      	add	r2, sp, #12
 800b0a6:	f7ff fedf 	bl	800ae68 <_printf_common>
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	d14a      	bne.n	800b144 <_printf_i+0x1f8>
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	b004      	add	sp, #16
 800b0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	f043 0320 	orr.w	r3, r3, #32
 800b0be:	6023      	str	r3, [r4, #0]
 800b0c0:	2778      	movs	r7, #120	; 0x78
 800b0c2:	4832      	ldr	r0, [pc, #200]	; (800b18c <_printf_i+0x240>)
 800b0c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	6829      	ldr	r1, [r5, #0]
 800b0cc:	061f      	lsls	r7, r3, #24
 800b0ce:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0d2:	d402      	bmi.n	800b0da <_printf_i+0x18e>
 800b0d4:	065f      	lsls	r7, r3, #25
 800b0d6:	bf48      	it	mi
 800b0d8:	b2b6      	uxthmi	r6, r6
 800b0da:	07df      	lsls	r7, r3, #31
 800b0dc:	bf48      	it	mi
 800b0de:	f043 0320 	orrmi.w	r3, r3, #32
 800b0e2:	6029      	str	r1, [r5, #0]
 800b0e4:	bf48      	it	mi
 800b0e6:	6023      	strmi	r3, [r4, #0]
 800b0e8:	b91e      	cbnz	r6, 800b0f2 <_printf_i+0x1a6>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	f023 0320 	bic.w	r3, r3, #32
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	2310      	movs	r3, #16
 800b0f4:	e7a6      	b.n	800b044 <_printf_i+0xf8>
 800b0f6:	4824      	ldr	r0, [pc, #144]	; (800b188 <_printf_i+0x23c>)
 800b0f8:	e7e4      	b.n	800b0c4 <_printf_i+0x178>
 800b0fa:	4615      	mov	r5, r2
 800b0fc:	e7bd      	b.n	800b07a <_printf_i+0x12e>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	6826      	ldr	r6, [r4, #0]
 800b102:	1d18      	adds	r0, r3, #4
 800b104:	6961      	ldr	r1, [r4, #20]
 800b106:	6028      	str	r0, [r5, #0]
 800b108:	0635      	lsls	r5, r6, #24
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	d501      	bpl.n	800b112 <_printf_i+0x1c6>
 800b10e:	6019      	str	r1, [r3, #0]
 800b110:	e002      	b.n	800b118 <_printf_i+0x1cc>
 800b112:	0670      	lsls	r0, r6, #25
 800b114:	d5fb      	bpl.n	800b10e <_printf_i+0x1c2>
 800b116:	8019      	strh	r1, [r3, #0]
 800b118:	2300      	movs	r3, #0
 800b11a:	4615      	mov	r5, r2
 800b11c:	6123      	str	r3, [r4, #16]
 800b11e:	e7bc      	b.n	800b09a <_printf_i+0x14e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	2100      	movs	r1, #0
 800b124:	1d1a      	adds	r2, r3, #4
 800b126:	602a      	str	r2, [r5, #0]
 800b128:	681d      	ldr	r5, [r3, #0]
 800b12a:	6862      	ldr	r2, [r4, #4]
 800b12c:	4628      	mov	r0, r5
 800b12e:	f000 fcd1 	bl	800bad4 <memchr>
 800b132:	b108      	cbz	r0, 800b138 <_printf_i+0x1ec>
 800b134:	1b40      	subs	r0, r0, r5
 800b136:	6060      	str	r0, [r4, #4]
 800b138:	6863      	ldr	r3, [r4, #4]
 800b13a:	6123      	str	r3, [r4, #16]
 800b13c:	2300      	movs	r3, #0
 800b13e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b142:	e7aa      	b.n	800b09a <_printf_i+0x14e>
 800b144:	462a      	mov	r2, r5
 800b146:	4649      	mov	r1, r9
 800b148:	4640      	mov	r0, r8
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	47d0      	blx	sl
 800b14e:	3001      	adds	r0, #1
 800b150:	d0ad      	beq.n	800b0ae <_printf_i+0x162>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	079b      	lsls	r3, r3, #30
 800b156:	d413      	bmi.n	800b180 <_printf_i+0x234>
 800b158:	68e0      	ldr	r0, [r4, #12]
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	4298      	cmp	r0, r3
 800b15e:	bfb8      	it	lt
 800b160:	4618      	movlt	r0, r3
 800b162:	e7a6      	b.n	800b0b2 <_printf_i+0x166>
 800b164:	2301      	movs	r3, #1
 800b166:	4632      	mov	r2, r6
 800b168:	4649      	mov	r1, r9
 800b16a:	4640      	mov	r0, r8
 800b16c:	47d0      	blx	sl
 800b16e:	3001      	adds	r0, #1
 800b170:	d09d      	beq.n	800b0ae <_printf_i+0x162>
 800b172:	3501      	adds	r5, #1
 800b174:	68e3      	ldr	r3, [r4, #12]
 800b176:	9903      	ldr	r1, [sp, #12]
 800b178:	1a5b      	subs	r3, r3, r1
 800b17a:	42ab      	cmp	r3, r5
 800b17c:	dcf2      	bgt.n	800b164 <_printf_i+0x218>
 800b17e:	e7eb      	b.n	800b158 <_printf_i+0x20c>
 800b180:	2500      	movs	r5, #0
 800b182:	f104 0619 	add.w	r6, r4, #25
 800b186:	e7f5      	b.n	800b174 <_printf_i+0x228>
 800b188:	0800f2a4 	.word	0x0800f2a4
 800b18c:	0800f2b5 	.word	0x0800f2b5

0800b190 <_scanf_float>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	b087      	sub	sp, #28
 800b196:	9303      	str	r3, [sp, #12]
 800b198:	688b      	ldr	r3, [r1, #8]
 800b19a:	4617      	mov	r7, r2
 800b19c:	1e5a      	subs	r2, r3, #1
 800b19e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b1a2:	bf85      	ittet	hi
 800b1a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b1a8:	195b      	addhi	r3, r3, r5
 800b1aa:	2300      	movls	r3, #0
 800b1ac:	9302      	strhi	r3, [sp, #8]
 800b1ae:	bf88      	it	hi
 800b1b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b1b4:	468b      	mov	fp, r1
 800b1b6:	f04f 0500 	mov.w	r5, #0
 800b1ba:	bf8c      	ite	hi
 800b1bc:	608b      	strhi	r3, [r1, #8]
 800b1be:	9302      	strls	r3, [sp, #8]
 800b1c0:	680b      	ldr	r3, [r1, #0]
 800b1c2:	4680      	mov	r8, r0
 800b1c4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b1c8:	f84b 3b1c 	str.w	r3, [fp], #28
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	465e      	mov	r6, fp
 800b1d0:	46aa      	mov	sl, r5
 800b1d2:	46a9      	mov	r9, r5
 800b1d4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b1d8:	9501      	str	r5, [sp, #4]
 800b1da:	68a2      	ldr	r2, [r4, #8]
 800b1dc:	b152      	cbz	r2, 800b1f4 <_scanf_float+0x64>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	2b4e      	cmp	r3, #78	; 0x4e
 800b1e4:	d864      	bhi.n	800b2b0 <_scanf_float+0x120>
 800b1e6:	2b40      	cmp	r3, #64	; 0x40
 800b1e8:	d83c      	bhi.n	800b264 <_scanf_float+0xd4>
 800b1ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b1ee:	b2c8      	uxtb	r0, r1
 800b1f0:	280e      	cmp	r0, #14
 800b1f2:	d93a      	bls.n	800b26a <_scanf_float+0xda>
 800b1f4:	f1b9 0f00 	cmp.w	r9, #0
 800b1f8:	d003      	beq.n	800b202 <_scanf_float+0x72>
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b206:	f1ba 0f01 	cmp.w	sl, #1
 800b20a:	f200 8113 	bhi.w	800b434 <_scanf_float+0x2a4>
 800b20e:	455e      	cmp	r6, fp
 800b210:	f200 8105 	bhi.w	800b41e <_scanf_float+0x28e>
 800b214:	2501      	movs	r5, #1
 800b216:	4628      	mov	r0, r5
 800b218:	b007      	add	sp, #28
 800b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b222:	2a0d      	cmp	r2, #13
 800b224:	d8e6      	bhi.n	800b1f4 <_scanf_float+0x64>
 800b226:	a101      	add	r1, pc, #4	; (adr r1, 800b22c <_scanf_float+0x9c>)
 800b228:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b22c:	0800b36b 	.word	0x0800b36b
 800b230:	0800b1f5 	.word	0x0800b1f5
 800b234:	0800b1f5 	.word	0x0800b1f5
 800b238:	0800b1f5 	.word	0x0800b1f5
 800b23c:	0800b3cb 	.word	0x0800b3cb
 800b240:	0800b3a3 	.word	0x0800b3a3
 800b244:	0800b1f5 	.word	0x0800b1f5
 800b248:	0800b1f5 	.word	0x0800b1f5
 800b24c:	0800b379 	.word	0x0800b379
 800b250:	0800b1f5 	.word	0x0800b1f5
 800b254:	0800b1f5 	.word	0x0800b1f5
 800b258:	0800b1f5 	.word	0x0800b1f5
 800b25c:	0800b1f5 	.word	0x0800b1f5
 800b260:	0800b331 	.word	0x0800b331
 800b264:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b268:	e7db      	b.n	800b222 <_scanf_float+0x92>
 800b26a:	290e      	cmp	r1, #14
 800b26c:	d8c2      	bhi.n	800b1f4 <_scanf_float+0x64>
 800b26e:	a001      	add	r0, pc, #4	; (adr r0, 800b274 <_scanf_float+0xe4>)
 800b270:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b274:	0800b323 	.word	0x0800b323
 800b278:	0800b1f5 	.word	0x0800b1f5
 800b27c:	0800b323 	.word	0x0800b323
 800b280:	0800b3b7 	.word	0x0800b3b7
 800b284:	0800b1f5 	.word	0x0800b1f5
 800b288:	0800b2d1 	.word	0x0800b2d1
 800b28c:	0800b30d 	.word	0x0800b30d
 800b290:	0800b30d 	.word	0x0800b30d
 800b294:	0800b30d 	.word	0x0800b30d
 800b298:	0800b30d 	.word	0x0800b30d
 800b29c:	0800b30d 	.word	0x0800b30d
 800b2a0:	0800b30d 	.word	0x0800b30d
 800b2a4:	0800b30d 	.word	0x0800b30d
 800b2a8:	0800b30d 	.word	0x0800b30d
 800b2ac:	0800b30d 	.word	0x0800b30d
 800b2b0:	2b6e      	cmp	r3, #110	; 0x6e
 800b2b2:	d809      	bhi.n	800b2c8 <_scanf_float+0x138>
 800b2b4:	2b60      	cmp	r3, #96	; 0x60
 800b2b6:	d8b2      	bhi.n	800b21e <_scanf_float+0x8e>
 800b2b8:	2b54      	cmp	r3, #84	; 0x54
 800b2ba:	d077      	beq.n	800b3ac <_scanf_float+0x21c>
 800b2bc:	2b59      	cmp	r3, #89	; 0x59
 800b2be:	d199      	bne.n	800b1f4 <_scanf_float+0x64>
 800b2c0:	2d07      	cmp	r5, #7
 800b2c2:	d197      	bne.n	800b1f4 <_scanf_float+0x64>
 800b2c4:	2508      	movs	r5, #8
 800b2c6:	e029      	b.n	800b31c <_scanf_float+0x18c>
 800b2c8:	2b74      	cmp	r3, #116	; 0x74
 800b2ca:	d06f      	beq.n	800b3ac <_scanf_float+0x21c>
 800b2cc:	2b79      	cmp	r3, #121	; 0x79
 800b2ce:	e7f6      	b.n	800b2be <_scanf_float+0x12e>
 800b2d0:	6821      	ldr	r1, [r4, #0]
 800b2d2:	05c8      	lsls	r0, r1, #23
 800b2d4:	d51a      	bpl.n	800b30c <_scanf_float+0x17c>
 800b2d6:	9b02      	ldr	r3, [sp, #8]
 800b2d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b2dc:	6021      	str	r1, [r4, #0]
 800b2de:	f109 0901 	add.w	r9, r9, #1
 800b2e2:	b11b      	cbz	r3, 800b2ec <_scanf_float+0x15c>
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	3201      	adds	r2, #1
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	60a2      	str	r2, [r4, #8]
 800b2ec:	68a3      	ldr	r3, [r4, #8]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	60a3      	str	r3, [r4, #8]
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	6123      	str	r3, [r4, #16]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	607b      	str	r3, [r7, #4]
 800b300:	f340 8084 	ble.w	800b40c <_scanf_float+0x27c>
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	3301      	adds	r3, #1
 800b308:	603b      	str	r3, [r7, #0]
 800b30a:	e766      	b.n	800b1da <_scanf_float+0x4a>
 800b30c:	eb1a 0f05 	cmn.w	sl, r5
 800b310:	f47f af70 	bne.w	800b1f4 <_scanf_float+0x64>
 800b314:	6822      	ldr	r2, [r4, #0]
 800b316:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b31a:	6022      	str	r2, [r4, #0]
 800b31c:	f806 3b01 	strb.w	r3, [r6], #1
 800b320:	e7e4      	b.n	800b2ec <_scanf_float+0x15c>
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	0610      	lsls	r0, r2, #24
 800b326:	f57f af65 	bpl.w	800b1f4 <_scanf_float+0x64>
 800b32a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b32e:	e7f4      	b.n	800b31a <_scanf_float+0x18a>
 800b330:	f1ba 0f00 	cmp.w	sl, #0
 800b334:	d10e      	bne.n	800b354 <_scanf_float+0x1c4>
 800b336:	f1b9 0f00 	cmp.w	r9, #0
 800b33a:	d10e      	bne.n	800b35a <_scanf_float+0x1ca>
 800b33c:	6822      	ldr	r2, [r4, #0]
 800b33e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b342:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b346:	d108      	bne.n	800b35a <_scanf_float+0x1ca>
 800b348:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b34c:	f04f 0a01 	mov.w	sl, #1
 800b350:	6022      	str	r2, [r4, #0]
 800b352:	e7e3      	b.n	800b31c <_scanf_float+0x18c>
 800b354:	f1ba 0f02 	cmp.w	sl, #2
 800b358:	d055      	beq.n	800b406 <_scanf_float+0x276>
 800b35a:	2d01      	cmp	r5, #1
 800b35c:	d002      	beq.n	800b364 <_scanf_float+0x1d4>
 800b35e:	2d04      	cmp	r5, #4
 800b360:	f47f af48 	bne.w	800b1f4 <_scanf_float+0x64>
 800b364:	3501      	adds	r5, #1
 800b366:	b2ed      	uxtb	r5, r5
 800b368:	e7d8      	b.n	800b31c <_scanf_float+0x18c>
 800b36a:	f1ba 0f01 	cmp.w	sl, #1
 800b36e:	f47f af41 	bne.w	800b1f4 <_scanf_float+0x64>
 800b372:	f04f 0a02 	mov.w	sl, #2
 800b376:	e7d1      	b.n	800b31c <_scanf_float+0x18c>
 800b378:	b97d      	cbnz	r5, 800b39a <_scanf_float+0x20a>
 800b37a:	f1b9 0f00 	cmp.w	r9, #0
 800b37e:	f47f af3c 	bne.w	800b1fa <_scanf_float+0x6a>
 800b382:	6822      	ldr	r2, [r4, #0]
 800b384:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b388:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b38c:	f47f af39 	bne.w	800b202 <_scanf_float+0x72>
 800b390:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b394:	2501      	movs	r5, #1
 800b396:	6022      	str	r2, [r4, #0]
 800b398:	e7c0      	b.n	800b31c <_scanf_float+0x18c>
 800b39a:	2d03      	cmp	r5, #3
 800b39c:	d0e2      	beq.n	800b364 <_scanf_float+0x1d4>
 800b39e:	2d05      	cmp	r5, #5
 800b3a0:	e7de      	b.n	800b360 <_scanf_float+0x1d0>
 800b3a2:	2d02      	cmp	r5, #2
 800b3a4:	f47f af26 	bne.w	800b1f4 <_scanf_float+0x64>
 800b3a8:	2503      	movs	r5, #3
 800b3aa:	e7b7      	b.n	800b31c <_scanf_float+0x18c>
 800b3ac:	2d06      	cmp	r5, #6
 800b3ae:	f47f af21 	bne.w	800b1f4 <_scanf_float+0x64>
 800b3b2:	2507      	movs	r5, #7
 800b3b4:	e7b2      	b.n	800b31c <_scanf_float+0x18c>
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	0591      	lsls	r1, r2, #22
 800b3ba:	f57f af1b 	bpl.w	800b1f4 <_scanf_float+0x64>
 800b3be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b3c2:	6022      	str	r2, [r4, #0]
 800b3c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b3c8:	e7a8      	b.n	800b31c <_scanf_float+0x18c>
 800b3ca:	6822      	ldr	r2, [r4, #0]
 800b3cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b3d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b3d4:	d006      	beq.n	800b3e4 <_scanf_float+0x254>
 800b3d6:	0550      	lsls	r0, r2, #21
 800b3d8:	f57f af0c 	bpl.w	800b1f4 <_scanf_float+0x64>
 800b3dc:	f1b9 0f00 	cmp.w	r9, #0
 800b3e0:	f43f af0f 	beq.w	800b202 <_scanf_float+0x72>
 800b3e4:	0591      	lsls	r1, r2, #22
 800b3e6:	bf58      	it	pl
 800b3e8:	9901      	ldrpl	r1, [sp, #4]
 800b3ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b3ee:	bf58      	it	pl
 800b3f0:	eba9 0101 	subpl.w	r1, r9, r1
 800b3f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b3f8:	f04f 0900 	mov.w	r9, #0
 800b3fc:	bf58      	it	pl
 800b3fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b402:	6022      	str	r2, [r4, #0]
 800b404:	e78a      	b.n	800b31c <_scanf_float+0x18c>
 800b406:	f04f 0a03 	mov.w	sl, #3
 800b40a:	e787      	b.n	800b31c <_scanf_float+0x18c>
 800b40c:	4639      	mov	r1, r7
 800b40e:	4640      	mov	r0, r8
 800b410:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b414:	4798      	blx	r3
 800b416:	2800      	cmp	r0, #0
 800b418:	f43f aedf 	beq.w	800b1da <_scanf_float+0x4a>
 800b41c:	e6ea      	b.n	800b1f4 <_scanf_float+0x64>
 800b41e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b422:	463a      	mov	r2, r7
 800b424:	4640      	mov	r0, r8
 800b426:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b42a:	4798      	blx	r3
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	3b01      	subs	r3, #1
 800b430:	6123      	str	r3, [r4, #16]
 800b432:	e6ec      	b.n	800b20e <_scanf_float+0x7e>
 800b434:	1e6b      	subs	r3, r5, #1
 800b436:	2b06      	cmp	r3, #6
 800b438:	d825      	bhi.n	800b486 <_scanf_float+0x2f6>
 800b43a:	2d02      	cmp	r5, #2
 800b43c:	d836      	bhi.n	800b4ac <_scanf_float+0x31c>
 800b43e:	455e      	cmp	r6, fp
 800b440:	f67f aee8 	bls.w	800b214 <_scanf_float+0x84>
 800b444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b448:	463a      	mov	r2, r7
 800b44a:	4640      	mov	r0, r8
 800b44c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b450:	4798      	blx	r3
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	3b01      	subs	r3, #1
 800b456:	6123      	str	r3, [r4, #16]
 800b458:	e7f1      	b.n	800b43e <_scanf_float+0x2ae>
 800b45a:	9802      	ldr	r0, [sp, #8]
 800b45c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b460:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b464:	463a      	mov	r2, r7
 800b466:	9002      	str	r0, [sp, #8]
 800b468:	4640      	mov	r0, r8
 800b46a:	4798      	blx	r3
 800b46c:	6923      	ldr	r3, [r4, #16]
 800b46e:	3b01      	subs	r3, #1
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b476:	fa5f fa8a 	uxtb.w	sl, sl
 800b47a:	f1ba 0f02 	cmp.w	sl, #2
 800b47e:	d1ec      	bne.n	800b45a <_scanf_float+0x2ca>
 800b480:	3d03      	subs	r5, #3
 800b482:	b2ed      	uxtb	r5, r5
 800b484:	1b76      	subs	r6, r6, r5
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	05da      	lsls	r2, r3, #23
 800b48a:	d52f      	bpl.n	800b4ec <_scanf_float+0x35c>
 800b48c:	055b      	lsls	r3, r3, #21
 800b48e:	d510      	bpl.n	800b4b2 <_scanf_float+0x322>
 800b490:	455e      	cmp	r6, fp
 800b492:	f67f aebf 	bls.w	800b214 <_scanf_float+0x84>
 800b496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b49a:	463a      	mov	r2, r7
 800b49c:	4640      	mov	r0, r8
 800b49e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b4a2:	4798      	blx	r3
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	e7f1      	b.n	800b490 <_scanf_float+0x300>
 800b4ac:	46aa      	mov	sl, r5
 800b4ae:	9602      	str	r6, [sp, #8]
 800b4b0:	e7df      	b.n	800b472 <_scanf_float+0x2e2>
 800b4b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	2965      	cmp	r1, #101	; 0x65
 800b4ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4be:	f106 35ff 	add.w	r5, r6, #4294967295
 800b4c2:	6123      	str	r3, [r4, #16]
 800b4c4:	d00c      	beq.n	800b4e0 <_scanf_float+0x350>
 800b4c6:	2945      	cmp	r1, #69	; 0x45
 800b4c8:	d00a      	beq.n	800b4e0 <_scanf_float+0x350>
 800b4ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4ce:	463a      	mov	r2, r7
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	4798      	blx	r3
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b4da:	3b01      	subs	r3, #1
 800b4dc:	1eb5      	subs	r5, r6, #2
 800b4de:	6123      	str	r3, [r4, #16]
 800b4e0:	463a      	mov	r2, r7
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4e8:	4798      	blx	r3
 800b4ea:	462e      	mov	r6, r5
 800b4ec:	6825      	ldr	r5, [r4, #0]
 800b4ee:	f015 0510 	ands.w	r5, r5, #16
 800b4f2:	d155      	bne.n	800b5a0 <_scanf_float+0x410>
 800b4f4:	7035      	strb	r5, [r6, #0]
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b4fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b500:	d11d      	bne.n	800b53e <_scanf_float+0x3ae>
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	454b      	cmp	r3, r9
 800b506:	eba3 0209 	sub.w	r2, r3, r9
 800b50a:	d125      	bne.n	800b558 <_scanf_float+0x3c8>
 800b50c:	2200      	movs	r2, #0
 800b50e:	4659      	mov	r1, fp
 800b510:	4640      	mov	r0, r8
 800b512:	f002 fd1d 	bl	800df50 <_strtod_r>
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	f8d4 c000 	ldr.w	ip, [r4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f01c 0f02 	tst.w	ip, #2
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	f103 0204 	add.w	r2, r3, #4
 800b52a:	d020      	beq.n	800b56e <_scanf_float+0x3de>
 800b52c:	9903      	ldr	r1, [sp, #12]
 800b52e:	600a      	str	r2, [r1, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	e9c3 6700 	strd	r6, r7, [r3]
 800b536:	68e3      	ldr	r3, [r4, #12]
 800b538:	3301      	adds	r3, #1
 800b53a:	60e3      	str	r3, [r4, #12]
 800b53c:	e66b      	b.n	800b216 <_scanf_float+0x86>
 800b53e:	9b04      	ldr	r3, [sp, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0e3      	beq.n	800b50c <_scanf_float+0x37c>
 800b544:	9905      	ldr	r1, [sp, #20]
 800b546:	230a      	movs	r3, #10
 800b548:	462a      	mov	r2, r5
 800b54a:	4640      	mov	r0, r8
 800b54c:	3101      	adds	r1, #1
 800b54e:	f002 fd83 	bl	800e058 <_strtol_r>
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	9e05      	ldr	r6, [sp, #20]
 800b556:	1ac2      	subs	r2, r0, r3
 800b558:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b55c:	429e      	cmp	r6, r3
 800b55e:	bf28      	it	cs
 800b560:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b564:	4630      	mov	r0, r6
 800b566:	490f      	ldr	r1, [pc, #60]	; (800b5a4 <_scanf_float+0x414>)
 800b568:	f000 f93e 	bl	800b7e8 <siprintf>
 800b56c:	e7ce      	b.n	800b50c <_scanf_float+0x37c>
 800b56e:	f01c 0f04 	tst.w	ip, #4
 800b572:	d1db      	bne.n	800b52c <_scanf_float+0x39c>
 800b574:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b578:	f8cc 2000 	str.w	r2, [ip]
 800b57c:	f8d3 8000 	ldr.w	r8, [r3]
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	f7f5 faae 	bl	8000ae4 <__aeabi_dcmpun>
 800b588:	b128      	cbz	r0, 800b596 <_scanf_float+0x406>
 800b58a:	4807      	ldr	r0, [pc, #28]	; (800b5a8 <_scanf_float+0x418>)
 800b58c:	f000 fabe 	bl	800bb0c <nanf>
 800b590:	f8c8 0000 	str.w	r0, [r8]
 800b594:	e7cf      	b.n	800b536 <_scanf_float+0x3a6>
 800b596:	4630      	mov	r0, r6
 800b598:	4639      	mov	r1, r7
 800b59a:	f7f5 fb01 	bl	8000ba0 <__aeabi_d2f>
 800b59e:	e7f7      	b.n	800b590 <_scanf_float+0x400>
 800b5a0:	2500      	movs	r5, #0
 800b5a2:	e638      	b.n	800b216 <_scanf_float+0x86>
 800b5a4:	0800f2c6 	.word	0x0800f2c6
 800b5a8:	0800f65d 	.word	0x0800f65d

0800b5ac <std>:
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ba:	6083      	str	r3, [r0, #8]
 800b5bc:	8181      	strh	r1, [r0, #12]
 800b5be:	6643      	str	r3, [r0, #100]	; 0x64
 800b5c0:	81c2      	strh	r2, [r0, #14]
 800b5c2:	6183      	str	r3, [r0, #24]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	305c      	adds	r0, #92	; 0x5c
 800b5ca:	f000 fa05 	bl	800b9d8 <memset>
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <std+0x38>)
 800b5d0:	6224      	str	r4, [r4, #32]
 800b5d2:	6263      	str	r3, [r4, #36]	; 0x24
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <std+0x3c>)
 800b5d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5d8:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <std+0x40>)
 800b5da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5dc:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <std+0x44>)
 800b5de:	6323      	str	r3, [r4, #48]	; 0x30
 800b5e0:	bd10      	pop	{r4, pc}
 800b5e2:	bf00      	nop
 800b5e4:	0800b829 	.word	0x0800b829
 800b5e8:	0800b84b 	.word	0x0800b84b
 800b5ec:	0800b883 	.word	0x0800b883
 800b5f0:	0800b8a7 	.word	0x0800b8a7

0800b5f4 <stdio_exit_handler>:
 800b5f4:	4a02      	ldr	r2, [pc, #8]	; (800b600 <stdio_exit_handler+0xc>)
 800b5f6:	4903      	ldr	r1, [pc, #12]	; (800b604 <stdio_exit_handler+0x10>)
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <stdio_exit_handler+0x14>)
 800b5fa:	f000 b869 	b.w	800b6d0 <_fwalk_sglue>
 800b5fe:	bf00      	nop
 800b600:	20000010 	.word	0x20000010
 800b604:	0800e695 	.word	0x0800e695
 800b608:	2000001c 	.word	0x2000001c

0800b60c <cleanup_stdio>:
 800b60c:	6841      	ldr	r1, [r0, #4]
 800b60e:	4b0c      	ldr	r3, [pc, #48]	; (800b640 <cleanup_stdio+0x34>)
 800b610:	b510      	push	{r4, lr}
 800b612:	4299      	cmp	r1, r3
 800b614:	4604      	mov	r4, r0
 800b616:	d001      	beq.n	800b61c <cleanup_stdio+0x10>
 800b618:	f003 f83c 	bl	800e694 <_fflush_r>
 800b61c:	68a1      	ldr	r1, [r4, #8]
 800b61e:	4b09      	ldr	r3, [pc, #36]	; (800b644 <cleanup_stdio+0x38>)
 800b620:	4299      	cmp	r1, r3
 800b622:	d002      	beq.n	800b62a <cleanup_stdio+0x1e>
 800b624:	4620      	mov	r0, r4
 800b626:	f003 f835 	bl	800e694 <_fflush_r>
 800b62a:	68e1      	ldr	r1, [r4, #12]
 800b62c:	4b06      	ldr	r3, [pc, #24]	; (800b648 <cleanup_stdio+0x3c>)
 800b62e:	4299      	cmp	r1, r3
 800b630:	d004      	beq.n	800b63c <cleanup_stdio+0x30>
 800b632:	4620      	mov	r0, r4
 800b634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b638:	f003 b82c 	b.w	800e694 <_fflush_r>
 800b63c:	bd10      	pop	{r4, pc}
 800b63e:	bf00      	nop
 800b640:	2000443c 	.word	0x2000443c
 800b644:	200044a4 	.word	0x200044a4
 800b648:	2000450c 	.word	0x2000450c

0800b64c <global_stdio_init.part.0>:
 800b64c:	b510      	push	{r4, lr}
 800b64e:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <global_stdio_init.part.0+0x30>)
 800b650:	4c0b      	ldr	r4, [pc, #44]	; (800b680 <global_stdio_init.part.0+0x34>)
 800b652:	4a0c      	ldr	r2, [pc, #48]	; (800b684 <global_stdio_init.part.0+0x38>)
 800b654:	4620      	mov	r0, r4
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	2104      	movs	r1, #4
 800b65a:	2200      	movs	r2, #0
 800b65c:	f7ff ffa6 	bl	800b5ac <std>
 800b660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b664:	2201      	movs	r2, #1
 800b666:	2109      	movs	r1, #9
 800b668:	f7ff ffa0 	bl	800b5ac <std>
 800b66c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b670:	2202      	movs	r2, #2
 800b672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b676:	2112      	movs	r1, #18
 800b678:	f7ff bf98 	b.w	800b5ac <std>
 800b67c:	20004574 	.word	0x20004574
 800b680:	2000443c 	.word	0x2000443c
 800b684:	0800b5f5 	.word	0x0800b5f5

0800b688 <__sfp_lock_acquire>:
 800b688:	4801      	ldr	r0, [pc, #4]	; (800b690 <__sfp_lock_acquire+0x8>)
 800b68a:	f000 ba21 	b.w	800bad0 <__retarget_lock_acquire_recursive>
 800b68e:	bf00      	nop
 800b690:	2000457d 	.word	0x2000457d

0800b694 <__sfp_lock_release>:
 800b694:	4801      	ldr	r0, [pc, #4]	; (800b69c <__sfp_lock_release+0x8>)
 800b696:	f000 ba1c 	b.w	800bad2 <__retarget_lock_release_recursive>
 800b69a:	bf00      	nop
 800b69c:	2000457d 	.word	0x2000457d

0800b6a0 <__sinit>:
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	f7ff fff0 	bl	800b688 <__sfp_lock_acquire>
 800b6a8:	6a23      	ldr	r3, [r4, #32]
 800b6aa:	b11b      	cbz	r3, 800b6b4 <__sinit+0x14>
 800b6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6b0:	f7ff bff0 	b.w	800b694 <__sfp_lock_release>
 800b6b4:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <__sinit+0x28>)
 800b6b6:	6223      	str	r3, [r4, #32]
 800b6b8:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <__sinit+0x2c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1f5      	bne.n	800b6ac <__sinit+0xc>
 800b6c0:	f7ff ffc4 	bl	800b64c <global_stdio_init.part.0>
 800b6c4:	e7f2      	b.n	800b6ac <__sinit+0xc>
 800b6c6:	bf00      	nop
 800b6c8:	0800b60d 	.word	0x0800b60d
 800b6cc:	20004574 	.word	0x20004574

0800b6d0 <_fwalk_sglue>:
 800b6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d4:	4607      	mov	r7, r0
 800b6d6:	4688      	mov	r8, r1
 800b6d8:	4614      	mov	r4, r2
 800b6da:	2600      	movs	r6, #0
 800b6dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b6e4:	d505      	bpl.n	800b6f2 <_fwalk_sglue+0x22>
 800b6e6:	6824      	ldr	r4, [r4, #0]
 800b6e8:	2c00      	cmp	r4, #0
 800b6ea:	d1f7      	bne.n	800b6dc <_fwalk_sglue+0xc>
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f2:	89ab      	ldrh	r3, [r5, #12]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d907      	bls.n	800b708 <_fwalk_sglue+0x38>
 800b6f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	d003      	beq.n	800b708 <_fwalk_sglue+0x38>
 800b700:	4629      	mov	r1, r5
 800b702:	4638      	mov	r0, r7
 800b704:	47c0      	blx	r8
 800b706:	4306      	orrs	r6, r0
 800b708:	3568      	adds	r5, #104	; 0x68
 800b70a:	e7e9      	b.n	800b6e0 <_fwalk_sglue+0x10>

0800b70c <iprintf>:
 800b70c:	b40f      	push	{r0, r1, r2, r3}
 800b70e:	b507      	push	{r0, r1, r2, lr}
 800b710:	4906      	ldr	r1, [pc, #24]	; (800b72c <iprintf+0x20>)
 800b712:	ab04      	add	r3, sp, #16
 800b714:	6808      	ldr	r0, [r1, #0]
 800b716:	f853 2b04 	ldr.w	r2, [r3], #4
 800b71a:	6881      	ldr	r1, [r0, #8]
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	f002 fe1d 	bl	800e35c <_vfiprintf_r>
 800b722:	b003      	add	sp, #12
 800b724:	f85d eb04 	ldr.w	lr, [sp], #4
 800b728:	b004      	add	sp, #16
 800b72a:	4770      	bx	lr
 800b72c:	20000068 	.word	0x20000068

0800b730 <_puts_r>:
 800b730:	6a03      	ldr	r3, [r0, #32]
 800b732:	b570      	push	{r4, r5, r6, lr}
 800b734:	4605      	mov	r5, r0
 800b736:	460e      	mov	r6, r1
 800b738:	6884      	ldr	r4, [r0, #8]
 800b73a:	b90b      	cbnz	r3, 800b740 <_puts_r+0x10>
 800b73c:	f7ff ffb0 	bl	800b6a0 <__sinit>
 800b740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b742:	07db      	lsls	r3, r3, #31
 800b744:	d405      	bmi.n	800b752 <_puts_r+0x22>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	0598      	lsls	r0, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_puts_r+0x22>
 800b74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74e:	f000 f9bf 	bl	800bad0 <__retarget_lock_acquire_recursive>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	0719      	lsls	r1, r3, #28
 800b756:	d513      	bpl.n	800b780 <_puts_r+0x50>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	b18b      	cbz	r3, 800b780 <_puts_r+0x50>
 800b75c:	3e01      	subs	r6, #1
 800b75e:	68a3      	ldr	r3, [r4, #8]
 800b760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b764:	3b01      	subs	r3, #1
 800b766:	60a3      	str	r3, [r4, #8]
 800b768:	b9e9      	cbnz	r1, 800b7a6 <_puts_r+0x76>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da2e      	bge.n	800b7cc <_puts_r+0x9c>
 800b76e:	4622      	mov	r2, r4
 800b770:	210a      	movs	r1, #10
 800b772:	4628      	mov	r0, r5
 800b774:	f000 f89b 	bl	800b8ae <__swbuf_r>
 800b778:	3001      	adds	r0, #1
 800b77a:	d007      	beq.n	800b78c <_puts_r+0x5c>
 800b77c:	250a      	movs	r5, #10
 800b77e:	e007      	b.n	800b790 <_puts_r+0x60>
 800b780:	4621      	mov	r1, r4
 800b782:	4628      	mov	r0, r5
 800b784:	f000 f8d0 	bl	800b928 <__swsetup_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d0e7      	beq.n	800b75c <_puts_r+0x2c>
 800b78c:	f04f 35ff 	mov.w	r5, #4294967295
 800b790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b792:	07da      	lsls	r2, r3, #31
 800b794:	d405      	bmi.n	800b7a2 <_puts_r+0x72>
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	059b      	lsls	r3, r3, #22
 800b79a:	d402      	bmi.n	800b7a2 <_puts_r+0x72>
 800b79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b79e:	f000 f998 	bl	800bad2 <__retarget_lock_release_recursive>
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	bd70      	pop	{r4, r5, r6, pc}
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	da04      	bge.n	800b7b4 <_puts_r+0x84>
 800b7aa:	69a2      	ldr	r2, [r4, #24]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	dc06      	bgt.n	800b7be <_puts_r+0x8e>
 800b7b0:	290a      	cmp	r1, #10
 800b7b2:	d004      	beq.n	800b7be <_puts_r+0x8e>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	6022      	str	r2, [r4, #0]
 800b7ba:	7019      	strb	r1, [r3, #0]
 800b7bc:	e7cf      	b.n	800b75e <_puts_r+0x2e>
 800b7be:	4622      	mov	r2, r4
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f000 f874 	bl	800b8ae <__swbuf_r>
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d1c9      	bne.n	800b75e <_puts_r+0x2e>
 800b7ca:	e7df      	b.n	800b78c <_puts_r+0x5c>
 800b7cc:	250a      	movs	r5, #10
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	6022      	str	r2, [r4, #0]
 800b7d4:	701d      	strb	r5, [r3, #0]
 800b7d6:	e7db      	b.n	800b790 <_puts_r+0x60>

0800b7d8 <puts>:
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <puts+0xc>)
 800b7da:	4601      	mov	r1, r0
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	f7ff bfa7 	b.w	800b730 <_puts_r>
 800b7e2:	bf00      	nop
 800b7e4:	20000068 	.word	0x20000068

0800b7e8 <siprintf>:
 800b7e8:	b40e      	push	{r1, r2, r3}
 800b7ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7ee:	b500      	push	{lr}
 800b7f0:	b09c      	sub	sp, #112	; 0x70
 800b7f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b7f4:	9002      	str	r0, [sp, #8]
 800b7f6:	9006      	str	r0, [sp, #24]
 800b7f8:	9107      	str	r1, [sp, #28]
 800b7fa:	9104      	str	r1, [sp, #16]
 800b7fc:	4808      	ldr	r0, [pc, #32]	; (800b820 <siprintf+0x38>)
 800b7fe:	4909      	ldr	r1, [pc, #36]	; (800b824 <siprintf+0x3c>)
 800b800:	f853 2b04 	ldr.w	r2, [r3], #4
 800b804:	9105      	str	r1, [sp, #20]
 800b806:	6800      	ldr	r0, [r0, #0]
 800b808:	a902      	add	r1, sp, #8
 800b80a:	9301      	str	r3, [sp, #4]
 800b80c:	f002 fc80 	bl	800e110 <_svfiprintf_r>
 800b810:	2200      	movs	r2, #0
 800b812:	9b02      	ldr	r3, [sp, #8]
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	b01c      	add	sp, #112	; 0x70
 800b818:	f85d eb04 	ldr.w	lr, [sp], #4
 800b81c:	b003      	add	sp, #12
 800b81e:	4770      	bx	lr
 800b820:	20000068 	.word	0x20000068
 800b824:	ffff0208 	.word	0xffff0208

0800b828 <__sread>:
 800b828:	b510      	push	{r4, lr}
 800b82a:	460c      	mov	r4, r1
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	f000 f900 	bl	800ba34 <_read_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	bfab      	itete	ge
 800b838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b83a:	89a3      	ldrhlt	r3, [r4, #12]
 800b83c:	181b      	addge	r3, r3, r0
 800b83e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b842:	bfac      	ite	ge
 800b844:	6563      	strge	r3, [r4, #84]	; 0x54
 800b846:	81a3      	strhlt	r3, [r4, #12]
 800b848:	bd10      	pop	{r4, pc}

0800b84a <__swrite>:
 800b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	461f      	mov	r7, r3
 800b850:	898b      	ldrh	r3, [r1, #12]
 800b852:	4605      	mov	r5, r0
 800b854:	05db      	lsls	r3, r3, #23
 800b856:	460c      	mov	r4, r1
 800b858:	4616      	mov	r6, r2
 800b85a:	d505      	bpl.n	800b868 <__swrite+0x1e>
 800b85c:	2302      	movs	r3, #2
 800b85e:	2200      	movs	r2, #0
 800b860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b864:	f000 f8d4 	bl	800ba10 <_lseek_r>
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	4632      	mov	r2, r6
 800b86c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	4628      	mov	r0, r5
 800b874:	463b      	mov	r3, r7
 800b876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	f000 b8eb 	b.w	800ba58 <_write_r>

0800b882 <__sseek>:
 800b882:	b510      	push	{r4, lr}
 800b884:	460c      	mov	r4, r1
 800b886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88a:	f000 f8c1 	bl	800ba10 <_lseek_r>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	bf15      	itete	ne
 800b894:	6560      	strne	r0, [r4, #84]	; 0x54
 800b896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b89a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b89e:	81a3      	strheq	r3, [r4, #12]
 800b8a0:	bf18      	it	ne
 800b8a2:	81a3      	strhne	r3, [r4, #12]
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <__sclose>:
 800b8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8aa:	f000 b8a1 	b.w	800b9f0 <_close_r>

0800b8ae <__swbuf_r>:
 800b8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b0:	460e      	mov	r6, r1
 800b8b2:	4614      	mov	r4, r2
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	b118      	cbz	r0, 800b8c0 <__swbuf_r+0x12>
 800b8b8:	6a03      	ldr	r3, [r0, #32]
 800b8ba:	b90b      	cbnz	r3, 800b8c0 <__swbuf_r+0x12>
 800b8bc:	f7ff fef0 	bl	800b6a0 <__sinit>
 800b8c0:	69a3      	ldr	r3, [r4, #24]
 800b8c2:	60a3      	str	r3, [r4, #8]
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	071a      	lsls	r2, r3, #28
 800b8c8:	d525      	bpl.n	800b916 <__swbuf_r+0x68>
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	b31b      	cbz	r3, 800b916 <__swbuf_r+0x68>
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	6922      	ldr	r2, [r4, #16]
 800b8d2:	b2f6      	uxtb	r6, r6
 800b8d4:	1a98      	subs	r0, r3, r2
 800b8d6:	6963      	ldr	r3, [r4, #20]
 800b8d8:	4637      	mov	r7, r6
 800b8da:	4283      	cmp	r3, r0
 800b8dc:	dc04      	bgt.n	800b8e8 <__swbuf_r+0x3a>
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f002 fed7 	bl	800e694 <_fflush_r>
 800b8e6:	b9e0      	cbnz	r0, 800b922 <__swbuf_r+0x74>
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	60a3      	str	r3, [r4, #8]
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	701e      	strb	r6, [r3, #0]
 800b8f6:	6962      	ldr	r2, [r4, #20]
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d004      	beq.n	800b908 <__swbuf_r+0x5a>
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	07db      	lsls	r3, r3, #31
 800b902:	d506      	bpl.n	800b912 <__swbuf_r+0x64>
 800b904:	2e0a      	cmp	r6, #10
 800b906:	d104      	bne.n	800b912 <__swbuf_r+0x64>
 800b908:	4621      	mov	r1, r4
 800b90a:	4628      	mov	r0, r5
 800b90c:	f002 fec2 	bl	800e694 <_fflush_r>
 800b910:	b938      	cbnz	r0, 800b922 <__swbuf_r+0x74>
 800b912:	4638      	mov	r0, r7
 800b914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b916:	4621      	mov	r1, r4
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 f805 	bl	800b928 <__swsetup_r>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d0d5      	beq.n	800b8ce <__swbuf_r+0x20>
 800b922:	f04f 37ff 	mov.w	r7, #4294967295
 800b926:	e7f4      	b.n	800b912 <__swbuf_r+0x64>

0800b928 <__swsetup_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4b2a      	ldr	r3, [pc, #168]	; (800b9d4 <__swsetup_r+0xac>)
 800b92c:	4605      	mov	r5, r0
 800b92e:	6818      	ldr	r0, [r3, #0]
 800b930:	460c      	mov	r4, r1
 800b932:	b118      	cbz	r0, 800b93c <__swsetup_r+0x14>
 800b934:	6a03      	ldr	r3, [r0, #32]
 800b936:	b90b      	cbnz	r3, 800b93c <__swsetup_r+0x14>
 800b938:	f7ff feb2 	bl	800b6a0 <__sinit>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b942:	0718      	lsls	r0, r3, #28
 800b944:	d422      	bmi.n	800b98c <__swsetup_r+0x64>
 800b946:	06d9      	lsls	r1, r3, #27
 800b948:	d407      	bmi.n	800b95a <__swsetup_r+0x32>
 800b94a:	2309      	movs	r3, #9
 800b94c:	602b      	str	r3, [r5, #0]
 800b94e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b952:	f04f 30ff 	mov.w	r0, #4294967295
 800b956:	81a3      	strh	r3, [r4, #12]
 800b958:	e034      	b.n	800b9c4 <__swsetup_r+0x9c>
 800b95a:	0758      	lsls	r0, r3, #29
 800b95c:	d512      	bpl.n	800b984 <__swsetup_r+0x5c>
 800b95e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b960:	b141      	cbz	r1, 800b974 <__swsetup_r+0x4c>
 800b962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b966:	4299      	cmp	r1, r3
 800b968:	d002      	beq.n	800b970 <__swsetup_r+0x48>
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 ff40 	bl	800c7f0 <_free_r>
 800b970:	2300      	movs	r3, #0
 800b972:	6363      	str	r3, [r4, #52]	; 0x34
 800b974:	89a3      	ldrh	r3, [r4, #12]
 800b976:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b97a:	81a3      	strh	r3, [r4, #12]
 800b97c:	2300      	movs	r3, #0
 800b97e:	6063      	str	r3, [r4, #4]
 800b980:	6923      	ldr	r3, [r4, #16]
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	f043 0308 	orr.w	r3, r3, #8
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	b94b      	cbnz	r3, 800b9a4 <__swsetup_r+0x7c>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b99a:	d003      	beq.n	800b9a4 <__swsetup_r+0x7c>
 800b99c:	4621      	mov	r1, r4
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f002 fec5 	bl	800e72e <__smakebuf_r>
 800b9a4:	89a0      	ldrh	r0, [r4, #12]
 800b9a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9aa:	f010 0301 	ands.w	r3, r0, #1
 800b9ae:	d00a      	beq.n	800b9c6 <__swsetup_r+0x9e>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60a3      	str	r3, [r4, #8]
 800b9b4:	6963      	ldr	r3, [r4, #20]
 800b9b6:	425b      	negs	r3, r3
 800b9b8:	61a3      	str	r3, [r4, #24]
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	b943      	cbnz	r3, 800b9d0 <__swsetup_r+0xa8>
 800b9be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9c2:	d1c4      	bne.n	800b94e <__swsetup_r+0x26>
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	0781      	lsls	r1, r0, #30
 800b9c8:	bf58      	it	pl
 800b9ca:	6963      	ldrpl	r3, [r4, #20]
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	e7f4      	b.n	800b9ba <__swsetup_r+0x92>
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e7f7      	b.n	800b9c4 <__swsetup_r+0x9c>
 800b9d4:	20000068 	.word	0x20000068

0800b9d8 <memset>:
 800b9d8:	4603      	mov	r3, r0
 800b9da:	4402      	add	r2, r0
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d100      	bne.n	800b9e2 <memset+0xa>
 800b9e0:	4770      	bx	lr
 800b9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e6:	e7f9      	b.n	800b9dc <memset+0x4>

0800b9e8 <_localeconv_r>:
 800b9e8:	4800      	ldr	r0, [pc, #0]	; (800b9ec <_localeconv_r+0x4>)
 800b9ea:	4770      	bx	lr
 800b9ec:	2000015c 	.word	0x2000015c

0800b9f0 <_close_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	4d05      	ldr	r5, [pc, #20]	; (800ba0c <_close_r+0x1c>)
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	f7fa fc84 	bl	8006308 <_close>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d102      	bne.n	800ba0a <_close_r+0x1a>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	b103      	cbz	r3, 800ba0a <_close_r+0x1a>
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	20004578 	.word	0x20004578

0800ba10 <_lseek_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	4608      	mov	r0, r1
 800ba16:	4611      	mov	r1, r2
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4d05      	ldr	r5, [pc, #20]	; (800ba30 <_lseek_r+0x20>)
 800ba1c:	602a      	str	r2, [r5, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f7fa fc96 	bl	8006350 <_lseek>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_lseek_r+0x1e>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_lseek_r+0x1e>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	20004578 	.word	0x20004578

0800ba34 <_read_r>:
 800ba34:	b538      	push	{r3, r4, r5, lr}
 800ba36:	4604      	mov	r4, r0
 800ba38:	4608      	mov	r0, r1
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4d05      	ldr	r5, [pc, #20]	; (800ba54 <_read_r+0x20>)
 800ba40:	602a      	str	r2, [r5, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	f7fa fc43 	bl	80062ce <_read>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_read_r+0x1e>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_read_r+0x1e>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	20004578 	.word	0x20004578

0800ba58 <_write_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	4611      	mov	r1, r2
 800ba60:	2200      	movs	r2, #0
 800ba62:	4d05      	ldr	r5, [pc, #20]	; (800ba78 <_write_r+0x20>)
 800ba64:	602a      	str	r2, [r5, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7f7 ffd6 	bl	8003a18 <_write>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_write_r+0x1e>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_write_r+0x1e>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	20004578 	.word	0x20004578

0800ba7c <__errno>:
 800ba7c:	4b01      	ldr	r3, [pc, #4]	; (800ba84 <__errno+0x8>)
 800ba7e:	6818      	ldr	r0, [r3, #0]
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	20000068 	.word	0x20000068

0800ba88 <__libc_init_array>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	2600      	movs	r6, #0
 800ba8c:	4d0c      	ldr	r5, [pc, #48]	; (800bac0 <__libc_init_array+0x38>)
 800ba8e:	4c0d      	ldr	r4, [pc, #52]	; (800bac4 <__libc_init_array+0x3c>)
 800ba90:	1b64      	subs	r4, r4, r5
 800ba92:	10a4      	asrs	r4, r4, #2
 800ba94:	42a6      	cmp	r6, r4
 800ba96:	d109      	bne.n	800baac <__libc_init_array+0x24>
 800ba98:	f003 fb2a 	bl	800f0f0 <_init>
 800ba9c:	2600      	movs	r6, #0
 800ba9e:	4d0a      	ldr	r5, [pc, #40]	; (800bac8 <__libc_init_array+0x40>)
 800baa0:	4c0a      	ldr	r4, [pc, #40]	; (800bacc <__libc_init_array+0x44>)
 800baa2:	1b64      	subs	r4, r4, r5
 800baa4:	10a4      	asrs	r4, r4, #2
 800baa6:	42a6      	cmp	r6, r4
 800baa8:	d105      	bne.n	800bab6 <__libc_init_array+0x2e>
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bab0:	4798      	blx	r3
 800bab2:	3601      	adds	r6, #1
 800bab4:	e7ee      	b.n	800ba94 <__libc_init_array+0xc>
 800bab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baba:	4798      	blx	r3
 800babc:	3601      	adds	r6, #1
 800babe:	e7f2      	b.n	800baa6 <__libc_init_array+0x1e>
 800bac0:	0800f6c0 	.word	0x0800f6c0
 800bac4:	0800f6c0 	.word	0x0800f6c0
 800bac8:	0800f6c0 	.word	0x0800f6c0
 800bacc:	0800f6c4 	.word	0x0800f6c4

0800bad0 <__retarget_lock_acquire_recursive>:
 800bad0:	4770      	bx	lr

0800bad2 <__retarget_lock_release_recursive>:
 800bad2:	4770      	bx	lr

0800bad4 <memchr>:
 800bad4:	4603      	mov	r3, r0
 800bad6:	b510      	push	{r4, lr}
 800bad8:	b2c9      	uxtb	r1, r1
 800bada:	4402      	add	r2, r0
 800badc:	4293      	cmp	r3, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	d101      	bne.n	800bae6 <memchr+0x12>
 800bae2:	2000      	movs	r0, #0
 800bae4:	e003      	b.n	800baee <memchr+0x1a>
 800bae6:	7804      	ldrb	r4, [r0, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	428c      	cmp	r4, r1
 800baec:	d1f6      	bne.n	800badc <memchr+0x8>
 800baee:	bd10      	pop	{r4, pc}

0800baf0 <memcpy>:
 800baf0:	440a      	add	r2, r1
 800baf2:	4291      	cmp	r1, r2
 800baf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800baf8:	d100      	bne.n	800bafc <memcpy+0xc>
 800bafa:	4770      	bx	lr
 800bafc:	b510      	push	{r4, lr}
 800bafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb02:	4291      	cmp	r1, r2
 800bb04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb08:	d1f9      	bne.n	800bafe <memcpy+0xe>
 800bb0a:	bd10      	pop	{r4, pc}

0800bb0c <nanf>:
 800bb0c:	4800      	ldr	r0, [pc, #0]	; (800bb10 <nanf+0x4>)
 800bb0e:	4770      	bx	lr
 800bb10:	7fc00000 	.word	0x7fc00000

0800bb14 <quorem>:
 800bb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	6903      	ldr	r3, [r0, #16]
 800bb1a:	690c      	ldr	r4, [r1, #16]
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	42a3      	cmp	r3, r4
 800bb20:	db7f      	blt.n	800bc22 <quorem+0x10e>
 800bb22:	3c01      	subs	r4, #1
 800bb24:	f100 0514 	add.w	r5, r0, #20
 800bb28:	f101 0814 	add.w	r8, r1, #20
 800bb2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb30:	9301      	str	r3, [sp, #4]
 800bb32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb4a:	d331      	bcc.n	800bbb0 <quorem+0x9c>
 800bb4c:	f04f 0e00 	mov.w	lr, #0
 800bb50:	4640      	mov	r0, r8
 800bb52:	46ac      	mov	ip, r5
 800bb54:	46f2      	mov	sl, lr
 800bb56:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb5a:	b293      	uxth	r3, r2
 800bb5c:	fb06 e303 	mla	r3, r6, r3, lr
 800bb60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb64:	0c1a      	lsrs	r2, r3, #16
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	fb06 220e 	mla	r2, r6, lr, r2
 800bb6c:	ebaa 0303 	sub.w	r3, sl, r3
 800bb70:	f8dc a000 	ldr.w	sl, [ip]
 800bb74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb78:	fa1f fa8a 	uxth.w	sl, sl
 800bb7c:	4453      	add	r3, sl
 800bb7e:	f8dc a000 	ldr.w	sl, [ip]
 800bb82:	b292      	uxth	r2, r2
 800bb84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb92:	4581      	cmp	r9, r0
 800bb94:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb98:	f84c 3b04 	str.w	r3, [ip], #4
 800bb9c:	d2db      	bcs.n	800bb56 <quorem+0x42>
 800bb9e:	f855 300b 	ldr.w	r3, [r5, fp]
 800bba2:	b92b      	cbnz	r3, 800bbb0 <quorem+0x9c>
 800bba4:	9b01      	ldr	r3, [sp, #4]
 800bba6:	3b04      	subs	r3, #4
 800bba8:	429d      	cmp	r5, r3
 800bbaa:	461a      	mov	r2, r3
 800bbac:	d32d      	bcc.n	800bc0a <quorem+0xf6>
 800bbae:	613c      	str	r4, [r7, #16]
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	f001 f9dd 	bl	800cf70 <__mcmp>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	db23      	blt.n	800bc02 <quorem+0xee>
 800bbba:	4629      	mov	r1, r5
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	3601      	adds	r6, #1
 800bbc0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbc4:	f8d1 c000 	ldr.w	ip, [r1]
 800bbc8:	b293      	uxth	r3, r2
 800bbca:	1ac3      	subs	r3, r0, r3
 800bbcc:	0c12      	lsrs	r2, r2, #16
 800bbce:	fa1f f08c 	uxth.w	r0, ip
 800bbd2:	4403      	add	r3, r0
 800bbd4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bbd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbe2:	45c1      	cmp	r9, r8
 800bbe4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbe8:	f841 3b04 	str.w	r3, [r1], #4
 800bbec:	d2e8      	bcs.n	800bbc0 <quorem+0xac>
 800bbee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbf6:	b922      	cbnz	r2, 800bc02 <quorem+0xee>
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	429d      	cmp	r5, r3
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	d30a      	bcc.n	800bc16 <quorem+0x102>
 800bc00:	613c      	str	r4, [r7, #16]
 800bc02:	4630      	mov	r0, r6
 800bc04:	b003      	add	sp, #12
 800bc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0a:	6812      	ldr	r2, [r2, #0]
 800bc0c:	3b04      	subs	r3, #4
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	d1cd      	bne.n	800bbae <quorem+0x9a>
 800bc12:	3c01      	subs	r4, #1
 800bc14:	e7c8      	b.n	800bba8 <quorem+0x94>
 800bc16:	6812      	ldr	r2, [r2, #0]
 800bc18:	3b04      	subs	r3, #4
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	d1f0      	bne.n	800bc00 <quorem+0xec>
 800bc1e:	3c01      	subs	r4, #1
 800bc20:	e7eb      	b.n	800bbfa <quorem+0xe6>
 800bc22:	2000      	movs	r0, #0
 800bc24:	e7ee      	b.n	800bc04 <quorem+0xf0>
	...

0800bc28 <_dtoa_r>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	4616      	mov	r6, r2
 800bc2e:	461f      	mov	r7, r3
 800bc30:	69c4      	ldr	r4, [r0, #28]
 800bc32:	b099      	sub	sp, #100	; 0x64
 800bc34:	4605      	mov	r5, r0
 800bc36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bc3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bc3e:	b974      	cbnz	r4, 800bc5e <_dtoa_r+0x36>
 800bc40:	2010      	movs	r0, #16
 800bc42:	f000 fe1d 	bl	800c880 <malloc>
 800bc46:	4602      	mov	r2, r0
 800bc48:	61e8      	str	r0, [r5, #28]
 800bc4a:	b920      	cbnz	r0, 800bc56 <_dtoa_r+0x2e>
 800bc4c:	21ef      	movs	r1, #239	; 0xef
 800bc4e:	4bac      	ldr	r3, [pc, #688]	; (800bf00 <_dtoa_r+0x2d8>)
 800bc50:	48ac      	ldr	r0, [pc, #688]	; (800bf04 <_dtoa_r+0x2dc>)
 800bc52:	f002 fe0d 	bl	800e870 <__assert_func>
 800bc56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc5a:	6004      	str	r4, [r0, #0]
 800bc5c:	60c4      	str	r4, [r0, #12]
 800bc5e:	69eb      	ldr	r3, [r5, #28]
 800bc60:	6819      	ldr	r1, [r3, #0]
 800bc62:	b151      	cbz	r1, 800bc7a <_dtoa_r+0x52>
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	2301      	movs	r3, #1
 800bc68:	4093      	lsls	r3, r2
 800bc6a:	604a      	str	r2, [r1, #4]
 800bc6c:	608b      	str	r3, [r1, #8]
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f000 fefa 	bl	800ca68 <_Bfree>
 800bc74:	2200      	movs	r2, #0
 800bc76:	69eb      	ldr	r3, [r5, #28]
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	1e3b      	subs	r3, r7, #0
 800bc7c:	bfaf      	iteee	ge
 800bc7e:	2300      	movge	r3, #0
 800bc80:	2201      	movlt	r2, #1
 800bc82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc86:	9305      	strlt	r3, [sp, #20]
 800bc88:	bfa8      	it	ge
 800bc8a:	f8c8 3000 	strge.w	r3, [r8]
 800bc8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bc92:	4b9d      	ldr	r3, [pc, #628]	; (800bf08 <_dtoa_r+0x2e0>)
 800bc94:	bfb8      	it	lt
 800bc96:	f8c8 2000 	strlt.w	r2, [r8]
 800bc9a:	ea33 0309 	bics.w	r3, r3, r9
 800bc9e:	d119      	bne.n	800bcd4 <_dtoa_r+0xac>
 800bca0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bca4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcac:	4333      	orrs	r3, r6
 800bcae:	f000 8589 	beq.w	800c7c4 <_dtoa_r+0xb9c>
 800bcb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcb4:	b953      	cbnz	r3, 800bccc <_dtoa_r+0xa4>
 800bcb6:	4b95      	ldr	r3, [pc, #596]	; (800bf0c <_dtoa_r+0x2e4>)
 800bcb8:	e023      	b.n	800bd02 <_dtoa_r+0xda>
 800bcba:	4b95      	ldr	r3, [pc, #596]	; (800bf10 <_dtoa_r+0x2e8>)
 800bcbc:	9303      	str	r3, [sp, #12]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bcc2:	6013      	str	r3, [r2, #0]
 800bcc4:	9803      	ldr	r0, [sp, #12]
 800bcc6:	b019      	add	sp, #100	; 0x64
 800bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bccc:	4b8f      	ldr	r3, [pc, #572]	; (800bf0c <_dtoa_r+0x2e4>)
 800bcce:	9303      	str	r3, [sp, #12]
 800bcd0:	3303      	adds	r3, #3
 800bcd2:	e7f5      	b.n	800bcc0 <_dtoa_r+0x98>
 800bcd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bcd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bcdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bce0:	2200      	movs	r2, #0
 800bce2:	2300      	movs	r3, #0
 800bce4:	f7f4 fecc 	bl	8000a80 <__aeabi_dcmpeq>
 800bce8:	4680      	mov	r8, r0
 800bcea:	b160      	cbz	r0, 800bd06 <_dtoa_r+0xde>
 800bcec:	2301      	movs	r3, #1
 800bcee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8562 	beq.w	800c7be <_dtoa_r+0xb96>
 800bcfa:	4b86      	ldr	r3, [pc, #536]	; (800bf14 <_dtoa_r+0x2ec>)
 800bcfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	9303      	str	r3, [sp, #12]
 800bd04:	e7de      	b.n	800bcc4 <_dtoa_r+0x9c>
 800bd06:	ab16      	add	r3, sp, #88	; 0x58
 800bd08:	9301      	str	r3, [sp, #4]
 800bd0a:	ab17      	add	r3, sp, #92	; 0x5c
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	4628      	mov	r0, r5
 800bd10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd14:	f001 fa3c 	bl	800d190 <__d2b>
 800bd18:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bd1c:	4682      	mov	sl, r0
 800bd1e:	2c00      	cmp	r4, #0
 800bd20:	d07e      	beq.n	800be20 <_dtoa_r+0x1f8>
 800bd22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bd2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd30:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd38:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4b75      	ldr	r3, [pc, #468]	; (800bf18 <_dtoa_r+0x2f0>)
 800bd42:	f7f4 fa7d 	bl	8000240 <__aeabi_dsub>
 800bd46:	a368      	add	r3, pc, #416	; (adr r3, 800bee8 <_dtoa_r+0x2c0>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	f7f4 fc30 	bl	80005b0 <__aeabi_dmul>
 800bd50:	a367      	add	r3, pc, #412	; (adr r3, 800bef0 <_dtoa_r+0x2c8>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f7f4 fa75 	bl	8000244 <__adddf3>
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	460f      	mov	r7, r1
 800bd60:	f7f4 fbbc 	bl	80004dc <__aeabi_i2d>
 800bd64:	a364      	add	r3, pc, #400	; (adr r3, 800bef8 <_dtoa_r+0x2d0>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	f7f4 fc21 	bl	80005b0 <__aeabi_dmul>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	4630      	mov	r0, r6
 800bd74:	4639      	mov	r1, r7
 800bd76:	f7f4 fa65 	bl	8000244 <__adddf3>
 800bd7a:	4606      	mov	r6, r0
 800bd7c:	460f      	mov	r7, r1
 800bd7e:	f7f4 fec7 	bl	8000b10 <__aeabi_d2iz>
 800bd82:	2200      	movs	r2, #0
 800bd84:	4683      	mov	fp, r0
 800bd86:	2300      	movs	r3, #0
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f7f4 fe82 	bl	8000a94 <__aeabi_dcmplt>
 800bd90:	b148      	cbz	r0, 800bda6 <_dtoa_r+0x17e>
 800bd92:	4658      	mov	r0, fp
 800bd94:	f7f4 fba2 	bl	80004dc <__aeabi_i2d>
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	f7f4 fe70 	bl	8000a80 <__aeabi_dcmpeq>
 800bda0:	b908      	cbnz	r0, 800bda6 <_dtoa_r+0x17e>
 800bda2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bda6:	f1bb 0f16 	cmp.w	fp, #22
 800bdaa:	d857      	bhi.n	800be5c <_dtoa_r+0x234>
 800bdac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdb0:	4b5a      	ldr	r3, [pc, #360]	; (800bf1c <_dtoa_r+0x2f4>)
 800bdb2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fe6b 	bl	8000a94 <__aeabi_dcmplt>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d04e      	beq.n	800be60 <_dtoa_r+0x238>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bdcc:	1b1b      	subs	r3, r3, r4
 800bdce:	1e5a      	subs	r2, r3, #1
 800bdd0:	bf46      	itte	mi
 800bdd2:	f1c3 0901 	rsbmi	r9, r3, #1
 800bdd6:	2300      	movmi	r3, #0
 800bdd8:	f04f 0900 	movpl.w	r9, #0
 800bddc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdde:	bf48      	it	mi
 800bde0:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bde2:	f1bb 0f00 	cmp.w	fp, #0
 800bde6:	db3d      	blt.n	800be64 <_dtoa_r+0x23c>
 800bde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bdee:	445b      	add	r3, fp
 800bdf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	930a      	str	r3, [sp, #40]	; 0x28
 800bdf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdf8:	2b09      	cmp	r3, #9
 800bdfa:	d867      	bhi.n	800becc <_dtoa_r+0x2a4>
 800bdfc:	2b05      	cmp	r3, #5
 800bdfe:	bfc4      	itt	gt
 800be00:	3b04      	subgt	r3, #4
 800be02:	9322      	strgt	r3, [sp, #136]	; 0x88
 800be04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be06:	bfc8      	it	gt
 800be08:	2400      	movgt	r4, #0
 800be0a:	f1a3 0302 	sub.w	r3, r3, #2
 800be0e:	bfd8      	it	le
 800be10:	2401      	movle	r4, #1
 800be12:	2b03      	cmp	r3, #3
 800be14:	f200 8086 	bhi.w	800bf24 <_dtoa_r+0x2fc>
 800be18:	e8df f003 	tbb	[pc, r3]
 800be1c:	5637392c 	.word	0x5637392c
 800be20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800be24:	441c      	add	r4, r3
 800be26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800be2a:	2b20      	cmp	r3, #32
 800be2c:	bfc1      	itttt	gt
 800be2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be32:	fa09 f903 	lslgt.w	r9, r9, r3
 800be36:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800be3a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800be3e:	bfd6      	itet	le
 800be40:	f1c3 0320 	rsble	r3, r3, #32
 800be44:	ea49 0003 	orrgt.w	r0, r9, r3
 800be48:	fa06 f003 	lslle.w	r0, r6, r3
 800be4c:	f7f4 fb36 	bl	80004bc <__aeabi_ui2d>
 800be50:	2201      	movs	r2, #1
 800be52:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800be56:	3c01      	subs	r4, #1
 800be58:	9213      	str	r2, [sp, #76]	; 0x4c
 800be5a:	e76f      	b.n	800bd3c <_dtoa_r+0x114>
 800be5c:	2301      	movs	r3, #1
 800be5e:	e7b3      	b.n	800bdc8 <_dtoa_r+0x1a0>
 800be60:	900f      	str	r0, [sp, #60]	; 0x3c
 800be62:	e7b2      	b.n	800bdca <_dtoa_r+0x1a2>
 800be64:	f1cb 0300 	rsb	r3, fp, #0
 800be68:	930a      	str	r3, [sp, #40]	; 0x28
 800be6a:	2300      	movs	r3, #0
 800be6c:	eba9 090b 	sub.w	r9, r9, fp
 800be70:	930e      	str	r3, [sp, #56]	; 0x38
 800be72:	e7c0      	b.n	800bdf6 <_dtoa_r+0x1ce>
 800be74:	2300      	movs	r3, #0
 800be76:	930b      	str	r3, [sp, #44]	; 0x2c
 800be78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc55      	bgt.n	800bf2a <_dtoa_r+0x302>
 800be7e:	2301      	movs	r3, #1
 800be80:	461a      	mov	r2, r3
 800be82:	9306      	str	r3, [sp, #24]
 800be84:	9308      	str	r3, [sp, #32]
 800be86:	9223      	str	r2, [sp, #140]	; 0x8c
 800be88:	e00b      	b.n	800bea2 <_dtoa_r+0x27a>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e7f3      	b.n	800be76 <_dtoa_r+0x24e>
 800be8e:	2300      	movs	r3, #0
 800be90:	930b      	str	r3, [sp, #44]	; 0x2c
 800be92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be94:	445b      	add	r3, fp
 800be96:	9306      	str	r3, [sp, #24]
 800be98:	3301      	adds	r3, #1
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	9308      	str	r3, [sp, #32]
 800be9e:	bfb8      	it	lt
 800bea0:	2301      	movlt	r3, #1
 800bea2:	2100      	movs	r1, #0
 800bea4:	2204      	movs	r2, #4
 800bea6:	69e8      	ldr	r0, [r5, #28]
 800bea8:	f102 0614 	add.w	r6, r2, #20
 800beac:	429e      	cmp	r6, r3
 800beae:	d940      	bls.n	800bf32 <_dtoa_r+0x30a>
 800beb0:	6041      	str	r1, [r0, #4]
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 fd98 	bl	800c9e8 <_Balloc>
 800beb8:	9003      	str	r0, [sp, #12]
 800beba:	2800      	cmp	r0, #0
 800bebc:	d13c      	bne.n	800bf38 <_dtoa_r+0x310>
 800bebe:	4602      	mov	r2, r0
 800bec0:	f240 11af 	movw	r1, #431	; 0x1af
 800bec4:	4b16      	ldr	r3, [pc, #88]	; (800bf20 <_dtoa_r+0x2f8>)
 800bec6:	e6c3      	b.n	800bc50 <_dtoa_r+0x28>
 800bec8:	2301      	movs	r3, #1
 800beca:	e7e1      	b.n	800be90 <_dtoa_r+0x268>
 800becc:	2401      	movs	r4, #1
 800bece:	2300      	movs	r3, #0
 800bed0:	940b      	str	r4, [sp, #44]	; 0x2c
 800bed2:	9322      	str	r3, [sp, #136]	; 0x88
 800bed4:	f04f 33ff 	mov.w	r3, #4294967295
 800bed8:	2200      	movs	r2, #0
 800beda:	9306      	str	r3, [sp, #24]
 800bedc:	9308      	str	r3, [sp, #32]
 800bede:	2312      	movs	r3, #18
 800bee0:	e7d1      	b.n	800be86 <_dtoa_r+0x25e>
 800bee2:	bf00      	nop
 800bee4:	f3af 8000 	nop.w
 800bee8:	636f4361 	.word	0x636f4361
 800beec:	3fd287a7 	.word	0x3fd287a7
 800bef0:	8b60c8b3 	.word	0x8b60c8b3
 800bef4:	3fc68a28 	.word	0x3fc68a28
 800bef8:	509f79fb 	.word	0x509f79fb
 800befc:	3fd34413 	.word	0x3fd34413
 800bf00:	0800f2d8 	.word	0x0800f2d8
 800bf04:	0800f2ef 	.word	0x0800f2ef
 800bf08:	7ff00000 	.word	0x7ff00000
 800bf0c:	0800f2d4 	.word	0x0800f2d4
 800bf10:	0800f2cb 	.word	0x0800f2cb
 800bf14:	0800f2a3 	.word	0x0800f2a3
 800bf18:	3ff80000 	.word	0x3ff80000
 800bf1c:	0800f3e0 	.word	0x0800f3e0
 800bf20:	0800f347 	.word	0x0800f347
 800bf24:	2301      	movs	r3, #1
 800bf26:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf28:	e7d4      	b.n	800bed4 <_dtoa_r+0x2ac>
 800bf2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf2c:	9306      	str	r3, [sp, #24]
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	e7b7      	b.n	800bea2 <_dtoa_r+0x27a>
 800bf32:	3101      	adds	r1, #1
 800bf34:	0052      	lsls	r2, r2, #1
 800bf36:	e7b7      	b.n	800bea8 <_dtoa_r+0x280>
 800bf38:	69eb      	ldr	r3, [r5, #28]
 800bf3a:	9a03      	ldr	r2, [sp, #12]
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	9b08      	ldr	r3, [sp, #32]
 800bf40:	2b0e      	cmp	r3, #14
 800bf42:	f200 80a8 	bhi.w	800c096 <_dtoa_r+0x46e>
 800bf46:	2c00      	cmp	r4, #0
 800bf48:	f000 80a5 	beq.w	800c096 <_dtoa_r+0x46e>
 800bf4c:	f1bb 0f00 	cmp.w	fp, #0
 800bf50:	dd34      	ble.n	800bfbc <_dtoa_r+0x394>
 800bf52:	4b9a      	ldr	r3, [pc, #616]	; (800c1bc <_dtoa_r+0x594>)
 800bf54:	f00b 020f 	and.w	r2, fp, #15
 800bf58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bf60:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bf68:	ea4f 142b 	mov.w	r4, fp, asr #4
 800bf6c:	d016      	beq.n	800bf9c <_dtoa_r+0x374>
 800bf6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf72:	4b93      	ldr	r3, [pc, #588]	; (800c1c0 <_dtoa_r+0x598>)
 800bf74:	2703      	movs	r7, #3
 800bf76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf7a:	f7f4 fc43 	bl	8000804 <__aeabi_ddiv>
 800bf7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf82:	f004 040f 	and.w	r4, r4, #15
 800bf86:	4e8e      	ldr	r6, [pc, #568]	; (800c1c0 <_dtoa_r+0x598>)
 800bf88:	b954      	cbnz	r4, 800bfa0 <_dtoa_r+0x378>
 800bf8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf92:	f7f4 fc37 	bl	8000804 <__aeabi_ddiv>
 800bf96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf9a:	e029      	b.n	800bff0 <_dtoa_r+0x3c8>
 800bf9c:	2702      	movs	r7, #2
 800bf9e:	e7f2      	b.n	800bf86 <_dtoa_r+0x35e>
 800bfa0:	07e1      	lsls	r1, r4, #31
 800bfa2:	d508      	bpl.n	800bfb6 <_dtoa_r+0x38e>
 800bfa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bfac:	f7f4 fb00 	bl	80005b0 <__aeabi_dmul>
 800bfb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bfb4:	3701      	adds	r7, #1
 800bfb6:	1064      	asrs	r4, r4, #1
 800bfb8:	3608      	adds	r6, #8
 800bfba:	e7e5      	b.n	800bf88 <_dtoa_r+0x360>
 800bfbc:	f000 80a5 	beq.w	800c10a <_dtoa_r+0x4e2>
 800bfc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bfc4:	f1cb 0400 	rsb	r4, fp, #0
 800bfc8:	4b7c      	ldr	r3, [pc, #496]	; (800c1bc <_dtoa_r+0x594>)
 800bfca:	f004 020f 	and.w	r2, r4, #15
 800bfce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	f7f4 faeb 	bl	80005b0 <__aeabi_dmul>
 800bfda:	2702      	movs	r7, #2
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfe2:	4e77      	ldr	r6, [pc, #476]	; (800c1c0 <_dtoa_r+0x598>)
 800bfe4:	1124      	asrs	r4, r4, #4
 800bfe6:	2c00      	cmp	r4, #0
 800bfe8:	f040 8084 	bne.w	800c0f4 <_dtoa_r+0x4cc>
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1d2      	bne.n	800bf96 <_dtoa_r+0x36e>
 800bff0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bff4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8087 	beq.w	800c10e <_dtoa_r+0x4e6>
 800c000:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c004:	2200      	movs	r2, #0
 800c006:	4b6f      	ldr	r3, [pc, #444]	; (800c1c4 <_dtoa_r+0x59c>)
 800c008:	f7f4 fd44 	bl	8000a94 <__aeabi_dcmplt>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d07e      	beq.n	800c10e <_dtoa_r+0x4e6>
 800c010:	9b08      	ldr	r3, [sp, #32]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d07b      	beq.n	800c10e <_dtoa_r+0x4e6>
 800c016:	9b06      	ldr	r3, [sp, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dd38      	ble.n	800c08e <_dtoa_r+0x466>
 800c01c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c020:	2200      	movs	r2, #0
 800c022:	4b69      	ldr	r3, [pc, #420]	; (800c1c8 <_dtoa_r+0x5a0>)
 800c024:	f7f4 fac4 	bl	80005b0 <__aeabi_dmul>
 800c028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c02c:	9c06      	ldr	r4, [sp, #24]
 800c02e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800c032:	3701      	adds	r7, #1
 800c034:	4638      	mov	r0, r7
 800c036:	f7f4 fa51 	bl	80004dc <__aeabi_i2d>
 800c03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c03e:	f7f4 fab7 	bl	80005b0 <__aeabi_dmul>
 800c042:	2200      	movs	r2, #0
 800c044:	4b61      	ldr	r3, [pc, #388]	; (800c1cc <_dtoa_r+0x5a4>)
 800c046:	f7f4 f8fd 	bl	8000244 <__adddf3>
 800c04a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c04e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c052:	9611      	str	r6, [sp, #68]	; 0x44
 800c054:	2c00      	cmp	r4, #0
 800c056:	d15d      	bne.n	800c114 <_dtoa_r+0x4ec>
 800c058:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c05c:	2200      	movs	r2, #0
 800c05e:	4b5c      	ldr	r3, [pc, #368]	; (800c1d0 <_dtoa_r+0x5a8>)
 800c060:	f7f4 f8ee 	bl	8000240 <__aeabi_dsub>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c06c:	4633      	mov	r3, r6
 800c06e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c070:	f7f4 fd2e 	bl	8000ad0 <__aeabi_dcmpgt>
 800c074:	2800      	cmp	r0, #0
 800c076:	f040 8295 	bne.w	800c5a4 <_dtoa_r+0x97c>
 800c07a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c07e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c080:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c084:	f7f4 fd06 	bl	8000a94 <__aeabi_dcmplt>
 800c088:	2800      	cmp	r0, #0
 800c08a:	f040 8289 	bne.w	800c5a0 <_dtoa_r+0x978>
 800c08e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c092:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c096:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f2c0 8151 	blt.w	800c340 <_dtoa_r+0x718>
 800c09e:	f1bb 0f0e 	cmp.w	fp, #14
 800c0a2:	f300 814d 	bgt.w	800c340 <_dtoa_r+0x718>
 800c0a6:	4b45      	ldr	r3, [pc, #276]	; (800c1bc <_dtoa_r+0x594>)
 800c0a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c0b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f280 80da 	bge.w	800c270 <_dtoa_r+0x648>
 800c0bc:	9b08      	ldr	r3, [sp, #32]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f300 80d6 	bgt.w	800c270 <_dtoa_r+0x648>
 800c0c4:	f040 826b 	bne.w	800c59e <_dtoa_r+0x976>
 800c0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4b40      	ldr	r3, [pc, #256]	; (800c1d0 <_dtoa_r+0x5a8>)
 800c0d0:	f7f4 fa6e 	bl	80005b0 <__aeabi_dmul>
 800c0d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0d8:	f7f4 fcf0 	bl	8000abc <__aeabi_dcmpge>
 800c0dc:	9c08      	ldr	r4, [sp, #32]
 800c0de:	4626      	mov	r6, r4
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	f040 8241 	bne.w	800c568 <_dtoa_r+0x940>
 800c0e6:	2331      	movs	r3, #49	; 0x31
 800c0e8:	9f03      	ldr	r7, [sp, #12]
 800c0ea:	f10b 0b01 	add.w	fp, fp, #1
 800c0ee:	f807 3b01 	strb.w	r3, [r7], #1
 800c0f2:	e23d      	b.n	800c570 <_dtoa_r+0x948>
 800c0f4:	07e2      	lsls	r2, r4, #31
 800c0f6:	d505      	bpl.n	800c104 <_dtoa_r+0x4dc>
 800c0f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0fc:	f7f4 fa58 	bl	80005b0 <__aeabi_dmul>
 800c100:	2301      	movs	r3, #1
 800c102:	3701      	adds	r7, #1
 800c104:	1064      	asrs	r4, r4, #1
 800c106:	3608      	adds	r6, #8
 800c108:	e76d      	b.n	800bfe6 <_dtoa_r+0x3be>
 800c10a:	2702      	movs	r7, #2
 800c10c:	e770      	b.n	800bff0 <_dtoa_r+0x3c8>
 800c10e:	46d8      	mov	r8, fp
 800c110:	9c08      	ldr	r4, [sp, #32]
 800c112:	e78f      	b.n	800c034 <_dtoa_r+0x40c>
 800c114:	9903      	ldr	r1, [sp, #12]
 800c116:	4b29      	ldr	r3, [pc, #164]	; (800c1bc <_dtoa_r+0x594>)
 800c118:	4421      	add	r1, r4
 800c11a:	9112      	str	r1, [sp, #72]	; 0x48
 800c11c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c11e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c122:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c126:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c12a:	2900      	cmp	r1, #0
 800c12c:	d054      	beq.n	800c1d8 <_dtoa_r+0x5b0>
 800c12e:	2000      	movs	r0, #0
 800c130:	4928      	ldr	r1, [pc, #160]	; (800c1d4 <_dtoa_r+0x5ac>)
 800c132:	f7f4 fb67 	bl	8000804 <__aeabi_ddiv>
 800c136:	463b      	mov	r3, r7
 800c138:	4632      	mov	r2, r6
 800c13a:	f7f4 f881 	bl	8000240 <__aeabi_dsub>
 800c13e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c142:	9f03      	ldr	r7, [sp, #12]
 800c144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c148:	f7f4 fce2 	bl	8000b10 <__aeabi_d2iz>
 800c14c:	4604      	mov	r4, r0
 800c14e:	f7f4 f9c5 	bl	80004dc <__aeabi_i2d>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c15a:	f7f4 f871 	bl	8000240 <__aeabi_dsub>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	3430      	adds	r4, #48	; 0x30
 800c164:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c16c:	f807 4b01 	strb.w	r4, [r7], #1
 800c170:	f7f4 fc90 	bl	8000a94 <__aeabi_dcmplt>
 800c174:	2800      	cmp	r0, #0
 800c176:	d173      	bne.n	800c260 <_dtoa_r+0x638>
 800c178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c17c:	2000      	movs	r0, #0
 800c17e:	4911      	ldr	r1, [pc, #68]	; (800c1c4 <_dtoa_r+0x59c>)
 800c180:	f7f4 f85e 	bl	8000240 <__aeabi_dsub>
 800c184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c188:	f7f4 fc84 	bl	8000a94 <__aeabi_dcmplt>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f040 80b6 	bne.w	800c2fe <_dtoa_r+0x6d6>
 800c192:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c194:	429f      	cmp	r7, r3
 800c196:	f43f af7a 	beq.w	800c08e <_dtoa_r+0x466>
 800c19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c19e:	2200      	movs	r2, #0
 800c1a0:	4b09      	ldr	r3, [pc, #36]	; (800c1c8 <_dtoa_r+0x5a0>)
 800c1a2:	f7f4 fa05 	bl	80005b0 <__aeabi_dmul>
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1b0:	4b05      	ldr	r3, [pc, #20]	; (800c1c8 <_dtoa_r+0x5a0>)
 800c1b2:	f7f4 f9fd 	bl	80005b0 <__aeabi_dmul>
 800c1b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ba:	e7c3      	b.n	800c144 <_dtoa_r+0x51c>
 800c1bc:	0800f3e0 	.word	0x0800f3e0
 800c1c0:	0800f3b8 	.word	0x0800f3b8
 800c1c4:	3ff00000 	.word	0x3ff00000
 800c1c8:	40240000 	.word	0x40240000
 800c1cc:	401c0000 	.word	0x401c0000
 800c1d0:	40140000 	.word	0x40140000
 800c1d4:	3fe00000 	.word	0x3fe00000
 800c1d8:	4630      	mov	r0, r6
 800c1da:	4639      	mov	r1, r7
 800c1dc:	f7f4 f9e8 	bl	80005b0 <__aeabi_dmul>
 800c1e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1e6:	9c03      	ldr	r4, [sp, #12]
 800c1e8:	9314      	str	r3, [sp, #80]	; 0x50
 800c1ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ee:	f7f4 fc8f 	bl	8000b10 <__aeabi_d2iz>
 800c1f2:	9015      	str	r0, [sp, #84]	; 0x54
 800c1f4:	f7f4 f972 	bl	80004dc <__aeabi_i2d>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c200:	f7f4 f81e 	bl	8000240 <__aeabi_dsub>
 800c204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c206:	4606      	mov	r6, r0
 800c208:	3330      	adds	r3, #48	; 0x30
 800c20a:	f804 3b01 	strb.w	r3, [r4], #1
 800c20e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c210:	460f      	mov	r7, r1
 800c212:	429c      	cmp	r4, r3
 800c214:	f04f 0200 	mov.w	r2, #0
 800c218:	d124      	bne.n	800c264 <_dtoa_r+0x63c>
 800c21a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c21e:	4baf      	ldr	r3, [pc, #700]	; (800c4dc <_dtoa_r+0x8b4>)
 800c220:	f7f4 f810 	bl	8000244 <__adddf3>
 800c224:	4602      	mov	r2, r0
 800c226:	460b      	mov	r3, r1
 800c228:	4630      	mov	r0, r6
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f4 fc50 	bl	8000ad0 <__aeabi_dcmpgt>
 800c230:	2800      	cmp	r0, #0
 800c232:	d163      	bne.n	800c2fc <_dtoa_r+0x6d4>
 800c234:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c238:	2000      	movs	r0, #0
 800c23a:	49a8      	ldr	r1, [pc, #672]	; (800c4dc <_dtoa_r+0x8b4>)
 800c23c:	f7f4 f800 	bl	8000240 <__aeabi_dsub>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4630      	mov	r0, r6
 800c246:	4639      	mov	r1, r7
 800c248:	f7f4 fc24 	bl	8000a94 <__aeabi_dcmplt>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	f43f af1e 	beq.w	800c08e <_dtoa_r+0x466>
 800c252:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c254:	1e7b      	subs	r3, r7, #1
 800c256:	9314      	str	r3, [sp, #80]	; 0x50
 800c258:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c25c:	2b30      	cmp	r3, #48	; 0x30
 800c25e:	d0f8      	beq.n	800c252 <_dtoa_r+0x62a>
 800c260:	46c3      	mov	fp, r8
 800c262:	e03b      	b.n	800c2dc <_dtoa_r+0x6b4>
 800c264:	4b9e      	ldr	r3, [pc, #632]	; (800c4e0 <_dtoa_r+0x8b8>)
 800c266:	f7f4 f9a3 	bl	80005b0 <__aeabi_dmul>
 800c26a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c26e:	e7bc      	b.n	800c1ea <_dtoa_r+0x5c2>
 800c270:	9f03      	ldr	r7, [sp, #12]
 800c272:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c27a:	4640      	mov	r0, r8
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f4 fac1 	bl	8000804 <__aeabi_ddiv>
 800c282:	f7f4 fc45 	bl	8000b10 <__aeabi_d2iz>
 800c286:	4604      	mov	r4, r0
 800c288:	f7f4 f928 	bl	80004dc <__aeabi_i2d>
 800c28c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c290:	f7f4 f98e 	bl	80005b0 <__aeabi_dmul>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4640      	mov	r0, r8
 800c29a:	4649      	mov	r1, r9
 800c29c:	f7f3 ffd0 	bl	8000240 <__aeabi_dsub>
 800c2a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c2a4:	f807 6b01 	strb.w	r6, [r7], #1
 800c2a8:	9e03      	ldr	r6, [sp, #12]
 800c2aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c2ae:	1bbe      	subs	r6, r7, r6
 800c2b0:	45b4      	cmp	ip, r6
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	d136      	bne.n	800c326 <_dtoa_r+0x6fe>
 800c2b8:	f7f3 ffc4 	bl	8000244 <__adddf3>
 800c2bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	f7f4 fc04 	bl	8000ad0 <__aeabi_dcmpgt>
 800c2c8:	bb58      	cbnz	r0, 800c322 <_dtoa_r+0x6fa>
 800c2ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	f7f4 fbd5 	bl	8000a80 <__aeabi_dcmpeq>
 800c2d6:	b108      	cbz	r0, 800c2dc <_dtoa_r+0x6b4>
 800c2d8:	07e3      	lsls	r3, r4, #31
 800c2da:	d422      	bmi.n	800c322 <_dtoa_r+0x6fa>
 800c2dc:	4651      	mov	r1, sl
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 fbc2 	bl	800ca68 <_Bfree>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c2e8:	703b      	strb	r3, [r7, #0]
 800c2ea:	f10b 0301 	add.w	r3, fp, #1
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f43f ace6 	beq.w	800bcc4 <_dtoa_r+0x9c>
 800c2f8:	601f      	str	r7, [r3, #0]
 800c2fa:	e4e3      	b.n	800bcc4 <_dtoa_r+0x9c>
 800c2fc:	4627      	mov	r7, r4
 800c2fe:	463b      	mov	r3, r7
 800c300:	461f      	mov	r7, r3
 800c302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c306:	2a39      	cmp	r2, #57	; 0x39
 800c308:	d107      	bne.n	800c31a <_dtoa_r+0x6f2>
 800c30a:	9a03      	ldr	r2, [sp, #12]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d1f7      	bne.n	800c300 <_dtoa_r+0x6d8>
 800c310:	2230      	movs	r2, #48	; 0x30
 800c312:	9903      	ldr	r1, [sp, #12]
 800c314:	f108 0801 	add.w	r8, r8, #1
 800c318:	700a      	strb	r2, [r1, #0]
 800c31a:	781a      	ldrb	r2, [r3, #0]
 800c31c:	3201      	adds	r2, #1
 800c31e:	701a      	strb	r2, [r3, #0]
 800c320:	e79e      	b.n	800c260 <_dtoa_r+0x638>
 800c322:	46d8      	mov	r8, fp
 800c324:	e7eb      	b.n	800c2fe <_dtoa_r+0x6d6>
 800c326:	2200      	movs	r2, #0
 800c328:	4b6d      	ldr	r3, [pc, #436]	; (800c4e0 <_dtoa_r+0x8b8>)
 800c32a:	f7f4 f941 	bl	80005b0 <__aeabi_dmul>
 800c32e:	2200      	movs	r2, #0
 800c330:	2300      	movs	r3, #0
 800c332:	4680      	mov	r8, r0
 800c334:	4689      	mov	r9, r1
 800c336:	f7f4 fba3 	bl	8000a80 <__aeabi_dcmpeq>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d09b      	beq.n	800c276 <_dtoa_r+0x64e>
 800c33e:	e7cd      	b.n	800c2dc <_dtoa_r+0x6b4>
 800c340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c342:	2a00      	cmp	r2, #0
 800c344:	f000 80c4 	beq.w	800c4d0 <_dtoa_r+0x8a8>
 800c348:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c34a:	2a01      	cmp	r2, #1
 800c34c:	f300 80a8 	bgt.w	800c4a0 <_dtoa_r+0x878>
 800c350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c352:	2a00      	cmp	r2, #0
 800c354:	f000 80a0 	beq.w	800c498 <_dtoa_r+0x870>
 800c358:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c35c:	464f      	mov	r7, r9
 800c35e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c362:	2101      	movs	r1, #1
 800c364:	441a      	add	r2, r3
 800c366:	4628      	mov	r0, r5
 800c368:	4499      	add	r9, r3
 800c36a:	9209      	str	r2, [sp, #36]	; 0x24
 800c36c:	f000 fc7c 	bl	800cc68 <__i2b>
 800c370:	4606      	mov	r6, r0
 800c372:	b15f      	cbz	r7, 800c38c <_dtoa_r+0x764>
 800c374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c376:	2b00      	cmp	r3, #0
 800c378:	dd08      	ble.n	800c38c <_dtoa_r+0x764>
 800c37a:	42bb      	cmp	r3, r7
 800c37c:	bfa8      	it	ge
 800c37e:	463b      	movge	r3, r7
 800c380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c382:	eba9 0903 	sub.w	r9, r9, r3
 800c386:	1aff      	subs	r7, r7, r3
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	9309      	str	r3, [sp, #36]	; 0x24
 800c38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c38e:	b1f3      	cbz	r3, 800c3ce <_dtoa_r+0x7a6>
 800c390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 80a0 	beq.w	800c4d8 <_dtoa_r+0x8b0>
 800c398:	2c00      	cmp	r4, #0
 800c39a:	dd10      	ble.n	800c3be <_dtoa_r+0x796>
 800c39c:	4631      	mov	r1, r6
 800c39e:	4622      	mov	r2, r4
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f000 fd1f 	bl	800cde4 <__pow5mult>
 800c3a6:	4652      	mov	r2, sl
 800c3a8:	4601      	mov	r1, r0
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f000 fc71 	bl	800cc94 <__multiply>
 800c3b2:	4680      	mov	r8, r0
 800c3b4:	4651      	mov	r1, sl
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 fb56 	bl	800ca68 <_Bfree>
 800c3bc:	46c2      	mov	sl, r8
 800c3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3c0:	1b1a      	subs	r2, r3, r4
 800c3c2:	d004      	beq.n	800c3ce <_dtoa_r+0x7a6>
 800c3c4:	4651      	mov	r1, sl
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 fd0c 	bl	800cde4 <__pow5mult>
 800c3cc:	4682      	mov	sl, r0
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f000 fc49 	bl	800cc68 <__i2b>
 800c3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3d8:	4604      	mov	r4, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f340 8082 	ble.w	800c4e4 <_dtoa_r+0x8bc>
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4601      	mov	r1, r0
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f000 fcfd 	bl	800cde4 <__pow5mult>
 800c3ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	dd7b      	ble.n	800c4ea <_dtoa_r+0x8c2>
 800c3f2:	f04f 0800 	mov.w	r8, #0
 800c3f6:	6923      	ldr	r3, [r4, #16]
 800c3f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3fc:	6918      	ldr	r0, [r3, #16]
 800c3fe:	f000 fbe5 	bl	800cbcc <__hi0bits>
 800c402:	f1c0 0020 	rsb	r0, r0, #32
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	4418      	add	r0, r3
 800c40a:	f010 001f 	ands.w	r0, r0, #31
 800c40e:	f000 8092 	beq.w	800c536 <_dtoa_r+0x90e>
 800c412:	f1c0 0320 	rsb	r3, r0, #32
 800c416:	2b04      	cmp	r3, #4
 800c418:	f340 8085 	ble.w	800c526 <_dtoa_r+0x8fe>
 800c41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c41e:	f1c0 001c 	rsb	r0, r0, #28
 800c422:	4403      	add	r3, r0
 800c424:	4481      	add	r9, r0
 800c426:	4407      	add	r7, r0
 800c428:	9309      	str	r3, [sp, #36]	; 0x24
 800c42a:	f1b9 0f00 	cmp.w	r9, #0
 800c42e:	dd05      	ble.n	800c43c <_dtoa_r+0x814>
 800c430:	4651      	mov	r1, sl
 800c432:	464a      	mov	r2, r9
 800c434:	4628      	mov	r0, r5
 800c436:	f000 fd2f 	bl	800ce98 <__lshift>
 800c43a:	4682      	mov	sl, r0
 800c43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43e:	2b00      	cmp	r3, #0
 800c440:	dd05      	ble.n	800c44e <_dtoa_r+0x826>
 800c442:	4621      	mov	r1, r4
 800c444:	461a      	mov	r2, r3
 800c446:	4628      	mov	r0, r5
 800c448:	f000 fd26 	bl	800ce98 <__lshift>
 800c44c:	4604      	mov	r4, r0
 800c44e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d072      	beq.n	800c53a <_dtoa_r+0x912>
 800c454:	4621      	mov	r1, r4
 800c456:	4650      	mov	r0, sl
 800c458:	f000 fd8a 	bl	800cf70 <__mcmp>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	da6c      	bge.n	800c53a <_dtoa_r+0x912>
 800c460:	2300      	movs	r3, #0
 800c462:	4651      	mov	r1, sl
 800c464:	220a      	movs	r2, #10
 800c466:	4628      	mov	r0, r5
 800c468:	f000 fb20 	bl	800caac <__multadd>
 800c46c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c46e:	4682      	mov	sl, r0
 800c470:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 81ac 	beq.w	800c7d2 <_dtoa_r+0xbaa>
 800c47a:	2300      	movs	r3, #0
 800c47c:	4631      	mov	r1, r6
 800c47e:	220a      	movs	r2, #10
 800c480:	4628      	mov	r0, r5
 800c482:	f000 fb13 	bl	800caac <__multadd>
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	4606      	mov	r6, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f300 8093 	bgt.w	800c5b6 <_dtoa_r+0x98e>
 800c490:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c492:	2b02      	cmp	r3, #2
 800c494:	dc59      	bgt.n	800c54a <_dtoa_r+0x922>
 800c496:	e08e      	b.n	800c5b6 <_dtoa_r+0x98e>
 800c498:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c49a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c49e:	e75d      	b.n	800c35c <_dtoa_r+0x734>
 800c4a0:	9b08      	ldr	r3, [sp, #32]
 800c4a2:	1e5c      	subs	r4, r3, #1
 800c4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	bfbf      	itttt	lt
 800c4aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c4ac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c4ae:	1ae3      	sublt	r3, r4, r3
 800c4b0:	18d2      	addlt	r2, r2, r3
 800c4b2:	bfa8      	it	ge
 800c4b4:	1b1c      	subge	r4, r3, r4
 800c4b6:	9b08      	ldr	r3, [sp, #32]
 800c4b8:	bfbe      	ittt	lt
 800c4ba:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c4bc:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c4be:	2400      	movlt	r4, #0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	bfb5      	itete	lt
 800c4c4:	eba9 0703 	sublt.w	r7, r9, r3
 800c4c8:	464f      	movge	r7, r9
 800c4ca:	2300      	movlt	r3, #0
 800c4cc:	9b08      	ldrge	r3, [sp, #32]
 800c4ce:	e747      	b.n	800c360 <_dtoa_r+0x738>
 800c4d0:	464f      	mov	r7, r9
 800c4d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c4d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c4d6:	e74c      	b.n	800c372 <_dtoa_r+0x74a>
 800c4d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4da:	e773      	b.n	800c3c4 <_dtoa_r+0x79c>
 800c4dc:	3fe00000 	.word	0x3fe00000
 800c4e0:	40240000 	.word	0x40240000
 800c4e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	dc18      	bgt.n	800c51c <_dtoa_r+0x8f4>
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	b9b3      	cbnz	r3, 800c51c <_dtoa_r+0x8f4>
 800c4ee:	9b05      	ldr	r3, [sp, #20]
 800c4f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4f4:	b993      	cbnz	r3, 800c51c <_dtoa_r+0x8f4>
 800c4f6:	9b05      	ldr	r3, [sp, #20]
 800c4f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4fc:	0d1b      	lsrs	r3, r3, #20
 800c4fe:	051b      	lsls	r3, r3, #20
 800c500:	b17b      	cbz	r3, 800c522 <_dtoa_r+0x8fa>
 800c502:	f04f 0801 	mov.w	r8, #1
 800c506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c508:	f109 0901 	add.w	r9, r9, #1
 800c50c:	3301      	adds	r3, #1
 800c50e:	9309      	str	r3, [sp, #36]	; 0x24
 800c510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c512:	2b00      	cmp	r3, #0
 800c514:	f47f af6f 	bne.w	800c3f6 <_dtoa_r+0x7ce>
 800c518:	2001      	movs	r0, #1
 800c51a:	e774      	b.n	800c406 <_dtoa_r+0x7de>
 800c51c:	f04f 0800 	mov.w	r8, #0
 800c520:	e7f6      	b.n	800c510 <_dtoa_r+0x8e8>
 800c522:	4698      	mov	r8, r3
 800c524:	e7f4      	b.n	800c510 <_dtoa_r+0x8e8>
 800c526:	d080      	beq.n	800c42a <_dtoa_r+0x802>
 800c528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c52a:	331c      	adds	r3, #28
 800c52c:	441a      	add	r2, r3
 800c52e:	4499      	add	r9, r3
 800c530:	441f      	add	r7, r3
 800c532:	9209      	str	r2, [sp, #36]	; 0x24
 800c534:	e779      	b.n	800c42a <_dtoa_r+0x802>
 800c536:	4603      	mov	r3, r0
 800c538:	e7f6      	b.n	800c528 <_dtoa_r+0x900>
 800c53a:	9b08      	ldr	r3, [sp, #32]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	dc34      	bgt.n	800c5aa <_dtoa_r+0x982>
 800c540:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c542:	2b02      	cmp	r3, #2
 800c544:	dd31      	ble.n	800c5aa <_dtoa_r+0x982>
 800c546:	9b08      	ldr	r3, [sp, #32]
 800c548:	9306      	str	r3, [sp, #24]
 800c54a:	9b06      	ldr	r3, [sp, #24]
 800c54c:	b963      	cbnz	r3, 800c568 <_dtoa_r+0x940>
 800c54e:	4621      	mov	r1, r4
 800c550:	2205      	movs	r2, #5
 800c552:	4628      	mov	r0, r5
 800c554:	f000 faaa 	bl	800caac <__multadd>
 800c558:	4601      	mov	r1, r0
 800c55a:	4604      	mov	r4, r0
 800c55c:	4650      	mov	r0, sl
 800c55e:	f000 fd07 	bl	800cf70 <__mcmp>
 800c562:	2800      	cmp	r0, #0
 800c564:	f73f adbf 	bgt.w	800c0e6 <_dtoa_r+0x4be>
 800c568:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c56a:	9f03      	ldr	r7, [sp, #12]
 800c56c:	ea6f 0b03 	mvn.w	fp, r3
 800c570:	f04f 0800 	mov.w	r8, #0
 800c574:	4621      	mov	r1, r4
 800c576:	4628      	mov	r0, r5
 800c578:	f000 fa76 	bl	800ca68 <_Bfree>
 800c57c:	2e00      	cmp	r6, #0
 800c57e:	f43f aead 	beq.w	800c2dc <_dtoa_r+0x6b4>
 800c582:	f1b8 0f00 	cmp.w	r8, #0
 800c586:	d005      	beq.n	800c594 <_dtoa_r+0x96c>
 800c588:	45b0      	cmp	r8, r6
 800c58a:	d003      	beq.n	800c594 <_dtoa_r+0x96c>
 800c58c:	4641      	mov	r1, r8
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 fa6a 	bl	800ca68 <_Bfree>
 800c594:	4631      	mov	r1, r6
 800c596:	4628      	mov	r0, r5
 800c598:	f000 fa66 	bl	800ca68 <_Bfree>
 800c59c:	e69e      	b.n	800c2dc <_dtoa_r+0x6b4>
 800c59e:	2400      	movs	r4, #0
 800c5a0:	4626      	mov	r6, r4
 800c5a2:	e7e1      	b.n	800c568 <_dtoa_r+0x940>
 800c5a4:	46c3      	mov	fp, r8
 800c5a6:	4626      	mov	r6, r4
 800c5a8:	e59d      	b.n	800c0e6 <_dtoa_r+0x4be>
 800c5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f000 80c8 	beq.w	800c742 <_dtoa_r+0xb1a>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	9306      	str	r3, [sp, #24]
 800c5b6:	2f00      	cmp	r7, #0
 800c5b8:	dd05      	ble.n	800c5c6 <_dtoa_r+0x99e>
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	463a      	mov	r2, r7
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f000 fc6a 	bl	800ce98 <__lshift>
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	f1b8 0f00 	cmp.w	r8, #0
 800c5ca:	d05b      	beq.n	800c684 <_dtoa_r+0xa5c>
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	6871      	ldr	r1, [r6, #4]
 800c5d0:	f000 fa0a 	bl	800c9e8 <_Balloc>
 800c5d4:	4607      	mov	r7, r0
 800c5d6:	b928      	cbnz	r0, 800c5e4 <_dtoa_r+0x9bc>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c5de:	4b81      	ldr	r3, [pc, #516]	; (800c7e4 <_dtoa_r+0xbbc>)
 800c5e0:	f7ff bb36 	b.w	800bc50 <_dtoa_r+0x28>
 800c5e4:	6932      	ldr	r2, [r6, #16]
 800c5e6:	f106 010c 	add.w	r1, r6, #12
 800c5ea:	3202      	adds	r2, #2
 800c5ec:	0092      	lsls	r2, r2, #2
 800c5ee:	300c      	adds	r0, #12
 800c5f0:	f7ff fa7e 	bl	800baf0 <memcpy>
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	f000 fc4d 	bl	800ce98 <__lshift>
 800c5fe:	46b0      	mov	r8, r6
 800c600:	4606      	mov	r6, r0
 800c602:	9b03      	ldr	r3, [sp, #12]
 800c604:	9a03      	ldr	r2, [sp, #12]
 800c606:	3301      	adds	r3, #1
 800c608:	9308      	str	r3, [sp, #32]
 800c60a:	9b06      	ldr	r3, [sp, #24]
 800c60c:	4413      	add	r3, r2
 800c60e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c610:	9b04      	ldr	r3, [sp, #16]
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	930a      	str	r3, [sp, #40]	; 0x28
 800c618:	9b08      	ldr	r3, [sp, #32]
 800c61a:	4621      	mov	r1, r4
 800c61c:	3b01      	subs	r3, #1
 800c61e:	4650      	mov	r0, sl
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	f7ff fa77 	bl	800bb14 <quorem>
 800c626:	4641      	mov	r1, r8
 800c628:	9006      	str	r0, [sp, #24]
 800c62a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c62e:	4650      	mov	r0, sl
 800c630:	f000 fc9e 	bl	800cf70 <__mcmp>
 800c634:	4632      	mov	r2, r6
 800c636:	9009      	str	r0, [sp, #36]	; 0x24
 800c638:	4621      	mov	r1, r4
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 fcb4 	bl	800cfa8 <__mdiff>
 800c640:	68c2      	ldr	r2, [r0, #12]
 800c642:	4607      	mov	r7, r0
 800c644:	bb02      	cbnz	r2, 800c688 <_dtoa_r+0xa60>
 800c646:	4601      	mov	r1, r0
 800c648:	4650      	mov	r0, sl
 800c64a:	f000 fc91 	bl	800cf70 <__mcmp>
 800c64e:	4602      	mov	r2, r0
 800c650:	4639      	mov	r1, r7
 800c652:	4628      	mov	r0, r5
 800c654:	920c      	str	r2, [sp, #48]	; 0x30
 800c656:	f000 fa07 	bl	800ca68 <_Bfree>
 800c65a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c65e:	9f08      	ldr	r7, [sp, #32]
 800c660:	ea43 0102 	orr.w	r1, r3, r2
 800c664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c666:	4319      	orrs	r1, r3
 800c668:	d110      	bne.n	800c68c <_dtoa_r+0xa64>
 800c66a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c66e:	d029      	beq.n	800c6c4 <_dtoa_r+0xa9c>
 800c670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c672:	2b00      	cmp	r3, #0
 800c674:	dd02      	ble.n	800c67c <_dtoa_r+0xa54>
 800c676:	9b06      	ldr	r3, [sp, #24]
 800c678:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c67c:	9b04      	ldr	r3, [sp, #16]
 800c67e:	f883 9000 	strb.w	r9, [r3]
 800c682:	e777      	b.n	800c574 <_dtoa_r+0x94c>
 800c684:	4630      	mov	r0, r6
 800c686:	e7ba      	b.n	800c5fe <_dtoa_r+0x9d6>
 800c688:	2201      	movs	r2, #1
 800c68a:	e7e1      	b.n	800c650 <_dtoa_r+0xa28>
 800c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68e:	2b00      	cmp	r3, #0
 800c690:	db04      	blt.n	800c69c <_dtoa_r+0xa74>
 800c692:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c694:	430b      	orrs	r3, r1
 800c696:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c698:	430b      	orrs	r3, r1
 800c69a:	d120      	bne.n	800c6de <_dtoa_r+0xab6>
 800c69c:	2a00      	cmp	r2, #0
 800c69e:	dded      	ble.n	800c67c <_dtoa_r+0xa54>
 800c6a0:	4651      	mov	r1, sl
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f000 fbf7 	bl	800ce98 <__lshift>
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	4682      	mov	sl, r0
 800c6ae:	f000 fc5f 	bl	800cf70 <__mcmp>
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	dc03      	bgt.n	800c6be <_dtoa_r+0xa96>
 800c6b6:	d1e1      	bne.n	800c67c <_dtoa_r+0xa54>
 800c6b8:	f019 0f01 	tst.w	r9, #1
 800c6bc:	d0de      	beq.n	800c67c <_dtoa_r+0xa54>
 800c6be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6c2:	d1d8      	bne.n	800c676 <_dtoa_r+0xa4e>
 800c6c4:	2339      	movs	r3, #57	; 0x39
 800c6c6:	9a04      	ldr	r2, [sp, #16]
 800c6c8:	7013      	strb	r3, [r2, #0]
 800c6ca:	463b      	mov	r3, r7
 800c6cc:	461f      	mov	r7, r3
 800c6ce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	2a39      	cmp	r2, #57	; 0x39
 800c6d6:	d06b      	beq.n	800c7b0 <_dtoa_r+0xb88>
 800c6d8:	3201      	adds	r2, #1
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	e74a      	b.n	800c574 <_dtoa_r+0x94c>
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	dd07      	ble.n	800c6f2 <_dtoa_r+0xaca>
 800c6e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6e6:	d0ed      	beq.n	800c6c4 <_dtoa_r+0xa9c>
 800c6e8:	9a04      	ldr	r2, [sp, #16]
 800c6ea:	f109 0301 	add.w	r3, r9, #1
 800c6ee:	7013      	strb	r3, [r2, #0]
 800c6f0:	e740      	b.n	800c574 <_dtoa_r+0x94c>
 800c6f2:	9b08      	ldr	r3, [sp, #32]
 800c6f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6f6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d042      	beq.n	800c784 <_dtoa_r+0xb5c>
 800c6fe:	4651      	mov	r1, sl
 800c700:	2300      	movs	r3, #0
 800c702:	220a      	movs	r2, #10
 800c704:	4628      	mov	r0, r5
 800c706:	f000 f9d1 	bl	800caac <__multadd>
 800c70a:	45b0      	cmp	r8, r6
 800c70c:	4682      	mov	sl, r0
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	f04f 020a 	mov.w	r2, #10
 800c716:	4641      	mov	r1, r8
 800c718:	4628      	mov	r0, r5
 800c71a:	d107      	bne.n	800c72c <_dtoa_r+0xb04>
 800c71c:	f000 f9c6 	bl	800caac <__multadd>
 800c720:	4680      	mov	r8, r0
 800c722:	4606      	mov	r6, r0
 800c724:	9b08      	ldr	r3, [sp, #32]
 800c726:	3301      	adds	r3, #1
 800c728:	9308      	str	r3, [sp, #32]
 800c72a:	e775      	b.n	800c618 <_dtoa_r+0x9f0>
 800c72c:	f000 f9be 	bl	800caac <__multadd>
 800c730:	4631      	mov	r1, r6
 800c732:	4680      	mov	r8, r0
 800c734:	2300      	movs	r3, #0
 800c736:	220a      	movs	r2, #10
 800c738:	4628      	mov	r0, r5
 800c73a:	f000 f9b7 	bl	800caac <__multadd>
 800c73e:	4606      	mov	r6, r0
 800c740:	e7f0      	b.n	800c724 <_dtoa_r+0xafc>
 800c742:	9b08      	ldr	r3, [sp, #32]
 800c744:	9306      	str	r3, [sp, #24]
 800c746:	9f03      	ldr	r7, [sp, #12]
 800c748:	4621      	mov	r1, r4
 800c74a:	4650      	mov	r0, sl
 800c74c:	f7ff f9e2 	bl	800bb14 <quorem>
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c756:	f807 9b01 	strb.w	r9, [r7], #1
 800c75a:	1afa      	subs	r2, r7, r3
 800c75c:	9b06      	ldr	r3, [sp, #24]
 800c75e:	4293      	cmp	r3, r2
 800c760:	dd07      	ble.n	800c772 <_dtoa_r+0xb4a>
 800c762:	4651      	mov	r1, sl
 800c764:	2300      	movs	r3, #0
 800c766:	220a      	movs	r2, #10
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 f99f 	bl	800caac <__multadd>
 800c76e:	4682      	mov	sl, r0
 800c770:	e7ea      	b.n	800c748 <_dtoa_r+0xb20>
 800c772:	9b06      	ldr	r3, [sp, #24]
 800c774:	f04f 0800 	mov.w	r8, #0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	bfcc      	ite	gt
 800c77c:	461f      	movgt	r7, r3
 800c77e:	2701      	movle	r7, #1
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	441f      	add	r7, r3
 800c784:	4651      	mov	r1, sl
 800c786:	2201      	movs	r2, #1
 800c788:	4628      	mov	r0, r5
 800c78a:	f000 fb85 	bl	800ce98 <__lshift>
 800c78e:	4621      	mov	r1, r4
 800c790:	4682      	mov	sl, r0
 800c792:	f000 fbed 	bl	800cf70 <__mcmp>
 800c796:	2800      	cmp	r0, #0
 800c798:	dc97      	bgt.n	800c6ca <_dtoa_r+0xaa2>
 800c79a:	d102      	bne.n	800c7a2 <_dtoa_r+0xb7a>
 800c79c:	f019 0f01 	tst.w	r9, #1
 800c7a0:	d193      	bne.n	800c6ca <_dtoa_r+0xaa2>
 800c7a2:	463b      	mov	r3, r7
 800c7a4:	461f      	mov	r7, r3
 800c7a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7aa:	2a30      	cmp	r2, #48	; 0x30
 800c7ac:	d0fa      	beq.n	800c7a4 <_dtoa_r+0xb7c>
 800c7ae:	e6e1      	b.n	800c574 <_dtoa_r+0x94c>
 800c7b0:	9a03      	ldr	r2, [sp, #12]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d18a      	bne.n	800c6cc <_dtoa_r+0xaa4>
 800c7b6:	2331      	movs	r3, #49	; 0x31
 800c7b8:	f10b 0b01 	add.w	fp, fp, #1
 800c7bc:	e797      	b.n	800c6ee <_dtoa_r+0xac6>
 800c7be:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <_dtoa_r+0xbc0>)
 800c7c0:	f7ff ba9f 	b.w	800bd02 <_dtoa_r+0xda>
 800c7c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f47f aa77 	bne.w	800bcba <_dtoa_r+0x92>
 800c7cc:	4b07      	ldr	r3, [pc, #28]	; (800c7ec <_dtoa_r+0xbc4>)
 800c7ce:	f7ff ba98 	b.w	800bd02 <_dtoa_r+0xda>
 800c7d2:	9b06      	ldr	r3, [sp, #24]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dcb6      	bgt.n	800c746 <_dtoa_r+0xb1e>
 800c7d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	f73f aeb5 	bgt.w	800c54a <_dtoa_r+0x922>
 800c7e0:	e7b1      	b.n	800c746 <_dtoa_r+0xb1e>
 800c7e2:	bf00      	nop
 800c7e4:	0800f347 	.word	0x0800f347
 800c7e8:	0800f2a2 	.word	0x0800f2a2
 800c7ec:	0800f2cb 	.word	0x0800f2cb

0800c7f0 <_free_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	d040      	beq.n	800c87a <_free_r+0x8a>
 800c7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7fc:	1f0c      	subs	r4, r1, #4
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bfb8      	it	lt
 800c802:	18e4      	addlt	r4, r4, r3
 800c804:	f000 f8e4 	bl	800c9d0 <__malloc_lock>
 800c808:	4a1c      	ldr	r2, [pc, #112]	; (800c87c <_free_r+0x8c>)
 800c80a:	6813      	ldr	r3, [r2, #0]
 800c80c:	b933      	cbnz	r3, 800c81c <_free_r+0x2c>
 800c80e:	6063      	str	r3, [r4, #4]
 800c810:	6014      	str	r4, [r2, #0]
 800c812:	4628      	mov	r0, r5
 800c814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c818:	f000 b8e0 	b.w	800c9dc <__malloc_unlock>
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	d908      	bls.n	800c832 <_free_r+0x42>
 800c820:	6820      	ldr	r0, [r4, #0]
 800c822:	1821      	adds	r1, r4, r0
 800c824:	428b      	cmp	r3, r1
 800c826:	bf01      	itttt	eq
 800c828:	6819      	ldreq	r1, [r3, #0]
 800c82a:	685b      	ldreq	r3, [r3, #4]
 800c82c:	1809      	addeq	r1, r1, r0
 800c82e:	6021      	streq	r1, [r4, #0]
 800c830:	e7ed      	b.n	800c80e <_free_r+0x1e>
 800c832:	461a      	mov	r2, r3
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	b10b      	cbz	r3, 800c83c <_free_r+0x4c>
 800c838:	42a3      	cmp	r3, r4
 800c83a:	d9fa      	bls.n	800c832 <_free_r+0x42>
 800c83c:	6811      	ldr	r1, [r2, #0]
 800c83e:	1850      	adds	r0, r2, r1
 800c840:	42a0      	cmp	r0, r4
 800c842:	d10b      	bne.n	800c85c <_free_r+0x6c>
 800c844:	6820      	ldr	r0, [r4, #0]
 800c846:	4401      	add	r1, r0
 800c848:	1850      	adds	r0, r2, r1
 800c84a:	4283      	cmp	r3, r0
 800c84c:	6011      	str	r1, [r2, #0]
 800c84e:	d1e0      	bne.n	800c812 <_free_r+0x22>
 800c850:	6818      	ldr	r0, [r3, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4408      	add	r0, r1
 800c856:	6010      	str	r0, [r2, #0]
 800c858:	6053      	str	r3, [r2, #4]
 800c85a:	e7da      	b.n	800c812 <_free_r+0x22>
 800c85c:	d902      	bls.n	800c864 <_free_r+0x74>
 800c85e:	230c      	movs	r3, #12
 800c860:	602b      	str	r3, [r5, #0]
 800c862:	e7d6      	b.n	800c812 <_free_r+0x22>
 800c864:	6820      	ldr	r0, [r4, #0]
 800c866:	1821      	adds	r1, r4, r0
 800c868:	428b      	cmp	r3, r1
 800c86a:	bf01      	itttt	eq
 800c86c:	6819      	ldreq	r1, [r3, #0]
 800c86e:	685b      	ldreq	r3, [r3, #4]
 800c870:	1809      	addeq	r1, r1, r0
 800c872:	6021      	streq	r1, [r4, #0]
 800c874:	6063      	str	r3, [r4, #4]
 800c876:	6054      	str	r4, [r2, #4]
 800c878:	e7cb      	b.n	800c812 <_free_r+0x22>
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	20004580 	.word	0x20004580

0800c880 <malloc>:
 800c880:	4b02      	ldr	r3, [pc, #8]	; (800c88c <malloc+0xc>)
 800c882:	4601      	mov	r1, r0
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	f000 b823 	b.w	800c8d0 <_malloc_r>
 800c88a:	bf00      	nop
 800c88c:	20000068 	.word	0x20000068

0800c890 <sbrk_aligned>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	4e0e      	ldr	r6, [pc, #56]	; (800c8cc <sbrk_aligned+0x3c>)
 800c894:	460c      	mov	r4, r1
 800c896:	6831      	ldr	r1, [r6, #0]
 800c898:	4605      	mov	r5, r0
 800c89a:	b911      	cbnz	r1, 800c8a2 <sbrk_aligned+0x12>
 800c89c:	f001 ffd2 	bl	800e844 <_sbrk_r>
 800c8a0:	6030      	str	r0, [r6, #0]
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f001 ffcd 	bl	800e844 <_sbrk_r>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d00a      	beq.n	800c8c4 <sbrk_aligned+0x34>
 800c8ae:	1cc4      	adds	r4, r0, #3
 800c8b0:	f024 0403 	bic.w	r4, r4, #3
 800c8b4:	42a0      	cmp	r0, r4
 800c8b6:	d007      	beq.n	800c8c8 <sbrk_aligned+0x38>
 800c8b8:	1a21      	subs	r1, r4, r0
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f001 ffc2 	bl	800e844 <_sbrk_r>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d101      	bne.n	800c8c8 <sbrk_aligned+0x38>
 800c8c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	20004584 	.word	0x20004584

0800c8d0 <_malloc_r>:
 800c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	1ccd      	adds	r5, r1, #3
 800c8d6:	f025 0503 	bic.w	r5, r5, #3
 800c8da:	3508      	adds	r5, #8
 800c8dc:	2d0c      	cmp	r5, #12
 800c8de:	bf38      	it	cc
 800c8e0:	250c      	movcc	r5, #12
 800c8e2:	2d00      	cmp	r5, #0
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	db01      	blt.n	800c8ec <_malloc_r+0x1c>
 800c8e8:	42a9      	cmp	r1, r5
 800c8ea:	d905      	bls.n	800c8f8 <_malloc_r+0x28>
 800c8ec:	230c      	movs	r3, #12
 800c8ee:	2600      	movs	r6, #0
 800c8f0:	603b      	str	r3, [r7, #0]
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c9cc <_malloc_r+0xfc>
 800c8fc:	f000 f868 	bl	800c9d0 <__malloc_lock>
 800c900:	f8d8 3000 	ldr.w	r3, [r8]
 800c904:	461c      	mov	r4, r3
 800c906:	bb5c      	cbnz	r4, 800c960 <_malloc_r+0x90>
 800c908:	4629      	mov	r1, r5
 800c90a:	4638      	mov	r0, r7
 800c90c:	f7ff ffc0 	bl	800c890 <sbrk_aligned>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	4604      	mov	r4, r0
 800c914:	d155      	bne.n	800c9c2 <_malloc_r+0xf2>
 800c916:	f8d8 4000 	ldr.w	r4, [r8]
 800c91a:	4626      	mov	r6, r4
 800c91c:	2e00      	cmp	r6, #0
 800c91e:	d145      	bne.n	800c9ac <_malloc_r+0xdc>
 800c920:	2c00      	cmp	r4, #0
 800c922:	d048      	beq.n	800c9b6 <_malloc_r+0xe6>
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	4631      	mov	r1, r6
 800c928:	4638      	mov	r0, r7
 800c92a:	eb04 0903 	add.w	r9, r4, r3
 800c92e:	f001 ff89 	bl	800e844 <_sbrk_r>
 800c932:	4581      	cmp	r9, r0
 800c934:	d13f      	bne.n	800c9b6 <_malloc_r+0xe6>
 800c936:	6821      	ldr	r1, [r4, #0]
 800c938:	4638      	mov	r0, r7
 800c93a:	1a6d      	subs	r5, r5, r1
 800c93c:	4629      	mov	r1, r5
 800c93e:	f7ff ffa7 	bl	800c890 <sbrk_aligned>
 800c942:	3001      	adds	r0, #1
 800c944:	d037      	beq.n	800c9b6 <_malloc_r+0xe6>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	442b      	add	r3, r5
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	f8d8 3000 	ldr.w	r3, [r8]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d038      	beq.n	800c9c6 <_malloc_r+0xf6>
 800c954:	685a      	ldr	r2, [r3, #4]
 800c956:	42a2      	cmp	r2, r4
 800c958:	d12b      	bne.n	800c9b2 <_malloc_r+0xe2>
 800c95a:	2200      	movs	r2, #0
 800c95c:	605a      	str	r2, [r3, #4]
 800c95e:	e00f      	b.n	800c980 <_malloc_r+0xb0>
 800c960:	6822      	ldr	r2, [r4, #0]
 800c962:	1b52      	subs	r2, r2, r5
 800c964:	d41f      	bmi.n	800c9a6 <_malloc_r+0xd6>
 800c966:	2a0b      	cmp	r2, #11
 800c968:	d917      	bls.n	800c99a <_malloc_r+0xca>
 800c96a:	1961      	adds	r1, r4, r5
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	6025      	str	r5, [r4, #0]
 800c970:	bf18      	it	ne
 800c972:	6059      	strne	r1, [r3, #4]
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	bf08      	it	eq
 800c978:	f8c8 1000 	streq.w	r1, [r8]
 800c97c:	5162      	str	r2, [r4, r5]
 800c97e:	604b      	str	r3, [r1, #4]
 800c980:	4638      	mov	r0, r7
 800c982:	f104 060b 	add.w	r6, r4, #11
 800c986:	f000 f829 	bl	800c9dc <__malloc_unlock>
 800c98a:	f026 0607 	bic.w	r6, r6, #7
 800c98e:	1d23      	adds	r3, r4, #4
 800c990:	1af2      	subs	r2, r6, r3
 800c992:	d0ae      	beq.n	800c8f2 <_malloc_r+0x22>
 800c994:	1b9b      	subs	r3, r3, r6
 800c996:	50a3      	str	r3, [r4, r2]
 800c998:	e7ab      	b.n	800c8f2 <_malloc_r+0x22>
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	6862      	ldr	r2, [r4, #4]
 800c99e:	d1dd      	bne.n	800c95c <_malloc_r+0x8c>
 800c9a0:	f8c8 2000 	str.w	r2, [r8]
 800c9a4:	e7ec      	b.n	800c980 <_malloc_r+0xb0>
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	6864      	ldr	r4, [r4, #4]
 800c9aa:	e7ac      	b.n	800c906 <_malloc_r+0x36>
 800c9ac:	4634      	mov	r4, r6
 800c9ae:	6876      	ldr	r6, [r6, #4]
 800c9b0:	e7b4      	b.n	800c91c <_malloc_r+0x4c>
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	e7cc      	b.n	800c950 <_malloc_r+0x80>
 800c9b6:	230c      	movs	r3, #12
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	f000 f80e 	bl	800c9dc <__malloc_unlock>
 800c9c0:	e797      	b.n	800c8f2 <_malloc_r+0x22>
 800c9c2:	6025      	str	r5, [r4, #0]
 800c9c4:	e7dc      	b.n	800c980 <_malloc_r+0xb0>
 800c9c6:	605b      	str	r3, [r3, #4]
 800c9c8:	deff      	udf	#255	; 0xff
 800c9ca:	bf00      	nop
 800c9cc:	20004580 	.word	0x20004580

0800c9d0 <__malloc_lock>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	; (800c9d8 <__malloc_lock+0x8>)
 800c9d2:	f7ff b87d 	b.w	800bad0 <__retarget_lock_acquire_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	2000457c 	.word	0x2000457c

0800c9dc <__malloc_unlock>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	; (800c9e4 <__malloc_unlock+0x8>)
 800c9de:	f7ff b878 	b.w	800bad2 <__retarget_lock_release_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	2000457c 	.word	0x2000457c

0800c9e8 <_Balloc>:
 800c9e8:	b570      	push	{r4, r5, r6, lr}
 800c9ea:	69c6      	ldr	r6, [r0, #28]
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	460d      	mov	r5, r1
 800c9f0:	b976      	cbnz	r6, 800ca10 <_Balloc+0x28>
 800c9f2:	2010      	movs	r0, #16
 800c9f4:	f7ff ff44 	bl	800c880 <malloc>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	61e0      	str	r0, [r4, #28]
 800c9fc:	b920      	cbnz	r0, 800ca08 <_Balloc+0x20>
 800c9fe:	216b      	movs	r1, #107	; 0x6b
 800ca00:	4b17      	ldr	r3, [pc, #92]	; (800ca60 <_Balloc+0x78>)
 800ca02:	4818      	ldr	r0, [pc, #96]	; (800ca64 <_Balloc+0x7c>)
 800ca04:	f001 ff34 	bl	800e870 <__assert_func>
 800ca08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca0c:	6006      	str	r6, [r0, #0]
 800ca0e:	60c6      	str	r6, [r0, #12]
 800ca10:	69e6      	ldr	r6, [r4, #28]
 800ca12:	68f3      	ldr	r3, [r6, #12]
 800ca14:	b183      	cbz	r3, 800ca38 <_Balloc+0x50>
 800ca16:	69e3      	ldr	r3, [r4, #28]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca1e:	b9b8      	cbnz	r0, 800ca50 <_Balloc+0x68>
 800ca20:	2101      	movs	r1, #1
 800ca22:	fa01 f605 	lsl.w	r6, r1, r5
 800ca26:	1d72      	adds	r2, r6, #5
 800ca28:	4620      	mov	r0, r4
 800ca2a:	0092      	lsls	r2, r2, #2
 800ca2c:	f001 ff3e 	bl	800e8ac <_calloc_r>
 800ca30:	b160      	cbz	r0, 800ca4c <_Balloc+0x64>
 800ca32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca36:	e00e      	b.n	800ca56 <_Balloc+0x6e>
 800ca38:	2221      	movs	r2, #33	; 0x21
 800ca3a:	2104      	movs	r1, #4
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f001 ff35 	bl	800e8ac <_calloc_r>
 800ca42:	69e3      	ldr	r3, [r4, #28]
 800ca44:	60f0      	str	r0, [r6, #12]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1e4      	bne.n	800ca16 <_Balloc+0x2e>
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	6802      	ldr	r2, [r0, #0]
 800ca52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca56:	2300      	movs	r3, #0
 800ca58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca5c:	e7f7      	b.n	800ca4e <_Balloc+0x66>
 800ca5e:	bf00      	nop
 800ca60:	0800f2d8 	.word	0x0800f2d8
 800ca64:	0800f358 	.word	0x0800f358

0800ca68 <_Bfree>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	69c6      	ldr	r6, [r0, #28]
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	b976      	cbnz	r6, 800ca90 <_Bfree+0x28>
 800ca72:	2010      	movs	r0, #16
 800ca74:	f7ff ff04 	bl	800c880 <malloc>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	61e8      	str	r0, [r5, #28]
 800ca7c:	b920      	cbnz	r0, 800ca88 <_Bfree+0x20>
 800ca7e:	218f      	movs	r1, #143	; 0x8f
 800ca80:	4b08      	ldr	r3, [pc, #32]	; (800caa4 <_Bfree+0x3c>)
 800ca82:	4809      	ldr	r0, [pc, #36]	; (800caa8 <_Bfree+0x40>)
 800ca84:	f001 fef4 	bl	800e870 <__assert_func>
 800ca88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca8c:	6006      	str	r6, [r0, #0]
 800ca8e:	60c6      	str	r6, [r0, #12]
 800ca90:	b13c      	cbz	r4, 800caa2 <_Bfree+0x3a>
 800ca92:	69eb      	ldr	r3, [r5, #28]
 800ca94:	6862      	ldr	r2, [r4, #4]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca9c:	6021      	str	r1, [r4, #0]
 800ca9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
 800caa4:	0800f2d8 	.word	0x0800f2d8
 800caa8:	0800f358 	.word	0x0800f358

0800caac <__multadd>:
 800caac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab0:	4607      	mov	r7, r0
 800cab2:	460c      	mov	r4, r1
 800cab4:	461e      	mov	r6, r3
 800cab6:	2000      	movs	r0, #0
 800cab8:	690d      	ldr	r5, [r1, #16]
 800caba:	f101 0c14 	add.w	ip, r1, #20
 800cabe:	f8dc 3000 	ldr.w	r3, [ip]
 800cac2:	3001      	adds	r0, #1
 800cac4:	b299      	uxth	r1, r3
 800cac6:	fb02 6101 	mla	r1, r2, r1, r6
 800caca:	0c1e      	lsrs	r6, r3, #16
 800cacc:	0c0b      	lsrs	r3, r1, #16
 800cace:	fb02 3306 	mla	r3, r2, r6, r3
 800cad2:	b289      	uxth	r1, r1
 800cad4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cad8:	4285      	cmp	r5, r0
 800cada:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cade:	f84c 1b04 	str.w	r1, [ip], #4
 800cae2:	dcec      	bgt.n	800cabe <__multadd+0x12>
 800cae4:	b30e      	cbz	r6, 800cb2a <__multadd+0x7e>
 800cae6:	68a3      	ldr	r3, [r4, #8]
 800cae8:	42ab      	cmp	r3, r5
 800caea:	dc19      	bgt.n	800cb20 <__multadd+0x74>
 800caec:	6861      	ldr	r1, [r4, #4]
 800caee:	4638      	mov	r0, r7
 800caf0:	3101      	adds	r1, #1
 800caf2:	f7ff ff79 	bl	800c9e8 <_Balloc>
 800caf6:	4680      	mov	r8, r0
 800caf8:	b928      	cbnz	r0, 800cb06 <__multadd+0x5a>
 800cafa:	4602      	mov	r2, r0
 800cafc:	21ba      	movs	r1, #186	; 0xba
 800cafe:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <__multadd+0x84>)
 800cb00:	480c      	ldr	r0, [pc, #48]	; (800cb34 <__multadd+0x88>)
 800cb02:	f001 feb5 	bl	800e870 <__assert_func>
 800cb06:	6922      	ldr	r2, [r4, #16]
 800cb08:	f104 010c 	add.w	r1, r4, #12
 800cb0c:	3202      	adds	r2, #2
 800cb0e:	0092      	lsls	r2, r2, #2
 800cb10:	300c      	adds	r0, #12
 800cb12:	f7fe ffed 	bl	800baf0 <memcpy>
 800cb16:	4621      	mov	r1, r4
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7ff ffa5 	bl	800ca68 <_Bfree>
 800cb1e:	4644      	mov	r4, r8
 800cb20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb24:	3501      	adds	r5, #1
 800cb26:	615e      	str	r6, [r3, #20]
 800cb28:	6125      	str	r5, [r4, #16]
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb30:	0800f347 	.word	0x0800f347
 800cb34:	0800f358 	.word	0x0800f358

0800cb38 <__s2b>:
 800cb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb3c:	4615      	mov	r5, r2
 800cb3e:	2209      	movs	r2, #9
 800cb40:	461f      	mov	r7, r3
 800cb42:	3308      	adds	r3, #8
 800cb44:	460c      	mov	r4, r1
 800cb46:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	2100      	movs	r1, #0
 800cb50:	429a      	cmp	r2, r3
 800cb52:	db09      	blt.n	800cb68 <__s2b+0x30>
 800cb54:	4630      	mov	r0, r6
 800cb56:	f7ff ff47 	bl	800c9e8 <_Balloc>
 800cb5a:	b940      	cbnz	r0, 800cb6e <__s2b+0x36>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	21d3      	movs	r1, #211	; 0xd3
 800cb60:	4b18      	ldr	r3, [pc, #96]	; (800cbc4 <__s2b+0x8c>)
 800cb62:	4819      	ldr	r0, [pc, #100]	; (800cbc8 <__s2b+0x90>)
 800cb64:	f001 fe84 	bl	800e870 <__assert_func>
 800cb68:	0052      	lsls	r2, r2, #1
 800cb6a:	3101      	adds	r1, #1
 800cb6c:	e7f0      	b.n	800cb50 <__s2b+0x18>
 800cb6e:	9b08      	ldr	r3, [sp, #32]
 800cb70:	2d09      	cmp	r5, #9
 800cb72:	6143      	str	r3, [r0, #20]
 800cb74:	f04f 0301 	mov.w	r3, #1
 800cb78:	6103      	str	r3, [r0, #16]
 800cb7a:	dd16      	ble.n	800cbaa <__s2b+0x72>
 800cb7c:	f104 0909 	add.w	r9, r4, #9
 800cb80:	46c8      	mov	r8, r9
 800cb82:	442c      	add	r4, r5
 800cb84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb88:	4601      	mov	r1, r0
 800cb8a:	220a      	movs	r2, #10
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	3b30      	subs	r3, #48	; 0x30
 800cb90:	f7ff ff8c 	bl	800caac <__multadd>
 800cb94:	45a0      	cmp	r8, r4
 800cb96:	d1f5      	bne.n	800cb84 <__s2b+0x4c>
 800cb98:	f1a5 0408 	sub.w	r4, r5, #8
 800cb9c:	444c      	add	r4, r9
 800cb9e:	1b2d      	subs	r5, r5, r4
 800cba0:	1963      	adds	r3, r4, r5
 800cba2:	42bb      	cmp	r3, r7
 800cba4:	db04      	blt.n	800cbb0 <__s2b+0x78>
 800cba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbaa:	2509      	movs	r5, #9
 800cbac:	340a      	adds	r4, #10
 800cbae:	e7f6      	b.n	800cb9e <__s2b+0x66>
 800cbb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbb4:	4601      	mov	r1, r0
 800cbb6:	220a      	movs	r2, #10
 800cbb8:	4630      	mov	r0, r6
 800cbba:	3b30      	subs	r3, #48	; 0x30
 800cbbc:	f7ff ff76 	bl	800caac <__multadd>
 800cbc0:	e7ee      	b.n	800cba0 <__s2b+0x68>
 800cbc2:	bf00      	nop
 800cbc4:	0800f347 	.word	0x0800f347
 800cbc8:	0800f358 	.word	0x0800f358

0800cbcc <__hi0bits>:
 800cbcc:	0c02      	lsrs	r2, r0, #16
 800cbce:	0412      	lsls	r2, r2, #16
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	b9ca      	cbnz	r2, 800cc08 <__hi0bits+0x3c>
 800cbd4:	0403      	lsls	r3, r0, #16
 800cbd6:	2010      	movs	r0, #16
 800cbd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cbdc:	bf04      	itt	eq
 800cbde:	021b      	lsleq	r3, r3, #8
 800cbe0:	3008      	addeq	r0, #8
 800cbe2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cbe6:	bf04      	itt	eq
 800cbe8:	011b      	lsleq	r3, r3, #4
 800cbea:	3004      	addeq	r0, #4
 800cbec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cbf0:	bf04      	itt	eq
 800cbf2:	009b      	lsleq	r3, r3, #2
 800cbf4:	3002      	addeq	r0, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	db05      	blt.n	800cc06 <__hi0bits+0x3a>
 800cbfa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cbfe:	f100 0001 	add.w	r0, r0, #1
 800cc02:	bf08      	it	eq
 800cc04:	2020      	moveq	r0, #32
 800cc06:	4770      	bx	lr
 800cc08:	2000      	movs	r0, #0
 800cc0a:	e7e5      	b.n	800cbd8 <__hi0bits+0xc>

0800cc0c <__lo0bits>:
 800cc0c:	6803      	ldr	r3, [r0, #0]
 800cc0e:	4602      	mov	r2, r0
 800cc10:	f013 0007 	ands.w	r0, r3, #7
 800cc14:	d00b      	beq.n	800cc2e <__lo0bits+0x22>
 800cc16:	07d9      	lsls	r1, r3, #31
 800cc18:	d421      	bmi.n	800cc5e <__lo0bits+0x52>
 800cc1a:	0798      	lsls	r0, r3, #30
 800cc1c:	bf49      	itett	mi
 800cc1e:	085b      	lsrmi	r3, r3, #1
 800cc20:	089b      	lsrpl	r3, r3, #2
 800cc22:	2001      	movmi	r0, #1
 800cc24:	6013      	strmi	r3, [r2, #0]
 800cc26:	bf5c      	itt	pl
 800cc28:	2002      	movpl	r0, #2
 800cc2a:	6013      	strpl	r3, [r2, #0]
 800cc2c:	4770      	bx	lr
 800cc2e:	b299      	uxth	r1, r3
 800cc30:	b909      	cbnz	r1, 800cc36 <__lo0bits+0x2a>
 800cc32:	2010      	movs	r0, #16
 800cc34:	0c1b      	lsrs	r3, r3, #16
 800cc36:	b2d9      	uxtb	r1, r3
 800cc38:	b909      	cbnz	r1, 800cc3e <__lo0bits+0x32>
 800cc3a:	3008      	adds	r0, #8
 800cc3c:	0a1b      	lsrs	r3, r3, #8
 800cc3e:	0719      	lsls	r1, r3, #28
 800cc40:	bf04      	itt	eq
 800cc42:	091b      	lsreq	r3, r3, #4
 800cc44:	3004      	addeq	r0, #4
 800cc46:	0799      	lsls	r1, r3, #30
 800cc48:	bf04      	itt	eq
 800cc4a:	089b      	lsreq	r3, r3, #2
 800cc4c:	3002      	addeq	r0, #2
 800cc4e:	07d9      	lsls	r1, r3, #31
 800cc50:	d403      	bmi.n	800cc5a <__lo0bits+0x4e>
 800cc52:	085b      	lsrs	r3, r3, #1
 800cc54:	f100 0001 	add.w	r0, r0, #1
 800cc58:	d003      	beq.n	800cc62 <__lo0bits+0x56>
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	4770      	bx	lr
 800cc5e:	2000      	movs	r0, #0
 800cc60:	4770      	bx	lr
 800cc62:	2020      	movs	r0, #32
 800cc64:	4770      	bx	lr
	...

0800cc68 <__i2b>:
 800cc68:	b510      	push	{r4, lr}
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	2101      	movs	r1, #1
 800cc6e:	f7ff febb 	bl	800c9e8 <_Balloc>
 800cc72:	4602      	mov	r2, r0
 800cc74:	b928      	cbnz	r0, 800cc82 <__i2b+0x1a>
 800cc76:	f240 1145 	movw	r1, #325	; 0x145
 800cc7a:	4b04      	ldr	r3, [pc, #16]	; (800cc8c <__i2b+0x24>)
 800cc7c:	4804      	ldr	r0, [pc, #16]	; (800cc90 <__i2b+0x28>)
 800cc7e:	f001 fdf7 	bl	800e870 <__assert_func>
 800cc82:	2301      	movs	r3, #1
 800cc84:	6144      	str	r4, [r0, #20]
 800cc86:	6103      	str	r3, [r0, #16]
 800cc88:	bd10      	pop	{r4, pc}
 800cc8a:	bf00      	nop
 800cc8c:	0800f347 	.word	0x0800f347
 800cc90:	0800f358 	.word	0x0800f358

0800cc94 <__multiply>:
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	4691      	mov	r9, r2
 800cc9a:	690a      	ldr	r2, [r1, #16]
 800cc9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cca0:	460c      	mov	r4, r1
 800cca2:	429a      	cmp	r2, r3
 800cca4:	bfbe      	ittt	lt
 800cca6:	460b      	movlt	r3, r1
 800cca8:	464c      	movlt	r4, r9
 800ccaa:	4699      	movlt	r9, r3
 800ccac:	6927      	ldr	r7, [r4, #16]
 800ccae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ccb2:	68a3      	ldr	r3, [r4, #8]
 800ccb4:	6861      	ldr	r1, [r4, #4]
 800ccb6:	eb07 060a 	add.w	r6, r7, sl
 800ccba:	42b3      	cmp	r3, r6
 800ccbc:	b085      	sub	sp, #20
 800ccbe:	bfb8      	it	lt
 800ccc0:	3101      	addlt	r1, #1
 800ccc2:	f7ff fe91 	bl	800c9e8 <_Balloc>
 800ccc6:	b930      	cbnz	r0, 800ccd6 <__multiply+0x42>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ccce:	4b43      	ldr	r3, [pc, #268]	; (800cddc <__multiply+0x148>)
 800ccd0:	4843      	ldr	r0, [pc, #268]	; (800cde0 <__multiply+0x14c>)
 800ccd2:	f001 fdcd 	bl	800e870 <__assert_func>
 800ccd6:	f100 0514 	add.w	r5, r0, #20
 800ccda:	462b      	mov	r3, r5
 800ccdc:	2200      	movs	r2, #0
 800ccde:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cce2:	4543      	cmp	r3, r8
 800cce4:	d321      	bcc.n	800cd2a <__multiply+0x96>
 800cce6:	f104 0314 	add.w	r3, r4, #20
 800ccea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ccee:	f109 0314 	add.w	r3, r9, #20
 800ccf2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ccf6:	9202      	str	r2, [sp, #8]
 800ccf8:	1b3a      	subs	r2, r7, r4
 800ccfa:	3a15      	subs	r2, #21
 800ccfc:	f022 0203 	bic.w	r2, r2, #3
 800cd00:	3204      	adds	r2, #4
 800cd02:	f104 0115 	add.w	r1, r4, #21
 800cd06:	428f      	cmp	r7, r1
 800cd08:	bf38      	it	cc
 800cd0a:	2204      	movcc	r2, #4
 800cd0c:	9201      	str	r2, [sp, #4]
 800cd0e:	9a02      	ldr	r2, [sp, #8]
 800cd10:	9303      	str	r3, [sp, #12]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d80c      	bhi.n	800cd30 <__multiply+0x9c>
 800cd16:	2e00      	cmp	r6, #0
 800cd18:	dd03      	ble.n	800cd22 <__multiply+0x8e>
 800cd1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d05a      	beq.n	800cdd8 <__multiply+0x144>
 800cd22:	6106      	str	r6, [r0, #16]
 800cd24:	b005      	add	sp, #20
 800cd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	f843 2b04 	str.w	r2, [r3], #4
 800cd2e:	e7d8      	b.n	800cce2 <__multiply+0x4e>
 800cd30:	f8b3 a000 	ldrh.w	sl, [r3]
 800cd34:	f1ba 0f00 	cmp.w	sl, #0
 800cd38:	d023      	beq.n	800cd82 <__multiply+0xee>
 800cd3a:	46a9      	mov	r9, r5
 800cd3c:	f04f 0c00 	mov.w	ip, #0
 800cd40:	f104 0e14 	add.w	lr, r4, #20
 800cd44:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cd48:	f8d9 1000 	ldr.w	r1, [r9]
 800cd4c:	fa1f fb82 	uxth.w	fp, r2
 800cd50:	b289      	uxth	r1, r1
 800cd52:	fb0a 110b 	mla	r1, sl, fp, r1
 800cd56:	4461      	add	r1, ip
 800cd58:	f8d9 c000 	ldr.w	ip, [r9]
 800cd5c:	0c12      	lsrs	r2, r2, #16
 800cd5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cd62:	fb0a c202 	mla	r2, sl, r2, ip
 800cd66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd6a:	b289      	uxth	r1, r1
 800cd6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd70:	4577      	cmp	r7, lr
 800cd72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cd76:	f849 1b04 	str.w	r1, [r9], #4
 800cd7a:	d8e3      	bhi.n	800cd44 <__multiply+0xb0>
 800cd7c:	9a01      	ldr	r2, [sp, #4]
 800cd7e:	f845 c002 	str.w	ip, [r5, r2]
 800cd82:	9a03      	ldr	r2, [sp, #12]
 800cd84:	3304      	adds	r3, #4
 800cd86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd8a:	f1b9 0f00 	cmp.w	r9, #0
 800cd8e:	d021      	beq.n	800cdd4 <__multiply+0x140>
 800cd90:	46ae      	mov	lr, r5
 800cd92:	f04f 0a00 	mov.w	sl, #0
 800cd96:	6829      	ldr	r1, [r5, #0]
 800cd98:	f104 0c14 	add.w	ip, r4, #20
 800cd9c:	f8bc b000 	ldrh.w	fp, [ip]
 800cda0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cda4:	b289      	uxth	r1, r1
 800cda6:	fb09 220b 	mla	r2, r9, fp, r2
 800cdaa:	4452      	add	r2, sl
 800cdac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cdb0:	f84e 1b04 	str.w	r1, [lr], #4
 800cdb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cdb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cdbc:	f8be 1000 	ldrh.w	r1, [lr]
 800cdc0:	4567      	cmp	r7, ip
 800cdc2:	fb09 110a 	mla	r1, r9, sl, r1
 800cdc6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cdca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cdce:	d8e5      	bhi.n	800cd9c <__multiply+0x108>
 800cdd0:	9a01      	ldr	r2, [sp, #4]
 800cdd2:	50a9      	str	r1, [r5, r2]
 800cdd4:	3504      	adds	r5, #4
 800cdd6:	e79a      	b.n	800cd0e <__multiply+0x7a>
 800cdd8:	3e01      	subs	r6, #1
 800cdda:	e79c      	b.n	800cd16 <__multiply+0x82>
 800cddc:	0800f347 	.word	0x0800f347
 800cde0:	0800f358 	.word	0x0800f358

0800cde4 <__pow5mult>:
 800cde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde8:	4615      	mov	r5, r2
 800cdea:	f012 0203 	ands.w	r2, r2, #3
 800cdee:	4606      	mov	r6, r0
 800cdf0:	460f      	mov	r7, r1
 800cdf2:	d007      	beq.n	800ce04 <__pow5mult+0x20>
 800cdf4:	4c25      	ldr	r4, [pc, #148]	; (800ce8c <__pow5mult+0xa8>)
 800cdf6:	3a01      	subs	r2, #1
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdfe:	f7ff fe55 	bl	800caac <__multadd>
 800ce02:	4607      	mov	r7, r0
 800ce04:	10ad      	asrs	r5, r5, #2
 800ce06:	d03d      	beq.n	800ce84 <__pow5mult+0xa0>
 800ce08:	69f4      	ldr	r4, [r6, #28]
 800ce0a:	b97c      	cbnz	r4, 800ce2c <__pow5mult+0x48>
 800ce0c:	2010      	movs	r0, #16
 800ce0e:	f7ff fd37 	bl	800c880 <malloc>
 800ce12:	4602      	mov	r2, r0
 800ce14:	61f0      	str	r0, [r6, #28]
 800ce16:	b928      	cbnz	r0, 800ce24 <__pow5mult+0x40>
 800ce18:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ce1c:	4b1c      	ldr	r3, [pc, #112]	; (800ce90 <__pow5mult+0xac>)
 800ce1e:	481d      	ldr	r0, [pc, #116]	; (800ce94 <__pow5mult+0xb0>)
 800ce20:	f001 fd26 	bl	800e870 <__assert_func>
 800ce24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce28:	6004      	str	r4, [r0, #0]
 800ce2a:	60c4      	str	r4, [r0, #12]
 800ce2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ce30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce34:	b94c      	cbnz	r4, 800ce4a <__pow5mult+0x66>
 800ce36:	f240 2171 	movw	r1, #625	; 0x271
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f7ff ff14 	bl	800cc68 <__i2b>
 800ce40:	2300      	movs	r3, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce48:	6003      	str	r3, [r0, #0]
 800ce4a:	f04f 0900 	mov.w	r9, #0
 800ce4e:	07eb      	lsls	r3, r5, #31
 800ce50:	d50a      	bpl.n	800ce68 <__pow5mult+0x84>
 800ce52:	4639      	mov	r1, r7
 800ce54:	4622      	mov	r2, r4
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ff1c 	bl	800cc94 <__multiply>
 800ce5c:	4680      	mov	r8, r0
 800ce5e:	4639      	mov	r1, r7
 800ce60:	4630      	mov	r0, r6
 800ce62:	f7ff fe01 	bl	800ca68 <_Bfree>
 800ce66:	4647      	mov	r7, r8
 800ce68:	106d      	asrs	r5, r5, #1
 800ce6a:	d00b      	beq.n	800ce84 <__pow5mult+0xa0>
 800ce6c:	6820      	ldr	r0, [r4, #0]
 800ce6e:	b938      	cbnz	r0, 800ce80 <__pow5mult+0x9c>
 800ce70:	4622      	mov	r2, r4
 800ce72:	4621      	mov	r1, r4
 800ce74:	4630      	mov	r0, r6
 800ce76:	f7ff ff0d 	bl	800cc94 <__multiply>
 800ce7a:	6020      	str	r0, [r4, #0]
 800ce7c:	f8c0 9000 	str.w	r9, [r0]
 800ce80:	4604      	mov	r4, r0
 800ce82:	e7e4      	b.n	800ce4e <__pow5mult+0x6a>
 800ce84:	4638      	mov	r0, r7
 800ce86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce8a:	bf00      	nop
 800ce8c:	0800f4a8 	.word	0x0800f4a8
 800ce90:	0800f2d8 	.word	0x0800f2d8
 800ce94:	0800f358 	.word	0x0800f358

0800ce98 <__lshift>:
 800ce98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	4607      	mov	r7, r0
 800cea0:	4691      	mov	r9, r2
 800cea2:	6923      	ldr	r3, [r4, #16]
 800cea4:	6849      	ldr	r1, [r1, #4]
 800cea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceaa:	68a3      	ldr	r3, [r4, #8]
 800ceac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ceb0:	f108 0601 	add.w	r6, r8, #1
 800ceb4:	42b3      	cmp	r3, r6
 800ceb6:	db0b      	blt.n	800ced0 <__lshift+0x38>
 800ceb8:	4638      	mov	r0, r7
 800ceba:	f7ff fd95 	bl	800c9e8 <_Balloc>
 800cebe:	4605      	mov	r5, r0
 800cec0:	b948      	cbnz	r0, 800ced6 <__lshift+0x3e>
 800cec2:	4602      	mov	r2, r0
 800cec4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cec8:	4b27      	ldr	r3, [pc, #156]	; (800cf68 <__lshift+0xd0>)
 800ceca:	4828      	ldr	r0, [pc, #160]	; (800cf6c <__lshift+0xd4>)
 800cecc:	f001 fcd0 	bl	800e870 <__assert_func>
 800ced0:	3101      	adds	r1, #1
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	e7ee      	b.n	800ceb4 <__lshift+0x1c>
 800ced6:	2300      	movs	r3, #0
 800ced8:	f100 0114 	add.w	r1, r0, #20
 800cedc:	f100 0210 	add.w	r2, r0, #16
 800cee0:	4618      	mov	r0, r3
 800cee2:	4553      	cmp	r3, sl
 800cee4:	db33      	blt.n	800cf4e <__lshift+0xb6>
 800cee6:	6920      	ldr	r0, [r4, #16]
 800cee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ceec:	f104 0314 	add.w	r3, r4, #20
 800cef0:	f019 091f 	ands.w	r9, r9, #31
 800cef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cef8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cefc:	d02b      	beq.n	800cf56 <__lshift+0xbe>
 800cefe:	468a      	mov	sl, r1
 800cf00:	2200      	movs	r2, #0
 800cf02:	f1c9 0e20 	rsb	lr, r9, #32
 800cf06:	6818      	ldr	r0, [r3, #0]
 800cf08:	fa00 f009 	lsl.w	r0, r0, r9
 800cf0c:	4310      	orrs	r0, r2
 800cf0e:	f84a 0b04 	str.w	r0, [sl], #4
 800cf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf16:	459c      	cmp	ip, r3
 800cf18:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf1c:	d8f3      	bhi.n	800cf06 <__lshift+0x6e>
 800cf1e:	ebac 0304 	sub.w	r3, ip, r4
 800cf22:	3b15      	subs	r3, #21
 800cf24:	f023 0303 	bic.w	r3, r3, #3
 800cf28:	3304      	adds	r3, #4
 800cf2a:	f104 0015 	add.w	r0, r4, #21
 800cf2e:	4584      	cmp	ip, r0
 800cf30:	bf38      	it	cc
 800cf32:	2304      	movcc	r3, #4
 800cf34:	50ca      	str	r2, [r1, r3]
 800cf36:	b10a      	cbz	r2, 800cf3c <__lshift+0xa4>
 800cf38:	f108 0602 	add.w	r6, r8, #2
 800cf3c:	3e01      	subs	r6, #1
 800cf3e:	4638      	mov	r0, r7
 800cf40:	4621      	mov	r1, r4
 800cf42:	612e      	str	r6, [r5, #16]
 800cf44:	f7ff fd90 	bl	800ca68 <_Bfree>
 800cf48:	4628      	mov	r0, r5
 800cf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf52:	3301      	adds	r3, #1
 800cf54:	e7c5      	b.n	800cee2 <__lshift+0x4a>
 800cf56:	3904      	subs	r1, #4
 800cf58:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf5c:	459c      	cmp	ip, r3
 800cf5e:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf62:	d8f9      	bhi.n	800cf58 <__lshift+0xc0>
 800cf64:	e7ea      	b.n	800cf3c <__lshift+0xa4>
 800cf66:	bf00      	nop
 800cf68:	0800f347 	.word	0x0800f347
 800cf6c:	0800f358 	.word	0x0800f358

0800cf70 <__mcmp>:
 800cf70:	4603      	mov	r3, r0
 800cf72:	690a      	ldr	r2, [r1, #16]
 800cf74:	6900      	ldr	r0, [r0, #16]
 800cf76:	b530      	push	{r4, r5, lr}
 800cf78:	1a80      	subs	r0, r0, r2
 800cf7a:	d10d      	bne.n	800cf98 <__mcmp+0x28>
 800cf7c:	3314      	adds	r3, #20
 800cf7e:	3114      	adds	r1, #20
 800cf80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf90:	4295      	cmp	r5, r2
 800cf92:	d002      	beq.n	800cf9a <__mcmp+0x2a>
 800cf94:	d304      	bcc.n	800cfa0 <__mcmp+0x30>
 800cf96:	2001      	movs	r0, #1
 800cf98:	bd30      	pop	{r4, r5, pc}
 800cf9a:	42a3      	cmp	r3, r4
 800cf9c:	d3f4      	bcc.n	800cf88 <__mcmp+0x18>
 800cf9e:	e7fb      	b.n	800cf98 <__mcmp+0x28>
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	e7f8      	b.n	800cf98 <__mcmp+0x28>
	...

0800cfa8 <__mdiff>:
 800cfa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	460d      	mov	r5, r1
 800cfae:	4607      	mov	r7, r0
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	f7ff ffdb 	bl	800cf70 <__mcmp>
 800cfba:	1e06      	subs	r6, r0, #0
 800cfbc:	d111      	bne.n	800cfe2 <__mdiff+0x3a>
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4638      	mov	r0, r7
 800cfc2:	f7ff fd11 	bl	800c9e8 <_Balloc>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	b928      	cbnz	r0, 800cfd6 <__mdiff+0x2e>
 800cfca:	f240 2137 	movw	r1, #567	; 0x237
 800cfce:	4b3a      	ldr	r3, [pc, #232]	; (800d0b8 <__mdiff+0x110>)
 800cfd0:	483a      	ldr	r0, [pc, #232]	; (800d0bc <__mdiff+0x114>)
 800cfd2:	f001 fc4d 	bl	800e870 <__assert_func>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cfdc:	4610      	mov	r0, r2
 800cfde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe2:	bfa4      	itt	ge
 800cfe4:	4623      	movge	r3, r4
 800cfe6:	462c      	movge	r4, r5
 800cfe8:	4638      	mov	r0, r7
 800cfea:	6861      	ldr	r1, [r4, #4]
 800cfec:	bfa6      	itte	ge
 800cfee:	461d      	movge	r5, r3
 800cff0:	2600      	movge	r6, #0
 800cff2:	2601      	movlt	r6, #1
 800cff4:	f7ff fcf8 	bl	800c9e8 <_Balloc>
 800cff8:	4602      	mov	r2, r0
 800cffa:	b918      	cbnz	r0, 800d004 <__mdiff+0x5c>
 800cffc:	f240 2145 	movw	r1, #581	; 0x245
 800d000:	4b2d      	ldr	r3, [pc, #180]	; (800d0b8 <__mdiff+0x110>)
 800d002:	e7e5      	b.n	800cfd0 <__mdiff+0x28>
 800d004:	f102 0814 	add.w	r8, r2, #20
 800d008:	46c2      	mov	sl, r8
 800d00a:	f04f 0c00 	mov.w	ip, #0
 800d00e:	6927      	ldr	r7, [r4, #16]
 800d010:	60c6      	str	r6, [r0, #12]
 800d012:	692e      	ldr	r6, [r5, #16]
 800d014:	f104 0014 	add.w	r0, r4, #20
 800d018:	f105 0914 	add.w	r9, r5, #20
 800d01c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d024:	3410      	adds	r4, #16
 800d026:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d02a:	f859 3b04 	ldr.w	r3, [r9], #4
 800d02e:	fa1f f18b 	uxth.w	r1, fp
 800d032:	4461      	add	r1, ip
 800d034:	fa1f fc83 	uxth.w	ip, r3
 800d038:	0c1b      	lsrs	r3, r3, #16
 800d03a:	eba1 010c 	sub.w	r1, r1, ip
 800d03e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d042:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d046:	b289      	uxth	r1, r1
 800d048:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d04c:	454e      	cmp	r6, r9
 800d04e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d052:	f84a 1b04 	str.w	r1, [sl], #4
 800d056:	d8e6      	bhi.n	800d026 <__mdiff+0x7e>
 800d058:	1b73      	subs	r3, r6, r5
 800d05a:	3b15      	subs	r3, #21
 800d05c:	f023 0303 	bic.w	r3, r3, #3
 800d060:	3515      	adds	r5, #21
 800d062:	3304      	adds	r3, #4
 800d064:	42ae      	cmp	r6, r5
 800d066:	bf38      	it	cc
 800d068:	2304      	movcc	r3, #4
 800d06a:	4418      	add	r0, r3
 800d06c:	4443      	add	r3, r8
 800d06e:	461e      	mov	r6, r3
 800d070:	4605      	mov	r5, r0
 800d072:	4575      	cmp	r5, lr
 800d074:	d30e      	bcc.n	800d094 <__mdiff+0xec>
 800d076:	f10e 0103 	add.w	r1, lr, #3
 800d07a:	1a09      	subs	r1, r1, r0
 800d07c:	f021 0103 	bic.w	r1, r1, #3
 800d080:	3803      	subs	r0, #3
 800d082:	4586      	cmp	lr, r0
 800d084:	bf38      	it	cc
 800d086:	2100      	movcc	r1, #0
 800d088:	440b      	add	r3, r1
 800d08a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d08e:	b189      	cbz	r1, 800d0b4 <__mdiff+0x10c>
 800d090:	6117      	str	r7, [r2, #16]
 800d092:	e7a3      	b.n	800cfdc <__mdiff+0x34>
 800d094:	f855 8b04 	ldr.w	r8, [r5], #4
 800d098:	fa1f f188 	uxth.w	r1, r8
 800d09c:	4461      	add	r1, ip
 800d09e:	140c      	asrs	r4, r1, #16
 800d0a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d0a4:	b289      	uxth	r1, r1
 800d0a6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d0aa:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d0ae:	f846 1b04 	str.w	r1, [r6], #4
 800d0b2:	e7de      	b.n	800d072 <__mdiff+0xca>
 800d0b4:	3f01      	subs	r7, #1
 800d0b6:	e7e8      	b.n	800d08a <__mdiff+0xe2>
 800d0b8:	0800f347 	.word	0x0800f347
 800d0bc:	0800f358 	.word	0x0800f358

0800d0c0 <__ulp>:
 800d0c0:	4b0e      	ldr	r3, [pc, #56]	; (800d0fc <__ulp+0x3c>)
 800d0c2:	400b      	ands	r3, r1
 800d0c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	dc08      	bgt.n	800d0de <__ulp+0x1e>
 800d0cc:	425b      	negs	r3, r3
 800d0ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d0d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d0d6:	da04      	bge.n	800d0e2 <__ulp+0x22>
 800d0d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d0dc:	4113      	asrs	r3, r2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	e008      	b.n	800d0f4 <__ulp+0x34>
 800d0e2:	f1a2 0314 	sub.w	r3, r2, #20
 800d0e6:	2b1e      	cmp	r3, #30
 800d0e8:	bfd6      	itet	le
 800d0ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d0ee:	2201      	movgt	r2, #1
 800d0f0:	40da      	lsrle	r2, r3
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	7ff00000 	.word	0x7ff00000

0800d100 <__b2d>:
 800d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d102:	6905      	ldr	r5, [r0, #16]
 800d104:	f100 0714 	add.w	r7, r0, #20
 800d108:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d10c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d110:	1f2e      	subs	r6, r5, #4
 800d112:	4620      	mov	r0, r4
 800d114:	f7ff fd5a 	bl	800cbcc <__hi0bits>
 800d118:	f1c0 0220 	rsb	r2, r0, #32
 800d11c:	280a      	cmp	r0, #10
 800d11e:	4603      	mov	r3, r0
 800d120:	f8df c068 	ldr.w	ip, [pc, #104]	; 800d18c <__b2d+0x8c>
 800d124:	600a      	str	r2, [r1, #0]
 800d126:	dc12      	bgt.n	800d14e <__b2d+0x4e>
 800d128:	f1c0 0e0b 	rsb	lr, r0, #11
 800d12c:	fa24 f20e 	lsr.w	r2, r4, lr
 800d130:	42b7      	cmp	r7, r6
 800d132:	ea42 010c 	orr.w	r1, r2, ip
 800d136:	bf2c      	ite	cs
 800d138:	2200      	movcs	r2, #0
 800d13a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d13e:	3315      	adds	r3, #21
 800d140:	fa04 f303 	lsl.w	r3, r4, r3
 800d144:	fa22 f20e 	lsr.w	r2, r2, lr
 800d148:	431a      	orrs	r2, r3
 800d14a:	4610      	mov	r0, r2
 800d14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d14e:	42b7      	cmp	r7, r6
 800d150:	bf2e      	itee	cs
 800d152:	2200      	movcs	r2, #0
 800d154:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800d158:	f1a5 0608 	subcc.w	r6, r5, #8
 800d15c:	3b0b      	subs	r3, #11
 800d15e:	d012      	beq.n	800d186 <__b2d+0x86>
 800d160:	f1c3 0520 	rsb	r5, r3, #32
 800d164:	fa22 f105 	lsr.w	r1, r2, r5
 800d168:	409c      	lsls	r4, r3
 800d16a:	430c      	orrs	r4, r1
 800d16c:	42be      	cmp	r6, r7
 800d16e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800d172:	bf94      	ite	ls
 800d174:	2400      	movls	r4, #0
 800d176:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d17a:	409a      	lsls	r2, r3
 800d17c:	40ec      	lsrs	r4, r5
 800d17e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d182:	4322      	orrs	r2, r4
 800d184:	e7e1      	b.n	800d14a <__b2d+0x4a>
 800d186:	ea44 010c 	orr.w	r1, r4, ip
 800d18a:	e7de      	b.n	800d14a <__b2d+0x4a>
 800d18c:	3ff00000 	.word	0x3ff00000

0800d190 <__d2b>:
 800d190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d192:	2101      	movs	r1, #1
 800d194:	4617      	mov	r7, r2
 800d196:	461c      	mov	r4, r3
 800d198:	9e08      	ldr	r6, [sp, #32]
 800d19a:	f7ff fc25 	bl	800c9e8 <_Balloc>
 800d19e:	4605      	mov	r5, r0
 800d1a0:	b930      	cbnz	r0, 800d1b0 <__d2b+0x20>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	f240 310f 	movw	r1, #783	; 0x30f
 800d1a8:	4b22      	ldr	r3, [pc, #136]	; (800d234 <__d2b+0xa4>)
 800d1aa:	4823      	ldr	r0, [pc, #140]	; (800d238 <__d2b+0xa8>)
 800d1ac:	f001 fb60 	bl	800e870 <__assert_func>
 800d1b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d1b4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800d1b8:	bb24      	cbnz	r4, 800d204 <__d2b+0x74>
 800d1ba:	2f00      	cmp	r7, #0
 800d1bc:	9301      	str	r3, [sp, #4]
 800d1be:	d026      	beq.n	800d20e <__d2b+0x7e>
 800d1c0:	4668      	mov	r0, sp
 800d1c2:	9700      	str	r7, [sp, #0]
 800d1c4:	f7ff fd22 	bl	800cc0c <__lo0bits>
 800d1c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1cc:	b1e8      	cbz	r0, 800d20a <__d2b+0x7a>
 800d1ce:	f1c0 0320 	rsb	r3, r0, #32
 800d1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d6:	430b      	orrs	r3, r1
 800d1d8:	40c2      	lsrs	r2, r0
 800d1da:	616b      	str	r3, [r5, #20]
 800d1dc:	9201      	str	r2, [sp, #4]
 800d1de:	9b01      	ldr	r3, [sp, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	bf14      	ite	ne
 800d1e4:	2102      	movne	r1, #2
 800d1e6:	2101      	moveq	r1, #1
 800d1e8:	61ab      	str	r3, [r5, #24]
 800d1ea:	6129      	str	r1, [r5, #16]
 800d1ec:	b1bc      	cbz	r4, 800d21e <__d2b+0x8e>
 800d1ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d1f2:	4404      	add	r4, r0
 800d1f4:	6034      	str	r4, [r6, #0]
 800d1f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1fc:	6018      	str	r0, [r3, #0]
 800d1fe:	4628      	mov	r0, r5
 800d200:	b003      	add	sp, #12
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d208:	e7d7      	b.n	800d1ba <__d2b+0x2a>
 800d20a:	6169      	str	r1, [r5, #20]
 800d20c:	e7e7      	b.n	800d1de <__d2b+0x4e>
 800d20e:	a801      	add	r0, sp, #4
 800d210:	f7ff fcfc 	bl	800cc0c <__lo0bits>
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	2101      	movs	r1, #1
 800d218:	616b      	str	r3, [r5, #20]
 800d21a:	3020      	adds	r0, #32
 800d21c:	e7e5      	b.n	800d1ea <__d2b+0x5a>
 800d21e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d222:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800d226:	6030      	str	r0, [r6, #0]
 800d228:	6918      	ldr	r0, [r3, #16]
 800d22a:	f7ff fccf 	bl	800cbcc <__hi0bits>
 800d22e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d232:	e7e2      	b.n	800d1fa <__d2b+0x6a>
 800d234:	0800f347 	.word	0x0800f347
 800d238:	0800f358 	.word	0x0800f358

0800d23c <__ratio>:
 800d23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	4688      	mov	r8, r1
 800d242:	4669      	mov	r1, sp
 800d244:	4681      	mov	r9, r0
 800d246:	f7ff ff5b 	bl	800d100 <__b2d>
 800d24a:	460f      	mov	r7, r1
 800d24c:	4604      	mov	r4, r0
 800d24e:	460d      	mov	r5, r1
 800d250:	4640      	mov	r0, r8
 800d252:	a901      	add	r1, sp, #4
 800d254:	f7ff ff54 	bl	800d100 <__b2d>
 800d258:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d25c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d260:	468b      	mov	fp, r1
 800d262:	eba3 0c02 	sub.w	ip, r3, r2
 800d266:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d26a:	1a9b      	subs	r3, r3, r2
 800d26c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d270:	2b00      	cmp	r3, #0
 800d272:	bfd5      	itete	le
 800d274:	460a      	movle	r2, r1
 800d276:	462a      	movgt	r2, r5
 800d278:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d27c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d280:	bfd8      	it	le
 800d282:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d286:	465b      	mov	r3, fp
 800d288:	4602      	mov	r2, r0
 800d28a:	4639      	mov	r1, r7
 800d28c:	4620      	mov	r0, r4
 800d28e:	f7f3 fab9 	bl	8000804 <__aeabi_ddiv>
 800d292:	b003      	add	sp, #12
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d298 <__copybits>:
 800d298:	3901      	subs	r1, #1
 800d29a:	b570      	push	{r4, r5, r6, lr}
 800d29c:	1149      	asrs	r1, r1, #5
 800d29e:	6914      	ldr	r4, [r2, #16]
 800d2a0:	3101      	adds	r1, #1
 800d2a2:	f102 0314 	add.w	r3, r2, #20
 800d2a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d2aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d2ae:	1f05      	subs	r5, r0, #4
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	d30c      	bcc.n	800d2ce <__copybits+0x36>
 800d2b4:	1aa3      	subs	r3, r4, r2
 800d2b6:	3b11      	subs	r3, #17
 800d2b8:	f023 0303 	bic.w	r3, r3, #3
 800d2bc:	3211      	adds	r2, #17
 800d2be:	42a2      	cmp	r2, r4
 800d2c0:	bf88      	it	hi
 800d2c2:	2300      	movhi	r3, #0
 800d2c4:	4418      	add	r0, r3
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	4288      	cmp	r0, r1
 800d2ca:	d305      	bcc.n	800d2d8 <__copybits+0x40>
 800d2cc:	bd70      	pop	{r4, r5, r6, pc}
 800d2ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800d2d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2d6:	e7eb      	b.n	800d2b0 <__copybits+0x18>
 800d2d8:	f840 3b04 	str.w	r3, [r0], #4
 800d2dc:	e7f4      	b.n	800d2c8 <__copybits+0x30>

0800d2de <__any_on>:
 800d2de:	f100 0214 	add.w	r2, r0, #20
 800d2e2:	6900      	ldr	r0, [r0, #16]
 800d2e4:	114b      	asrs	r3, r1, #5
 800d2e6:	4298      	cmp	r0, r3
 800d2e8:	b510      	push	{r4, lr}
 800d2ea:	db11      	blt.n	800d310 <__any_on+0x32>
 800d2ec:	dd0a      	ble.n	800d304 <__any_on+0x26>
 800d2ee:	f011 011f 	ands.w	r1, r1, #31
 800d2f2:	d007      	beq.n	800d304 <__any_on+0x26>
 800d2f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2f8:	fa24 f001 	lsr.w	r0, r4, r1
 800d2fc:	fa00 f101 	lsl.w	r1, r0, r1
 800d300:	428c      	cmp	r4, r1
 800d302:	d10b      	bne.n	800d31c <__any_on+0x3e>
 800d304:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d308:	4293      	cmp	r3, r2
 800d30a:	d803      	bhi.n	800d314 <__any_on+0x36>
 800d30c:	2000      	movs	r0, #0
 800d30e:	bd10      	pop	{r4, pc}
 800d310:	4603      	mov	r3, r0
 800d312:	e7f7      	b.n	800d304 <__any_on+0x26>
 800d314:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d318:	2900      	cmp	r1, #0
 800d31a:	d0f5      	beq.n	800d308 <__any_on+0x2a>
 800d31c:	2001      	movs	r0, #1
 800d31e:	e7f6      	b.n	800d30e <__any_on+0x30>

0800d320 <sulp>:
 800d320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d324:	460f      	mov	r7, r1
 800d326:	4690      	mov	r8, r2
 800d328:	f7ff feca 	bl	800d0c0 <__ulp>
 800d32c:	4604      	mov	r4, r0
 800d32e:	460d      	mov	r5, r1
 800d330:	f1b8 0f00 	cmp.w	r8, #0
 800d334:	d011      	beq.n	800d35a <sulp+0x3a>
 800d336:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d33a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d33e:	2b00      	cmp	r3, #0
 800d340:	dd0b      	ble.n	800d35a <sulp+0x3a>
 800d342:	2400      	movs	r4, #0
 800d344:	051b      	lsls	r3, r3, #20
 800d346:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d34a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d34e:	4622      	mov	r2, r4
 800d350:	462b      	mov	r3, r5
 800d352:	f7f3 f92d 	bl	80005b0 <__aeabi_dmul>
 800d356:	4604      	mov	r4, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	4620      	mov	r0, r4
 800d35c:	4629      	mov	r1, r5
 800d35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d362:	0000      	movs	r0, r0
 800d364:	0000      	movs	r0, r0
	...

0800d368 <_strtod_l>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	b09f      	sub	sp, #124	; 0x7c
 800d36e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d370:	2200      	movs	r2, #0
 800d372:	4604      	mov	r4, r0
 800d374:	921a      	str	r2, [sp, #104]	; 0x68
 800d376:	460d      	mov	r5, r1
 800d378:	f04f 0800 	mov.w	r8, #0
 800d37c:	f04f 0900 	mov.w	r9, #0
 800d380:	460a      	mov	r2, r1
 800d382:	9219      	str	r2, [sp, #100]	; 0x64
 800d384:	7811      	ldrb	r1, [r2, #0]
 800d386:	292b      	cmp	r1, #43	; 0x2b
 800d388:	d04a      	beq.n	800d420 <_strtod_l+0xb8>
 800d38a:	d838      	bhi.n	800d3fe <_strtod_l+0x96>
 800d38c:	290d      	cmp	r1, #13
 800d38e:	d832      	bhi.n	800d3f6 <_strtod_l+0x8e>
 800d390:	2908      	cmp	r1, #8
 800d392:	d832      	bhi.n	800d3fa <_strtod_l+0x92>
 800d394:	2900      	cmp	r1, #0
 800d396:	d03b      	beq.n	800d410 <_strtod_l+0xa8>
 800d398:	2200      	movs	r2, #0
 800d39a:	920e      	str	r2, [sp, #56]	; 0x38
 800d39c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d39e:	7832      	ldrb	r2, [r6, #0]
 800d3a0:	2a30      	cmp	r2, #48	; 0x30
 800d3a2:	f040 80b2 	bne.w	800d50a <_strtod_l+0x1a2>
 800d3a6:	7872      	ldrb	r2, [r6, #1]
 800d3a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d3ac:	2a58      	cmp	r2, #88	; 0x58
 800d3ae:	d16e      	bne.n	800d48e <_strtod_l+0x126>
 800d3b0:	9302      	str	r3, [sp, #8]
 800d3b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	ab1a      	add	r3, sp, #104	; 0x68
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	4a8c      	ldr	r2, [pc, #560]	; (800d5f0 <_strtod_l+0x288>)
 800d3be:	ab1b      	add	r3, sp, #108	; 0x6c
 800d3c0:	a919      	add	r1, sp, #100	; 0x64
 800d3c2:	f001 faef 	bl	800e9a4 <__gethex>
 800d3c6:	f010 070f 	ands.w	r7, r0, #15
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	d005      	beq.n	800d3da <_strtod_l+0x72>
 800d3ce:	2f06      	cmp	r7, #6
 800d3d0:	d128      	bne.n	800d424 <_strtod_l+0xbc>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	3601      	adds	r6, #1
 800d3d6:	9619      	str	r6, [sp, #100]	; 0x64
 800d3d8:	930e      	str	r3, [sp, #56]	; 0x38
 800d3da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f040 85a0 	bne.w	800df22 <_strtod_l+0xbba>
 800d3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3e4:	b1cb      	cbz	r3, 800d41a <_strtod_l+0xb2>
 800d3e6:	4642      	mov	r2, r8
 800d3e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	b01f      	add	sp, #124	; 0x7c
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f6:	2920      	cmp	r1, #32
 800d3f8:	d1ce      	bne.n	800d398 <_strtod_l+0x30>
 800d3fa:	3201      	adds	r2, #1
 800d3fc:	e7c1      	b.n	800d382 <_strtod_l+0x1a>
 800d3fe:	292d      	cmp	r1, #45	; 0x2d
 800d400:	d1ca      	bne.n	800d398 <_strtod_l+0x30>
 800d402:	2101      	movs	r1, #1
 800d404:	910e      	str	r1, [sp, #56]	; 0x38
 800d406:	1c51      	adds	r1, r2, #1
 800d408:	9119      	str	r1, [sp, #100]	; 0x64
 800d40a:	7852      	ldrb	r2, [r2, #1]
 800d40c:	2a00      	cmp	r2, #0
 800d40e:	d1c5      	bne.n	800d39c <_strtod_l+0x34>
 800d410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d412:	9519      	str	r5, [sp, #100]	; 0x64
 800d414:	2b00      	cmp	r3, #0
 800d416:	f040 8582 	bne.w	800df1e <_strtod_l+0xbb6>
 800d41a:	4642      	mov	r2, r8
 800d41c:	464b      	mov	r3, r9
 800d41e:	e7e5      	b.n	800d3ec <_strtod_l+0x84>
 800d420:	2100      	movs	r1, #0
 800d422:	e7ef      	b.n	800d404 <_strtod_l+0x9c>
 800d424:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d426:	b13a      	cbz	r2, 800d438 <_strtod_l+0xd0>
 800d428:	2135      	movs	r1, #53	; 0x35
 800d42a:	a81c      	add	r0, sp, #112	; 0x70
 800d42c:	f7ff ff34 	bl	800d298 <__copybits>
 800d430:	4620      	mov	r0, r4
 800d432:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d434:	f7ff fb18 	bl	800ca68 <_Bfree>
 800d438:	3f01      	subs	r7, #1
 800d43a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d43c:	2f04      	cmp	r7, #4
 800d43e:	d806      	bhi.n	800d44e <_strtod_l+0xe6>
 800d440:	e8df f007 	tbb	[pc, r7]
 800d444:	201d0314 	.word	0x201d0314
 800d448:	14          	.byte	0x14
 800d449:	00          	.byte	0x00
 800d44a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800d44e:	05e9      	lsls	r1, r5, #23
 800d450:	bf48      	it	mi
 800d452:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d456:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d45a:	0d1b      	lsrs	r3, r3, #20
 800d45c:	051b      	lsls	r3, r3, #20
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1bb      	bne.n	800d3da <_strtod_l+0x72>
 800d462:	f7fe fb0b 	bl	800ba7c <__errno>
 800d466:	2322      	movs	r3, #34	; 0x22
 800d468:	6003      	str	r3, [r0, #0]
 800d46a:	e7b6      	b.n	800d3da <_strtod_l+0x72>
 800d46c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d470:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800d474:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d478:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d47c:	e7e7      	b.n	800d44e <_strtod_l+0xe6>
 800d47e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800d5f4 <_strtod_l+0x28c>
 800d482:	e7e4      	b.n	800d44e <_strtod_l+0xe6>
 800d484:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d488:	f04f 38ff 	mov.w	r8, #4294967295
 800d48c:	e7df      	b.n	800d44e <_strtod_l+0xe6>
 800d48e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	9219      	str	r2, [sp, #100]	; 0x64
 800d494:	785b      	ldrb	r3, [r3, #1]
 800d496:	2b30      	cmp	r3, #48	; 0x30
 800d498:	d0f9      	beq.n	800d48e <_strtod_l+0x126>
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d09d      	beq.n	800d3da <_strtod_l+0x72>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	f04f 0a00 	mov.w	sl, #0
 800d4a4:	220a      	movs	r2, #10
 800d4a6:	46d3      	mov	fp, sl
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4ac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800d4b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4b2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d4b4:	7806      	ldrb	r6, [r0, #0]
 800d4b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d4ba:	b2d9      	uxtb	r1, r3
 800d4bc:	2909      	cmp	r1, #9
 800d4be:	d926      	bls.n	800d50e <_strtod_l+0x1a6>
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	494d      	ldr	r1, [pc, #308]	; (800d5f8 <_strtod_l+0x290>)
 800d4c4:	f001 f989 	bl	800e7da <strncmp>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d030      	beq.n	800d52e <_strtod_l+0x1c6>
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	4632      	mov	r2, r6
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	465e      	mov	r6, fp
 800d4d4:	9008      	str	r0, [sp, #32]
 800d4d6:	2a65      	cmp	r2, #101	; 0x65
 800d4d8:	d001      	beq.n	800d4de <_strtod_l+0x176>
 800d4da:	2a45      	cmp	r2, #69	; 0x45
 800d4dc:	d113      	bne.n	800d506 <_strtod_l+0x19e>
 800d4de:	b91e      	cbnz	r6, 800d4e8 <_strtod_l+0x180>
 800d4e0:	9a05      	ldr	r2, [sp, #20]
 800d4e2:	4302      	orrs	r2, r0
 800d4e4:	d094      	beq.n	800d410 <_strtod_l+0xa8>
 800d4e6:	2600      	movs	r6, #0
 800d4e8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800d4ea:	1c6a      	adds	r2, r5, #1
 800d4ec:	9219      	str	r2, [sp, #100]	; 0x64
 800d4ee:	786a      	ldrb	r2, [r5, #1]
 800d4f0:	2a2b      	cmp	r2, #43	; 0x2b
 800d4f2:	d074      	beq.n	800d5de <_strtod_l+0x276>
 800d4f4:	2a2d      	cmp	r2, #45	; 0x2d
 800d4f6:	d078      	beq.n	800d5ea <_strtod_l+0x282>
 800d4f8:	f04f 0c00 	mov.w	ip, #0
 800d4fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d500:	2909      	cmp	r1, #9
 800d502:	d97f      	bls.n	800d604 <_strtod_l+0x29c>
 800d504:	9519      	str	r5, [sp, #100]	; 0x64
 800d506:	2700      	movs	r7, #0
 800d508:	e09e      	b.n	800d648 <_strtod_l+0x2e0>
 800d50a:	2300      	movs	r3, #0
 800d50c:	e7c8      	b.n	800d4a0 <_strtod_l+0x138>
 800d50e:	f1bb 0f08 	cmp.w	fp, #8
 800d512:	bfd8      	it	le
 800d514:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800d516:	f100 0001 	add.w	r0, r0, #1
 800d51a:	bfd6      	itet	le
 800d51c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d520:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d524:	930a      	strle	r3, [sp, #40]	; 0x28
 800d526:	f10b 0b01 	add.w	fp, fp, #1
 800d52a:	9019      	str	r0, [sp, #100]	; 0x64
 800d52c:	e7c1      	b.n	800d4b2 <_strtod_l+0x14a>
 800d52e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d530:	1c5a      	adds	r2, r3, #1
 800d532:	9219      	str	r2, [sp, #100]	; 0x64
 800d534:	785a      	ldrb	r2, [r3, #1]
 800d536:	f1bb 0f00 	cmp.w	fp, #0
 800d53a:	d037      	beq.n	800d5ac <_strtod_l+0x244>
 800d53c:	465e      	mov	r6, fp
 800d53e:	9008      	str	r0, [sp, #32]
 800d540:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d544:	2b09      	cmp	r3, #9
 800d546:	d912      	bls.n	800d56e <_strtod_l+0x206>
 800d548:	2301      	movs	r3, #1
 800d54a:	e7c4      	b.n	800d4d6 <_strtod_l+0x16e>
 800d54c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d54e:	3001      	adds	r0, #1
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	9219      	str	r2, [sp, #100]	; 0x64
 800d554:	785a      	ldrb	r2, [r3, #1]
 800d556:	2a30      	cmp	r2, #48	; 0x30
 800d558:	d0f8      	beq.n	800d54c <_strtod_l+0x1e4>
 800d55a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d55e:	2b08      	cmp	r3, #8
 800d560:	f200 84e4 	bhi.w	800df2c <_strtod_l+0xbc4>
 800d564:	9008      	str	r0, [sp, #32]
 800d566:	2000      	movs	r0, #0
 800d568:	4606      	mov	r6, r0
 800d56a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d56c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d56e:	3a30      	subs	r2, #48	; 0x30
 800d570:	f100 0301 	add.w	r3, r0, #1
 800d574:	d014      	beq.n	800d5a0 <_strtod_l+0x238>
 800d576:	9908      	ldr	r1, [sp, #32]
 800d578:	eb00 0c06 	add.w	ip, r0, r6
 800d57c:	4419      	add	r1, r3
 800d57e:	9108      	str	r1, [sp, #32]
 800d580:	4633      	mov	r3, r6
 800d582:	210a      	movs	r1, #10
 800d584:	4563      	cmp	r3, ip
 800d586:	d113      	bne.n	800d5b0 <_strtod_l+0x248>
 800d588:	1833      	adds	r3, r6, r0
 800d58a:	2b08      	cmp	r3, #8
 800d58c:	f106 0601 	add.w	r6, r6, #1
 800d590:	4406      	add	r6, r0
 800d592:	dc1a      	bgt.n	800d5ca <_strtod_l+0x262>
 800d594:	230a      	movs	r3, #10
 800d596:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d598:	fb03 2301 	mla	r3, r3, r1, r2
 800d59c:	930a      	str	r3, [sp, #40]	; 0x28
 800d59e:	2300      	movs	r3, #0
 800d5a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	1c51      	adds	r1, r2, #1
 800d5a6:	9119      	str	r1, [sp, #100]	; 0x64
 800d5a8:	7852      	ldrb	r2, [r2, #1]
 800d5aa:	e7c9      	b.n	800d540 <_strtod_l+0x1d8>
 800d5ac:	4658      	mov	r0, fp
 800d5ae:	e7d2      	b.n	800d556 <_strtod_l+0x1ee>
 800d5b0:	2b08      	cmp	r3, #8
 800d5b2:	f103 0301 	add.w	r3, r3, #1
 800d5b6:	dc03      	bgt.n	800d5c0 <_strtod_l+0x258>
 800d5b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d5ba:	434f      	muls	r7, r1
 800d5bc:	970a      	str	r7, [sp, #40]	; 0x28
 800d5be:	e7e1      	b.n	800d584 <_strtod_l+0x21c>
 800d5c0:	2b10      	cmp	r3, #16
 800d5c2:	bfd8      	it	le
 800d5c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d5c8:	e7dc      	b.n	800d584 <_strtod_l+0x21c>
 800d5ca:	2e10      	cmp	r6, #16
 800d5cc:	bfdc      	itt	le
 800d5ce:	230a      	movle	r3, #10
 800d5d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d5d4:	e7e3      	b.n	800d59e <_strtod_l+0x236>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	9308      	str	r3, [sp, #32]
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e780      	b.n	800d4e0 <_strtod_l+0x178>
 800d5de:	f04f 0c00 	mov.w	ip, #0
 800d5e2:	1caa      	adds	r2, r5, #2
 800d5e4:	9219      	str	r2, [sp, #100]	; 0x64
 800d5e6:	78aa      	ldrb	r2, [r5, #2]
 800d5e8:	e788      	b.n	800d4fc <_strtod_l+0x194>
 800d5ea:	f04f 0c01 	mov.w	ip, #1
 800d5ee:	e7f8      	b.n	800d5e2 <_strtod_l+0x27a>
 800d5f0:	0800f4b8 	.word	0x0800f4b8
 800d5f4:	7ff00000 	.word	0x7ff00000
 800d5f8:	0800f4b4 	.word	0x0800f4b4
 800d5fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d5fe:	1c51      	adds	r1, r2, #1
 800d600:	9119      	str	r1, [sp, #100]	; 0x64
 800d602:	7852      	ldrb	r2, [r2, #1]
 800d604:	2a30      	cmp	r2, #48	; 0x30
 800d606:	d0f9      	beq.n	800d5fc <_strtod_l+0x294>
 800d608:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d60c:	2908      	cmp	r1, #8
 800d60e:	f63f af7a 	bhi.w	800d506 <_strtod_l+0x19e>
 800d612:	3a30      	subs	r2, #48	; 0x30
 800d614:	9209      	str	r2, [sp, #36]	; 0x24
 800d616:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d618:	920c      	str	r2, [sp, #48]	; 0x30
 800d61a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d61c:	1c57      	adds	r7, r2, #1
 800d61e:	9719      	str	r7, [sp, #100]	; 0x64
 800d620:	7852      	ldrb	r2, [r2, #1]
 800d622:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d626:	f1be 0f09 	cmp.w	lr, #9
 800d62a:	d938      	bls.n	800d69e <_strtod_l+0x336>
 800d62c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d62e:	1a7f      	subs	r7, r7, r1
 800d630:	2f08      	cmp	r7, #8
 800d632:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d636:	dc03      	bgt.n	800d640 <_strtod_l+0x2d8>
 800d638:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d63a:	428f      	cmp	r7, r1
 800d63c:	bfa8      	it	ge
 800d63e:	460f      	movge	r7, r1
 800d640:	f1bc 0f00 	cmp.w	ip, #0
 800d644:	d000      	beq.n	800d648 <_strtod_l+0x2e0>
 800d646:	427f      	negs	r7, r7
 800d648:	2e00      	cmp	r6, #0
 800d64a:	d14f      	bne.n	800d6ec <_strtod_l+0x384>
 800d64c:	9905      	ldr	r1, [sp, #20]
 800d64e:	4301      	orrs	r1, r0
 800d650:	f47f aec3 	bne.w	800d3da <_strtod_l+0x72>
 800d654:	2b00      	cmp	r3, #0
 800d656:	f47f aedb 	bne.w	800d410 <_strtod_l+0xa8>
 800d65a:	2a69      	cmp	r2, #105	; 0x69
 800d65c:	d029      	beq.n	800d6b2 <_strtod_l+0x34a>
 800d65e:	dc26      	bgt.n	800d6ae <_strtod_l+0x346>
 800d660:	2a49      	cmp	r2, #73	; 0x49
 800d662:	d026      	beq.n	800d6b2 <_strtod_l+0x34a>
 800d664:	2a4e      	cmp	r2, #78	; 0x4e
 800d666:	f47f aed3 	bne.w	800d410 <_strtod_l+0xa8>
 800d66a:	499a      	ldr	r1, [pc, #616]	; (800d8d4 <_strtod_l+0x56c>)
 800d66c:	a819      	add	r0, sp, #100	; 0x64
 800d66e:	f001 fbdb 	bl	800ee28 <__match>
 800d672:	2800      	cmp	r0, #0
 800d674:	f43f aecc 	beq.w	800d410 <_strtod_l+0xa8>
 800d678:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b28      	cmp	r3, #40	; 0x28
 800d67e:	d12f      	bne.n	800d6e0 <_strtod_l+0x378>
 800d680:	4995      	ldr	r1, [pc, #596]	; (800d8d8 <_strtod_l+0x570>)
 800d682:	aa1c      	add	r2, sp, #112	; 0x70
 800d684:	a819      	add	r0, sp, #100	; 0x64
 800d686:	f001 fbe3 	bl	800ee50 <__hexnan>
 800d68a:	2805      	cmp	r0, #5
 800d68c:	d128      	bne.n	800d6e0 <_strtod_l+0x378>
 800d68e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d690:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800d694:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d698:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d69c:	e69d      	b.n	800d3da <_strtod_l+0x72>
 800d69e:	210a      	movs	r1, #10
 800d6a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d6a2:	fb01 2107 	mla	r1, r1, r7, r2
 800d6a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d6aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d6ac:	e7b5      	b.n	800d61a <_strtod_l+0x2b2>
 800d6ae:	2a6e      	cmp	r2, #110	; 0x6e
 800d6b0:	e7d9      	b.n	800d666 <_strtod_l+0x2fe>
 800d6b2:	498a      	ldr	r1, [pc, #552]	; (800d8dc <_strtod_l+0x574>)
 800d6b4:	a819      	add	r0, sp, #100	; 0x64
 800d6b6:	f001 fbb7 	bl	800ee28 <__match>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	f43f aea8 	beq.w	800d410 <_strtod_l+0xa8>
 800d6c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6c2:	4987      	ldr	r1, [pc, #540]	; (800d8e0 <_strtod_l+0x578>)
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	a819      	add	r0, sp, #100	; 0x64
 800d6c8:	9319      	str	r3, [sp, #100]	; 0x64
 800d6ca:	f001 fbad 	bl	800ee28 <__match>
 800d6ce:	b910      	cbnz	r0, 800d6d6 <_strtod_l+0x36e>
 800d6d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	9319      	str	r3, [sp, #100]	; 0x64
 800d6d6:	f04f 0800 	mov.w	r8, #0
 800d6da:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800d8e4 <_strtod_l+0x57c>
 800d6de:	e67c      	b.n	800d3da <_strtod_l+0x72>
 800d6e0:	4881      	ldr	r0, [pc, #516]	; (800d8e8 <_strtod_l+0x580>)
 800d6e2:	f001 f8bf 	bl	800e864 <nan>
 800d6e6:	4680      	mov	r8, r0
 800d6e8:	4689      	mov	r9, r1
 800d6ea:	e676      	b.n	800d3da <_strtod_l+0x72>
 800d6ec:	9b08      	ldr	r3, [sp, #32]
 800d6ee:	f1bb 0f00 	cmp.w	fp, #0
 800d6f2:	bf08      	it	eq
 800d6f4:	46b3      	moveq	fp, r6
 800d6f6:	1afb      	subs	r3, r7, r3
 800d6f8:	2e10      	cmp	r6, #16
 800d6fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d6fc:	4635      	mov	r5, r6
 800d6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d700:	bfa8      	it	ge
 800d702:	2510      	movge	r5, #16
 800d704:	f7f2 feda 	bl	80004bc <__aeabi_ui2d>
 800d708:	2e09      	cmp	r6, #9
 800d70a:	4680      	mov	r8, r0
 800d70c:	4689      	mov	r9, r1
 800d70e:	dd13      	ble.n	800d738 <_strtod_l+0x3d0>
 800d710:	4b76      	ldr	r3, [pc, #472]	; (800d8ec <_strtod_l+0x584>)
 800d712:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d716:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d71a:	f7f2 ff49 	bl	80005b0 <__aeabi_dmul>
 800d71e:	4680      	mov	r8, r0
 800d720:	4650      	mov	r0, sl
 800d722:	4689      	mov	r9, r1
 800d724:	f7f2 feca 	bl	80004bc <__aeabi_ui2d>
 800d728:	4602      	mov	r2, r0
 800d72a:	460b      	mov	r3, r1
 800d72c:	4640      	mov	r0, r8
 800d72e:	4649      	mov	r1, r9
 800d730:	f7f2 fd88 	bl	8000244 <__adddf3>
 800d734:	4680      	mov	r8, r0
 800d736:	4689      	mov	r9, r1
 800d738:	2e0f      	cmp	r6, #15
 800d73a:	dc36      	bgt.n	800d7aa <_strtod_l+0x442>
 800d73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f43f ae4b 	beq.w	800d3da <_strtod_l+0x72>
 800d744:	dd22      	ble.n	800d78c <_strtod_l+0x424>
 800d746:	2b16      	cmp	r3, #22
 800d748:	dc09      	bgt.n	800d75e <_strtod_l+0x3f6>
 800d74a:	4968      	ldr	r1, [pc, #416]	; (800d8ec <_strtod_l+0x584>)
 800d74c:	4642      	mov	r2, r8
 800d74e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d752:	464b      	mov	r3, r9
 800d754:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d758:	f7f2 ff2a 	bl	80005b0 <__aeabi_dmul>
 800d75c:	e7c3      	b.n	800d6e6 <_strtod_l+0x37e>
 800d75e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d760:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d764:	4293      	cmp	r3, r2
 800d766:	db20      	blt.n	800d7aa <_strtod_l+0x442>
 800d768:	4c60      	ldr	r4, [pc, #384]	; (800d8ec <_strtod_l+0x584>)
 800d76a:	f1c6 060f 	rsb	r6, r6, #15
 800d76e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d772:	4642      	mov	r2, r8
 800d774:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d778:	464b      	mov	r3, r9
 800d77a:	f7f2 ff19 	bl	80005b0 <__aeabi_dmul>
 800d77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d780:	1b9e      	subs	r6, r3, r6
 800d782:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d786:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d78a:	e7e5      	b.n	800d758 <_strtod_l+0x3f0>
 800d78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d78e:	3316      	adds	r3, #22
 800d790:	db0b      	blt.n	800d7aa <_strtod_l+0x442>
 800d792:	9b08      	ldr	r3, [sp, #32]
 800d794:	4640      	mov	r0, r8
 800d796:	1bdf      	subs	r7, r3, r7
 800d798:	4b54      	ldr	r3, [pc, #336]	; (800d8ec <_strtod_l+0x584>)
 800d79a:	4649      	mov	r1, r9
 800d79c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d7a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7a4:	f7f3 f82e 	bl	8000804 <__aeabi_ddiv>
 800d7a8:	e79d      	b.n	800d6e6 <_strtod_l+0x37e>
 800d7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ac:	1b75      	subs	r5, r6, r5
 800d7ae:	441d      	add	r5, r3
 800d7b0:	2d00      	cmp	r5, #0
 800d7b2:	dd70      	ble.n	800d896 <_strtod_l+0x52e>
 800d7b4:	f015 030f 	ands.w	r3, r5, #15
 800d7b8:	d00a      	beq.n	800d7d0 <_strtod_l+0x468>
 800d7ba:	494c      	ldr	r1, [pc, #304]	; (800d8ec <_strtod_l+0x584>)
 800d7bc:	4642      	mov	r2, r8
 800d7be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7c6:	464b      	mov	r3, r9
 800d7c8:	f7f2 fef2 	bl	80005b0 <__aeabi_dmul>
 800d7cc:	4680      	mov	r8, r0
 800d7ce:	4689      	mov	r9, r1
 800d7d0:	f035 050f 	bics.w	r5, r5, #15
 800d7d4:	d04d      	beq.n	800d872 <_strtod_l+0x50a>
 800d7d6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d7da:	dd22      	ble.n	800d822 <_strtod_l+0x4ba>
 800d7dc:	2600      	movs	r6, #0
 800d7de:	46b3      	mov	fp, r6
 800d7e0:	960b      	str	r6, [sp, #44]	; 0x2c
 800d7e2:	9608      	str	r6, [sp, #32]
 800d7e4:	2322      	movs	r3, #34	; 0x22
 800d7e6:	f04f 0800 	mov.w	r8, #0
 800d7ea:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800d8e4 <_strtod_l+0x57c>
 800d7ee:	6023      	str	r3, [r4, #0]
 800d7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f43f adf1 	beq.w	800d3da <_strtod_l+0x72>
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d7fc:	f7ff f934 	bl	800ca68 <_Bfree>
 800d800:	4620      	mov	r0, r4
 800d802:	9908      	ldr	r1, [sp, #32]
 800d804:	f7ff f930 	bl	800ca68 <_Bfree>
 800d808:	4659      	mov	r1, fp
 800d80a:	4620      	mov	r0, r4
 800d80c:	f7ff f92c 	bl	800ca68 <_Bfree>
 800d810:	4620      	mov	r0, r4
 800d812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d814:	f7ff f928 	bl	800ca68 <_Bfree>
 800d818:	4631      	mov	r1, r6
 800d81a:	4620      	mov	r0, r4
 800d81c:	f7ff f924 	bl	800ca68 <_Bfree>
 800d820:	e5db      	b.n	800d3da <_strtod_l+0x72>
 800d822:	4b33      	ldr	r3, [pc, #204]	; (800d8f0 <_strtod_l+0x588>)
 800d824:	4640      	mov	r0, r8
 800d826:	9305      	str	r3, [sp, #20]
 800d828:	2300      	movs	r3, #0
 800d82a:	4649      	mov	r1, r9
 800d82c:	469a      	mov	sl, r3
 800d82e:	112d      	asrs	r5, r5, #4
 800d830:	2d01      	cmp	r5, #1
 800d832:	dc21      	bgt.n	800d878 <_strtod_l+0x510>
 800d834:	b10b      	cbz	r3, 800d83a <_strtod_l+0x4d2>
 800d836:	4680      	mov	r8, r0
 800d838:	4689      	mov	r9, r1
 800d83a:	492d      	ldr	r1, [pc, #180]	; (800d8f0 <_strtod_l+0x588>)
 800d83c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d840:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d844:	4642      	mov	r2, r8
 800d846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d84a:	464b      	mov	r3, r9
 800d84c:	f7f2 feb0 	bl	80005b0 <__aeabi_dmul>
 800d850:	4b24      	ldr	r3, [pc, #144]	; (800d8e4 <_strtod_l+0x57c>)
 800d852:	460a      	mov	r2, r1
 800d854:	400b      	ands	r3, r1
 800d856:	4927      	ldr	r1, [pc, #156]	; (800d8f4 <_strtod_l+0x58c>)
 800d858:	4680      	mov	r8, r0
 800d85a:	428b      	cmp	r3, r1
 800d85c:	d8be      	bhi.n	800d7dc <_strtod_l+0x474>
 800d85e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d862:	428b      	cmp	r3, r1
 800d864:	bf86      	itte	hi
 800d866:	f04f 38ff 	movhi.w	r8, #4294967295
 800d86a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800d8f8 <_strtod_l+0x590>
 800d86e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d872:	2300      	movs	r3, #0
 800d874:	9305      	str	r3, [sp, #20]
 800d876:	e07b      	b.n	800d970 <_strtod_l+0x608>
 800d878:	07ea      	lsls	r2, r5, #31
 800d87a:	d505      	bpl.n	800d888 <_strtod_l+0x520>
 800d87c:	9b05      	ldr	r3, [sp, #20]
 800d87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d882:	f7f2 fe95 	bl	80005b0 <__aeabi_dmul>
 800d886:	2301      	movs	r3, #1
 800d888:	9a05      	ldr	r2, [sp, #20]
 800d88a:	f10a 0a01 	add.w	sl, sl, #1
 800d88e:	3208      	adds	r2, #8
 800d890:	106d      	asrs	r5, r5, #1
 800d892:	9205      	str	r2, [sp, #20]
 800d894:	e7cc      	b.n	800d830 <_strtod_l+0x4c8>
 800d896:	d0ec      	beq.n	800d872 <_strtod_l+0x50a>
 800d898:	426d      	negs	r5, r5
 800d89a:	f015 020f 	ands.w	r2, r5, #15
 800d89e:	d00a      	beq.n	800d8b6 <_strtod_l+0x54e>
 800d8a0:	4b12      	ldr	r3, [pc, #72]	; (800d8ec <_strtod_l+0x584>)
 800d8a2:	4640      	mov	r0, r8
 800d8a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	f7f2 ffa9 	bl	8000804 <__aeabi_ddiv>
 800d8b2:	4680      	mov	r8, r0
 800d8b4:	4689      	mov	r9, r1
 800d8b6:	112d      	asrs	r5, r5, #4
 800d8b8:	d0db      	beq.n	800d872 <_strtod_l+0x50a>
 800d8ba:	2d1f      	cmp	r5, #31
 800d8bc:	dd1e      	ble.n	800d8fc <_strtod_l+0x594>
 800d8be:	2600      	movs	r6, #0
 800d8c0:	46b3      	mov	fp, r6
 800d8c2:	960b      	str	r6, [sp, #44]	; 0x2c
 800d8c4:	9608      	str	r6, [sp, #32]
 800d8c6:	2322      	movs	r3, #34	; 0x22
 800d8c8:	f04f 0800 	mov.w	r8, #0
 800d8cc:	f04f 0900 	mov.w	r9, #0
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	e78d      	b.n	800d7f0 <_strtod_l+0x488>
 800d8d4:	0800f29f 	.word	0x0800f29f
 800d8d8:	0800f4cc 	.word	0x0800f4cc
 800d8dc:	0800f297 	.word	0x0800f297
 800d8e0:	0800f2ce 	.word	0x0800f2ce
 800d8e4:	7ff00000 	.word	0x7ff00000
 800d8e8:	0800f65d 	.word	0x0800f65d
 800d8ec:	0800f3e0 	.word	0x0800f3e0
 800d8f0:	0800f3b8 	.word	0x0800f3b8
 800d8f4:	7ca00000 	.word	0x7ca00000
 800d8f8:	7fefffff 	.word	0x7fefffff
 800d8fc:	f015 0310 	ands.w	r3, r5, #16
 800d900:	bf18      	it	ne
 800d902:	236a      	movne	r3, #106	; 0x6a
 800d904:	4640      	mov	r0, r8
 800d906:	9305      	str	r3, [sp, #20]
 800d908:	4649      	mov	r1, r9
 800d90a:	2300      	movs	r3, #0
 800d90c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800dbd8 <_strtod_l+0x870>
 800d910:	07ea      	lsls	r2, r5, #31
 800d912:	d504      	bpl.n	800d91e <_strtod_l+0x5b6>
 800d914:	e9da 2300 	ldrd	r2, r3, [sl]
 800d918:	f7f2 fe4a 	bl	80005b0 <__aeabi_dmul>
 800d91c:	2301      	movs	r3, #1
 800d91e:	106d      	asrs	r5, r5, #1
 800d920:	f10a 0a08 	add.w	sl, sl, #8
 800d924:	d1f4      	bne.n	800d910 <_strtod_l+0x5a8>
 800d926:	b10b      	cbz	r3, 800d92c <_strtod_l+0x5c4>
 800d928:	4680      	mov	r8, r0
 800d92a:	4689      	mov	r9, r1
 800d92c:	9b05      	ldr	r3, [sp, #20]
 800d92e:	b1bb      	cbz	r3, 800d960 <_strtod_l+0x5f8>
 800d930:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d934:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d938:	2b00      	cmp	r3, #0
 800d93a:	4649      	mov	r1, r9
 800d93c:	dd10      	ble.n	800d960 <_strtod_l+0x5f8>
 800d93e:	2b1f      	cmp	r3, #31
 800d940:	f340 8128 	ble.w	800db94 <_strtod_l+0x82c>
 800d944:	2b34      	cmp	r3, #52	; 0x34
 800d946:	bfd8      	it	le
 800d948:	f04f 33ff 	movle.w	r3, #4294967295
 800d94c:	f04f 0800 	mov.w	r8, #0
 800d950:	bfcf      	iteee	gt
 800d952:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d956:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d95a:	4093      	lslle	r3, r2
 800d95c:	ea03 0901 	andle.w	r9, r3, r1
 800d960:	2200      	movs	r2, #0
 800d962:	2300      	movs	r3, #0
 800d964:	4640      	mov	r0, r8
 800d966:	4649      	mov	r1, r9
 800d968:	f7f3 f88a 	bl	8000a80 <__aeabi_dcmpeq>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d1a6      	bne.n	800d8be <_strtod_l+0x556>
 800d970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d972:	465a      	mov	r2, fp
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	4620      	mov	r0, r4
 800d978:	4633      	mov	r3, r6
 800d97a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d97c:	f7ff f8dc 	bl	800cb38 <__s2b>
 800d980:	900b      	str	r0, [sp, #44]	; 0x2c
 800d982:	2800      	cmp	r0, #0
 800d984:	f43f af2a 	beq.w	800d7dc <_strtod_l+0x474>
 800d988:	2600      	movs	r6, #0
 800d98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d98c:	9b08      	ldr	r3, [sp, #32]
 800d98e:	2a00      	cmp	r2, #0
 800d990:	eba3 0307 	sub.w	r3, r3, r7
 800d994:	bfa8      	it	ge
 800d996:	2300      	movge	r3, #0
 800d998:	46b3      	mov	fp, r6
 800d99a:	9312      	str	r3, [sp, #72]	; 0x48
 800d99c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d9a0:	9316      	str	r3, [sp, #88]	; 0x58
 800d9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	6859      	ldr	r1, [r3, #4]
 800d9a8:	f7ff f81e 	bl	800c9e8 <_Balloc>
 800d9ac:	9008      	str	r0, [sp, #32]
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	f43f af18 	beq.w	800d7e4 <_strtod_l+0x47c>
 800d9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9b6:	300c      	adds	r0, #12
 800d9b8:	691a      	ldr	r2, [r3, #16]
 800d9ba:	f103 010c 	add.w	r1, r3, #12
 800d9be:	3202      	adds	r2, #2
 800d9c0:	0092      	lsls	r2, r2, #2
 800d9c2:	f7fe f895 	bl	800baf0 <memcpy>
 800d9c6:	ab1c      	add	r3, sp, #112	; 0x70
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	ab1b      	add	r3, sp, #108	; 0x6c
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	464b      	mov	r3, r9
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800d9d8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800d9dc:	f7ff fbd8 	bl	800d190 <__d2b>
 800d9e0:	901a      	str	r0, [sp, #104]	; 0x68
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	f43f aefe 	beq.w	800d7e4 <_strtod_l+0x47c>
 800d9e8:	2101      	movs	r1, #1
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f7ff f93c 	bl	800cc68 <__i2b>
 800d9f0:	4683      	mov	fp, r0
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	f43f aef6 	beq.w	800d7e4 <_strtod_l+0x47c>
 800d9f8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d9fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d9fc:	2f00      	cmp	r7, #0
 800d9fe:	bfab      	itete	ge
 800da00:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800da02:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800da04:	eb07 0a03 	addge.w	sl, r7, r3
 800da08:	1bdd      	sublt	r5, r3, r7
 800da0a:	9b05      	ldr	r3, [sp, #20]
 800da0c:	bfa8      	it	ge
 800da0e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800da10:	eba7 0703 	sub.w	r7, r7, r3
 800da14:	4417      	add	r7, r2
 800da16:	4b71      	ldr	r3, [pc, #452]	; (800dbdc <_strtod_l+0x874>)
 800da18:	f107 37ff 	add.w	r7, r7, #4294967295
 800da1c:	bfb8      	it	lt
 800da1e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800da22:	429f      	cmp	r7, r3
 800da24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da28:	f280 80c7 	bge.w	800dbba <_strtod_l+0x852>
 800da2c:	1bdb      	subs	r3, r3, r7
 800da2e:	2b1f      	cmp	r3, #31
 800da30:	f04f 0101 	mov.w	r1, #1
 800da34:	eba2 0203 	sub.w	r2, r2, r3
 800da38:	f300 80b3 	bgt.w	800dba2 <_strtod_l+0x83a>
 800da3c:	fa01 f303 	lsl.w	r3, r1, r3
 800da40:	9313      	str	r3, [sp, #76]	; 0x4c
 800da42:	2300      	movs	r3, #0
 800da44:	9310      	str	r3, [sp, #64]	; 0x40
 800da46:	eb0a 0702 	add.w	r7, sl, r2
 800da4a:	9b05      	ldr	r3, [sp, #20]
 800da4c:	45ba      	cmp	sl, r7
 800da4e:	4415      	add	r5, r2
 800da50:	441d      	add	r5, r3
 800da52:	4653      	mov	r3, sl
 800da54:	bfa8      	it	ge
 800da56:	463b      	movge	r3, r7
 800da58:	42ab      	cmp	r3, r5
 800da5a:	bfa8      	it	ge
 800da5c:	462b      	movge	r3, r5
 800da5e:	2b00      	cmp	r3, #0
 800da60:	bfc2      	ittt	gt
 800da62:	1aff      	subgt	r7, r7, r3
 800da64:	1aed      	subgt	r5, r5, r3
 800da66:	ebaa 0a03 	subgt.w	sl, sl, r3
 800da6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	dd17      	ble.n	800daa0 <_strtod_l+0x738>
 800da70:	4659      	mov	r1, fp
 800da72:	461a      	mov	r2, r3
 800da74:	4620      	mov	r0, r4
 800da76:	f7ff f9b5 	bl	800cde4 <__pow5mult>
 800da7a:	4683      	mov	fp, r0
 800da7c:	2800      	cmp	r0, #0
 800da7e:	f43f aeb1 	beq.w	800d7e4 <_strtod_l+0x47c>
 800da82:	4601      	mov	r1, r0
 800da84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da86:	4620      	mov	r0, r4
 800da88:	f7ff f904 	bl	800cc94 <__multiply>
 800da8c:	900a      	str	r0, [sp, #40]	; 0x28
 800da8e:	2800      	cmp	r0, #0
 800da90:	f43f aea8 	beq.w	800d7e4 <_strtod_l+0x47c>
 800da94:	4620      	mov	r0, r4
 800da96:	991a      	ldr	r1, [sp, #104]	; 0x68
 800da98:	f7fe ffe6 	bl	800ca68 <_Bfree>
 800da9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da9e:	931a      	str	r3, [sp, #104]	; 0x68
 800daa0:	2f00      	cmp	r7, #0
 800daa2:	f300 808f 	bgt.w	800dbc4 <_strtod_l+0x85c>
 800daa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	dd08      	ble.n	800dabe <_strtod_l+0x756>
 800daac:	4620      	mov	r0, r4
 800daae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dab0:	9908      	ldr	r1, [sp, #32]
 800dab2:	f7ff f997 	bl	800cde4 <__pow5mult>
 800dab6:	9008      	str	r0, [sp, #32]
 800dab8:	2800      	cmp	r0, #0
 800daba:	f43f ae93 	beq.w	800d7e4 <_strtod_l+0x47c>
 800dabe:	2d00      	cmp	r5, #0
 800dac0:	dd08      	ble.n	800dad4 <_strtod_l+0x76c>
 800dac2:	462a      	mov	r2, r5
 800dac4:	4620      	mov	r0, r4
 800dac6:	9908      	ldr	r1, [sp, #32]
 800dac8:	f7ff f9e6 	bl	800ce98 <__lshift>
 800dacc:	9008      	str	r0, [sp, #32]
 800dace:	2800      	cmp	r0, #0
 800dad0:	f43f ae88 	beq.w	800d7e4 <_strtod_l+0x47c>
 800dad4:	f1ba 0f00 	cmp.w	sl, #0
 800dad8:	dd08      	ble.n	800daec <_strtod_l+0x784>
 800dada:	4659      	mov	r1, fp
 800dadc:	4652      	mov	r2, sl
 800dade:	4620      	mov	r0, r4
 800dae0:	f7ff f9da 	bl	800ce98 <__lshift>
 800dae4:	4683      	mov	fp, r0
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f43f ae7c 	beq.w	800d7e4 <_strtod_l+0x47c>
 800daec:	4620      	mov	r0, r4
 800daee:	9a08      	ldr	r2, [sp, #32]
 800daf0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800daf2:	f7ff fa59 	bl	800cfa8 <__mdiff>
 800daf6:	4606      	mov	r6, r0
 800daf8:	2800      	cmp	r0, #0
 800dafa:	f43f ae73 	beq.w	800d7e4 <_strtod_l+0x47c>
 800dafe:	2500      	movs	r5, #0
 800db00:	68c3      	ldr	r3, [r0, #12]
 800db02:	4659      	mov	r1, fp
 800db04:	60c5      	str	r5, [r0, #12]
 800db06:	930a      	str	r3, [sp, #40]	; 0x28
 800db08:	f7ff fa32 	bl	800cf70 <__mcmp>
 800db0c:	42a8      	cmp	r0, r5
 800db0e:	da6b      	bge.n	800dbe8 <_strtod_l+0x880>
 800db10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db12:	ea53 0308 	orrs.w	r3, r3, r8
 800db16:	f040 808f 	bne.w	800dc38 <_strtod_l+0x8d0>
 800db1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f040 808a 	bne.w	800dc38 <_strtod_l+0x8d0>
 800db24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db28:	0d1b      	lsrs	r3, r3, #20
 800db2a:	051b      	lsls	r3, r3, #20
 800db2c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800db30:	f240 8082 	bls.w	800dc38 <_strtod_l+0x8d0>
 800db34:	6973      	ldr	r3, [r6, #20]
 800db36:	b913      	cbnz	r3, 800db3e <_strtod_l+0x7d6>
 800db38:	6933      	ldr	r3, [r6, #16]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	dd7c      	ble.n	800dc38 <_strtod_l+0x8d0>
 800db3e:	4631      	mov	r1, r6
 800db40:	2201      	movs	r2, #1
 800db42:	4620      	mov	r0, r4
 800db44:	f7ff f9a8 	bl	800ce98 <__lshift>
 800db48:	4659      	mov	r1, fp
 800db4a:	4606      	mov	r6, r0
 800db4c:	f7ff fa10 	bl	800cf70 <__mcmp>
 800db50:	2800      	cmp	r0, #0
 800db52:	dd71      	ble.n	800dc38 <_strtod_l+0x8d0>
 800db54:	9905      	ldr	r1, [sp, #20]
 800db56:	464b      	mov	r3, r9
 800db58:	4a21      	ldr	r2, [pc, #132]	; (800dbe0 <_strtod_l+0x878>)
 800db5a:	2900      	cmp	r1, #0
 800db5c:	f000 808d 	beq.w	800dc7a <_strtod_l+0x912>
 800db60:	ea02 0109 	and.w	r1, r2, r9
 800db64:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800db68:	f300 8087 	bgt.w	800dc7a <_strtod_l+0x912>
 800db6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800db70:	f77f aea9 	ble.w	800d8c6 <_strtod_l+0x55e>
 800db74:	4640      	mov	r0, r8
 800db76:	4649      	mov	r1, r9
 800db78:	4b1a      	ldr	r3, [pc, #104]	; (800dbe4 <_strtod_l+0x87c>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	f7f2 fd18 	bl	80005b0 <__aeabi_dmul>
 800db80:	4b17      	ldr	r3, [pc, #92]	; (800dbe0 <_strtod_l+0x878>)
 800db82:	4680      	mov	r8, r0
 800db84:	400b      	ands	r3, r1
 800db86:	4689      	mov	r9, r1
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f47f ae35 	bne.w	800d7f8 <_strtod_l+0x490>
 800db8e:	2322      	movs	r3, #34	; 0x22
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	e631      	b.n	800d7f8 <_strtod_l+0x490>
 800db94:	f04f 32ff 	mov.w	r2, #4294967295
 800db98:	fa02 f303 	lsl.w	r3, r2, r3
 800db9c:	ea03 0808 	and.w	r8, r3, r8
 800dba0:	e6de      	b.n	800d960 <_strtod_l+0x5f8>
 800dba2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800dba6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800dbaa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800dbae:	37e2      	adds	r7, #226	; 0xe2
 800dbb0:	fa01 f307 	lsl.w	r3, r1, r7
 800dbb4:	9310      	str	r3, [sp, #64]	; 0x40
 800dbb6:	9113      	str	r1, [sp, #76]	; 0x4c
 800dbb8:	e745      	b.n	800da46 <_strtod_l+0x6de>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	9310      	str	r3, [sp, #64]	; 0x40
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbc2:	e740      	b.n	800da46 <_strtod_l+0x6de>
 800dbc4:	463a      	mov	r2, r7
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dbca:	f7ff f965 	bl	800ce98 <__lshift>
 800dbce:	901a      	str	r0, [sp, #104]	; 0x68
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	f47f af68 	bne.w	800daa6 <_strtod_l+0x73e>
 800dbd6:	e605      	b.n	800d7e4 <_strtod_l+0x47c>
 800dbd8:	0800f4e0 	.word	0x0800f4e0
 800dbdc:	fffffc02 	.word	0xfffffc02
 800dbe0:	7ff00000 	.word	0x7ff00000
 800dbe4:	39500000 	.word	0x39500000
 800dbe8:	46ca      	mov	sl, r9
 800dbea:	d165      	bne.n	800dcb8 <_strtod_l+0x950>
 800dbec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbf2:	b352      	cbz	r2, 800dc4a <_strtod_l+0x8e2>
 800dbf4:	4a9e      	ldr	r2, [pc, #632]	; (800de70 <_strtod_l+0xb08>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d12a      	bne.n	800dc50 <_strtod_l+0x8e8>
 800dbfa:	9b05      	ldr	r3, [sp, #20]
 800dbfc:	4641      	mov	r1, r8
 800dbfe:	b1fb      	cbz	r3, 800dc40 <_strtod_l+0x8d8>
 800dc00:	4b9c      	ldr	r3, [pc, #624]	; (800de74 <_strtod_l+0xb0c>)
 800dc02:	f04f 32ff 	mov.w	r2, #4294967295
 800dc06:	ea09 0303 	and.w	r3, r9, r3
 800dc0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc0e:	d81a      	bhi.n	800dc46 <_strtod_l+0x8de>
 800dc10:	0d1b      	lsrs	r3, r3, #20
 800dc12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc16:	fa02 f303 	lsl.w	r3, r2, r3
 800dc1a:	4299      	cmp	r1, r3
 800dc1c:	d118      	bne.n	800dc50 <_strtod_l+0x8e8>
 800dc1e:	4b96      	ldr	r3, [pc, #600]	; (800de78 <_strtod_l+0xb10>)
 800dc20:	459a      	cmp	sl, r3
 800dc22:	d102      	bne.n	800dc2a <_strtod_l+0x8c2>
 800dc24:	3101      	adds	r1, #1
 800dc26:	f43f addd 	beq.w	800d7e4 <_strtod_l+0x47c>
 800dc2a:	f04f 0800 	mov.w	r8, #0
 800dc2e:	4b91      	ldr	r3, [pc, #580]	; (800de74 <_strtod_l+0xb0c>)
 800dc30:	ea0a 0303 	and.w	r3, sl, r3
 800dc34:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800dc38:	9b05      	ldr	r3, [sp, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d19a      	bne.n	800db74 <_strtod_l+0x80c>
 800dc3e:	e5db      	b.n	800d7f8 <_strtod_l+0x490>
 800dc40:	f04f 33ff 	mov.w	r3, #4294967295
 800dc44:	e7e9      	b.n	800dc1a <_strtod_l+0x8b2>
 800dc46:	4613      	mov	r3, r2
 800dc48:	e7e7      	b.n	800dc1a <_strtod_l+0x8b2>
 800dc4a:	ea53 0308 	orrs.w	r3, r3, r8
 800dc4e:	d081      	beq.n	800db54 <_strtod_l+0x7ec>
 800dc50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc52:	b1e3      	cbz	r3, 800dc8e <_strtod_l+0x926>
 800dc54:	ea13 0f0a 	tst.w	r3, sl
 800dc58:	d0ee      	beq.n	800dc38 <_strtod_l+0x8d0>
 800dc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	4649      	mov	r1, r9
 800dc60:	9a05      	ldr	r2, [sp, #20]
 800dc62:	b1c3      	cbz	r3, 800dc96 <_strtod_l+0x92e>
 800dc64:	f7ff fb5c 	bl	800d320 <sulp>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dc6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc70:	f7f2 fae8 	bl	8000244 <__adddf3>
 800dc74:	4680      	mov	r8, r0
 800dc76:	4689      	mov	r9, r1
 800dc78:	e7de      	b.n	800dc38 <_strtod_l+0x8d0>
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc80:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800dc84:	f04f 38ff 	mov.w	r8, #4294967295
 800dc88:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800dc8c:	e7d4      	b.n	800dc38 <_strtod_l+0x8d0>
 800dc8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc90:	ea13 0f08 	tst.w	r3, r8
 800dc94:	e7e0      	b.n	800dc58 <_strtod_l+0x8f0>
 800dc96:	f7ff fb43 	bl	800d320 <sulp>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dca2:	f7f2 facd 	bl	8000240 <__aeabi_dsub>
 800dca6:	2200      	movs	r2, #0
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4680      	mov	r8, r0
 800dcac:	4689      	mov	r9, r1
 800dcae:	f7f2 fee7 	bl	8000a80 <__aeabi_dcmpeq>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d0c0      	beq.n	800dc38 <_strtod_l+0x8d0>
 800dcb6:	e606      	b.n	800d8c6 <_strtod_l+0x55e>
 800dcb8:	4659      	mov	r1, fp
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f7ff fabe 	bl	800d23c <__ratio>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcce:	f7f2 feeb 	bl	8000aa8 <__aeabi_dcmple>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d06f      	beq.n	800ddb6 <_strtod_l+0xa4e>
 800dcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d17c      	bne.n	800ddd6 <_strtod_l+0xa6e>
 800dcdc:	f1b8 0f00 	cmp.w	r8, #0
 800dce0:	d159      	bne.n	800dd96 <_strtod_l+0xa2e>
 800dce2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d17b      	bne.n	800dde2 <_strtod_l+0xa7a>
 800dcea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dcee:	2200      	movs	r2, #0
 800dcf0:	4b62      	ldr	r3, [pc, #392]	; (800de7c <_strtod_l+0xb14>)
 800dcf2:	f7f2 fecf 	bl	8000a94 <__aeabi_dcmplt>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d15a      	bne.n	800ddb0 <_strtod_l+0xa48>
 800dcfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dcfe:	2200      	movs	r2, #0
 800dd00:	4b5f      	ldr	r3, [pc, #380]	; (800de80 <_strtod_l+0xb18>)
 800dd02:	f7f2 fc55 	bl	80005b0 <__aeabi_dmul>
 800dd06:	4605      	mov	r5, r0
 800dd08:	460f      	mov	r7, r1
 800dd0a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dd0e:	9506      	str	r5, [sp, #24]
 800dd10:	9307      	str	r3, [sp, #28]
 800dd12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd16:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800dd1a:	4b56      	ldr	r3, [pc, #344]	; (800de74 <_strtod_l+0xb0c>)
 800dd1c:	4a55      	ldr	r2, [pc, #340]	; (800de74 <_strtod_l+0xb0c>)
 800dd1e:	ea0a 0303 	and.w	r3, sl, r3
 800dd22:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd24:	4b57      	ldr	r3, [pc, #348]	; (800de84 <_strtod_l+0xb1c>)
 800dd26:	ea0a 0202 	and.w	r2, sl, r2
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	f040 80b0 	bne.w	800de90 <_strtod_l+0xb28>
 800dd30:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800dd34:	4640      	mov	r0, r8
 800dd36:	4649      	mov	r1, r9
 800dd38:	f7ff f9c2 	bl	800d0c0 <__ulp>
 800dd3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd40:	f7f2 fc36 	bl	80005b0 <__aeabi_dmul>
 800dd44:	4642      	mov	r2, r8
 800dd46:	464b      	mov	r3, r9
 800dd48:	f7f2 fa7c 	bl	8000244 <__adddf3>
 800dd4c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800de74 <_strtod_l+0xb0c>
 800dd50:	4a4d      	ldr	r2, [pc, #308]	; (800de88 <_strtod_l+0xb20>)
 800dd52:	ea01 0a0a 	and.w	sl, r1, sl
 800dd56:	4592      	cmp	sl, r2
 800dd58:	4680      	mov	r8, r0
 800dd5a:	d948      	bls.n	800ddee <_strtod_l+0xa86>
 800dd5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd5e:	4b46      	ldr	r3, [pc, #280]	; (800de78 <_strtod_l+0xb10>)
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d103      	bne.n	800dd6c <_strtod_l+0xa04>
 800dd64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd66:	3301      	adds	r3, #1
 800dd68:	f43f ad3c 	beq.w	800d7e4 <_strtod_l+0x47c>
 800dd6c:	f04f 38ff 	mov.w	r8, #4294967295
 800dd70:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800de78 <_strtod_l+0xb10>
 800dd74:	4620      	mov	r0, r4
 800dd76:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dd78:	f7fe fe76 	bl	800ca68 <_Bfree>
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	9908      	ldr	r1, [sp, #32]
 800dd80:	f7fe fe72 	bl	800ca68 <_Bfree>
 800dd84:	4659      	mov	r1, fp
 800dd86:	4620      	mov	r0, r4
 800dd88:	f7fe fe6e 	bl	800ca68 <_Bfree>
 800dd8c:	4631      	mov	r1, r6
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f7fe fe6a 	bl	800ca68 <_Bfree>
 800dd94:	e605      	b.n	800d9a2 <_strtod_l+0x63a>
 800dd96:	f1b8 0f01 	cmp.w	r8, #1
 800dd9a:	d103      	bne.n	800dda4 <_strtod_l+0xa3c>
 800dd9c:	f1b9 0f00 	cmp.w	r9, #0
 800dda0:	f43f ad91 	beq.w	800d8c6 <_strtod_l+0x55e>
 800dda4:	2200      	movs	r2, #0
 800dda6:	4b39      	ldr	r3, [pc, #228]	; (800de8c <_strtod_l+0xb24>)
 800dda8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ddaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ddae:	e016      	b.n	800ddde <_strtod_l+0xa76>
 800ddb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ddb2:	4f33      	ldr	r7, [pc, #204]	; (800de80 <_strtod_l+0xb18>)
 800ddb4:	e7a9      	b.n	800dd0a <_strtod_l+0x9a2>
 800ddb6:	4b32      	ldr	r3, [pc, #200]	; (800de80 <_strtod_l+0xb18>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ddbe:	f7f2 fbf7 	bl	80005b0 <__aeabi_dmul>
 800ddc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d09e      	beq.n	800dd0a <_strtod_l+0x9a2>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	460b      	mov	r3, r1
 800ddd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ddd4:	e79d      	b.n	800dd12 <_strtod_l+0x9aa>
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	4b28      	ldr	r3, [pc, #160]	; (800de7c <_strtod_l+0xb14>)
 800ddda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ddde:	4f27      	ldr	r7, [pc, #156]	; (800de7c <_strtod_l+0xb14>)
 800dde0:	e797      	b.n	800dd12 <_strtod_l+0x9aa>
 800dde2:	2200      	movs	r2, #0
 800dde4:	4b29      	ldr	r3, [pc, #164]	; (800de8c <_strtod_l+0xb24>)
 800dde6:	4645      	mov	r5, r8
 800dde8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ddec:	e7f7      	b.n	800ddde <_strtod_l+0xa76>
 800ddee:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800ddf2:	9b05      	ldr	r3, [sp, #20]
 800ddf4:	46ca      	mov	sl, r9
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1bc      	bne.n	800dd74 <_strtod_l+0xa0c>
 800ddfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ddfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de00:	0d1b      	lsrs	r3, r3, #20
 800de02:	051b      	lsls	r3, r3, #20
 800de04:	429a      	cmp	r2, r3
 800de06:	d1b5      	bne.n	800dd74 <_strtod_l+0xa0c>
 800de08:	4628      	mov	r0, r5
 800de0a:	4639      	mov	r1, r7
 800de0c:	f7f3 f9ec 	bl	80011e8 <__aeabi_d2lz>
 800de10:	f7f2 fba0 	bl	8000554 <__aeabi_l2d>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4628      	mov	r0, r5
 800de1a:	4639      	mov	r1, r7
 800de1c:	f7f2 fa10 	bl	8000240 <__aeabi_dsub>
 800de20:	460b      	mov	r3, r1
 800de22:	4602      	mov	r2, r0
 800de24:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800de28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800de2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de2e:	ea4a 0a08 	orr.w	sl, sl, r8
 800de32:	ea5a 0a03 	orrs.w	sl, sl, r3
 800de36:	d06c      	beq.n	800df12 <_strtod_l+0xbaa>
 800de38:	a309      	add	r3, pc, #36	; (adr r3, 800de60 <_strtod_l+0xaf8>)
 800de3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3e:	f7f2 fe29 	bl	8000a94 <__aeabi_dcmplt>
 800de42:	2800      	cmp	r0, #0
 800de44:	f47f acd8 	bne.w	800d7f8 <_strtod_l+0x490>
 800de48:	a307      	add	r3, pc, #28	; (adr r3, 800de68 <_strtod_l+0xb00>)
 800de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800de52:	f7f2 fe3d 	bl	8000ad0 <__aeabi_dcmpgt>
 800de56:	2800      	cmp	r0, #0
 800de58:	d08c      	beq.n	800dd74 <_strtod_l+0xa0c>
 800de5a:	e4cd      	b.n	800d7f8 <_strtod_l+0x490>
 800de5c:	f3af 8000 	nop.w
 800de60:	94a03595 	.word	0x94a03595
 800de64:	3fdfffff 	.word	0x3fdfffff
 800de68:	35afe535 	.word	0x35afe535
 800de6c:	3fe00000 	.word	0x3fe00000
 800de70:	000fffff 	.word	0x000fffff
 800de74:	7ff00000 	.word	0x7ff00000
 800de78:	7fefffff 	.word	0x7fefffff
 800de7c:	3ff00000 	.word	0x3ff00000
 800de80:	3fe00000 	.word	0x3fe00000
 800de84:	7fe00000 	.word	0x7fe00000
 800de88:	7c9fffff 	.word	0x7c9fffff
 800de8c:	bff00000 	.word	0xbff00000
 800de90:	9b05      	ldr	r3, [sp, #20]
 800de92:	b333      	cbz	r3, 800dee2 <_strtod_l+0xb7a>
 800de94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de9a:	d822      	bhi.n	800dee2 <_strtod_l+0xb7a>
 800de9c:	a328      	add	r3, pc, #160	; (adr r3, 800df40 <_strtod_l+0xbd8>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	4628      	mov	r0, r5
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 fdff 	bl	8000aa8 <__aeabi_dcmple>
 800deaa:	b1a0      	cbz	r0, 800ded6 <_strtod_l+0xb6e>
 800deac:	4639      	mov	r1, r7
 800deae:	4628      	mov	r0, r5
 800deb0:	f7f2 fe56 	bl	8000b60 <__aeabi_d2uiz>
 800deb4:	2801      	cmp	r0, #1
 800deb6:	bf38      	it	cc
 800deb8:	2001      	movcc	r0, #1
 800deba:	f7f2 faff 	bl	80004bc <__aeabi_ui2d>
 800debe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec0:	4605      	mov	r5, r0
 800dec2:	460f      	mov	r7, r1
 800dec4:	bb03      	cbnz	r3, 800df08 <_strtod_l+0xba0>
 800dec6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deca:	9014      	str	r0, [sp, #80]	; 0x50
 800decc:	9315      	str	r3, [sp, #84]	; 0x54
 800dece:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ded2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ded6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ded8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800deda:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dede:	1a9b      	subs	r3, r3, r2
 800dee0:	9311      	str	r3, [sp, #68]	; 0x44
 800dee2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dee4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dee6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800deea:	f7ff f8e9 	bl	800d0c0 <__ulp>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4640      	mov	r0, r8
 800def4:	4649      	mov	r1, r9
 800def6:	f7f2 fb5b 	bl	80005b0 <__aeabi_dmul>
 800defa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800defc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800defe:	f7f2 f9a1 	bl	8000244 <__adddf3>
 800df02:	4680      	mov	r8, r0
 800df04:	4689      	mov	r9, r1
 800df06:	e774      	b.n	800ddf2 <_strtod_l+0xa8a>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800df10:	e7dd      	b.n	800dece <_strtod_l+0xb66>
 800df12:	a30d      	add	r3, pc, #52	; (adr r3, 800df48 <_strtod_l+0xbe0>)
 800df14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df18:	f7f2 fdbc 	bl	8000a94 <__aeabi_dcmplt>
 800df1c:	e79b      	b.n	800de56 <_strtod_l+0xaee>
 800df1e:	2300      	movs	r3, #0
 800df20:	930e      	str	r3, [sp, #56]	; 0x38
 800df22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800df26:	6013      	str	r3, [r2, #0]
 800df28:	f7ff ba5b 	b.w	800d3e2 <_strtod_l+0x7a>
 800df2c:	2a65      	cmp	r2, #101	; 0x65
 800df2e:	f43f ab52 	beq.w	800d5d6 <_strtod_l+0x26e>
 800df32:	2a45      	cmp	r2, #69	; 0x45
 800df34:	f43f ab4f 	beq.w	800d5d6 <_strtod_l+0x26e>
 800df38:	2301      	movs	r3, #1
 800df3a:	f7ff bb87 	b.w	800d64c <_strtod_l+0x2e4>
 800df3e:	bf00      	nop
 800df40:	ffc00000 	.word	0xffc00000
 800df44:	41dfffff 	.word	0x41dfffff
 800df48:	94a03595 	.word	0x94a03595
 800df4c:	3fcfffff 	.word	0x3fcfffff

0800df50 <_strtod_r>:
 800df50:	4b01      	ldr	r3, [pc, #4]	; (800df58 <_strtod_r+0x8>)
 800df52:	f7ff ba09 	b.w	800d368 <_strtod_l>
 800df56:	bf00      	nop
 800df58:	2000006c 	.word	0x2000006c

0800df5c <_strtol_l.constprop.0>:
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df62:	4686      	mov	lr, r0
 800df64:	4690      	mov	r8, r2
 800df66:	d001      	beq.n	800df6c <_strtol_l.constprop.0+0x10>
 800df68:	2b24      	cmp	r3, #36	; 0x24
 800df6a:	d906      	bls.n	800df7a <_strtol_l.constprop.0+0x1e>
 800df6c:	f7fd fd86 	bl	800ba7c <__errno>
 800df70:	2316      	movs	r3, #22
 800df72:	6003      	str	r3, [r0, #0]
 800df74:	2000      	movs	r0, #0
 800df76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df7a:	460d      	mov	r5, r1
 800df7c:	4835      	ldr	r0, [pc, #212]	; (800e054 <_strtol_l.constprop.0+0xf8>)
 800df7e:	462a      	mov	r2, r5
 800df80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df84:	5d06      	ldrb	r6, [r0, r4]
 800df86:	f016 0608 	ands.w	r6, r6, #8
 800df8a:	d1f8      	bne.n	800df7e <_strtol_l.constprop.0+0x22>
 800df8c:	2c2d      	cmp	r4, #45	; 0x2d
 800df8e:	d12e      	bne.n	800dfee <_strtol_l.constprop.0+0x92>
 800df90:	2601      	movs	r6, #1
 800df92:	782c      	ldrb	r4, [r5, #0]
 800df94:	1c95      	adds	r5, r2, #2
 800df96:	2b00      	cmp	r3, #0
 800df98:	d057      	beq.n	800e04a <_strtol_l.constprop.0+0xee>
 800df9a:	2b10      	cmp	r3, #16
 800df9c:	d109      	bne.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800df9e:	2c30      	cmp	r4, #48	; 0x30
 800dfa0:	d107      	bne.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800dfa2:	782a      	ldrb	r2, [r5, #0]
 800dfa4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800dfa8:	2a58      	cmp	r2, #88	; 0x58
 800dfaa:	d149      	bne.n	800e040 <_strtol_l.constprop.0+0xe4>
 800dfac:	2310      	movs	r3, #16
 800dfae:	786c      	ldrb	r4, [r5, #1]
 800dfb0:	3502      	adds	r5, #2
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800dfb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dfbc:	fbbc f9f3 	udiv	r9, ip, r3
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	fb03 ca19 	mls	sl, r3, r9, ip
 800dfc6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800dfca:	2f09      	cmp	r7, #9
 800dfcc:	d814      	bhi.n	800dff8 <_strtol_l.constprop.0+0x9c>
 800dfce:	463c      	mov	r4, r7
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	dd20      	ble.n	800e016 <_strtol_l.constprop.0+0xba>
 800dfd4:	1c57      	adds	r7, r2, #1
 800dfd6:	d007      	beq.n	800dfe8 <_strtol_l.constprop.0+0x8c>
 800dfd8:	4581      	cmp	r9, r0
 800dfda:	d319      	bcc.n	800e010 <_strtol_l.constprop.0+0xb4>
 800dfdc:	d101      	bne.n	800dfe2 <_strtol_l.constprop.0+0x86>
 800dfde:	45a2      	cmp	sl, r4
 800dfe0:	db16      	blt.n	800e010 <_strtol_l.constprop.0+0xb4>
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	fb00 4003 	mla	r0, r0, r3, r4
 800dfe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfec:	e7eb      	b.n	800dfc6 <_strtol_l.constprop.0+0x6a>
 800dfee:	2c2b      	cmp	r4, #43	; 0x2b
 800dff0:	bf04      	itt	eq
 800dff2:	782c      	ldrbeq	r4, [r5, #0]
 800dff4:	1c95      	addeq	r5, r2, #2
 800dff6:	e7ce      	b.n	800df96 <_strtol_l.constprop.0+0x3a>
 800dff8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800dffc:	2f19      	cmp	r7, #25
 800dffe:	d801      	bhi.n	800e004 <_strtol_l.constprop.0+0xa8>
 800e000:	3c37      	subs	r4, #55	; 0x37
 800e002:	e7e5      	b.n	800dfd0 <_strtol_l.constprop.0+0x74>
 800e004:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e008:	2f19      	cmp	r7, #25
 800e00a:	d804      	bhi.n	800e016 <_strtol_l.constprop.0+0xba>
 800e00c:	3c57      	subs	r4, #87	; 0x57
 800e00e:	e7df      	b.n	800dfd0 <_strtol_l.constprop.0+0x74>
 800e010:	f04f 32ff 	mov.w	r2, #4294967295
 800e014:	e7e8      	b.n	800dfe8 <_strtol_l.constprop.0+0x8c>
 800e016:	1c53      	adds	r3, r2, #1
 800e018:	d108      	bne.n	800e02c <_strtol_l.constprop.0+0xd0>
 800e01a:	2322      	movs	r3, #34	; 0x22
 800e01c:	4660      	mov	r0, ip
 800e01e:	f8ce 3000 	str.w	r3, [lr]
 800e022:	f1b8 0f00 	cmp.w	r8, #0
 800e026:	d0a6      	beq.n	800df76 <_strtol_l.constprop.0+0x1a>
 800e028:	1e69      	subs	r1, r5, #1
 800e02a:	e006      	b.n	800e03a <_strtol_l.constprop.0+0xde>
 800e02c:	b106      	cbz	r6, 800e030 <_strtol_l.constprop.0+0xd4>
 800e02e:	4240      	negs	r0, r0
 800e030:	f1b8 0f00 	cmp.w	r8, #0
 800e034:	d09f      	beq.n	800df76 <_strtol_l.constprop.0+0x1a>
 800e036:	2a00      	cmp	r2, #0
 800e038:	d1f6      	bne.n	800e028 <_strtol_l.constprop.0+0xcc>
 800e03a:	f8c8 1000 	str.w	r1, [r8]
 800e03e:	e79a      	b.n	800df76 <_strtol_l.constprop.0+0x1a>
 800e040:	2430      	movs	r4, #48	; 0x30
 800e042:	2b00      	cmp	r3, #0
 800e044:	d1b5      	bne.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800e046:	2308      	movs	r3, #8
 800e048:	e7b3      	b.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800e04a:	2c30      	cmp	r4, #48	; 0x30
 800e04c:	d0a9      	beq.n	800dfa2 <_strtol_l.constprop.0+0x46>
 800e04e:	230a      	movs	r3, #10
 800e050:	e7af      	b.n	800dfb2 <_strtol_l.constprop.0+0x56>
 800e052:	bf00      	nop
 800e054:	0800f509 	.word	0x0800f509

0800e058 <_strtol_r>:
 800e058:	f7ff bf80 	b.w	800df5c <_strtol_l.constprop.0>

0800e05c <__ssputs_r>:
 800e05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e060:	461f      	mov	r7, r3
 800e062:	688e      	ldr	r6, [r1, #8]
 800e064:	4682      	mov	sl, r0
 800e066:	42be      	cmp	r6, r7
 800e068:	460c      	mov	r4, r1
 800e06a:	4690      	mov	r8, r2
 800e06c:	680b      	ldr	r3, [r1, #0]
 800e06e:	d82c      	bhi.n	800e0ca <__ssputs_r+0x6e>
 800e070:	898a      	ldrh	r2, [r1, #12]
 800e072:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e076:	d026      	beq.n	800e0c6 <__ssputs_r+0x6a>
 800e078:	6965      	ldr	r5, [r4, #20]
 800e07a:	6909      	ldr	r1, [r1, #16]
 800e07c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e080:	eba3 0901 	sub.w	r9, r3, r1
 800e084:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e088:	1c7b      	adds	r3, r7, #1
 800e08a:	444b      	add	r3, r9
 800e08c:	106d      	asrs	r5, r5, #1
 800e08e:	429d      	cmp	r5, r3
 800e090:	bf38      	it	cc
 800e092:	461d      	movcc	r5, r3
 800e094:	0553      	lsls	r3, r2, #21
 800e096:	d527      	bpl.n	800e0e8 <__ssputs_r+0x8c>
 800e098:	4629      	mov	r1, r5
 800e09a:	f7fe fc19 	bl	800c8d0 <_malloc_r>
 800e09e:	4606      	mov	r6, r0
 800e0a0:	b360      	cbz	r0, 800e0fc <__ssputs_r+0xa0>
 800e0a2:	464a      	mov	r2, r9
 800e0a4:	6921      	ldr	r1, [r4, #16]
 800e0a6:	f7fd fd23 	bl	800baf0 <memcpy>
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0b4:	81a3      	strh	r3, [r4, #12]
 800e0b6:	6126      	str	r6, [r4, #16]
 800e0b8:	444e      	add	r6, r9
 800e0ba:	6026      	str	r6, [r4, #0]
 800e0bc:	463e      	mov	r6, r7
 800e0be:	6165      	str	r5, [r4, #20]
 800e0c0:	eba5 0509 	sub.w	r5, r5, r9
 800e0c4:	60a5      	str	r5, [r4, #8]
 800e0c6:	42be      	cmp	r6, r7
 800e0c8:	d900      	bls.n	800e0cc <__ssputs_r+0x70>
 800e0ca:	463e      	mov	r6, r7
 800e0cc:	4632      	mov	r2, r6
 800e0ce:	4641      	mov	r1, r8
 800e0d0:	6820      	ldr	r0, [r4, #0]
 800e0d2:	f000 fb68 	bl	800e7a6 <memmove>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	68a3      	ldr	r3, [r4, #8]
 800e0da:	1b9b      	subs	r3, r3, r6
 800e0dc:	60a3      	str	r3, [r4, #8]
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	4433      	add	r3, r6
 800e0e2:	6023      	str	r3, [r4, #0]
 800e0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0e8:	462a      	mov	r2, r5
 800e0ea:	f000 ff5e 	bl	800efaa <_realloc_r>
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d1e0      	bne.n	800e0b6 <__ssputs_r+0x5a>
 800e0f4:	4650      	mov	r0, sl
 800e0f6:	6921      	ldr	r1, [r4, #16]
 800e0f8:	f7fe fb7a 	bl	800c7f0 <_free_r>
 800e0fc:	230c      	movs	r3, #12
 800e0fe:	f8ca 3000 	str.w	r3, [sl]
 800e102:	89a3      	ldrh	r3, [r4, #12]
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e10c:	81a3      	strh	r3, [r4, #12]
 800e10e:	e7e9      	b.n	800e0e4 <__ssputs_r+0x88>

0800e110 <_svfiprintf_r>:
 800e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	4698      	mov	r8, r3
 800e116:	898b      	ldrh	r3, [r1, #12]
 800e118:	4607      	mov	r7, r0
 800e11a:	061b      	lsls	r3, r3, #24
 800e11c:	460d      	mov	r5, r1
 800e11e:	4614      	mov	r4, r2
 800e120:	b09d      	sub	sp, #116	; 0x74
 800e122:	d50e      	bpl.n	800e142 <_svfiprintf_r+0x32>
 800e124:	690b      	ldr	r3, [r1, #16]
 800e126:	b963      	cbnz	r3, 800e142 <_svfiprintf_r+0x32>
 800e128:	2140      	movs	r1, #64	; 0x40
 800e12a:	f7fe fbd1 	bl	800c8d0 <_malloc_r>
 800e12e:	6028      	str	r0, [r5, #0]
 800e130:	6128      	str	r0, [r5, #16]
 800e132:	b920      	cbnz	r0, 800e13e <_svfiprintf_r+0x2e>
 800e134:	230c      	movs	r3, #12
 800e136:	603b      	str	r3, [r7, #0]
 800e138:	f04f 30ff 	mov.w	r0, #4294967295
 800e13c:	e0d0      	b.n	800e2e0 <_svfiprintf_r+0x1d0>
 800e13e:	2340      	movs	r3, #64	; 0x40
 800e140:	616b      	str	r3, [r5, #20]
 800e142:	2300      	movs	r3, #0
 800e144:	9309      	str	r3, [sp, #36]	; 0x24
 800e146:	2320      	movs	r3, #32
 800e148:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e14c:	2330      	movs	r3, #48	; 0x30
 800e14e:	f04f 0901 	mov.w	r9, #1
 800e152:	f8cd 800c 	str.w	r8, [sp, #12]
 800e156:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800e2f8 <_svfiprintf_r+0x1e8>
 800e15a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e15e:	4623      	mov	r3, r4
 800e160:	469a      	mov	sl, r3
 800e162:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e166:	b10a      	cbz	r2, 800e16c <_svfiprintf_r+0x5c>
 800e168:	2a25      	cmp	r2, #37	; 0x25
 800e16a:	d1f9      	bne.n	800e160 <_svfiprintf_r+0x50>
 800e16c:	ebba 0b04 	subs.w	fp, sl, r4
 800e170:	d00b      	beq.n	800e18a <_svfiprintf_r+0x7a>
 800e172:	465b      	mov	r3, fp
 800e174:	4622      	mov	r2, r4
 800e176:	4629      	mov	r1, r5
 800e178:	4638      	mov	r0, r7
 800e17a:	f7ff ff6f 	bl	800e05c <__ssputs_r>
 800e17e:	3001      	adds	r0, #1
 800e180:	f000 80a9 	beq.w	800e2d6 <_svfiprintf_r+0x1c6>
 800e184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e186:	445a      	add	r2, fp
 800e188:	9209      	str	r2, [sp, #36]	; 0x24
 800e18a:	f89a 3000 	ldrb.w	r3, [sl]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f000 80a1 	beq.w	800e2d6 <_svfiprintf_r+0x1c6>
 800e194:	2300      	movs	r3, #0
 800e196:	f04f 32ff 	mov.w	r2, #4294967295
 800e19a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e19e:	f10a 0a01 	add.w	sl, sl, #1
 800e1a2:	9304      	str	r3, [sp, #16]
 800e1a4:	9307      	str	r3, [sp, #28]
 800e1a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1aa:	931a      	str	r3, [sp, #104]	; 0x68
 800e1ac:	4654      	mov	r4, sl
 800e1ae:	2205      	movs	r2, #5
 800e1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1b4:	4850      	ldr	r0, [pc, #320]	; (800e2f8 <_svfiprintf_r+0x1e8>)
 800e1b6:	f7fd fc8d 	bl	800bad4 <memchr>
 800e1ba:	9a04      	ldr	r2, [sp, #16]
 800e1bc:	b9d8      	cbnz	r0, 800e1f6 <_svfiprintf_r+0xe6>
 800e1be:	06d0      	lsls	r0, r2, #27
 800e1c0:	bf44      	itt	mi
 800e1c2:	2320      	movmi	r3, #32
 800e1c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1c8:	0711      	lsls	r1, r2, #28
 800e1ca:	bf44      	itt	mi
 800e1cc:	232b      	movmi	r3, #43	; 0x2b
 800e1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1d8:	d015      	beq.n	800e206 <_svfiprintf_r+0xf6>
 800e1da:	4654      	mov	r4, sl
 800e1dc:	2000      	movs	r0, #0
 800e1de:	f04f 0c0a 	mov.w	ip, #10
 800e1e2:	9a07      	ldr	r2, [sp, #28]
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1ea:	3b30      	subs	r3, #48	; 0x30
 800e1ec:	2b09      	cmp	r3, #9
 800e1ee:	d94d      	bls.n	800e28c <_svfiprintf_r+0x17c>
 800e1f0:	b1b0      	cbz	r0, 800e220 <_svfiprintf_r+0x110>
 800e1f2:	9207      	str	r2, [sp, #28]
 800e1f4:	e014      	b.n	800e220 <_svfiprintf_r+0x110>
 800e1f6:	eba0 0308 	sub.w	r3, r0, r8
 800e1fa:	fa09 f303 	lsl.w	r3, r9, r3
 800e1fe:	4313      	orrs	r3, r2
 800e200:	46a2      	mov	sl, r4
 800e202:	9304      	str	r3, [sp, #16]
 800e204:	e7d2      	b.n	800e1ac <_svfiprintf_r+0x9c>
 800e206:	9b03      	ldr	r3, [sp, #12]
 800e208:	1d19      	adds	r1, r3, #4
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	9103      	str	r1, [sp, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	bfbb      	ittet	lt
 800e212:	425b      	neglt	r3, r3
 800e214:	f042 0202 	orrlt.w	r2, r2, #2
 800e218:	9307      	strge	r3, [sp, #28]
 800e21a:	9307      	strlt	r3, [sp, #28]
 800e21c:	bfb8      	it	lt
 800e21e:	9204      	strlt	r2, [sp, #16]
 800e220:	7823      	ldrb	r3, [r4, #0]
 800e222:	2b2e      	cmp	r3, #46	; 0x2e
 800e224:	d10c      	bne.n	800e240 <_svfiprintf_r+0x130>
 800e226:	7863      	ldrb	r3, [r4, #1]
 800e228:	2b2a      	cmp	r3, #42	; 0x2a
 800e22a:	d134      	bne.n	800e296 <_svfiprintf_r+0x186>
 800e22c:	9b03      	ldr	r3, [sp, #12]
 800e22e:	3402      	adds	r4, #2
 800e230:	1d1a      	adds	r2, r3, #4
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	9203      	str	r2, [sp, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	bfb8      	it	lt
 800e23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e23e:	9305      	str	r3, [sp, #20]
 800e240:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800e2fc <_svfiprintf_r+0x1ec>
 800e244:	2203      	movs	r2, #3
 800e246:	4650      	mov	r0, sl
 800e248:	7821      	ldrb	r1, [r4, #0]
 800e24a:	f7fd fc43 	bl	800bad4 <memchr>
 800e24e:	b138      	cbz	r0, 800e260 <_svfiprintf_r+0x150>
 800e250:	2240      	movs	r2, #64	; 0x40
 800e252:	9b04      	ldr	r3, [sp, #16]
 800e254:	eba0 000a 	sub.w	r0, r0, sl
 800e258:	4082      	lsls	r2, r0
 800e25a:	4313      	orrs	r3, r2
 800e25c:	3401      	adds	r4, #1
 800e25e:	9304      	str	r3, [sp, #16]
 800e260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e264:	2206      	movs	r2, #6
 800e266:	4826      	ldr	r0, [pc, #152]	; (800e300 <_svfiprintf_r+0x1f0>)
 800e268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e26c:	f7fd fc32 	bl	800bad4 <memchr>
 800e270:	2800      	cmp	r0, #0
 800e272:	d038      	beq.n	800e2e6 <_svfiprintf_r+0x1d6>
 800e274:	4b23      	ldr	r3, [pc, #140]	; (800e304 <_svfiprintf_r+0x1f4>)
 800e276:	bb1b      	cbnz	r3, 800e2c0 <_svfiprintf_r+0x1b0>
 800e278:	9b03      	ldr	r3, [sp, #12]
 800e27a:	3307      	adds	r3, #7
 800e27c:	f023 0307 	bic.w	r3, r3, #7
 800e280:	3308      	adds	r3, #8
 800e282:	9303      	str	r3, [sp, #12]
 800e284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e286:	4433      	add	r3, r6
 800e288:	9309      	str	r3, [sp, #36]	; 0x24
 800e28a:	e768      	b.n	800e15e <_svfiprintf_r+0x4e>
 800e28c:	460c      	mov	r4, r1
 800e28e:	2001      	movs	r0, #1
 800e290:	fb0c 3202 	mla	r2, ip, r2, r3
 800e294:	e7a6      	b.n	800e1e4 <_svfiprintf_r+0xd4>
 800e296:	2300      	movs	r3, #0
 800e298:	f04f 0c0a 	mov.w	ip, #10
 800e29c:	4619      	mov	r1, r3
 800e29e:	3401      	adds	r4, #1
 800e2a0:	9305      	str	r3, [sp, #20]
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2a8:	3a30      	subs	r2, #48	; 0x30
 800e2aa:	2a09      	cmp	r2, #9
 800e2ac:	d903      	bls.n	800e2b6 <_svfiprintf_r+0x1a6>
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d0c6      	beq.n	800e240 <_svfiprintf_r+0x130>
 800e2b2:	9105      	str	r1, [sp, #20]
 800e2b4:	e7c4      	b.n	800e240 <_svfiprintf_r+0x130>
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2be:	e7f0      	b.n	800e2a2 <_svfiprintf_r+0x192>
 800e2c0:	ab03      	add	r3, sp, #12
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	462a      	mov	r2, r5
 800e2c6:	4638      	mov	r0, r7
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <_svfiprintf_r+0x1f8>)
 800e2ca:	a904      	add	r1, sp, #16
 800e2cc:	f7fc fb9e 	bl	800aa0c <_printf_float>
 800e2d0:	1c42      	adds	r2, r0, #1
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	d1d6      	bne.n	800e284 <_svfiprintf_r+0x174>
 800e2d6:	89ab      	ldrh	r3, [r5, #12]
 800e2d8:	065b      	lsls	r3, r3, #25
 800e2da:	f53f af2d 	bmi.w	800e138 <_svfiprintf_r+0x28>
 800e2de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2e0:	b01d      	add	sp, #116	; 0x74
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	ab03      	add	r3, sp, #12
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	4638      	mov	r0, r7
 800e2ee:	4b06      	ldr	r3, [pc, #24]	; (800e308 <_svfiprintf_r+0x1f8>)
 800e2f0:	a904      	add	r1, sp, #16
 800e2f2:	f7fc fe2b 	bl	800af4c <_printf_i>
 800e2f6:	e7eb      	b.n	800e2d0 <_svfiprintf_r+0x1c0>
 800e2f8:	0800f609 	.word	0x0800f609
 800e2fc:	0800f60f 	.word	0x0800f60f
 800e300:	0800f613 	.word	0x0800f613
 800e304:	0800aa0d 	.word	0x0800aa0d
 800e308:	0800e05d 	.word	0x0800e05d

0800e30c <__sfputc_r>:
 800e30c:	6893      	ldr	r3, [r2, #8]
 800e30e:	b410      	push	{r4}
 800e310:	3b01      	subs	r3, #1
 800e312:	2b00      	cmp	r3, #0
 800e314:	6093      	str	r3, [r2, #8]
 800e316:	da07      	bge.n	800e328 <__sfputc_r+0x1c>
 800e318:	6994      	ldr	r4, [r2, #24]
 800e31a:	42a3      	cmp	r3, r4
 800e31c:	db01      	blt.n	800e322 <__sfputc_r+0x16>
 800e31e:	290a      	cmp	r1, #10
 800e320:	d102      	bne.n	800e328 <__sfputc_r+0x1c>
 800e322:	bc10      	pop	{r4}
 800e324:	f7fd bac3 	b.w	800b8ae <__swbuf_r>
 800e328:	6813      	ldr	r3, [r2, #0]
 800e32a:	1c58      	adds	r0, r3, #1
 800e32c:	6010      	str	r0, [r2, #0]
 800e32e:	7019      	strb	r1, [r3, #0]
 800e330:	4608      	mov	r0, r1
 800e332:	bc10      	pop	{r4}
 800e334:	4770      	bx	lr

0800e336 <__sfputs_r>:
 800e336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e338:	4606      	mov	r6, r0
 800e33a:	460f      	mov	r7, r1
 800e33c:	4614      	mov	r4, r2
 800e33e:	18d5      	adds	r5, r2, r3
 800e340:	42ac      	cmp	r4, r5
 800e342:	d101      	bne.n	800e348 <__sfputs_r+0x12>
 800e344:	2000      	movs	r0, #0
 800e346:	e007      	b.n	800e358 <__sfputs_r+0x22>
 800e348:	463a      	mov	r2, r7
 800e34a:	4630      	mov	r0, r6
 800e34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e350:	f7ff ffdc 	bl	800e30c <__sfputc_r>
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	d1f3      	bne.n	800e340 <__sfputs_r+0xa>
 800e358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e35c <_vfiprintf_r>:
 800e35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e360:	460d      	mov	r5, r1
 800e362:	4614      	mov	r4, r2
 800e364:	4698      	mov	r8, r3
 800e366:	4606      	mov	r6, r0
 800e368:	b09d      	sub	sp, #116	; 0x74
 800e36a:	b118      	cbz	r0, 800e374 <_vfiprintf_r+0x18>
 800e36c:	6a03      	ldr	r3, [r0, #32]
 800e36e:	b90b      	cbnz	r3, 800e374 <_vfiprintf_r+0x18>
 800e370:	f7fd f996 	bl	800b6a0 <__sinit>
 800e374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e376:	07d9      	lsls	r1, r3, #31
 800e378:	d405      	bmi.n	800e386 <_vfiprintf_r+0x2a>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	059a      	lsls	r2, r3, #22
 800e37e:	d402      	bmi.n	800e386 <_vfiprintf_r+0x2a>
 800e380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e382:	f7fd fba5 	bl	800bad0 <__retarget_lock_acquire_recursive>
 800e386:	89ab      	ldrh	r3, [r5, #12]
 800e388:	071b      	lsls	r3, r3, #28
 800e38a:	d501      	bpl.n	800e390 <_vfiprintf_r+0x34>
 800e38c:	692b      	ldr	r3, [r5, #16]
 800e38e:	b99b      	cbnz	r3, 800e3b8 <_vfiprintf_r+0x5c>
 800e390:	4629      	mov	r1, r5
 800e392:	4630      	mov	r0, r6
 800e394:	f7fd fac8 	bl	800b928 <__swsetup_r>
 800e398:	b170      	cbz	r0, 800e3b8 <_vfiprintf_r+0x5c>
 800e39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e39c:	07dc      	lsls	r4, r3, #31
 800e39e:	d504      	bpl.n	800e3aa <_vfiprintf_r+0x4e>
 800e3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a4:	b01d      	add	sp, #116	; 0x74
 800e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3aa:	89ab      	ldrh	r3, [r5, #12]
 800e3ac:	0598      	lsls	r0, r3, #22
 800e3ae:	d4f7      	bmi.n	800e3a0 <_vfiprintf_r+0x44>
 800e3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3b2:	f7fd fb8e 	bl	800bad2 <__retarget_lock_release_recursive>
 800e3b6:	e7f3      	b.n	800e3a0 <_vfiprintf_r+0x44>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e3bc:	2320      	movs	r3, #32
 800e3be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3c2:	2330      	movs	r3, #48	; 0x30
 800e3c4:	f04f 0901 	mov.w	r9, #1
 800e3c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e57c <_vfiprintf_r+0x220>
 800e3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3d4:	4623      	mov	r3, r4
 800e3d6:	469a      	mov	sl, r3
 800e3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3dc:	b10a      	cbz	r2, 800e3e2 <_vfiprintf_r+0x86>
 800e3de:	2a25      	cmp	r2, #37	; 0x25
 800e3e0:	d1f9      	bne.n	800e3d6 <_vfiprintf_r+0x7a>
 800e3e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e3e6:	d00b      	beq.n	800e400 <_vfiprintf_r+0xa4>
 800e3e8:	465b      	mov	r3, fp
 800e3ea:	4622      	mov	r2, r4
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	f7ff ffa1 	bl	800e336 <__sfputs_r>
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	f000 80a9 	beq.w	800e54c <_vfiprintf_r+0x1f0>
 800e3fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3fc:	445a      	add	r2, fp
 800e3fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e400:	f89a 3000 	ldrb.w	r3, [sl]
 800e404:	2b00      	cmp	r3, #0
 800e406:	f000 80a1 	beq.w	800e54c <_vfiprintf_r+0x1f0>
 800e40a:	2300      	movs	r3, #0
 800e40c:	f04f 32ff 	mov.w	r2, #4294967295
 800e410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e414:	f10a 0a01 	add.w	sl, sl, #1
 800e418:	9304      	str	r3, [sp, #16]
 800e41a:	9307      	str	r3, [sp, #28]
 800e41c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e420:	931a      	str	r3, [sp, #104]	; 0x68
 800e422:	4654      	mov	r4, sl
 800e424:	2205      	movs	r2, #5
 800e426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e42a:	4854      	ldr	r0, [pc, #336]	; (800e57c <_vfiprintf_r+0x220>)
 800e42c:	f7fd fb52 	bl	800bad4 <memchr>
 800e430:	9a04      	ldr	r2, [sp, #16]
 800e432:	b9d8      	cbnz	r0, 800e46c <_vfiprintf_r+0x110>
 800e434:	06d1      	lsls	r1, r2, #27
 800e436:	bf44      	itt	mi
 800e438:	2320      	movmi	r3, #32
 800e43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e43e:	0713      	lsls	r3, r2, #28
 800e440:	bf44      	itt	mi
 800e442:	232b      	movmi	r3, #43	; 0x2b
 800e444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e448:	f89a 3000 	ldrb.w	r3, [sl]
 800e44c:	2b2a      	cmp	r3, #42	; 0x2a
 800e44e:	d015      	beq.n	800e47c <_vfiprintf_r+0x120>
 800e450:	4654      	mov	r4, sl
 800e452:	2000      	movs	r0, #0
 800e454:	f04f 0c0a 	mov.w	ip, #10
 800e458:	9a07      	ldr	r2, [sp, #28]
 800e45a:	4621      	mov	r1, r4
 800e45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e460:	3b30      	subs	r3, #48	; 0x30
 800e462:	2b09      	cmp	r3, #9
 800e464:	d94d      	bls.n	800e502 <_vfiprintf_r+0x1a6>
 800e466:	b1b0      	cbz	r0, 800e496 <_vfiprintf_r+0x13a>
 800e468:	9207      	str	r2, [sp, #28]
 800e46a:	e014      	b.n	800e496 <_vfiprintf_r+0x13a>
 800e46c:	eba0 0308 	sub.w	r3, r0, r8
 800e470:	fa09 f303 	lsl.w	r3, r9, r3
 800e474:	4313      	orrs	r3, r2
 800e476:	46a2      	mov	sl, r4
 800e478:	9304      	str	r3, [sp, #16]
 800e47a:	e7d2      	b.n	800e422 <_vfiprintf_r+0xc6>
 800e47c:	9b03      	ldr	r3, [sp, #12]
 800e47e:	1d19      	adds	r1, r3, #4
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	9103      	str	r1, [sp, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	bfbb      	ittet	lt
 800e488:	425b      	neglt	r3, r3
 800e48a:	f042 0202 	orrlt.w	r2, r2, #2
 800e48e:	9307      	strge	r3, [sp, #28]
 800e490:	9307      	strlt	r3, [sp, #28]
 800e492:	bfb8      	it	lt
 800e494:	9204      	strlt	r2, [sp, #16]
 800e496:	7823      	ldrb	r3, [r4, #0]
 800e498:	2b2e      	cmp	r3, #46	; 0x2e
 800e49a:	d10c      	bne.n	800e4b6 <_vfiprintf_r+0x15a>
 800e49c:	7863      	ldrb	r3, [r4, #1]
 800e49e:	2b2a      	cmp	r3, #42	; 0x2a
 800e4a0:	d134      	bne.n	800e50c <_vfiprintf_r+0x1b0>
 800e4a2:	9b03      	ldr	r3, [sp, #12]
 800e4a4:	3402      	adds	r4, #2
 800e4a6:	1d1a      	adds	r2, r3, #4
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	9203      	str	r2, [sp, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	bfb8      	it	lt
 800e4b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4b4:	9305      	str	r3, [sp, #20]
 800e4b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e580 <_vfiprintf_r+0x224>
 800e4ba:	2203      	movs	r2, #3
 800e4bc:	4650      	mov	r0, sl
 800e4be:	7821      	ldrb	r1, [r4, #0]
 800e4c0:	f7fd fb08 	bl	800bad4 <memchr>
 800e4c4:	b138      	cbz	r0, 800e4d6 <_vfiprintf_r+0x17a>
 800e4c6:	2240      	movs	r2, #64	; 0x40
 800e4c8:	9b04      	ldr	r3, [sp, #16]
 800e4ca:	eba0 000a 	sub.w	r0, r0, sl
 800e4ce:	4082      	lsls	r2, r0
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	3401      	adds	r4, #1
 800e4d4:	9304      	str	r3, [sp, #16]
 800e4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4da:	2206      	movs	r2, #6
 800e4dc:	4829      	ldr	r0, [pc, #164]	; (800e584 <_vfiprintf_r+0x228>)
 800e4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4e2:	f7fd faf7 	bl	800bad4 <memchr>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d03f      	beq.n	800e56a <_vfiprintf_r+0x20e>
 800e4ea:	4b27      	ldr	r3, [pc, #156]	; (800e588 <_vfiprintf_r+0x22c>)
 800e4ec:	bb1b      	cbnz	r3, 800e536 <_vfiprintf_r+0x1da>
 800e4ee:	9b03      	ldr	r3, [sp, #12]
 800e4f0:	3307      	adds	r3, #7
 800e4f2:	f023 0307 	bic.w	r3, r3, #7
 800e4f6:	3308      	adds	r3, #8
 800e4f8:	9303      	str	r3, [sp, #12]
 800e4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4fc:	443b      	add	r3, r7
 800e4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e500:	e768      	b.n	800e3d4 <_vfiprintf_r+0x78>
 800e502:	460c      	mov	r4, r1
 800e504:	2001      	movs	r0, #1
 800e506:	fb0c 3202 	mla	r2, ip, r2, r3
 800e50a:	e7a6      	b.n	800e45a <_vfiprintf_r+0xfe>
 800e50c:	2300      	movs	r3, #0
 800e50e:	f04f 0c0a 	mov.w	ip, #10
 800e512:	4619      	mov	r1, r3
 800e514:	3401      	adds	r4, #1
 800e516:	9305      	str	r3, [sp, #20]
 800e518:	4620      	mov	r0, r4
 800e51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e51e:	3a30      	subs	r2, #48	; 0x30
 800e520:	2a09      	cmp	r2, #9
 800e522:	d903      	bls.n	800e52c <_vfiprintf_r+0x1d0>
 800e524:	2b00      	cmp	r3, #0
 800e526:	d0c6      	beq.n	800e4b6 <_vfiprintf_r+0x15a>
 800e528:	9105      	str	r1, [sp, #20]
 800e52a:	e7c4      	b.n	800e4b6 <_vfiprintf_r+0x15a>
 800e52c:	4604      	mov	r4, r0
 800e52e:	2301      	movs	r3, #1
 800e530:	fb0c 2101 	mla	r1, ip, r1, r2
 800e534:	e7f0      	b.n	800e518 <_vfiprintf_r+0x1bc>
 800e536:	ab03      	add	r3, sp, #12
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	462a      	mov	r2, r5
 800e53c:	4630      	mov	r0, r6
 800e53e:	4b13      	ldr	r3, [pc, #76]	; (800e58c <_vfiprintf_r+0x230>)
 800e540:	a904      	add	r1, sp, #16
 800e542:	f7fc fa63 	bl	800aa0c <_printf_float>
 800e546:	4607      	mov	r7, r0
 800e548:	1c78      	adds	r0, r7, #1
 800e54a:	d1d6      	bne.n	800e4fa <_vfiprintf_r+0x19e>
 800e54c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e54e:	07d9      	lsls	r1, r3, #31
 800e550:	d405      	bmi.n	800e55e <_vfiprintf_r+0x202>
 800e552:	89ab      	ldrh	r3, [r5, #12]
 800e554:	059a      	lsls	r2, r3, #22
 800e556:	d402      	bmi.n	800e55e <_vfiprintf_r+0x202>
 800e558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e55a:	f7fd faba 	bl	800bad2 <__retarget_lock_release_recursive>
 800e55e:	89ab      	ldrh	r3, [r5, #12]
 800e560:	065b      	lsls	r3, r3, #25
 800e562:	f53f af1d 	bmi.w	800e3a0 <_vfiprintf_r+0x44>
 800e566:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e568:	e71c      	b.n	800e3a4 <_vfiprintf_r+0x48>
 800e56a:	ab03      	add	r3, sp, #12
 800e56c:	9300      	str	r3, [sp, #0]
 800e56e:	462a      	mov	r2, r5
 800e570:	4630      	mov	r0, r6
 800e572:	4b06      	ldr	r3, [pc, #24]	; (800e58c <_vfiprintf_r+0x230>)
 800e574:	a904      	add	r1, sp, #16
 800e576:	f7fc fce9 	bl	800af4c <_printf_i>
 800e57a:	e7e4      	b.n	800e546 <_vfiprintf_r+0x1ea>
 800e57c:	0800f609 	.word	0x0800f609
 800e580:	0800f60f 	.word	0x0800f60f
 800e584:	0800f613 	.word	0x0800f613
 800e588:	0800aa0d 	.word	0x0800aa0d
 800e58c:	0800e337 	.word	0x0800e337

0800e590 <__sflush_r>:
 800e590:	898a      	ldrh	r2, [r1, #12]
 800e592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e594:	4605      	mov	r5, r0
 800e596:	0710      	lsls	r0, r2, #28
 800e598:	460c      	mov	r4, r1
 800e59a:	d457      	bmi.n	800e64c <__sflush_r+0xbc>
 800e59c:	684b      	ldr	r3, [r1, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	dc04      	bgt.n	800e5ac <__sflush_r+0x1c>
 800e5a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	dc01      	bgt.n	800e5ac <__sflush_r+0x1c>
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	d0fa      	beq.n	800e5a8 <__sflush_r+0x18>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5b8:	682f      	ldr	r7, [r5, #0]
 800e5ba:	6a21      	ldr	r1, [r4, #32]
 800e5bc:	602b      	str	r3, [r5, #0]
 800e5be:	d032      	beq.n	800e626 <__sflush_r+0x96>
 800e5c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	075a      	lsls	r2, r3, #29
 800e5c6:	d505      	bpl.n	800e5d4 <__sflush_r+0x44>
 800e5c8:	6863      	ldr	r3, [r4, #4]
 800e5ca:	1ac0      	subs	r0, r0, r3
 800e5cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5ce:	b10b      	cbz	r3, 800e5d4 <__sflush_r+0x44>
 800e5d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5d2:	1ac0      	subs	r0, r0, r3
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5da:	4628      	mov	r0, r5
 800e5dc:	6a21      	ldr	r1, [r4, #32]
 800e5de:	47b0      	blx	r6
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	d106      	bne.n	800e5f4 <__sflush_r+0x64>
 800e5e6:	6829      	ldr	r1, [r5, #0]
 800e5e8:	291d      	cmp	r1, #29
 800e5ea:	d82b      	bhi.n	800e644 <__sflush_r+0xb4>
 800e5ec:	4a28      	ldr	r2, [pc, #160]	; (800e690 <__sflush_r+0x100>)
 800e5ee:	410a      	asrs	r2, r1
 800e5f0:	07d6      	lsls	r6, r2, #31
 800e5f2:	d427      	bmi.n	800e644 <__sflush_r+0xb4>
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	6062      	str	r2, [r4, #4]
 800e5f8:	6922      	ldr	r2, [r4, #16]
 800e5fa:	04d9      	lsls	r1, r3, #19
 800e5fc:	6022      	str	r2, [r4, #0]
 800e5fe:	d504      	bpl.n	800e60a <__sflush_r+0x7a>
 800e600:	1c42      	adds	r2, r0, #1
 800e602:	d101      	bne.n	800e608 <__sflush_r+0x78>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	b903      	cbnz	r3, 800e60a <__sflush_r+0x7a>
 800e608:	6560      	str	r0, [r4, #84]	; 0x54
 800e60a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e60c:	602f      	str	r7, [r5, #0]
 800e60e:	2900      	cmp	r1, #0
 800e610:	d0ca      	beq.n	800e5a8 <__sflush_r+0x18>
 800e612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e616:	4299      	cmp	r1, r3
 800e618:	d002      	beq.n	800e620 <__sflush_r+0x90>
 800e61a:	4628      	mov	r0, r5
 800e61c:	f7fe f8e8 	bl	800c7f0 <_free_r>
 800e620:	2000      	movs	r0, #0
 800e622:	6360      	str	r0, [r4, #52]	; 0x34
 800e624:	e7c1      	b.n	800e5aa <__sflush_r+0x1a>
 800e626:	2301      	movs	r3, #1
 800e628:	4628      	mov	r0, r5
 800e62a:	47b0      	blx	r6
 800e62c:	1c41      	adds	r1, r0, #1
 800e62e:	d1c8      	bne.n	800e5c2 <__sflush_r+0x32>
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0c5      	beq.n	800e5c2 <__sflush_r+0x32>
 800e636:	2b1d      	cmp	r3, #29
 800e638:	d001      	beq.n	800e63e <__sflush_r+0xae>
 800e63a:	2b16      	cmp	r3, #22
 800e63c:	d101      	bne.n	800e642 <__sflush_r+0xb2>
 800e63e:	602f      	str	r7, [r5, #0]
 800e640:	e7b2      	b.n	800e5a8 <__sflush_r+0x18>
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e648:	81a3      	strh	r3, [r4, #12]
 800e64a:	e7ae      	b.n	800e5aa <__sflush_r+0x1a>
 800e64c:	690f      	ldr	r7, [r1, #16]
 800e64e:	2f00      	cmp	r7, #0
 800e650:	d0aa      	beq.n	800e5a8 <__sflush_r+0x18>
 800e652:	0793      	lsls	r3, r2, #30
 800e654:	bf18      	it	ne
 800e656:	2300      	movne	r3, #0
 800e658:	680e      	ldr	r6, [r1, #0]
 800e65a:	bf08      	it	eq
 800e65c:	694b      	ldreq	r3, [r1, #20]
 800e65e:	1bf6      	subs	r6, r6, r7
 800e660:	600f      	str	r7, [r1, #0]
 800e662:	608b      	str	r3, [r1, #8]
 800e664:	2e00      	cmp	r6, #0
 800e666:	dd9f      	ble.n	800e5a8 <__sflush_r+0x18>
 800e668:	4633      	mov	r3, r6
 800e66a:	463a      	mov	r2, r7
 800e66c:	4628      	mov	r0, r5
 800e66e:	6a21      	ldr	r1, [r4, #32]
 800e670:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e674:	47e0      	blx	ip
 800e676:	2800      	cmp	r0, #0
 800e678:	dc06      	bgt.n	800e688 <__sflush_r+0xf8>
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	f04f 30ff 	mov.w	r0, #4294967295
 800e680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e684:	81a3      	strh	r3, [r4, #12]
 800e686:	e790      	b.n	800e5aa <__sflush_r+0x1a>
 800e688:	4407      	add	r7, r0
 800e68a:	1a36      	subs	r6, r6, r0
 800e68c:	e7ea      	b.n	800e664 <__sflush_r+0xd4>
 800e68e:	bf00      	nop
 800e690:	dfbffffe 	.word	0xdfbffffe

0800e694 <_fflush_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	690b      	ldr	r3, [r1, #16]
 800e698:	4605      	mov	r5, r0
 800e69a:	460c      	mov	r4, r1
 800e69c:	b913      	cbnz	r3, 800e6a4 <_fflush_r+0x10>
 800e69e:	2500      	movs	r5, #0
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	bd38      	pop	{r3, r4, r5, pc}
 800e6a4:	b118      	cbz	r0, 800e6ae <_fflush_r+0x1a>
 800e6a6:	6a03      	ldr	r3, [r0, #32]
 800e6a8:	b90b      	cbnz	r3, 800e6ae <_fflush_r+0x1a>
 800e6aa:	f7fc fff9 	bl	800b6a0 <__sinit>
 800e6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d0f3      	beq.n	800e69e <_fflush_r+0xa>
 800e6b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6b8:	07d0      	lsls	r0, r2, #31
 800e6ba:	d404      	bmi.n	800e6c6 <_fflush_r+0x32>
 800e6bc:	0599      	lsls	r1, r3, #22
 800e6be:	d402      	bmi.n	800e6c6 <_fflush_r+0x32>
 800e6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6c2:	f7fd fa05 	bl	800bad0 <__retarget_lock_acquire_recursive>
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	f7ff ff61 	bl	800e590 <__sflush_r>
 800e6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6d0:	4605      	mov	r5, r0
 800e6d2:	07da      	lsls	r2, r3, #31
 800e6d4:	d4e4      	bmi.n	800e6a0 <_fflush_r+0xc>
 800e6d6:	89a3      	ldrh	r3, [r4, #12]
 800e6d8:	059b      	lsls	r3, r3, #22
 800e6da:	d4e1      	bmi.n	800e6a0 <_fflush_r+0xc>
 800e6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6de:	f7fd f9f8 	bl	800bad2 <__retarget_lock_release_recursive>
 800e6e2:	e7dd      	b.n	800e6a0 <_fflush_r+0xc>

0800e6e4 <__swhatbuf_r>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ec:	4615      	mov	r5, r2
 800e6ee:	2900      	cmp	r1, #0
 800e6f0:	461e      	mov	r6, r3
 800e6f2:	b096      	sub	sp, #88	; 0x58
 800e6f4:	da0c      	bge.n	800e710 <__swhatbuf_r+0x2c>
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e6fe:	bf0c      	ite	eq
 800e700:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e704:	2340      	movne	r3, #64	; 0x40
 800e706:	2000      	movs	r0, #0
 800e708:	6031      	str	r1, [r6, #0]
 800e70a:	602b      	str	r3, [r5, #0]
 800e70c:	b016      	add	sp, #88	; 0x58
 800e70e:	bd70      	pop	{r4, r5, r6, pc}
 800e710:	466a      	mov	r2, sp
 800e712:	f000 f875 	bl	800e800 <_fstat_r>
 800e716:	2800      	cmp	r0, #0
 800e718:	dbed      	blt.n	800e6f6 <__swhatbuf_r+0x12>
 800e71a:	9901      	ldr	r1, [sp, #4]
 800e71c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e720:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e724:	4259      	negs	r1, r3
 800e726:	4159      	adcs	r1, r3
 800e728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e72c:	e7eb      	b.n	800e706 <__swhatbuf_r+0x22>

0800e72e <__smakebuf_r>:
 800e72e:	898b      	ldrh	r3, [r1, #12]
 800e730:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e732:	079d      	lsls	r5, r3, #30
 800e734:	4606      	mov	r6, r0
 800e736:	460c      	mov	r4, r1
 800e738:	d507      	bpl.n	800e74a <__smakebuf_r+0x1c>
 800e73a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	6123      	str	r3, [r4, #16]
 800e742:	2301      	movs	r3, #1
 800e744:	6163      	str	r3, [r4, #20]
 800e746:	b002      	add	sp, #8
 800e748:	bd70      	pop	{r4, r5, r6, pc}
 800e74a:	466a      	mov	r2, sp
 800e74c:	ab01      	add	r3, sp, #4
 800e74e:	f7ff ffc9 	bl	800e6e4 <__swhatbuf_r>
 800e752:	9900      	ldr	r1, [sp, #0]
 800e754:	4605      	mov	r5, r0
 800e756:	4630      	mov	r0, r6
 800e758:	f7fe f8ba 	bl	800c8d0 <_malloc_r>
 800e75c:	b948      	cbnz	r0, 800e772 <__smakebuf_r+0x44>
 800e75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e762:	059a      	lsls	r2, r3, #22
 800e764:	d4ef      	bmi.n	800e746 <__smakebuf_r+0x18>
 800e766:	f023 0303 	bic.w	r3, r3, #3
 800e76a:	f043 0302 	orr.w	r3, r3, #2
 800e76e:	81a3      	strh	r3, [r4, #12]
 800e770:	e7e3      	b.n	800e73a <__smakebuf_r+0xc>
 800e772:	89a3      	ldrh	r3, [r4, #12]
 800e774:	6020      	str	r0, [r4, #0]
 800e776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e77a:	81a3      	strh	r3, [r4, #12]
 800e77c:	9b00      	ldr	r3, [sp, #0]
 800e77e:	6120      	str	r0, [r4, #16]
 800e780:	6163      	str	r3, [r4, #20]
 800e782:	9b01      	ldr	r3, [sp, #4]
 800e784:	b15b      	cbz	r3, 800e79e <__smakebuf_r+0x70>
 800e786:	4630      	mov	r0, r6
 800e788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e78c:	f000 f84a 	bl	800e824 <_isatty_r>
 800e790:	b128      	cbz	r0, 800e79e <__smakebuf_r+0x70>
 800e792:	89a3      	ldrh	r3, [r4, #12]
 800e794:	f023 0303 	bic.w	r3, r3, #3
 800e798:	f043 0301 	orr.w	r3, r3, #1
 800e79c:	81a3      	strh	r3, [r4, #12]
 800e79e:	89a3      	ldrh	r3, [r4, #12]
 800e7a0:	431d      	orrs	r5, r3
 800e7a2:	81a5      	strh	r5, [r4, #12]
 800e7a4:	e7cf      	b.n	800e746 <__smakebuf_r+0x18>

0800e7a6 <memmove>:
 800e7a6:	4288      	cmp	r0, r1
 800e7a8:	b510      	push	{r4, lr}
 800e7aa:	eb01 0402 	add.w	r4, r1, r2
 800e7ae:	d902      	bls.n	800e7b6 <memmove+0x10>
 800e7b0:	4284      	cmp	r4, r0
 800e7b2:	4623      	mov	r3, r4
 800e7b4:	d807      	bhi.n	800e7c6 <memmove+0x20>
 800e7b6:	1e43      	subs	r3, r0, #1
 800e7b8:	42a1      	cmp	r1, r4
 800e7ba:	d008      	beq.n	800e7ce <memmove+0x28>
 800e7bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7c4:	e7f8      	b.n	800e7b8 <memmove+0x12>
 800e7c6:	4601      	mov	r1, r0
 800e7c8:	4402      	add	r2, r0
 800e7ca:	428a      	cmp	r2, r1
 800e7cc:	d100      	bne.n	800e7d0 <memmove+0x2a>
 800e7ce:	bd10      	pop	{r4, pc}
 800e7d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7d8:	e7f7      	b.n	800e7ca <memmove+0x24>

0800e7da <strncmp>:
 800e7da:	b510      	push	{r4, lr}
 800e7dc:	b16a      	cbz	r2, 800e7fa <strncmp+0x20>
 800e7de:	3901      	subs	r1, #1
 800e7e0:	1884      	adds	r4, r0, r2
 800e7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d103      	bne.n	800e7f6 <strncmp+0x1c>
 800e7ee:	42a0      	cmp	r0, r4
 800e7f0:	d001      	beq.n	800e7f6 <strncmp+0x1c>
 800e7f2:	2a00      	cmp	r2, #0
 800e7f4:	d1f5      	bne.n	800e7e2 <strncmp+0x8>
 800e7f6:	1ad0      	subs	r0, r2, r3
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	e7fc      	b.n	800e7f8 <strncmp+0x1e>
	...

0800e800 <_fstat_r>:
 800e800:	b538      	push	{r3, r4, r5, lr}
 800e802:	2300      	movs	r3, #0
 800e804:	4d06      	ldr	r5, [pc, #24]	; (800e820 <_fstat_r+0x20>)
 800e806:	4604      	mov	r4, r0
 800e808:	4608      	mov	r0, r1
 800e80a:	4611      	mov	r1, r2
 800e80c:	602b      	str	r3, [r5, #0]
 800e80e:	f7f7 fd86 	bl	800631e <_fstat>
 800e812:	1c43      	adds	r3, r0, #1
 800e814:	d102      	bne.n	800e81c <_fstat_r+0x1c>
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	b103      	cbz	r3, 800e81c <_fstat_r+0x1c>
 800e81a:	6023      	str	r3, [r4, #0]
 800e81c:	bd38      	pop	{r3, r4, r5, pc}
 800e81e:	bf00      	nop
 800e820:	20004578 	.word	0x20004578

0800e824 <_isatty_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	2300      	movs	r3, #0
 800e828:	4d05      	ldr	r5, [pc, #20]	; (800e840 <_isatty_r+0x1c>)
 800e82a:	4604      	mov	r4, r0
 800e82c:	4608      	mov	r0, r1
 800e82e:	602b      	str	r3, [r5, #0]
 800e830:	f7f7 fd84 	bl	800633c <_isatty>
 800e834:	1c43      	adds	r3, r0, #1
 800e836:	d102      	bne.n	800e83e <_isatty_r+0x1a>
 800e838:	682b      	ldr	r3, [r5, #0]
 800e83a:	b103      	cbz	r3, 800e83e <_isatty_r+0x1a>
 800e83c:	6023      	str	r3, [r4, #0]
 800e83e:	bd38      	pop	{r3, r4, r5, pc}
 800e840:	20004578 	.word	0x20004578

0800e844 <_sbrk_r>:
 800e844:	b538      	push	{r3, r4, r5, lr}
 800e846:	2300      	movs	r3, #0
 800e848:	4d05      	ldr	r5, [pc, #20]	; (800e860 <_sbrk_r+0x1c>)
 800e84a:	4604      	mov	r4, r0
 800e84c:	4608      	mov	r0, r1
 800e84e:	602b      	str	r3, [r5, #0]
 800e850:	f7f7 fd8a 	bl	8006368 <_sbrk>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d102      	bne.n	800e85e <_sbrk_r+0x1a>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	b103      	cbz	r3, 800e85e <_sbrk_r+0x1a>
 800e85c:	6023      	str	r3, [r4, #0]
 800e85e:	bd38      	pop	{r3, r4, r5, pc}
 800e860:	20004578 	.word	0x20004578

0800e864 <nan>:
 800e864:	2000      	movs	r0, #0
 800e866:	4901      	ldr	r1, [pc, #4]	; (800e86c <nan+0x8>)
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	7ff80000 	.word	0x7ff80000

0800e870 <__assert_func>:
 800e870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e872:	4614      	mov	r4, r2
 800e874:	461a      	mov	r2, r3
 800e876:	4b09      	ldr	r3, [pc, #36]	; (800e89c <__assert_func+0x2c>)
 800e878:	4605      	mov	r5, r0
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68d8      	ldr	r0, [r3, #12]
 800e87e:	b14c      	cbz	r4, 800e894 <__assert_func+0x24>
 800e880:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <__assert_func+0x30>)
 800e882:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e886:	9100      	str	r1, [sp, #0]
 800e888:	462b      	mov	r3, r5
 800e88a:	4906      	ldr	r1, [pc, #24]	; (800e8a4 <__assert_func+0x34>)
 800e88c:	f000 fbca 	bl	800f024 <fiprintf>
 800e890:	f000 fbda 	bl	800f048 <abort>
 800e894:	4b04      	ldr	r3, [pc, #16]	; (800e8a8 <__assert_func+0x38>)
 800e896:	461c      	mov	r4, r3
 800e898:	e7f3      	b.n	800e882 <__assert_func+0x12>
 800e89a:	bf00      	nop
 800e89c:	20000068 	.word	0x20000068
 800e8a0:	0800f622 	.word	0x0800f622
 800e8a4:	0800f62f 	.word	0x0800f62f
 800e8a8:	0800f65d 	.word	0x0800f65d

0800e8ac <_calloc_r>:
 800e8ac:	b570      	push	{r4, r5, r6, lr}
 800e8ae:	fba1 5402 	umull	r5, r4, r1, r2
 800e8b2:	b934      	cbnz	r4, 800e8c2 <_calloc_r+0x16>
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	f7fe f80b 	bl	800c8d0 <_malloc_r>
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	b928      	cbnz	r0, 800e8ca <_calloc_r+0x1e>
 800e8be:	4630      	mov	r0, r6
 800e8c0:	bd70      	pop	{r4, r5, r6, pc}
 800e8c2:	220c      	movs	r2, #12
 800e8c4:	2600      	movs	r6, #0
 800e8c6:	6002      	str	r2, [r0, #0]
 800e8c8:	e7f9      	b.n	800e8be <_calloc_r+0x12>
 800e8ca:	462a      	mov	r2, r5
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	f7fd f883 	bl	800b9d8 <memset>
 800e8d2:	e7f4      	b.n	800e8be <_calloc_r+0x12>

0800e8d4 <rshift>:
 800e8d4:	6903      	ldr	r3, [r0, #16]
 800e8d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e8de:	f100 0414 	add.w	r4, r0, #20
 800e8e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e8e6:	dd46      	ble.n	800e976 <rshift+0xa2>
 800e8e8:	f011 011f 	ands.w	r1, r1, #31
 800e8ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e8f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e8f4:	d10c      	bne.n	800e910 <rshift+0x3c>
 800e8f6:	4629      	mov	r1, r5
 800e8f8:	f100 0710 	add.w	r7, r0, #16
 800e8fc:	42b1      	cmp	r1, r6
 800e8fe:	d335      	bcc.n	800e96c <rshift+0x98>
 800e900:	1a9b      	subs	r3, r3, r2
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	1eea      	subs	r2, r5, #3
 800e906:	4296      	cmp	r6, r2
 800e908:	bf38      	it	cc
 800e90a:	2300      	movcc	r3, #0
 800e90c:	4423      	add	r3, r4
 800e90e:	e015      	b.n	800e93c <rshift+0x68>
 800e910:	46a1      	mov	r9, r4
 800e912:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e916:	f1c1 0820 	rsb	r8, r1, #32
 800e91a:	40cf      	lsrs	r7, r1
 800e91c:	f105 0e04 	add.w	lr, r5, #4
 800e920:	4576      	cmp	r6, lr
 800e922:	46f4      	mov	ip, lr
 800e924:	d816      	bhi.n	800e954 <rshift+0x80>
 800e926:	1a9a      	subs	r2, r3, r2
 800e928:	0092      	lsls	r2, r2, #2
 800e92a:	3a04      	subs	r2, #4
 800e92c:	3501      	adds	r5, #1
 800e92e:	42ae      	cmp	r6, r5
 800e930:	bf38      	it	cc
 800e932:	2200      	movcc	r2, #0
 800e934:	18a3      	adds	r3, r4, r2
 800e936:	50a7      	str	r7, [r4, r2]
 800e938:	b107      	cbz	r7, 800e93c <rshift+0x68>
 800e93a:	3304      	adds	r3, #4
 800e93c:	42a3      	cmp	r3, r4
 800e93e:	eba3 0204 	sub.w	r2, r3, r4
 800e942:	bf08      	it	eq
 800e944:	2300      	moveq	r3, #0
 800e946:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e94a:	6102      	str	r2, [r0, #16]
 800e94c:	bf08      	it	eq
 800e94e:	6143      	streq	r3, [r0, #20]
 800e950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e954:	f8dc c000 	ldr.w	ip, [ip]
 800e958:	fa0c fc08 	lsl.w	ip, ip, r8
 800e95c:	ea4c 0707 	orr.w	r7, ip, r7
 800e960:	f849 7b04 	str.w	r7, [r9], #4
 800e964:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e968:	40cf      	lsrs	r7, r1
 800e96a:	e7d9      	b.n	800e920 <rshift+0x4c>
 800e96c:	f851 cb04 	ldr.w	ip, [r1], #4
 800e970:	f847 cf04 	str.w	ip, [r7, #4]!
 800e974:	e7c2      	b.n	800e8fc <rshift+0x28>
 800e976:	4623      	mov	r3, r4
 800e978:	e7e0      	b.n	800e93c <rshift+0x68>

0800e97a <__hexdig_fun>:
 800e97a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e97e:	2b09      	cmp	r3, #9
 800e980:	d802      	bhi.n	800e988 <__hexdig_fun+0xe>
 800e982:	3820      	subs	r0, #32
 800e984:	b2c0      	uxtb	r0, r0
 800e986:	4770      	bx	lr
 800e988:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e98c:	2b05      	cmp	r3, #5
 800e98e:	d801      	bhi.n	800e994 <__hexdig_fun+0x1a>
 800e990:	3847      	subs	r0, #71	; 0x47
 800e992:	e7f7      	b.n	800e984 <__hexdig_fun+0xa>
 800e994:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e998:	2b05      	cmp	r3, #5
 800e99a:	d801      	bhi.n	800e9a0 <__hexdig_fun+0x26>
 800e99c:	3827      	subs	r0, #39	; 0x27
 800e99e:	e7f1      	b.n	800e984 <__hexdig_fun+0xa>
 800e9a0:	2000      	movs	r0, #0
 800e9a2:	4770      	bx	lr

0800e9a4 <__gethex>:
 800e9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a8:	4681      	mov	r9, r0
 800e9aa:	468a      	mov	sl, r1
 800e9ac:	4617      	mov	r7, r2
 800e9ae:	680a      	ldr	r2, [r1, #0]
 800e9b0:	b085      	sub	sp, #20
 800e9b2:	f102 0b02 	add.w	fp, r2, #2
 800e9b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e9ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e9be:	9302      	str	r3, [sp, #8]
 800e9c0:	32fe      	adds	r2, #254	; 0xfe
 800e9c2:	eb02 030b 	add.w	r3, r2, fp
 800e9c6:	46d8      	mov	r8, fp
 800e9c8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	2830      	cmp	r0, #48	; 0x30
 800e9d0:	d0f7      	beq.n	800e9c2 <__gethex+0x1e>
 800e9d2:	f7ff ffd2 	bl	800e97a <__hexdig_fun>
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	d138      	bne.n	800ea4e <__gethex+0xaa>
 800e9dc:	2201      	movs	r2, #1
 800e9de:	4640      	mov	r0, r8
 800e9e0:	49a7      	ldr	r1, [pc, #668]	; (800ec80 <__gethex+0x2dc>)
 800e9e2:	f7ff fefa 	bl	800e7da <strncmp>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d169      	bne.n	800eac0 <__gethex+0x11c>
 800e9ec:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e9f0:	465d      	mov	r5, fp
 800e9f2:	f7ff ffc2 	bl	800e97a <__hexdig_fun>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d064      	beq.n	800eac4 <__gethex+0x120>
 800e9fa:	465a      	mov	r2, fp
 800e9fc:	7810      	ldrb	r0, [r2, #0]
 800e9fe:	4690      	mov	r8, r2
 800ea00:	2830      	cmp	r0, #48	; 0x30
 800ea02:	f102 0201 	add.w	r2, r2, #1
 800ea06:	d0f9      	beq.n	800e9fc <__gethex+0x58>
 800ea08:	f7ff ffb7 	bl	800e97a <__hexdig_fun>
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	fab0 f480 	clz	r4, r0
 800ea12:	465e      	mov	r6, fp
 800ea14:	0964      	lsrs	r4, r4, #5
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	4642      	mov	r2, r8
 800ea1a:	4615      	mov	r5, r2
 800ea1c:	7828      	ldrb	r0, [r5, #0]
 800ea1e:	3201      	adds	r2, #1
 800ea20:	f7ff ffab 	bl	800e97a <__hexdig_fun>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d1f8      	bne.n	800ea1a <__gethex+0x76>
 800ea28:	2201      	movs	r2, #1
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	4994      	ldr	r1, [pc, #592]	; (800ec80 <__gethex+0x2dc>)
 800ea2e:	f7ff fed4 	bl	800e7da <strncmp>
 800ea32:	b978      	cbnz	r0, 800ea54 <__gethex+0xb0>
 800ea34:	b946      	cbnz	r6, 800ea48 <__gethex+0xa4>
 800ea36:	1c6e      	adds	r6, r5, #1
 800ea38:	4632      	mov	r2, r6
 800ea3a:	4615      	mov	r5, r2
 800ea3c:	7828      	ldrb	r0, [r5, #0]
 800ea3e:	3201      	adds	r2, #1
 800ea40:	f7ff ff9b 	bl	800e97a <__hexdig_fun>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d1f8      	bne.n	800ea3a <__gethex+0x96>
 800ea48:	1b73      	subs	r3, r6, r5
 800ea4a:	009e      	lsls	r6, r3, #2
 800ea4c:	e004      	b.n	800ea58 <__gethex+0xb4>
 800ea4e:	2400      	movs	r4, #0
 800ea50:	4626      	mov	r6, r4
 800ea52:	e7e1      	b.n	800ea18 <__gethex+0x74>
 800ea54:	2e00      	cmp	r6, #0
 800ea56:	d1f7      	bne.n	800ea48 <__gethex+0xa4>
 800ea58:	782b      	ldrb	r3, [r5, #0]
 800ea5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ea5e:	2b50      	cmp	r3, #80	; 0x50
 800ea60:	d13d      	bne.n	800eade <__gethex+0x13a>
 800ea62:	786b      	ldrb	r3, [r5, #1]
 800ea64:	2b2b      	cmp	r3, #43	; 0x2b
 800ea66:	d02f      	beq.n	800eac8 <__gethex+0x124>
 800ea68:	2b2d      	cmp	r3, #45	; 0x2d
 800ea6a:	d031      	beq.n	800ead0 <__gethex+0x12c>
 800ea6c:	f04f 0b00 	mov.w	fp, #0
 800ea70:	1c69      	adds	r1, r5, #1
 800ea72:	7808      	ldrb	r0, [r1, #0]
 800ea74:	f7ff ff81 	bl	800e97a <__hexdig_fun>
 800ea78:	1e42      	subs	r2, r0, #1
 800ea7a:	b2d2      	uxtb	r2, r2
 800ea7c:	2a18      	cmp	r2, #24
 800ea7e:	d82e      	bhi.n	800eade <__gethex+0x13a>
 800ea80:	f1a0 0210 	sub.w	r2, r0, #16
 800ea84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea88:	f7ff ff77 	bl	800e97a <__hexdig_fun>
 800ea8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ea90:	fa5f fc8c 	uxtb.w	ip, ip
 800ea94:	f1bc 0f18 	cmp.w	ip, #24
 800ea98:	d91d      	bls.n	800ead6 <__gethex+0x132>
 800ea9a:	f1bb 0f00 	cmp.w	fp, #0
 800ea9e:	d000      	beq.n	800eaa2 <__gethex+0xfe>
 800eaa0:	4252      	negs	r2, r2
 800eaa2:	4416      	add	r6, r2
 800eaa4:	f8ca 1000 	str.w	r1, [sl]
 800eaa8:	b1dc      	cbz	r4, 800eae2 <__gethex+0x13e>
 800eaaa:	9b01      	ldr	r3, [sp, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	bf14      	ite	ne
 800eab0:	f04f 0800 	movne.w	r8, #0
 800eab4:	f04f 0806 	moveq.w	r8, #6
 800eab8:	4640      	mov	r0, r8
 800eaba:	b005      	add	sp, #20
 800eabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac0:	4645      	mov	r5, r8
 800eac2:	4626      	mov	r6, r4
 800eac4:	2401      	movs	r4, #1
 800eac6:	e7c7      	b.n	800ea58 <__gethex+0xb4>
 800eac8:	f04f 0b00 	mov.w	fp, #0
 800eacc:	1ca9      	adds	r1, r5, #2
 800eace:	e7d0      	b.n	800ea72 <__gethex+0xce>
 800ead0:	f04f 0b01 	mov.w	fp, #1
 800ead4:	e7fa      	b.n	800eacc <__gethex+0x128>
 800ead6:	230a      	movs	r3, #10
 800ead8:	fb03 0002 	mla	r0, r3, r2, r0
 800eadc:	e7d0      	b.n	800ea80 <__gethex+0xdc>
 800eade:	4629      	mov	r1, r5
 800eae0:	e7e0      	b.n	800eaa4 <__gethex+0x100>
 800eae2:	4621      	mov	r1, r4
 800eae4:	eba5 0308 	sub.w	r3, r5, r8
 800eae8:	3b01      	subs	r3, #1
 800eaea:	2b07      	cmp	r3, #7
 800eaec:	dc0a      	bgt.n	800eb04 <__gethex+0x160>
 800eaee:	4648      	mov	r0, r9
 800eaf0:	f7fd ff7a 	bl	800c9e8 <_Balloc>
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	b940      	cbnz	r0, 800eb0a <__gethex+0x166>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	21e4      	movs	r1, #228	; 0xe4
 800eafc:	4b61      	ldr	r3, [pc, #388]	; (800ec84 <__gethex+0x2e0>)
 800eafe:	4862      	ldr	r0, [pc, #392]	; (800ec88 <__gethex+0x2e4>)
 800eb00:	f7ff feb6 	bl	800e870 <__assert_func>
 800eb04:	3101      	adds	r1, #1
 800eb06:	105b      	asrs	r3, r3, #1
 800eb08:	e7ef      	b.n	800eaea <__gethex+0x146>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	469b      	mov	fp, r3
 800eb0e:	f100 0a14 	add.w	sl, r0, #20
 800eb12:	f8cd a004 	str.w	sl, [sp, #4]
 800eb16:	45a8      	cmp	r8, r5
 800eb18:	d344      	bcc.n	800eba4 <__gethex+0x200>
 800eb1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb1e:	4658      	mov	r0, fp
 800eb20:	f848 bb04 	str.w	fp, [r8], #4
 800eb24:	eba8 080a 	sub.w	r8, r8, sl
 800eb28:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800eb2c:	6122      	str	r2, [r4, #16]
 800eb2e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800eb32:	f7fe f84b 	bl	800cbcc <__hi0bits>
 800eb36:	683d      	ldr	r5, [r7, #0]
 800eb38:	eba8 0800 	sub.w	r8, r8, r0
 800eb3c:	45a8      	cmp	r8, r5
 800eb3e:	dd59      	ble.n	800ebf4 <__gethex+0x250>
 800eb40:	eba8 0805 	sub.w	r8, r8, r5
 800eb44:	4641      	mov	r1, r8
 800eb46:	4620      	mov	r0, r4
 800eb48:	f7fe fbc9 	bl	800d2de <__any_on>
 800eb4c:	4683      	mov	fp, r0
 800eb4e:	b1b8      	cbz	r0, 800eb80 <__gethex+0x1dc>
 800eb50:	f04f 0b01 	mov.w	fp, #1
 800eb54:	f108 33ff 	add.w	r3, r8, #4294967295
 800eb58:	1159      	asrs	r1, r3, #5
 800eb5a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800eb5e:	f003 021f 	and.w	r2, r3, #31
 800eb62:	fa0b f202 	lsl.w	r2, fp, r2
 800eb66:	420a      	tst	r2, r1
 800eb68:	d00a      	beq.n	800eb80 <__gethex+0x1dc>
 800eb6a:	455b      	cmp	r3, fp
 800eb6c:	dd06      	ble.n	800eb7c <__gethex+0x1d8>
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f1a8 0102 	sub.w	r1, r8, #2
 800eb74:	f7fe fbb3 	bl	800d2de <__any_on>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d138      	bne.n	800ebee <__gethex+0x24a>
 800eb7c:	f04f 0b02 	mov.w	fp, #2
 800eb80:	4641      	mov	r1, r8
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7ff fea6 	bl	800e8d4 <rshift>
 800eb88:	4446      	add	r6, r8
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	42b3      	cmp	r3, r6
 800eb8e:	da41      	bge.n	800ec14 <__gethex+0x270>
 800eb90:	4621      	mov	r1, r4
 800eb92:	4648      	mov	r0, r9
 800eb94:	f7fd ff68 	bl	800ca68 <_Bfree>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb9c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800eba0:	6013      	str	r3, [r2, #0]
 800eba2:	e789      	b.n	800eab8 <__gethex+0x114>
 800eba4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800eba8:	2a2e      	cmp	r2, #46	; 0x2e
 800ebaa:	d014      	beq.n	800ebd6 <__gethex+0x232>
 800ebac:	2b20      	cmp	r3, #32
 800ebae:	d106      	bne.n	800ebbe <__gethex+0x21a>
 800ebb0:	9b01      	ldr	r3, [sp, #4]
 800ebb2:	f843 bb04 	str.w	fp, [r3], #4
 800ebb6:	f04f 0b00 	mov.w	fp, #0
 800ebba:	9301      	str	r3, [sp, #4]
 800ebbc:	465b      	mov	r3, fp
 800ebbe:	7828      	ldrb	r0, [r5, #0]
 800ebc0:	9303      	str	r3, [sp, #12]
 800ebc2:	f7ff feda 	bl	800e97a <__hexdig_fun>
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	f000 000f 	and.w	r0, r0, #15
 800ebcc:	4098      	lsls	r0, r3
 800ebce:	ea4b 0b00 	orr.w	fp, fp, r0
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	e79f      	b.n	800eb16 <__gethex+0x172>
 800ebd6:	45a8      	cmp	r8, r5
 800ebd8:	d8e8      	bhi.n	800ebac <__gethex+0x208>
 800ebda:	2201      	movs	r2, #1
 800ebdc:	4628      	mov	r0, r5
 800ebde:	4928      	ldr	r1, [pc, #160]	; (800ec80 <__gethex+0x2dc>)
 800ebe0:	9303      	str	r3, [sp, #12]
 800ebe2:	f7ff fdfa 	bl	800e7da <strncmp>
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d1df      	bne.n	800ebac <__gethex+0x208>
 800ebec:	e793      	b.n	800eb16 <__gethex+0x172>
 800ebee:	f04f 0b03 	mov.w	fp, #3
 800ebf2:	e7c5      	b.n	800eb80 <__gethex+0x1dc>
 800ebf4:	da0b      	bge.n	800ec0e <__gethex+0x26a>
 800ebf6:	eba5 0808 	sub.w	r8, r5, r8
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4642      	mov	r2, r8
 800ebfe:	4648      	mov	r0, r9
 800ec00:	f7fe f94a 	bl	800ce98 <__lshift>
 800ec04:	4604      	mov	r4, r0
 800ec06:	eba6 0608 	sub.w	r6, r6, r8
 800ec0a:	f100 0a14 	add.w	sl, r0, #20
 800ec0e:	f04f 0b00 	mov.w	fp, #0
 800ec12:	e7ba      	b.n	800eb8a <__gethex+0x1e6>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	42b3      	cmp	r3, r6
 800ec18:	dd74      	ble.n	800ed04 <__gethex+0x360>
 800ec1a:	1b9e      	subs	r6, r3, r6
 800ec1c:	42b5      	cmp	r5, r6
 800ec1e:	dc35      	bgt.n	800ec8c <__gethex+0x2e8>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d023      	beq.n	800ec6e <__gethex+0x2ca>
 800ec26:	2b03      	cmp	r3, #3
 800ec28:	d025      	beq.n	800ec76 <__gethex+0x2d2>
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d115      	bne.n	800ec5a <__gethex+0x2b6>
 800ec2e:	42b5      	cmp	r5, r6
 800ec30:	d113      	bne.n	800ec5a <__gethex+0x2b6>
 800ec32:	2d01      	cmp	r5, #1
 800ec34:	d10b      	bne.n	800ec4e <__gethex+0x2aa>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	9a02      	ldr	r2, [sp, #8]
 800ec3a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ec3e:	6013      	str	r3, [r2, #0]
 800ec40:	2301      	movs	r3, #1
 800ec42:	6123      	str	r3, [r4, #16]
 800ec44:	f8ca 3000 	str.w	r3, [sl]
 800ec48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec4a:	601c      	str	r4, [r3, #0]
 800ec4c:	e734      	b.n	800eab8 <__gethex+0x114>
 800ec4e:	4620      	mov	r0, r4
 800ec50:	1e69      	subs	r1, r5, #1
 800ec52:	f7fe fb44 	bl	800d2de <__any_on>
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d1ed      	bne.n	800ec36 <__gethex+0x292>
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	4648      	mov	r0, r9
 800ec5e:	f7fd ff03 	bl	800ca68 <_Bfree>
 800ec62:	2300      	movs	r3, #0
 800ec64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec66:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ec6a:	6013      	str	r3, [r2, #0]
 800ec6c:	e724      	b.n	800eab8 <__gethex+0x114>
 800ec6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1f2      	bne.n	800ec5a <__gethex+0x2b6>
 800ec74:	e7df      	b.n	800ec36 <__gethex+0x292>
 800ec76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1dc      	bne.n	800ec36 <__gethex+0x292>
 800ec7c:	e7ed      	b.n	800ec5a <__gethex+0x2b6>
 800ec7e:	bf00      	nop
 800ec80:	0800f4b4 	.word	0x0800f4b4
 800ec84:	0800f347 	.word	0x0800f347
 800ec88:	0800f65e 	.word	0x0800f65e
 800ec8c:	f106 38ff 	add.w	r8, r6, #4294967295
 800ec90:	f1bb 0f00 	cmp.w	fp, #0
 800ec94:	d133      	bne.n	800ecfe <__gethex+0x35a>
 800ec96:	f1b8 0f00 	cmp.w	r8, #0
 800ec9a:	d004      	beq.n	800eca6 <__gethex+0x302>
 800ec9c:	4641      	mov	r1, r8
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f7fe fb1d 	bl	800d2de <__any_on>
 800eca4:	4683      	mov	fp, r0
 800eca6:	2301      	movs	r3, #1
 800eca8:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ecac:	f008 081f 	and.w	r8, r8, #31
 800ecb0:	fa03 f308 	lsl.w	r3, r3, r8
 800ecb4:	f04f 0802 	mov.w	r8, #2
 800ecb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4213      	tst	r3, r2
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	bf18      	it	ne
 800ecc4:	f04b 0b02 	orrne.w	fp, fp, #2
 800ecc8:	1bad      	subs	r5, r5, r6
 800ecca:	f7ff fe03 	bl	800e8d4 <rshift>
 800ecce:	687e      	ldr	r6, [r7, #4]
 800ecd0:	f1bb 0f00 	cmp.w	fp, #0
 800ecd4:	d04a      	beq.n	800ed6c <__gethex+0x3c8>
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d016      	beq.n	800ed0a <__gethex+0x366>
 800ecdc:	2b03      	cmp	r3, #3
 800ecde:	d018      	beq.n	800ed12 <__gethex+0x36e>
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d109      	bne.n	800ecf8 <__gethex+0x354>
 800ece4:	f01b 0f02 	tst.w	fp, #2
 800ece8:	d006      	beq.n	800ecf8 <__gethex+0x354>
 800ecea:	f8da 3000 	ldr.w	r3, [sl]
 800ecee:	ea4b 0b03 	orr.w	fp, fp, r3
 800ecf2:	f01b 0f01 	tst.w	fp, #1
 800ecf6:	d10f      	bne.n	800ed18 <__gethex+0x374>
 800ecf8:	f048 0810 	orr.w	r8, r8, #16
 800ecfc:	e036      	b.n	800ed6c <__gethex+0x3c8>
 800ecfe:	f04f 0b01 	mov.w	fp, #1
 800ed02:	e7d0      	b.n	800eca6 <__gethex+0x302>
 800ed04:	f04f 0801 	mov.w	r8, #1
 800ed08:	e7e2      	b.n	800ecd0 <__gethex+0x32c>
 800ed0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed0c:	f1c3 0301 	rsb	r3, r3, #1
 800ed10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0ef      	beq.n	800ecf8 <__gethex+0x354>
 800ed18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed1c:	f104 0214 	add.w	r2, r4, #20
 800ed20:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ed24:	9301      	str	r3, [sp, #4]
 800ed26:	2300      	movs	r3, #0
 800ed28:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ed2c:	4694      	mov	ip, r2
 800ed2e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ed32:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ed36:	d01e      	beq.n	800ed76 <__gethex+0x3d2>
 800ed38:	3101      	adds	r1, #1
 800ed3a:	f8cc 1000 	str.w	r1, [ip]
 800ed3e:	f1b8 0f02 	cmp.w	r8, #2
 800ed42:	f104 0214 	add.w	r2, r4, #20
 800ed46:	d13d      	bne.n	800edc4 <__gethex+0x420>
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	42ab      	cmp	r3, r5
 800ed4e:	d10b      	bne.n	800ed68 <__gethex+0x3c4>
 800ed50:	2301      	movs	r3, #1
 800ed52:	1169      	asrs	r1, r5, #5
 800ed54:	f005 051f 	and.w	r5, r5, #31
 800ed58:	fa03 f505 	lsl.w	r5, r3, r5
 800ed5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed60:	421d      	tst	r5, r3
 800ed62:	bf18      	it	ne
 800ed64:	f04f 0801 	movne.w	r8, #1
 800ed68:	f048 0820 	orr.w	r8, r8, #32
 800ed6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed6e:	601c      	str	r4, [r3, #0]
 800ed70:	9b02      	ldr	r3, [sp, #8]
 800ed72:	601e      	str	r6, [r3, #0]
 800ed74:	e6a0      	b.n	800eab8 <__gethex+0x114>
 800ed76:	4290      	cmp	r0, r2
 800ed78:	f842 3c04 	str.w	r3, [r2, #-4]
 800ed7c:	d8d6      	bhi.n	800ed2c <__gethex+0x388>
 800ed7e:	68a2      	ldr	r2, [r4, #8]
 800ed80:	4593      	cmp	fp, r2
 800ed82:	db17      	blt.n	800edb4 <__gethex+0x410>
 800ed84:	6861      	ldr	r1, [r4, #4]
 800ed86:	4648      	mov	r0, r9
 800ed88:	3101      	adds	r1, #1
 800ed8a:	f7fd fe2d 	bl	800c9e8 <_Balloc>
 800ed8e:	4682      	mov	sl, r0
 800ed90:	b918      	cbnz	r0, 800ed9a <__gethex+0x3f6>
 800ed92:	4602      	mov	r2, r0
 800ed94:	2184      	movs	r1, #132	; 0x84
 800ed96:	4b1a      	ldr	r3, [pc, #104]	; (800ee00 <__gethex+0x45c>)
 800ed98:	e6b1      	b.n	800eafe <__gethex+0x15a>
 800ed9a:	6922      	ldr	r2, [r4, #16]
 800ed9c:	f104 010c 	add.w	r1, r4, #12
 800eda0:	3202      	adds	r2, #2
 800eda2:	0092      	lsls	r2, r2, #2
 800eda4:	300c      	adds	r0, #12
 800eda6:	f7fc fea3 	bl	800baf0 <memcpy>
 800edaa:	4621      	mov	r1, r4
 800edac:	4648      	mov	r0, r9
 800edae:	f7fd fe5b 	bl	800ca68 <_Bfree>
 800edb2:	4654      	mov	r4, sl
 800edb4:	6922      	ldr	r2, [r4, #16]
 800edb6:	1c51      	adds	r1, r2, #1
 800edb8:	6121      	str	r1, [r4, #16]
 800edba:	2101      	movs	r1, #1
 800edbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800edc0:	6151      	str	r1, [r2, #20]
 800edc2:	e7bc      	b.n	800ed3e <__gethex+0x39a>
 800edc4:	6921      	ldr	r1, [r4, #16]
 800edc6:	4559      	cmp	r1, fp
 800edc8:	dd0b      	ble.n	800ede2 <__gethex+0x43e>
 800edca:	2101      	movs	r1, #1
 800edcc:	4620      	mov	r0, r4
 800edce:	f7ff fd81 	bl	800e8d4 <rshift>
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	3601      	adds	r6, #1
 800edd6:	42b3      	cmp	r3, r6
 800edd8:	f6ff aeda 	blt.w	800eb90 <__gethex+0x1ec>
 800eddc:	f04f 0801 	mov.w	r8, #1
 800ede0:	e7c2      	b.n	800ed68 <__gethex+0x3c4>
 800ede2:	f015 051f 	ands.w	r5, r5, #31
 800ede6:	d0f9      	beq.n	800eddc <__gethex+0x438>
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	f1c5 0520 	rsb	r5, r5, #32
 800edee:	441a      	add	r2, r3
 800edf0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800edf4:	f7fd feea 	bl	800cbcc <__hi0bits>
 800edf8:	42a8      	cmp	r0, r5
 800edfa:	dbe6      	blt.n	800edca <__gethex+0x426>
 800edfc:	e7ee      	b.n	800eddc <__gethex+0x438>
 800edfe:	bf00      	nop
 800ee00:	0800f347 	.word	0x0800f347

0800ee04 <L_shift>:
 800ee04:	f1c2 0208 	rsb	r2, r2, #8
 800ee08:	0092      	lsls	r2, r2, #2
 800ee0a:	b570      	push	{r4, r5, r6, lr}
 800ee0c:	f1c2 0620 	rsb	r6, r2, #32
 800ee10:	6843      	ldr	r3, [r0, #4]
 800ee12:	6804      	ldr	r4, [r0, #0]
 800ee14:	fa03 f506 	lsl.w	r5, r3, r6
 800ee18:	432c      	orrs	r4, r5
 800ee1a:	40d3      	lsrs	r3, r2
 800ee1c:	6004      	str	r4, [r0, #0]
 800ee1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee22:	4288      	cmp	r0, r1
 800ee24:	d3f4      	bcc.n	800ee10 <L_shift+0xc>
 800ee26:	bd70      	pop	{r4, r5, r6, pc}

0800ee28 <__match>:
 800ee28:	b530      	push	{r4, r5, lr}
 800ee2a:	6803      	ldr	r3, [r0, #0]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee32:	b914      	cbnz	r4, 800ee3a <__match+0x12>
 800ee34:	6003      	str	r3, [r0, #0]
 800ee36:	2001      	movs	r0, #1
 800ee38:	bd30      	pop	{r4, r5, pc}
 800ee3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ee42:	2d19      	cmp	r5, #25
 800ee44:	bf98      	it	ls
 800ee46:	3220      	addls	r2, #32
 800ee48:	42a2      	cmp	r2, r4
 800ee4a:	d0f0      	beq.n	800ee2e <__match+0x6>
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	e7f3      	b.n	800ee38 <__match+0x10>

0800ee50 <__hexnan>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	2500      	movs	r5, #0
 800ee56:	680b      	ldr	r3, [r1, #0]
 800ee58:	4682      	mov	sl, r0
 800ee5a:	115e      	asrs	r6, r3, #5
 800ee5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee60:	f013 031f 	ands.w	r3, r3, #31
 800ee64:	bf18      	it	ne
 800ee66:	3604      	addne	r6, #4
 800ee68:	1f37      	subs	r7, r6, #4
 800ee6a:	4690      	mov	r8, r2
 800ee6c:	46b9      	mov	r9, r7
 800ee6e:	463c      	mov	r4, r7
 800ee70:	46ab      	mov	fp, r5
 800ee72:	b087      	sub	sp, #28
 800ee74:	6801      	ldr	r1, [r0, #0]
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee7c:	9502      	str	r5, [sp, #8]
 800ee7e:	784a      	ldrb	r2, [r1, #1]
 800ee80:	1c4b      	adds	r3, r1, #1
 800ee82:	9303      	str	r3, [sp, #12]
 800ee84:	b342      	cbz	r2, 800eed8 <__hexnan+0x88>
 800ee86:	4610      	mov	r0, r2
 800ee88:	9105      	str	r1, [sp, #20]
 800ee8a:	9204      	str	r2, [sp, #16]
 800ee8c:	f7ff fd75 	bl	800e97a <__hexdig_fun>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d14f      	bne.n	800ef34 <__hexnan+0xe4>
 800ee94:	9a04      	ldr	r2, [sp, #16]
 800ee96:	9905      	ldr	r1, [sp, #20]
 800ee98:	2a20      	cmp	r2, #32
 800ee9a:	d818      	bhi.n	800eece <__hexnan+0x7e>
 800ee9c:	9b02      	ldr	r3, [sp, #8]
 800ee9e:	459b      	cmp	fp, r3
 800eea0:	dd13      	ble.n	800eeca <__hexnan+0x7a>
 800eea2:	454c      	cmp	r4, r9
 800eea4:	d206      	bcs.n	800eeb4 <__hexnan+0x64>
 800eea6:	2d07      	cmp	r5, #7
 800eea8:	dc04      	bgt.n	800eeb4 <__hexnan+0x64>
 800eeaa:	462a      	mov	r2, r5
 800eeac:	4649      	mov	r1, r9
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f7ff ffa8 	bl	800ee04 <L_shift>
 800eeb4:	4544      	cmp	r4, r8
 800eeb6:	d950      	bls.n	800ef5a <__hexnan+0x10a>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	f1a4 0904 	sub.w	r9, r4, #4
 800eebe:	f844 3c04 	str.w	r3, [r4, #-4]
 800eec2:	461d      	mov	r5, r3
 800eec4:	464c      	mov	r4, r9
 800eec6:	f8cd b008 	str.w	fp, [sp, #8]
 800eeca:	9903      	ldr	r1, [sp, #12]
 800eecc:	e7d7      	b.n	800ee7e <__hexnan+0x2e>
 800eece:	2a29      	cmp	r2, #41	; 0x29
 800eed0:	d155      	bne.n	800ef7e <__hexnan+0x12e>
 800eed2:	3102      	adds	r1, #2
 800eed4:	f8ca 1000 	str.w	r1, [sl]
 800eed8:	f1bb 0f00 	cmp.w	fp, #0
 800eedc:	d04f      	beq.n	800ef7e <__hexnan+0x12e>
 800eede:	454c      	cmp	r4, r9
 800eee0:	d206      	bcs.n	800eef0 <__hexnan+0xa0>
 800eee2:	2d07      	cmp	r5, #7
 800eee4:	dc04      	bgt.n	800eef0 <__hexnan+0xa0>
 800eee6:	462a      	mov	r2, r5
 800eee8:	4649      	mov	r1, r9
 800eeea:	4620      	mov	r0, r4
 800eeec:	f7ff ff8a 	bl	800ee04 <L_shift>
 800eef0:	4544      	cmp	r4, r8
 800eef2:	d934      	bls.n	800ef5e <__hexnan+0x10e>
 800eef4:	4623      	mov	r3, r4
 800eef6:	f1a8 0204 	sub.w	r2, r8, #4
 800eefa:	f853 1b04 	ldr.w	r1, [r3], #4
 800eefe:	429f      	cmp	r7, r3
 800ef00:	f842 1f04 	str.w	r1, [r2, #4]!
 800ef04:	d2f9      	bcs.n	800eefa <__hexnan+0xaa>
 800ef06:	1b3b      	subs	r3, r7, r4
 800ef08:	f023 0303 	bic.w	r3, r3, #3
 800ef0c:	3304      	adds	r3, #4
 800ef0e:	3e03      	subs	r6, #3
 800ef10:	3401      	adds	r4, #1
 800ef12:	42a6      	cmp	r6, r4
 800ef14:	bf38      	it	cc
 800ef16:	2304      	movcc	r3, #4
 800ef18:	2200      	movs	r2, #0
 800ef1a:	4443      	add	r3, r8
 800ef1c:	f843 2b04 	str.w	r2, [r3], #4
 800ef20:	429f      	cmp	r7, r3
 800ef22:	d2fb      	bcs.n	800ef1c <__hexnan+0xcc>
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	b91b      	cbnz	r3, 800ef30 <__hexnan+0xe0>
 800ef28:	4547      	cmp	r7, r8
 800ef2a:	d126      	bne.n	800ef7a <__hexnan+0x12a>
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	2005      	movs	r0, #5
 800ef32:	e025      	b.n	800ef80 <__hexnan+0x130>
 800ef34:	3501      	adds	r5, #1
 800ef36:	2d08      	cmp	r5, #8
 800ef38:	f10b 0b01 	add.w	fp, fp, #1
 800ef3c:	dd06      	ble.n	800ef4c <__hexnan+0xfc>
 800ef3e:	4544      	cmp	r4, r8
 800ef40:	d9c3      	bls.n	800eeca <__hexnan+0x7a>
 800ef42:	2300      	movs	r3, #0
 800ef44:	2501      	movs	r5, #1
 800ef46:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef4a:	3c04      	subs	r4, #4
 800ef4c:	6822      	ldr	r2, [r4, #0]
 800ef4e:	f000 000f 	and.w	r0, r0, #15
 800ef52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef56:	6020      	str	r0, [r4, #0]
 800ef58:	e7b7      	b.n	800eeca <__hexnan+0x7a>
 800ef5a:	2508      	movs	r5, #8
 800ef5c:	e7b5      	b.n	800eeca <__hexnan+0x7a>
 800ef5e:	9b01      	ldr	r3, [sp, #4]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d0df      	beq.n	800ef24 <__hexnan+0xd4>
 800ef64:	f04f 32ff 	mov.w	r2, #4294967295
 800ef68:	f1c3 0320 	rsb	r3, r3, #32
 800ef6c:	40da      	lsrs	r2, r3
 800ef6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ef72:	4013      	ands	r3, r2
 800ef74:	f846 3c04 	str.w	r3, [r6, #-4]
 800ef78:	e7d4      	b.n	800ef24 <__hexnan+0xd4>
 800ef7a:	3f04      	subs	r7, #4
 800ef7c:	e7d2      	b.n	800ef24 <__hexnan+0xd4>
 800ef7e:	2004      	movs	r0, #4
 800ef80:	b007      	add	sp, #28
 800ef82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef86 <__ascii_mbtowc>:
 800ef86:	b082      	sub	sp, #8
 800ef88:	b901      	cbnz	r1, 800ef8c <__ascii_mbtowc+0x6>
 800ef8a:	a901      	add	r1, sp, #4
 800ef8c:	b142      	cbz	r2, 800efa0 <__ascii_mbtowc+0x1a>
 800ef8e:	b14b      	cbz	r3, 800efa4 <__ascii_mbtowc+0x1e>
 800ef90:	7813      	ldrb	r3, [r2, #0]
 800ef92:	600b      	str	r3, [r1, #0]
 800ef94:	7812      	ldrb	r2, [r2, #0]
 800ef96:	1e10      	subs	r0, r2, #0
 800ef98:	bf18      	it	ne
 800ef9a:	2001      	movne	r0, #1
 800ef9c:	b002      	add	sp, #8
 800ef9e:	4770      	bx	lr
 800efa0:	4610      	mov	r0, r2
 800efa2:	e7fb      	b.n	800ef9c <__ascii_mbtowc+0x16>
 800efa4:	f06f 0001 	mvn.w	r0, #1
 800efa8:	e7f8      	b.n	800ef9c <__ascii_mbtowc+0x16>

0800efaa <_realloc_r>:
 800efaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efae:	4680      	mov	r8, r0
 800efb0:	4614      	mov	r4, r2
 800efb2:	460e      	mov	r6, r1
 800efb4:	b921      	cbnz	r1, 800efc0 <_realloc_r+0x16>
 800efb6:	4611      	mov	r1, r2
 800efb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efbc:	f7fd bc88 	b.w	800c8d0 <_malloc_r>
 800efc0:	b92a      	cbnz	r2, 800efce <_realloc_r+0x24>
 800efc2:	f7fd fc15 	bl	800c7f0 <_free_r>
 800efc6:	4625      	mov	r5, r4
 800efc8:	4628      	mov	r0, r5
 800efca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efce:	f000 f842 	bl	800f056 <_malloc_usable_size_r>
 800efd2:	4284      	cmp	r4, r0
 800efd4:	4607      	mov	r7, r0
 800efd6:	d802      	bhi.n	800efde <_realloc_r+0x34>
 800efd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efdc:	d812      	bhi.n	800f004 <_realloc_r+0x5a>
 800efde:	4621      	mov	r1, r4
 800efe0:	4640      	mov	r0, r8
 800efe2:	f7fd fc75 	bl	800c8d0 <_malloc_r>
 800efe6:	4605      	mov	r5, r0
 800efe8:	2800      	cmp	r0, #0
 800efea:	d0ed      	beq.n	800efc8 <_realloc_r+0x1e>
 800efec:	42bc      	cmp	r4, r7
 800efee:	4622      	mov	r2, r4
 800eff0:	4631      	mov	r1, r6
 800eff2:	bf28      	it	cs
 800eff4:	463a      	movcs	r2, r7
 800eff6:	f7fc fd7b 	bl	800baf0 <memcpy>
 800effa:	4631      	mov	r1, r6
 800effc:	4640      	mov	r0, r8
 800effe:	f7fd fbf7 	bl	800c7f0 <_free_r>
 800f002:	e7e1      	b.n	800efc8 <_realloc_r+0x1e>
 800f004:	4635      	mov	r5, r6
 800f006:	e7df      	b.n	800efc8 <_realloc_r+0x1e>

0800f008 <__ascii_wctomb>:
 800f008:	4603      	mov	r3, r0
 800f00a:	4608      	mov	r0, r1
 800f00c:	b141      	cbz	r1, 800f020 <__ascii_wctomb+0x18>
 800f00e:	2aff      	cmp	r2, #255	; 0xff
 800f010:	d904      	bls.n	800f01c <__ascii_wctomb+0x14>
 800f012:	228a      	movs	r2, #138	; 0x8a
 800f014:	f04f 30ff 	mov.w	r0, #4294967295
 800f018:	601a      	str	r2, [r3, #0]
 800f01a:	4770      	bx	lr
 800f01c:	2001      	movs	r0, #1
 800f01e:	700a      	strb	r2, [r1, #0]
 800f020:	4770      	bx	lr
	...

0800f024 <fiprintf>:
 800f024:	b40e      	push	{r1, r2, r3}
 800f026:	b503      	push	{r0, r1, lr}
 800f028:	4601      	mov	r1, r0
 800f02a:	ab03      	add	r3, sp, #12
 800f02c:	4805      	ldr	r0, [pc, #20]	; (800f044 <fiprintf+0x20>)
 800f02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f032:	6800      	ldr	r0, [r0, #0]
 800f034:	9301      	str	r3, [sp, #4]
 800f036:	f7ff f991 	bl	800e35c <_vfiprintf_r>
 800f03a:	b002      	add	sp, #8
 800f03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f040:	b003      	add	sp, #12
 800f042:	4770      	bx	lr
 800f044:	20000068 	.word	0x20000068

0800f048 <abort>:
 800f048:	2006      	movs	r0, #6
 800f04a:	b508      	push	{r3, lr}
 800f04c:	f000 f834 	bl	800f0b8 <raise>
 800f050:	2001      	movs	r0, #1
 800f052:	f7f7 f932 	bl	80062ba <_exit>

0800f056 <_malloc_usable_size_r>:
 800f056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f05a:	1f18      	subs	r0, r3, #4
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfbc      	itt	lt
 800f060:	580b      	ldrlt	r3, [r1, r0]
 800f062:	18c0      	addlt	r0, r0, r3
 800f064:	4770      	bx	lr

0800f066 <_raise_r>:
 800f066:	291f      	cmp	r1, #31
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	4604      	mov	r4, r0
 800f06c:	460d      	mov	r5, r1
 800f06e:	d904      	bls.n	800f07a <_raise_r+0x14>
 800f070:	2316      	movs	r3, #22
 800f072:	6003      	str	r3, [r0, #0]
 800f074:	f04f 30ff 	mov.w	r0, #4294967295
 800f078:	bd38      	pop	{r3, r4, r5, pc}
 800f07a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f07c:	b112      	cbz	r2, 800f084 <_raise_r+0x1e>
 800f07e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f082:	b94b      	cbnz	r3, 800f098 <_raise_r+0x32>
 800f084:	4620      	mov	r0, r4
 800f086:	f000 f831 	bl	800f0ec <_getpid_r>
 800f08a:	462a      	mov	r2, r5
 800f08c:	4601      	mov	r1, r0
 800f08e:	4620      	mov	r0, r4
 800f090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f094:	f000 b818 	b.w	800f0c8 <_kill_r>
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d00a      	beq.n	800f0b2 <_raise_r+0x4c>
 800f09c:	1c59      	adds	r1, r3, #1
 800f09e:	d103      	bne.n	800f0a8 <_raise_r+0x42>
 800f0a0:	2316      	movs	r3, #22
 800f0a2:	6003      	str	r3, [r0, #0]
 800f0a4:	2001      	movs	r0, #1
 800f0a6:	e7e7      	b.n	800f078 <_raise_r+0x12>
 800f0a8:	2400      	movs	r4, #0
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0b0:	4798      	blx	r3
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	e7e0      	b.n	800f078 <_raise_r+0x12>
	...

0800f0b8 <raise>:
 800f0b8:	4b02      	ldr	r3, [pc, #8]	; (800f0c4 <raise+0xc>)
 800f0ba:	4601      	mov	r1, r0
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f7ff bfd2 	b.w	800f066 <_raise_r>
 800f0c2:	bf00      	nop
 800f0c4:	20000068 	.word	0x20000068

0800f0c8 <_kill_r>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4d06      	ldr	r5, [pc, #24]	; (800f0e8 <_kill_r+0x20>)
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	4608      	mov	r0, r1
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	602b      	str	r3, [r5, #0]
 800f0d6:	f7f7 f8e0 	bl	800629a <_kill>
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	d102      	bne.n	800f0e4 <_kill_r+0x1c>
 800f0de:	682b      	ldr	r3, [r5, #0]
 800f0e0:	b103      	cbz	r3, 800f0e4 <_kill_r+0x1c>
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	bd38      	pop	{r3, r4, r5, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20004578 	.word	0x20004578

0800f0ec <_getpid_r>:
 800f0ec:	f7f7 b8ce 	b.w	800628c <_getpid>

0800f0f0 <_init>:
 800f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f2:	bf00      	nop
 800f0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0f6:	bc08      	pop	{r3}
 800f0f8:	469e      	mov	lr, r3
 800f0fa:	4770      	bx	lr

0800f0fc <_fini>:
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	bf00      	nop
 800f100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f102:	bc08      	pop	{r3}
 800f104:	469e      	mov	lr, r3
 800f106:	4770      	bx	lr
