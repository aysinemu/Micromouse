
rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9cc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800cbb8  0800cbb8  0001cbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0b0  0800d0b0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0b0  0800d0b0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0b0  0800d0b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0b0  0800d0b0  0001d0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0b4  0800d0b4  0001d0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d0b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004370  200001e8  0800d29c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004558  0800d29c  00024558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012db3  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be1  00000000  00000000  00033003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00035be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9c  00000000  00000000  00036e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c796  00000000  00000000  00037d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ebd  00000000  00000000  000544b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a35ea  00000000  00000000  0006b36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006488  00000000  00000000  0010e95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00114de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800cb9c 	.word	0x0800cb9c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800cb9c 	.word	0x0800cb9c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <timer_Right>:

uint16_t counterWheel = 0;
int16_t rightWheel = 0;
int16_t leftWheel = 0;

void timer_Right(uint8_t timer){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000cba:	2110      	movs	r1, #16
 8000cbc:	4818      	ldr	r0, [pc, #96]	; (8000d20 <timer_Right+0x70>)
 8000cbe:	f004 f9d6 	bl	800506e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	4815      	ldr	r0, [pc, #84]	; (8000d20 <timer_Right+0x70>)
 8000cca:	f004 f9b8 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	4814      	ldr	r0, [pc, #80]	; (8000d24 <timer_Right+0x74>)
 8000cd4:	f004 f9b3 	bl	800503e <HAL_GPIO_WritePin>
	timerRight += timer;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <timer_Right+0x78>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <timer_Right+0x78>)
 8000ce6:	801a      	strh	r2, [r3, #0]
    if (timerRight > MAX_TIMER_RIGHT_VALUE) {
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <timer_Right+0x78>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d903      	bls.n	8000cfc <timer_Right+0x4c>
    	timerRight = MAX_TIMER_RIGHT_VALUE;
 8000cf4:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <timer_Right+0x78>)
 8000cfa:	801a      	strh	r2, [r3, #0]
    }
    if (timerLeft > MIN_TIMER_LEFT_VALUE) {
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <timer_Right+0x7c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	f640 3254 	movw	r2, #2900	; 0xb54
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d907      	bls.n	8000d18 <timer_Right+0x68>
    	timerLeft -= timer;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <timer_Right+0x7c>)
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <timer_Right+0x7c>)
 8000d16:	801a      	strh	r2, [r3, #0]
    }
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40010800 	.word	0x40010800
 8000d28:	20000006 	.word	0x20000006
 8000d2c:	20000004 	.word	0x20000004

08000d30 <timer_Left>:
void timer_Left(uint8_t timer){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	4816      	ldr	r0, [pc, #88]	; (8000d98 <timer_Left+0x68>)
 8000d40:	f004 f995 	bl	800506e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2110      	movs	r1, #16
 8000d48:	4813      	ldr	r0, [pc, #76]	; (8000d98 <timer_Left+0x68>)
 8000d4a:	f004 f978 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2110      	movs	r1, #16
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <timer_Left+0x6c>)
 8000d54:	f004 f973 	bl	800503e <HAL_GPIO_WritePin>
	timerLeft += 5;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <timer_Left+0x70>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3305      	adds	r3, #5
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <timer_Left+0x70>)
 8000d62:	801a      	strh	r2, [r3, #0]
    if (timerLeft > MAX_TIMER_LEFT_VALUE) {
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <timer_Left+0x70>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	f640 421c 	movw	r2, #3100	; 0xc1c
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d903      	bls.n	8000d78 <timer_Left+0x48>
    	timerLeft = MAX_TIMER_LEFT_VALUE;
 8000d70:	f640 421c 	movw	r2, #3100	; 0xc1c
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <timer_Left+0x70>)
 8000d76:	801a      	strh	r2, [r3, #0]
    }
    if (timerRight > MIN_TIMER_RIGHT_VALUE) {
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <timer_Left+0x74>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	f640 32ea 	movw	r2, #3050	; 0xbea
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d905      	bls.n	8000d90 <timer_Left+0x60>
    	timerRight -= 5;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <timer_Left+0x74>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	3b05      	subs	r3, #5
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <timer_Left+0x74>)
 8000d8e:	801a      	strh	r2, [r3, #0]
    }
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40010c00 	.word	0x40010c00
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000006 	.word	0x20000006

08000da8 <forwardGPIO>:

void forwardGPIO(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2120      	movs	r1, #32
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <forwardGPIO+0x40>)
 8000db2:	f004 f944 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2101      	movs	r1, #1
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <forwardGPIO+0x44>)
 8000dbc:	f004 f93f 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <forwardGPIO+0x44>)
 8000dc6:	f004 f93a 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <forwardGPIO+0x44>)
 8000dd2:	f004 f934 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <forwardGPIO+0x44>)
 8000dde:	f004 f92e 	bl	800503e <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40010800 	.word	0x40010800
 8000dec:	40010c00 	.word	0x40010c00

08000df0 <API_moveForward>:
//-1250;
int16_t lastpositionLeft;
int16_t lastpositionRight;
void API_moveForward(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	forwardGPIO();
 8000df6:	f7ff ffd7 	bl	8000da8 <forwardGPIO>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeft); //left
 8000dfa:	4bad      	ldr	r3, [pc, #692]	; (80010b0 <API_moveForward+0x2c0>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4bad      	ldr	r3, [pc, #692]	; (80010b4 <API_moveForward+0x2c4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRight); // right
 8000e04:	4bac      	ldr	r3, [pc, #688]	; (80010b8 <API_moveForward+0x2c8>)
 8000e06:	881a      	ldrh	r2, [r3, #0]
 8000e08:	4bac      	ldr	r3, [pc, #688]	; (80010bc <API_moveForward+0x2cc>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40

	rightWheel = 0;
 8000e0e:	4bac      	ldr	r3, [pc, #688]	; (80010c0 <API_moveForward+0x2d0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	801a      	strh	r2, [r3, #0]
	leftWheel = 0;
 8000e14:	4bab      	ldr	r3, [pc, #684]	; (80010c4 <API_moveForward+0x2d4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]

	lastpositionLeft = countTim3;
 8000e1e:	4baa      	ldr	r3, [pc, #680]	; (80010c8 <API_moveForward+0x2d8>)
 8000e20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e24:	4ba9      	ldr	r3, [pc, #676]	; (80010cc <API_moveForward+0x2dc>)
 8000e26:	801a      	strh	r2, [r3, #0]
	lastpositionRight = countTim2;
 8000e28:	4ba9      	ldr	r3, [pc, #676]	; (80010d0 <API_moveForward+0x2e0>)
 8000e2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e2e:	4ba9      	ldr	r3, [pc, #676]	; (80010d4 <API_moveForward+0x2e4>)
 8000e30:	801a      	strh	r2, [r3, #0]

	while(1){
		left = distanceLeft();
 8000e32:	f000 fcb5 	bl	80017a0 <distanceLeft>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	49a7      	ldr	r1, [pc, #668]	; (80010d8 <API_moveForward+0x2e8>)
 8000e3c:	e9c1 2300 	strd	r2, r3, [r1]
		right = distanceRight();
 8000e40:	f000 fd9e 	bl	8001980 <distanceRight>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	49a4      	ldr	r1, [pc, #656]	; (80010dc <API_moveForward+0x2ec>)
 8000e4a:	e9c1 2300 	strd	r2, r3, [r1]
		straight = distanceStraight();
 8000e4e:	f000 fd1f 	bl	8001890 <distanceStraight>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	49a2      	ldr	r1, [pc, #648]	; (80010e0 <API_moveForward+0x2f0>)
 8000e58:	e9c1 2300 	strd	r2, r3, [r1]

		if(lastpositionRight - countTim2 > 1250 && lastpositionLeft - countTim3 > 1250){
 8000e5c:	4b9d      	ldr	r3, [pc, #628]	; (80010d4 <API_moveForward+0x2e4>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b9a      	ldr	r3, [pc, #616]	; (80010d0 <API_moveForward+0x2e0>)
 8000e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000e70:	4293      	cmp	r3, r2
 8000e72:	dd0e      	ble.n	8000e92 <API_moveForward+0xa2>
 8000e74:	4b95      	ldr	r3, [pc, #596]	; (80010cc <API_moveForward+0x2dc>)
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b92      	ldr	r3, [pc, #584]	; (80010c8 <API_moveForward+0x2d8>)
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	dd02      	ble.n	8000e92 <API_moveForward+0xa2>
			stop();
 8000e8c:	f000 fa12 	bl	80012b4 <stop>
			return;
 8000e90:	e183      	b.n	800119a <API_moveForward+0x3aa>
		}
		if(straight < 5) {
 8000e92:	4b93      	ldr	r3, [pc, #588]	; (80010e0 <API_moveForward+0x2f0>)
 8000e94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <API_moveForward+0x2f4>)
 8000e9e:	f7ff fdf9 	bl	8000a94 <__aeabi_dcmplt>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <API_moveForward+0xbe>
			stop();
 8000ea8:	f000 fa04 	bl	80012b4 <stop>
			return;
 8000eac:	e175      	b.n	800119a <API_moveForward+0x3aa>
		}

		if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0){
 8000eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb2:	488d      	ldr	r0, [pc, #564]	; (80010e8 <API_moveForward+0x2f8>)
 8000eb4:	f004 f8ac 	bl	8005010 <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d112      	bne.n	8000ee4 <API_moveForward+0xf4>
			timer_Left(10);
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f7ff ff36 	bl	8000d30 <timer_Left>
			HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000ec4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec8:	4888      	ldr	r0, [pc, #544]	; (80010ec <API_moveForward+0x2fc>)
 8000eca:	f004 f8d0 	bl	800506e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4885      	ldr	r0, [pc, #532]	; (80010e8 <API_moveForward+0x2f8>)
 8000ed4:	f004 f8b3 	bl	800503e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	4883      	ldr	r0, [pc, #524]	; (80010ec <API_moveForward+0x2fc>)
 8000ede:	f004 f8ae 	bl	800503e <HAL_GPIO_WritePin>
 8000ee2:	e019      	b.n	8000f18 <API_moveForward+0x128>
		}
		else if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0){
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	487f      	ldr	r0, [pc, #508]	; (80010e8 <API_moveForward+0x2f8>)
 8000eea:	f004 f891 	bl	8005010 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d111      	bne.n	8000f18 <API_moveForward+0x128>
			timer_Right(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f7ff fedb 	bl	8000cb0 <timer_Right>
			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000efa:	2110      	movs	r1, #16
 8000efc:	487b      	ldr	r0, [pc, #492]	; (80010ec <API_moveForward+0x2fc>)
 8000efe:	f004 f8b6 	bl	800506e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f08:	4878      	ldr	r0, [pc, #480]	; (80010ec <API_moveForward+0x2fc>)
 8000f0a:	f004 f898 	bl	800503e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2110      	movs	r1, #16
 8000f12:	4875      	ldr	r0, [pc, #468]	; (80010e8 <API_moveForward+0x2f8>)
 8000f14:	f004 f893 	bl	800503e <HAL_GPIO_WritePin>
		}


		if(left < 5.2){
 8000f18:	4b6f      	ldr	r3, [pc, #444]	; (80010d8 <API_moveForward+0x2e8>)
 8000f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1e:	a360      	add	r3, pc, #384	; (adr r3, 80010a0 <API_moveForward+0x2b0>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f7ff fdb6 	bl	8000a94 <__aeabi_dcmplt>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <API_moveForward+0x14a>
			timer_Left(5);
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f7ff fefe 	bl	8000d30 <timer_Left>
			flag = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	e11e      	b.n	8001178 <API_moveForward+0x388>
		}
		else if( right < 5.2){
 8000f3a:	4b68      	ldr	r3, [pc, #416]	; (80010dc <API_moveForward+0x2ec>)
 8000f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f40:	a357      	add	r3, pc, #348	; (adr r3, 80010a0 <API_moveForward+0x2b0>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fda5 	bl	8000a94 <__aeabi_dcmplt>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <API_moveForward+0x16c>
			timer_Right(5);
 8000f50:	2005      	movs	r0, #5
 8000f52:	f7ff fead 	bl	8000cb0 <timer_Right>
			flag = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e10d      	b.n	8001178 <API_moveForward+0x388>
		}
		else if(left > 5.5 && left < 12 && right > 5.5 && right < 12){
 8000f5c:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <API_moveForward+0x2e8>)
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <API_moveForward+0x300>)
 8000f68:	f7ff fdb2 	bl	8000ad0 <__aeabi_dcmpgt>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d037      	beq.n	8000fe2 <API_moveForward+0x1f2>
 8000f72:	4b59      	ldr	r3, [pc, #356]	; (80010d8 <API_moveForward+0x2e8>)
 8000f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <API_moveForward+0x304>)
 8000f7e:	f7ff fd89 	bl	8000a94 <__aeabi_dcmplt>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d02c      	beq.n	8000fe2 <API_moveForward+0x1f2>
 8000f88:	4b54      	ldr	r3, [pc, #336]	; (80010dc <API_moveForward+0x2ec>)
 8000f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <API_moveForward+0x300>)
 8000f94:	f7ff fd9c 	bl	8000ad0 <__aeabi_dcmpgt>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d021      	beq.n	8000fe2 <API_moveForward+0x1f2>
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <API_moveForward+0x2ec>)
 8000fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b52      	ldr	r3, [pc, #328]	; (80010f4 <API_moveForward+0x304>)
 8000faa:	f7ff fd73 	bl	8000a94 <__aeabi_dcmplt>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d016      	beq.n	8000fe2 <API_moveForward+0x1f2>
			if(left < right){
 8000fb4:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <API_moveForward+0x2e8>)
 8000fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <API_moveForward+0x2ec>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fd68 	bl	8000a94 <__aeabi_dcmplt>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <API_moveForward+0x1e6>
				timer_Left(20);
 8000fca:	2014      	movs	r0, #20
 8000fcc:	f7ff feb0 	bl	8000d30 <timer_Left>
				flag = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
			if(left < right){
 8000fd4:	e0d0      	b.n	8001178 <API_moveForward+0x388>
			}
			else {
				timer_Right(20);
 8000fd6:	2014      	movs	r0, #20
 8000fd8:	f7ff fe6a 	bl	8000cb0 <timer_Right>
				flag = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	71fb      	strb	r3, [r7, #7]
			if(left < right){
 8000fe0:	e0ca      	b.n	8001178 <API_moveForward+0x388>
			}
		}

		else if(left > 12 && right > 5.6 && right < 12 && HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) != 0){
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <API_moveForward+0x2e8>)
 8000fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <API_moveForward+0x304>)
 8000fee:	f7ff fd6f 	bl	8000ad0 <__aeabi_dcmpgt>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d023      	beq.n	8001040 <API_moveForward+0x250>
 8000ff8:	4b38      	ldr	r3, [pc, #224]	; (80010dc <API_moveForward+0x2ec>)
 8000ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffe:	a32a      	add	r3, pc, #168	; (adr r3, 80010a8 <API_moveForward+0x2b8>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fd64 	bl	8000ad0 <__aeabi_dcmpgt>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d018      	beq.n	8001040 <API_moveForward+0x250>
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <API_moveForward+0x2ec>)
 8001010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <API_moveForward+0x304>)
 800101a:	f7ff fd3b 	bl	8000a94 <__aeabi_dcmplt>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00d      	beq.n	8001040 <API_moveForward+0x250>
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	482f      	ldr	r0, [pc, #188]	; (80010e8 <API_moveForward+0x2f8>)
 800102a:	f003 fff1 	bl	8005010 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <API_moveForward+0x250>
			timer_Left(5);
 8001034:	2005      	movs	r0, #5
 8001036:	f7ff fe7b 	bl	8000d30 <timer_Left>
			flag = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e09b      	b.n	8001178 <API_moveForward+0x388>
		}
		else if(right > 12 && left > 5.6 && left < 12 && HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) != 0){
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <API_moveForward+0x2ec>)
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <API_moveForward+0x304>)
 800104c:	f7ff fd40 	bl	8000ad0 <__aeabi_dcmpgt>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d050      	beq.n	80010f8 <API_moveForward+0x308>
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <API_moveForward+0x2e8>)
 8001058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105c:	a312      	add	r3, pc, #72	; (adr r3, 80010a8 <API_moveForward+0x2b8>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fd35 	bl	8000ad0 <__aeabi_dcmpgt>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d045      	beq.n	80010f8 <API_moveForward+0x308>
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <API_moveForward+0x2e8>)
 800106e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <API_moveForward+0x304>)
 8001078:	f7ff fd0c 	bl	8000a94 <__aeabi_dcmplt>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d03a      	beq.n	80010f8 <API_moveForward+0x308>
 8001082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <API_moveForward+0x2f8>)
 8001088:	f003 ffc2 	bl	8005010 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d032      	beq.n	80010f8 <API_moveForward+0x308>
			timer_Right(5);
 8001092:	2005      	movs	r0, #5
 8001094:	f7ff fe0c 	bl	8000cb0 <timer_Right>
			flag = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	e06c      	b.n	8001178 <API_moveForward+0x388>
 800109e:	bf00      	nop
 80010a0:	cccccccd 	.word	0xcccccccd
 80010a4:	4014cccc 	.word	0x4014cccc
 80010a8:	66666666 	.word	0x66666666
 80010ac:	40166666 	.word	0x40166666
 80010b0:	20000004 	.word	0x20000004
 80010b4:	2000030c 	.word	0x2000030c
 80010b8:	20000006 	.word	0x20000006
 80010bc:	200003e4 	.word	0x200003e4
 80010c0:	20000220 	.word	0x20000220
 80010c4:	20000222 	.word	0x20000222
 80010c8:	20000518 	.word	0x20000518
 80010cc:	20000224 	.word	0x20000224
 80010d0:	20000510 	.word	0x20000510
 80010d4:	20000226 	.word	0x20000226
 80010d8:	20000208 	.word	0x20000208
 80010dc:	20000210 	.word	0x20000210
 80010e0:	20000218 	.word	0x20000218
 80010e4:	40140000 	.word	0x40140000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	40160000 	.word	0x40160000
 80010f4:	40280000 	.word	0x40280000
		}
		else{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80010f8:	2110      	movs	r1, #16
 80010fa:	4829      	ldr	r0, [pc, #164]	; (80011a0 <API_moveForward+0x3b0>)
 80010fc:	f003 ffb7 	bl	800506e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001106:	4827      	ldr	r0, [pc, #156]	; (80011a4 <API_moveForward+0x3b4>)
 8001108:	f003 ff99 	bl	800503e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2110      	movs	r1, #16
 8001110:	4824      	ldr	r0, [pc, #144]	; (80011a4 <API_moveForward+0x3b4>)
 8001112:	f003 ff94 	bl	800503e <HAL_GPIO_WritePin>
			if(((countTim2 - lastTim2_Right) -(countTim3 - lastTim3_Left)) > 3){
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <API_moveForward+0x3b8>)
 8001118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111c:	461a      	mov	r2, r3
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <API_moveForward+0x3bc>)
 8001120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001124:	1ad2      	subs	r2, r2, r3
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <API_moveForward+0x3c0>)
 8001128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112c:	4619      	mov	r1, r3
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <API_moveForward+0x3c4>)
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	1acb      	subs	r3, r1, r3
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b03      	cmp	r3, #3
 800113a:	dd05      	ble.n	8001148 <API_moveForward+0x358>
				timer_Left(5);
 800113c:	2005      	movs	r0, #5
 800113e:	f7ff fdf7 	bl	8000d30 <timer_Left>
				flag = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e017      	b.n	8001178 <API_moveForward+0x388>
			}
			else if(((countTim3 - lastTim3_Left) - (countTim2 - lastTim2_Right) ) > 3){
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <API_moveForward+0x3c0>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	461a      	mov	r2, r3
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <API_moveForward+0x3c4>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	1ad2      	subs	r2, r2, r3
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <API_moveForward+0x3b8>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	4619      	mov	r1, r3
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <API_moveForward+0x3bc>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	1acb      	subs	r3, r1, r3
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b03      	cmp	r3, #3
 800116c:	dd04      	ble.n	8001178 <API_moveForward+0x388>
				timer_Right(5);
 800116e:	2005      	movs	r0, #5
 8001170:	f7ff fd9e 	bl	8000cb0 <timer_Right>
				flag = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
			}
		}
		if(flag == 0){
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f47f ae59 	bne.w	8000e32 <API_moveForward+0x42>
			flag = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	71fb      	strb	r3, [r7, #7]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeft); //left
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <API_moveForward+0x3c8>)
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <API_moveForward+0x3cc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRight); // right
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <API_moveForward+0x3d0>)
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <API_moveForward+0x3d4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
		left = distanceLeft();
 8001198:	e64b      	b.n	8000e32 <API_moveForward+0x42>
		}
	}
}
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	20000510 	.word	0x20000510
 80011ac:	20000206 	.word	0x20000206
 80011b0:	20000518 	.word	0x20000518
 80011b4:	20000204 	.word	0x20000204
 80011b8:	20000004 	.word	0x20000004
 80011bc:	2000030c 	.word	0x2000030c
 80011c0:	20000006 	.word	0x20000006
 80011c4:	200003e4 	.word	0x200003e4

080011c8 <API_turnRight>:
	HAL_GPIO_WritePin(BI2_GPIO_Port, AI2_Pin,RESET);
	HAL_GPIO_WritePin(BI1_GPIO_Port, AI1_Pin,SET);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,3000); //left
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0); // right
}
void API_turnRight(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2120      	movs	r1, #32
 80011d0:	4815      	ldr	r0, [pc, #84]	; (8001228 <API_turnRight+0x60>)
 80011d2:	f003 ff34 	bl	800503e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2101      	movs	r1, #1
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <API_turnRight+0x64>)
 80011dc:	f003 ff2f 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2102      	movs	r1, #2
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <API_turnRight+0x64>)
 80011e6:	f003 ff2a 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f0:	480e      	ldr	r0, [pc, #56]	; (800122c <API_turnRight+0x64>)
 80011f2:	f003 ff24 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <API_turnRight+0x64>)
 80011fe:	f003 ff1e 	bl	800503e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeft); //left
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <API_turnRight+0x68>)
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <API_turnRight+0x6c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRightDefault); // right
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <API_turnRight+0x70>)
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <API_turnRight+0x74>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
	angle(-83);
 8001216:	f06f 0052 	mvn.w	r0, #82	; 0x52
 800121a:	f000 f953 	bl	80014c4 <angle>
	stop();
 800121e:	f000 f849 	bl	80012b4 <stop>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	20000004 	.word	0x20000004
 8001234:	2000030c 	.word	0x2000030c
 8001238:	20000002 	.word	0x20000002
 800123c:	200003e4 	.word	0x200003e4

08001240 <API_turnLeft>:
void API_turnLeft(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2120      	movs	r1, #32
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <API_turnLeft+0x5c>)
 800124a:	f003 fef8 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	4813      	ldr	r0, [pc, #76]	; (80012a0 <API_turnLeft+0x60>)
 8001254:	f003 fef3 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2102      	movs	r1, #2
 800125c:	4810      	ldr	r0, [pc, #64]	; (80012a0 <API_turnLeft+0x60>)
 800125e:	f003 feee 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <API_turnLeft+0x60>)
 800126a:	f003 fee8 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <API_turnLeft+0x60>)
 8001276:	f003 fee2 	bl	800503e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,timerLeftDefault); //left
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <API_turnLeft+0x64>)
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <API_turnLeft+0x68>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,timerRightDefault); // right
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <API_turnLeft+0x6c>)
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <API_turnLeft+0x70>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
	angle(83);
 800128e:	2053      	movs	r0, #83	; 0x53
 8001290:	f000 f918 	bl	80014c4 <angle>
	stop();
 8001294:	f000 f80e 	bl	80012b4 <stop>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	20000000 	.word	0x20000000
 80012a8:	2000030c 	.word	0x2000030c
 80012ac:	20000002 	.word	0x20000002
 80012b0:	200003e4 	.word	0x200003e4

080012b4 <stop>:
void stop(){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,0); //left
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <stop+0x50>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,0);
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <stop+0x54>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2120      	movs	r1, #32
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <stop+0x58>)
 80012ce:	f003 feb6 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI2_GPIO_Port, AI2_Pin,RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <stop+0x5c>)
 80012d8:	f003 feb1 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AI1_GPIO_Port, AI1_Pin,RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <stop+0x5c>)
 80012e2:	f003 feac 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI2_GPIO_Port, BI2_Pin,RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <stop+0x5c>)
 80012ee:	f003 fea6 	bl	800503e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BI1_GPIO_Port, BI1_Pin,RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <stop+0x5c>)
 80012fa:	f003 fea0 	bl	800503e <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000030c 	.word	0x2000030c
 8001308:	200003e4 	.word	0x200003e4
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00

08001314 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af04      	add	r7, sp, #16
 800131a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	2301      	movs	r3, #1
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f107 030f 	add.w	r3, r7, #15
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	2275      	movs	r2, #117	; 0x75
 800132e:	21d0      	movs	r1, #208	; 0xd0
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f004 f8f3 	bl	800551c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b68      	cmp	r3, #104	; 0x68
 800133a:	d13d      	bne.n	80013b8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	f107 030e 	add.w	r3, r7, #14
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	226b      	movs	r2, #107	; 0x6b
 8001352:	21d0      	movs	r1, #208	; 0xd0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f003 ffe7 	bl	8005328 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800135a:	2307      	movs	r3, #7
 800135c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2301      	movs	r3, #1
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	f107 030e 	add.w	r3, r7, #14
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	2219      	movs	r2, #25
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f003 ffd8 	bl	8005328 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800137c:	2364      	movs	r3, #100	; 0x64
 800137e:	9302      	str	r3, [sp, #8]
 8001380:	2301      	movs	r3, #1
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	f107 030e 	add.w	r3, r7, #14
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	221c      	movs	r2, #28
 800138e:	21d0      	movs	r1, #208	; 0xd0
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f003 ffc9 	bl	8005328 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800139a:	2364      	movs	r3, #100	; 0x64
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f107 030e 	add.w	r3, r7, #14
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	221b      	movs	r2, #27
 80013ac:	21d0      	movs	r1, #208	; 0xd0
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f003 ffba 	bl	8005328 <HAL_I2C_Mem_Write>
        return 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e000      	b.n	80013ba <MPU6050_Init+0xa6>
    }
    return 1;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	0000      	movs	r0, r0
 80013c4:	0000      	movs	r0, r0
	...

080013c8 <MPU6050_Read_Gyro>:
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af04      	add	r7, sp, #16
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2306      	movs	r3, #6
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	2243      	movs	r2, #67	; 0x43
 80013e4:	21d0      	movs	r1, #208	; 0xd0
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f004 f898 	bl	800551c <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80013ec:	7a3b      	ldrb	r3, [r7, #8]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	7a7b      	ldrb	r3, [r7, #9]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80013fe:	7abb      	ldrb	r3, [r7, #10]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b21a      	sxth	r2, r3
 8001404:	7afb      	ldrb	r3, [r7, #11]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21a      	sxth	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001410:	7b3b      	ldrb	r3, [r7, #12]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21a      	sxth	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f857 	bl	80004dc <__aeabi_i2d>
 800142e:	a318      	add	r3, pc, #96	; (adr r3, 8001490 <MPU6050_Read_Gyro+0xc8>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff f9e6 	bl	8000804 <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f847 	bl	80004dc <__aeabi_i2d>
 800144e:	a310      	add	r3, pc, #64	; (adr r3, 8001490 <MPU6050_Read_Gyro+0xc8>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f9d6 	bl	8000804 <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f837 	bl	80004dc <__aeabi_i2d>
 800146e:	a308      	add	r3, pc, #32	; (adr r3, 8001490 <MPU6050_Read_Gyro+0xc8>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f9c6 	bl	8000804 <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	00000000 	.word	0x00000000
 8001494:	40606000 	.word	0x40606000

08001498 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_ADC2_Init(void);
static void MX_ADC3_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	4804      	ldr	r0, [pc, #16]	; (80014c0 <_write+0x28>)
 80014b0:	f006 fd55 	bl	8007f5e <HAL_UART_Transmit>
    return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000042c 	.word	0x2000042c

080014c4 <angle>:

void angle(int goc){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	if(goc > 0){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f340 80a3 	ble.w	800161a <angle+0x156>
		while(1){
			previousTime = HAL_GetTick();
 80014d4:	f002 fe62 	bl	800419c <HAL_GetTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	4aa3      	ldr	r2, [pc, #652]	; (8001768 <angle+0x2a4>)
 80014dc:	6013      	str	r3, [r2, #0]
			MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 80014de:	49a3      	ldr	r1, [pc, #652]	; (800176c <angle+0x2a8>)
 80014e0:	48a3      	ldr	r0, [pc, #652]	; (8001770 <angle+0x2ac>)
 80014e2:	f7ff ff71 	bl	80013c8 <MPU6050_Read_Gyro>
			roll += (MPU6050.Gx - froll) *dt;
 80014e6:	4ba1      	ldr	r3, [pc, #644]	; (800176c <angle+0x2a8>)
 80014e8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ec:	4ba1      	ldr	r3, [pc, #644]	; (8001774 <angle+0x2b0>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe fea5 	bl	8000240 <__aeabi_dsub>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	4b9e      	ldr	r3, [pc, #632]	; (8001778 <angle+0x2b4>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f854 	bl	80005b0 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	4b9a      	ldr	r3, [pc, #616]	; (800177c <angle+0x2b8>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7fe fe95 	bl	8000244 <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4997      	ldr	r1, [pc, #604]	; (800177c <angle+0x2b8>)
 8001520:	e9c1 2300 	strd	r2, r3, [r1]
			pitch += (MPU6050.Gy - fpitch) *dt;
 8001524:	4b91      	ldr	r3, [pc, #580]	; (800176c <angle+0x2a8>)
 8001526:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800152a:	4b95      	ldr	r3, [pc, #596]	; (8001780 <angle+0x2bc>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe fe86 	bl	8000240 <__aeabi_dsub>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	4b8e      	ldr	r3, [pc, #568]	; (8001778 <angle+0x2b4>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f835 	bl	80005b0 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	4b8d      	ldr	r3, [pc, #564]	; (8001784 <angle+0x2c0>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe fe76 	bl	8000244 <__adddf3>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4989      	ldr	r1, [pc, #548]	; (8001784 <angle+0x2c0>)
 800155e:	e9c1 2300 	strd	r2, r3, [r1]
			yaw += (MPU6050.Gz - fyaw) *dt;
 8001562:	4b82      	ldr	r3, [pc, #520]	; (800176c <angle+0x2a8>)
 8001564:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <angle+0x2c4>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7fe fe67 	bl	8000240 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	4b7f      	ldr	r3, [pc, #508]	; (8001778 <angle+0x2b4>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f816 	bl	80005b0 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	4b7f      	ldr	r3, [pc, #508]	; (800178c <angle+0x2c8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe fe57 	bl	8000244 <__adddf3>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	497c      	ldr	r1, [pc, #496]	; (800178c <angle+0x2c8>)
 800159c:	e9c1 2300 	strd	r2, r3, [r1]
			currentTime = HAL_GetTick();
 80015a0:	f002 fdfc 	bl	800419c <HAL_GetTick>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a7a      	ldr	r2, [pc, #488]	; (8001790 <angle+0x2cc>)
 80015a8:	6013      	str	r3, [r2, #0]
			elapsedTime = currentTime - previousTime;
 80015aa:	4b79      	ldr	r3, [pc, #484]	; (8001790 <angle+0x2cc>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b6e      	ldr	r3, [pc, #440]	; (8001768 <angle+0x2a4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4a77      	ldr	r2, [pc, #476]	; (8001794 <angle+0x2d0>)
 80015b6:	6013      	str	r3, [r2, #0]
			dt = ((double) elapsedTime) / 1000;
 80015b8:	4b76      	ldr	r3, [pc, #472]	; (8001794 <angle+0x2d0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff7d 	bl	80004bc <__aeabi_ui2d>
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b74      	ldr	r3, [pc, #464]	; (8001798 <angle+0x2d4>)
 80015c8:	f7ff f91c 	bl	8000804 <__aeabi_ddiv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4969      	ldr	r1, [pc, #420]	; (8001778 <angle+0x2b4>)
 80015d2:	e9c1 2300 	strd	r2, r3, [r1]
			if(yaw >= goc){
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7fe ff80 	bl	80004dc <__aeabi_i2d>
 80015dc:	4b6b      	ldr	r3, [pc, #428]	; (800178c <angle+0x2c8>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff fa61 	bl	8000aa8 <__aeabi_dcmple>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d015      	beq.n	8001618 <angle+0x154>
				roll = 0;
 80015ec:	4963      	ldr	r1, [pc, #396]	; (800177c <angle+0x2b8>)
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	e9c1 2300 	strd	r2, r3, [r1]
				pitch = 0;
 80015fa:	4962      	ldr	r1, [pc, #392]	; (8001784 <angle+0x2c0>)
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9c1 2300 	strd	r2, r3, [r1]
				yaw = 0;
 8001608:	4960      	ldr	r1, [pc, #384]	; (800178c <angle+0x2c8>)
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9c1 2300 	strd	r2, r3, [r1]
				return;
 8001616:	e0a3      	b.n	8001760 <angle+0x29c>
			previousTime = HAL_GetTick();
 8001618:	e75c      	b.n	80014d4 <angle+0x10>
			}
		}
	}
	else{
		while(1){
			previousTime = HAL_GetTick();
 800161a:	f002 fdbf 	bl	800419c <HAL_GetTick>
 800161e:	4603      	mov	r3, r0
 8001620:	4a51      	ldr	r2, [pc, #324]	; (8001768 <angle+0x2a4>)
 8001622:	6013      	str	r3, [r2, #0]
			MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8001624:	4951      	ldr	r1, [pc, #324]	; (800176c <angle+0x2a8>)
 8001626:	4852      	ldr	r0, [pc, #328]	; (8001770 <angle+0x2ac>)
 8001628:	f7ff fece 	bl	80013c8 <MPU6050_Read_Gyro>
			roll += (MPU6050.Gx - froll) *dt;
 800162c:	4b4f      	ldr	r3, [pc, #316]	; (800176c <angle+0x2a8>)
 800162e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001632:	4b50      	ldr	r3, [pc, #320]	; (8001774 <angle+0x2b0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe fe02 	bl	8000240 <__aeabi_dsub>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <angle+0x2b4>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7fe ffb1 	bl	80005b0 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	4b49      	ldr	r3, [pc, #292]	; (800177c <angle+0x2b8>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe fdf2 	bl	8000244 <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4945      	ldr	r1, [pc, #276]	; (800177c <angle+0x2b8>)
 8001666:	e9c1 2300 	strd	r2, r3, [r1]
			pitch += (MPU6050.Gy - fpitch) *dt;
 800166a:	4b40      	ldr	r3, [pc, #256]	; (800176c <angle+0x2a8>)
 800166c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <angle+0x2bc>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe fde3 	bl	8000240 <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <angle+0x2b4>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ff92 	bl	80005b0 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <angle+0x2c0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe fdd3 	bl	8000244 <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4938      	ldr	r1, [pc, #224]	; (8001784 <angle+0x2c0>)
 80016a4:	e9c1 2300 	strd	r2, r3, [r1]
			yaw += (MPU6050.Gz - fyaw) *dt;
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <angle+0x2a8>)
 80016aa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016ae:	4b36      	ldr	r3, [pc, #216]	; (8001788 <angle+0x2c4>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe fdc4 	bl	8000240 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <angle+0x2b4>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ff73 	bl	80005b0 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <angle+0x2c8>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe fdb4 	bl	8000244 <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	492a      	ldr	r1, [pc, #168]	; (800178c <angle+0x2c8>)
 80016e2:	e9c1 2300 	strd	r2, r3, [r1]
			currentTime = HAL_GetTick();
 80016e6:	f002 fd59 	bl	800419c <HAL_GetTick>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a28      	ldr	r2, [pc, #160]	; (8001790 <angle+0x2cc>)
 80016ee:	6013      	str	r3, [r2, #0]
			elapsedTime = currentTime - previousTime;
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <angle+0x2cc>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <angle+0x2a4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <angle+0x2d0>)
 80016fc:	6013      	str	r3, [r2, #0]
			dt = ((double) elapsedTime) / 1000;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <angle+0x2d0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe feda 	bl	80004bc <__aeabi_ui2d>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <angle+0x2d4>)
 800170e:	f7ff f879 	bl	8000804 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4918      	ldr	r1, [pc, #96]	; (8001778 <angle+0x2b4>)
 8001718:	e9c1 2300 	strd	r2, r3, [r1]
			if(yaw <= goc){
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7fe fedd 	bl	80004dc <__aeabi_i2d>
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <angle+0x2c8>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7ff f9c8 	bl	8000abc <__aeabi_dcmpge>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d015      	beq.n	800175e <angle+0x29a>
				roll = 0;
 8001732:	4912      	ldr	r1, [pc, #72]	; (800177c <angle+0x2b8>)
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	e9c1 2300 	strd	r2, r3, [r1]
				pitch = 0;
 8001740:	4910      	ldr	r1, [pc, #64]	; (8001784 <angle+0x2c0>)
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9c1 2300 	strd	r2, r3, [r1]
				yaw = 0;
 800174e:	490f      	ldr	r1, [pc, #60]	; (800178c <angle+0x2c8>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9c1 2300 	strd	r2, r3, [r1]
				return;
 800175c:	e000      	b.n	8001760 <angle+0x29c>
			previousTime = HAL_GetTick();
 800175e:	e75c      	b.n	800161a <angle+0x156>
			}
		}
	}
}
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000508 	.word	0x20000508
 800176c:	20000478 	.word	0x20000478
 8001770:	200002b8 	.word	0x200002b8
 8001774:	200004e8 	.word	0x200004e8
 8001778:	20000008 	.word	0x20000008
 800177c:	200004d0 	.word	0x200004d0
 8001780:	200004f0 	.word	0x200004f0
 8001784:	200004d8 	.word	0x200004d8
 8001788:	200004f8 	.word	0x200004f8
 800178c:	200004e0 	.word	0x200004e0
 8001790:	20000504 	.word	0x20000504
 8001794:	20000500 	.word	0x20000500
 8001798:	408f4000 	.word	0x408f4000
 800179c:	00000000 	.word	0x00000000

080017a0 <distanceLeft>:
double distanceLeft(){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	double vol = 0;
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	757b      	strb	r3, [r7, #21]
 80017ba:	e016      	b.n	80017ea <distanceLeft+0x4a>
  	  	HAL_ADC_Start(&hadc3);
 80017bc:	4830      	ldr	r0, [pc, #192]	; (8001880 <distanceLeft+0xe0>)
 80017be:	f002 fe05 	bl	80043cc <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc3, 1000);
 80017c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017c6:	482e      	ldr	r0, [pc, #184]	; (8001880 <distanceLeft+0xe0>)
 80017c8:	f002 feda 	bl	8004580 <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc3);
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <distanceLeft+0xe0>)
 80017ce:	f002 ffdd 	bl	800478c <HAL_ADC_GetValue>
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  	  	HAL_ADC_Stop(&hadc3);
 80017d6:	482a      	ldr	r0, [pc, #168]	; (8001880 <distanceLeft+0xe0>)
 80017d8:	f002 fea6 	bl	8004528 <HAL_ADC_Stop>
  	    total = total + ADC_VAL;
 80017dc:	8afa      	ldrh	r2, [r7, #22]
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	4413      	add	r3, r2
 80017e2:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 80017e4:	7d7b      	ldrb	r3, [r7, #21]
 80017e6:	3301      	adds	r3, #1
 80017e8:	757b      	strb	r3, [r7, #21]
 80017ea:	7d7b      	ldrb	r3, [r7, #21]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d9e5      	bls.n	80017bc <distanceLeft+0x1c>
  	}

  	vol = (total/5*3.3)/4095;
 80017f0:	8afb      	ldrh	r3, [r7, #22]
 80017f2:	4a24      	ldr	r2, [pc, #144]	; (8001884 <distanceLeft+0xe4>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe6d 	bl	80004dc <__aeabi_i2d>
 8001802:	a319      	add	r3, pc, #100	; (adr r3, 8001868 <distanceLeft+0xc8>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7fe fed2 	bl	80005b0 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	a316      	add	r3, pc, #88	; (adr r3, 8001870 <distanceLeft+0xd0>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7fe fff3 	bl	8000804 <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1) - 0.7;
 8001826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	4916      	ldr	r1, [pc, #88]	; (8001888 <distanceLeft+0xe8>)
 8001830:	f7fe ffe8 	bl	8000804 <__aeabi_ddiv>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <distanceLeft+0xec>)
 8001842:	f7fe feb5 	bl	80005b0 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	a30a      	add	r3, pc, #40	; (adr r3, 8001878 <distanceLeft+0xd8>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fcf4 	bl	8000240 <__aeabi_dsub>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
}
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	66666666 	.word	0x66666666
 800186c:	400a6666 	.word	0x400a6666
 8001870:	00000000 	.word	0x00000000
 8001874:	40affe00 	.word	0x40affe00
 8001878:	66666666 	.word	0x66666666
 800187c:	3fe66666 	.word	0x3fe66666
 8001880:	20000288 	.word	0x20000288
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	3ff00000 	.word	0x3ff00000
 800188c:	402a0000 	.word	0x402a0000

08001890 <distanceStraight>:
double distanceStraight(){
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
	uint16_t ADC_VAL;
	double vol = 0;
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	757b      	strb	r3, [r7, #21]
 80018aa:	e016      	b.n	80018da <distanceStraight+0x4a>
  	  	HAL_ADC_Start(&hadc2);
 80018ac:	4830      	ldr	r0, [pc, #192]	; (8001970 <distanceStraight+0xe0>)
 80018ae:	f002 fd8d 	bl	80043cc <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc2, 1000);
 80018b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018b6:	482e      	ldr	r0, [pc, #184]	; (8001970 <distanceStraight+0xe0>)
 80018b8:	f002 fe62 	bl	8004580 <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc2);
 80018bc:	482c      	ldr	r0, [pc, #176]	; (8001970 <distanceStraight+0xe0>)
 80018be:	f002 ff65 	bl	800478c <HAL_ADC_GetValue>
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
  	  	HAL_ADC_Stop(&hadc2);
 80018c6:	482a      	ldr	r0, [pc, #168]	; (8001970 <distanceStraight+0xe0>)
 80018c8:	f002 fe2e 	bl	8004528 <HAL_ADC_Stop>
  	    total = total + ADC_VAL;
 80018cc:	8afa      	ldrh	r2, [r7, #22]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4413      	add	r3, r2
 80018d2:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 80018d4:	7d7b      	ldrb	r3, [r7, #21]
 80018d6:	3301      	adds	r3, #1
 80018d8:	757b      	strb	r3, [r7, #21]
 80018da:	7d7b      	ldrb	r3, [r7, #21]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d9e5      	bls.n	80018ac <distanceStraight+0x1c>
  	}

  	vol = (total/5*3.3)/4095;
 80018e0:	8afb      	ldrh	r3, [r7, #22]
 80018e2:	4a24      	ldr	r2, [pc, #144]	; (8001974 <distanceStraight+0xe4>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fdf5 	bl	80004dc <__aeabi_i2d>
 80018f2:	a319      	add	r3, pc, #100	; (adr r3, 8001958 <distanceStraight+0xc8>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe5a 	bl	80005b0 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	a316      	add	r3, pc, #88	; (adr r3, 8001960 <distanceStraight+0xd0>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe ff7b 	bl	8000804 <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1)- 0.7;
 8001916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	4916      	ldr	r1, [pc, #88]	; (8001978 <distanceStraight+0xe8>)
 8001920:	f7fe ff70 	bl	8000804 <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <distanceStraight+0xec>)
 8001932:	f7fe fe3d 	bl	80005b0 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	a30a      	add	r3, pc, #40	; (adr r3, 8001968 <distanceStraight+0xd8>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fc7c 	bl	8000240 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
}
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	66666666 	.word	0x66666666
 800195c:	400a6666 	.word	0x400a6666
 8001960:	00000000 	.word	0x00000000
 8001964:	40affe00 	.word	0x40affe00
 8001968:	66666666 	.word	0x66666666
 800196c:	3fe66666 	.word	0x3fe66666
 8001970:	20000258 	.word	0x20000258
 8001974:	cccccccd 	.word	0xcccccccd
 8001978:	3ff00000 	.word	0x3ff00000
 800197c:	402a0000 	.word	0x402a0000

08001980 <distanceRight>:
double distanceRight(){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0

	uint16_t ADC_VAL;
	double vol = 0;
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint16_t total = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	82fb      	strh	r3, [r7, #22]
  	for (uint8_t i = 0; i < 5; i++){
 8001996:	2300      	movs	r3, #0
 8001998:	757b      	strb	r3, [r7, #21]
 800199a:	e016      	b.n	80019ca <distanceRight+0x4a>
  		HAL_ADC_Start(&hadc1);
 800199c:	4830      	ldr	r0, [pc, #192]	; (8001a60 <distanceRight+0xe0>)
 800199e:	f002 fd15 	bl	80043cc <HAL_ADC_Start>
  	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 80019a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019a6:	482e      	ldr	r0, [pc, #184]	; (8001a60 <distanceRight+0xe0>)
 80019a8:	f002 fdea 	bl	8004580 <HAL_ADC_PollForConversion>
  	  	ADC_VAL = HAL_ADC_GetValue(&hadc1);
 80019ac:	482c      	ldr	r0, [pc, #176]	; (8001a60 <distanceRight+0xe0>)
 80019ae:	f002 feed 	bl	800478c <HAL_ADC_GetValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  	    total = total + ADC_VAL;
 80019b6:	8afa      	ldrh	r2, [r7, #22]
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4413      	add	r3, r2
 80019bc:	82fb      	strh	r3, [r7, #22]
  	    HAL_ADC_Stop(&hadc1);
 80019be:	4828      	ldr	r0, [pc, #160]	; (8001a60 <distanceRight+0xe0>)
 80019c0:	f002 fdb2 	bl	8004528 <HAL_ADC_Stop>
  	for (uint8_t i = 0; i < 5; i++){
 80019c4:	7d7b      	ldrb	r3, [r7, #21]
 80019c6:	3301      	adds	r3, #1
 80019c8:	757b      	strb	r3, [r7, #21]
 80019ca:	7d7b      	ldrb	r3, [r7, #21]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d9e5      	bls.n	800199c <distanceRight+0x1c>
  	}
  	vol = (total/5*3.3)/4095;
 80019d0:	8afb      	ldrh	r3, [r7, #22]
 80019d2:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <distanceRight+0xe4>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fd7d 	bl	80004dc <__aeabi_i2d>
 80019e2:	a319      	add	r3, pc, #100	; (adr r3, 8001a48 <distanceRight+0xc8>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fde2 	bl	80005b0 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	a316      	add	r3, pc, #88	; (adr r3, 8001a50 <distanceRight+0xd0>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe ff03 	bl	8000804 <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	e9c7 2302 	strd	r2, r3, [r7, #8]
  	return 13 * pow(vol, -1) - 0.7;
 8001a06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a0a:	f04f 0000 	mov.w	r0, #0
 8001a0e:	4916      	ldr	r1, [pc, #88]	; (8001a68 <distanceRight+0xe8>)
 8001a10:	f7fe fef8 	bl	8000804 <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <distanceRight+0xec>)
 8001a22:	f7fe fdc5 	bl	80005b0 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a30a      	add	r3, pc, #40	; (adr r3, 8001a58 <distanceRight+0xd8>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fc04 	bl	8000240 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
}
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	400a6666 	.word	0x400a6666
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40affe00 	.word	0x40affe00
 8001a58:	66666666 	.word	0x66666666
 8001a5c:	3fe66666 	.word	0x3fe66666
 8001a60:	20000228 	.word	0x20000228
 8001a64:	cccccccd 	.word	0xcccccccd
 8001a68:	3ff00000 	.word	0x3ff00000
 8001a6c:	402a0000 	.word	0x402a0000

08001a70 <filter_gyro>:
void filter_gyro(){
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	printf("Start probe filter\r\n");
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <filter_gyro+0x124>)
 8001a78:	f007 fbd0 	bl	800921c <puts>
	HAL_Delay(500);
 8001a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a80:	f002 fb96 	bl	80041b0 <HAL_Delay>
	for(uint8_t x = 0; x < 10; x++){
 8001a84:	2300      	movs	r3, #0
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	e008      	b.n	8001a9c <filter_gyro+0x2c>
		printf("*");
 8001a8a:	202a      	movs	r0, #42	; 0x2a
 8001a8c:	f007 fb6a 	bl	8009164 <putchar>
	    HAL_Delay(100);
 8001a90:	2064      	movs	r0, #100	; 0x64
 8001a92:	f002 fb8d 	bl	80041b0 <HAL_Delay>
	for(uint8_t x = 0; x < 10; x++){
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b09      	cmp	r3, #9
 8001aa0:	d9f3      	bls.n	8001a8a <filter_gyro+0x1a>
	}
	printf("*\r\n");
 8001aa2:	483d      	ldr	r0, [pc, #244]	; (8001b98 <filter_gyro+0x128>)
 8001aa4:	f007 fbba 	bl	800921c <puts>
	for(int x = 0; x < 1000; x++){
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	e02d      	b.n	8001b0a <filter_gyro+0x9a>
		MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8001aae:	493b      	ldr	r1, [pc, #236]	; (8001b9c <filter_gyro+0x12c>)
 8001ab0:	483b      	ldr	r0, [pc, #236]	; (8001ba0 <filter_gyro+0x130>)
 8001ab2:	f7ff fc89 	bl	80013c8 <MPU6050_Read_Gyro>
		froll += MPU6050.Gx;
 8001ab6:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <filter_gyro+0x12c>)
 8001ab8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001abc:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <filter_gyro+0x134>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fbbf 	bl	8000244 <__adddf3>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4936      	ldr	r1, [pc, #216]	; (8001ba4 <filter_gyro+0x134>)
 8001acc:	e9c1 2300 	strd	r2, r3, [r1]
		fpitch += MPU6050.Gy;
 8001ad0:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <filter_gyro+0x12c>)
 8001ad2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <filter_gyro+0x138>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fbb2 	bl	8000244 <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4930      	ldr	r1, [pc, #192]	; (8001ba8 <filter_gyro+0x138>)
 8001ae6:	e9c1 2300 	strd	r2, r3, [r1]
		fyaw += MPU6050.Gz;
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <filter_gyro+0x12c>)
 8001aec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <filter_gyro+0x13c>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fba5 	bl	8000244 <__adddf3>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	492b      	ldr	r1, [pc, #172]	; (8001bac <filter_gyro+0x13c>)
 8001b00:	e9c1 2300 	strd	r2, r3, [r1]
	for(int x = 0; x < 1000; x++){
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b10:	dbcd      	blt.n	8001aae <filter_gyro+0x3e>
	}
	froll = froll / 1000;
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <filter_gyro+0x134>)
 8001b14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <filter_gyro+0x140>)
 8001b1e:	f7fe fe71 	bl	8000804 <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	491f      	ldr	r1, [pc, #124]	; (8001ba4 <filter_gyro+0x134>)
 8001b28:	e9c1 2300 	strd	r2, r3, [r1]
	fpitch = fpitch /1000;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <filter_gyro+0x138>)
 8001b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <filter_gyro+0x140>)
 8001b38:	f7fe fe64 	bl	8000804 <__aeabi_ddiv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4919      	ldr	r1, [pc, #100]	; (8001ba8 <filter_gyro+0x138>)
 8001b42:	e9c1 2300 	strd	r2, r3, [r1]
	fyaw = fyaw/1000;
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <filter_gyro+0x13c>)
 8001b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <filter_gyro+0x140>)
 8001b52:	f7fe fe57 	bl	8000804 <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4914      	ldr	r1, [pc, #80]	; (8001bac <filter_gyro+0x13c>)
 8001b5c:	e9c1 2300 	strd	r2, r3, [r1]
	printf("froll: %.2f fpitch: %.2f fyaw: %.2f\r\n",froll, fpitch, fyaw);
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <filter_gyro+0x134>)
 8001b62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <filter_gyro+0x138>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	490f      	ldr	r1, [pc, #60]	; (8001bac <filter_gyro+0x13c>)
 8001b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b76:	e9cd 2300 	strd	r2, r3, [sp]
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	462b      	mov	r3, r5
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <filter_gyro+0x144>)
 8001b80:	f007 fade 	bl	8009140 <iprintf>
	printf("Prove filter done!\r\n");
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <filter_gyro+0x148>)
 8001b86:	f007 fb49 	bl	800921c <puts>

}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bdb0      	pop	{r4, r5, r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0800cbb8 	.word	0x0800cbb8
 8001b98:	0800cbcc 	.word	0x0800cbcc
 8001b9c:	20000478 	.word	0x20000478
 8001ba0:	200002b8 	.word	0x200002b8
 8001ba4:	200004e8 	.word	0x200004e8
 8001ba8:	200004f0 	.word	0x200004f0
 8001bac:	200004f8 	.word	0x200004f8
 8001bb0:	408f4000 	.word	0x408f4000
 8001bb4:	0800cbd0 	.word	0x0800cbd0
 8001bb8:	0800cbf8 	.word	0x0800cbf8

08001bbc <isValid>:

bool isValid(int x, int y) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
    return (x >= 0 && x < rows && y >= 0 && y < cols);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0c      	blt.n	8001be6 <isValid+0x2a>
 8001bcc:	2210      	movs	r2, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	da08      	bge.n	8001be6 <isValid+0x2a>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	db05      	blt.n	8001be6 <isValid+0x2a>
 8001bda:	2210      	movs	r2, #16
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	da01      	bge.n	8001be6 <isValid+0x2a>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <isValid+0x2c>
 8001be6:	2300      	movs	r3, #0
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <init_arr>:
void init_arr(int arr[ROW][COL], int row, int col) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < row; i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e015      	b.n	8001c36 <init_arr+0x3e>
        for (int j = 0; j < col; j++) {
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e00b      	b.n	8001c28 <init_arr+0x30>
            arr[i][j] = -1;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	019b      	lsls	r3, r3, #6
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < col; j++) {
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	3301      	adds	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbef      	blt.n	8001c10 <init_arr+0x18>
    for (int i = 0; i < row; i++) {
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dbe5      	blt.n	8001c0a <init_arr+0x12>
        }
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
	...

08001c4c <check_and_fill>:
void check_and_fill(int arr[ROW][COL],int row,int col,int value)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
    if(row<0 ||col<0||row>=16||col>=16||arr[row][col]!=-1)return;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db2a      	blt.n	8001cb6 <check_and_fill+0x6a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db27      	blt.n	8001cb6 <check_and_fill+0x6a>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	dc24      	bgt.n	8001cb6 <check_and_fill+0x6a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	dc21      	bgt.n	8001cb6 <check_and_fill+0x6a>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d117      	bne.n	8001cb6 <check_and_fill+0x6a>
    value+=1;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	603b      	str	r3, [r7, #0]
    coord point={row,col,value};
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	61fb      	str	r3, [r7, #28]
    pushQueue(&myQueue,point);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9e:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <check_and_fill+0x74>)
 8001ca0:	f001 fcea 	bl	8003678 <pushQueue>
    arr[row][col]=value;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	019b      	lsls	r3, r3, #6
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001cb4:	e000      	b.n	8001cb8 <check_and_fill+0x6c>
    if(row<0 ||col<0||row>=16||col>=16||arr[row][col]!=-1)return;
 8001cb6:	bf00      	nop
}
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000151c 	.word	0x2000151c

08001cc4 <init_flood>:

void init_flood(int arr[ROW][COL],int row,int col)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
    int count_=0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    coord point={row,col,count_};
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
 8001cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
    pushQueue(&myQueue,point);
 8001ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce6:	4841      	ldr	r0, [pc, #260]	; (8001dec <init_flood+0x128>)
 8001ce8:	f001 fcc6 	bl	8003678 <pushQueue>
    arr[row][col]=0;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point2={row+1,col,count_};
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d08:	63fb      	str	r3, [r7, #60]	; 0x3c
    pushQueue(&myQueue,point2);
 8001d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d10:	4836      	ldr	r0, [pc, #216]	; (8001dec <init_flood+0x128>)
 8001d12:	f001 fcb1 	bl	8003678 <pushQueue>
    arr[row+1][col]=0;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	019b      	lsls	r3, r3, #6
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	2100      	movs	r1, #0
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point3={row,col+1,count_};
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
    pushQueue(&myQueue,point3);
 8001d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3c:	482b      	ldr	r0, [pc, #172]	; (8001dec <init_flood+0x128>)
 8001d3e:	f001 fc9b 	bl	8003678 <pushQueue>
    arr[row][col+1]=0;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	019b      	lsls	r3, r3, #6
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	3201      	adds	r2, #1
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    coord point4={row+1,col+1,count_};
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    pushQueue(&myQueue,point4);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6a:	4820      	ldr	r0, [pc, #128]	; (8001dec <init_flood+0x128>)
 8001d6c:	f001 fc84 	bl	8003678 <pushQueue>
    arr[row+1][col+1]=0;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3301      	adds	r3, #1
 8001d74:	019b      	lsls	r3, r3, #6
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	3201      	adds	r2, #1
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while (!isEmptyQueue(&myQueue)) {
 8001d84:	e024      	b.n	8001dd0 <init_flood+0x10c>
        coord frontCoord = peekQueue(&myQueue);
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4918      	ldr	r1, [pc, #96]	; (8001dec <init_flood+0x128>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 fcbb 	bl	8003708 <peekQueue>
        popQueue(&myQueue);
 8001d92:	4816      	ldr	r0, [pc, #88]	; (8001dec <init_flood+0x128>)
 8001d94:	f001 fc9e 	bl	80036d4 <popQueue>
        check_and_fill(arr,frontCoord.row+1,frontCoord.col,frontCoord.value);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1c59      	adds	r1, r3, #1
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff ff53 	bl	8001c4c <check_and_fill>
        check_and_fill(arr,frontCoord.row-1,frontCoord.col,frontCoord.value);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1e59      	subs	r1, r3, #1
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff ff4c 	bl	8001c4c <check_and_fill>
        check_and_fill(arr,frontCoord.row,frontCoord.col+1,frontCoord.value);
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ff45 	bl	8001c4c <check_and_fill>
        check_and_fill(arr,frontCoord.row,frontCoord.col-1,frontCoord.value);
 8001dc2:	6939      	ldr	r1, [r7, #16]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff ff3e 	bl	8001c4c <check_and_fill>
    while (!isEmptyQueue(&myQueue)) {
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <init_flood+0x128>)
 8001dd2:	f001 fc24 	bl	800361e <isEmptyQueue>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1d1      	bne.n	8001d86 <init_flood+0xc2>
    }
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3750      	adds	r7, #80	; 0x50
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	2000151c 	.word	0x2000151c

08001df0 <init_maze>:

void init_maze()
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
    for(int i =0;i<16;i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e03d      	b.n	8001e78 <init_maze+0x88>
    {
        for(int j=0;j<16;j++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	e034      	b.n	8001e6c <init_maze+0x7c>
        {
            maze.cells[i][j].visited=0;
 8001e02:	4922      	ldr	r1, [pc, #136]	; (8001e8c <init_maze+0x9c>)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	011a      	lsls	r2, r3, #4
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	440b      	add	r3, r1
 8001e10:	3304      	adds	r3, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
            maze.cells[i][j].angle_update=90;
 8001e16:	491d      	ldr	r1, [pc, #116]	; (8001e8c <init_maze+0x9c>)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	011a      	lsls	r2, r3, #4
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4413      	add	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	440b      	add	r3, r1
 8001e24:	3308      	adds	r3, #8
 8001e26:	225a      	movs	r2, #90	; 0x5a
 8001e28:	601a      	str	r2, [r3, #0]
            maze.cells[i][j].dead=0;
 8001e2a:	4918      	ldr	r1, [pc, #96]	; (8001e8c <init_maze+0x9c>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	011a      	lsls	r2, r3, #4
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4413      	add	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	440b      	add	r3, r1
 8001e38:	330c      	adds	r3, #12
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
            for(int k = 0 ;k<4;k++)maze.cells[i][j].walls[k]=0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	e00d      	b.n	8001e60 <init_maze+0x70>
 8001e44:	4911      	ldr	r1, [pc, #68]	; (8001e8c <init_maze+0x9c>)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	011a      	lsls	r2, r3, #4
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	18ca      	adds	r2, r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	ddee      	ble.n	8001e44 <init_maze+0x54>
        for(int j=0;j<16;j++)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	ddc7      	ble.n	8001e02 <init_maze+0x12>
    for(int i =0;i<16;i++)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b0f      	cmp	r3, #15
 8001e7c:	ddbe      	ble.n	8001dfc <init_maze+0xc>
        }
    }
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	2000051c 	.word	0x2000051c

08001e90 <intToStr>:

void intToStr(int num, char *str) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    sprintf(str, "%d", num);
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <intToStr+0x1c>)
 8001e9e:	6838      	ldr	r0, [r7, #0]
 8001ea0:	f007 f9c4 	bl	800922c <siprintf>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	0800cc0c 	.word	0x0800cc0c

08001eb0 <cell_direction_adjust>:
cell_info cell_direction_adjust(cell_info cell)
{
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	b490      	push	{r4, r7}
 8001eb4:	b088      	sub	sp, #32
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    cell_info cell_new;
    cell_new=cell;
 8001ec2:	f107 0408 	add.w	r4, r7, #8
 8001ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for(int i=0;i<4;i++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	e051      	b.n	8001f7a <cell_direction_adjust+0xca>
    {
        int ind = i;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	61bb      	str	r3, [r7, #24]

        switch(cell.angle_update)
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001ee0:	d00a      	beq.n	8001ef8 <cell_direction_adjust+0x48>
 8001ee2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001ee6:	dc3a      	bgt.n	8001f5e <cell_direction_adjust+0xae>
 8001ee8:	2bb4      	cmp	r3, #180	; 0xb4
 8001eea:	d025      	beq.n	8001f38 <cell_direction_adjust+0x88>
 8001eec:	2bb4      	cmp	r3, #180	; 0xb4
 8001eee:	dc36      	bgt.n	8001f5e <cell_direction_adjust+0xae>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <cell_direction_adjust+0x62>
 8001ef4:	2b5a      	cmp	r3, #90	; 0x5a
 8001ef6:	e032      	b.n	8001f5e <cell_direction_adjust+0xae>
        {
            case 90:
                break;
            case 270:
                if(i%2==0)ind+=1;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <cell_direction_adjust+0x5a>
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
                else ind-=1;
                break;
 8001f08:	e029      	b.n	8001f5e <cell_direction_adjust+0xae>
                else ind-=1;
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	61bb      	str	r3, [r7, #24]
                break;
 8001f10:	e025      	b.n	8001f5e <cell_direction_adjust+0xae>
            case 0:
                if(i==0 || i ==1)ind+=2;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <cell_direction_adjust+0x6e>
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d103      	bne.n	8001f26 <cell_direction_adjust+0x76>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	3302      	adds	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
                else if(i==2)ind=1;
                else ind=0;
                break;
 8001f24:	e01b      	b.n	8001f5e <cell_direction_adjust+0xae>
                else if(i==2)ind=1;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d102      	bne.n	8001f32 <cell_direction_adjust+0x82>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
                break;
 8001f30:	e015      	b.n	8001f5e <cell_direction_adjust+0xae>
                else ind=0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
                break;
 8001f36:	e012      	b.n	8001f5e <cell_direction_adjust+0xae>
            case 180:
                if(i==2 || i ==3)ind-=2;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d002      	beq.n	8001f44 <cell_direction_adjust+0x94>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d103      	bne.n	8001f4c <cell_direction_adjust+0x9c>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	3b02      	subs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
                else if(i==0)ind=3;
                else ind=2;
                break;
 8001f4a:	e007      	b.n	8001f5c <cell_direction_adjust+0xac>
                else if(i==0)ind=3;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <cell_direction_adjust+0xa8>
 8001f52:	2303      	movs	r3, #3
 8001f54:	61bb      	str	r3, [r7, #24]
                break;
 8001f56:	e001      	b.n	8001f5c <cell_direction_adjust+0xac>
                else ind=2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
                break;
 8001f5c:	bf00      	nop
        }
        cell_new.walls[i]=cell.walls[ind];
 8001f5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	7819      	ldrb	r1, [r3, #0]
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	460a      	mov	r2, r1
 8001f72:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	ddaa      	ble.n	8001ed6 <cell_direction_adjust+0x26>
    }
    return cell_new;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	461c      	mov	r4, r3
 8001f84:	f107 0308 	add.w	r3, r7, #8
 8001f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc90      	pop	{r4, r7}
 8001f96:	b004      	add	sp, #16
 8001f98:	4770      	bx	lr
	...

08001f9c <update_walls>:

cell_info update_walls(int angle_now,int row,int col)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b095      	sub	sp, #84	; 0x54
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	61f8      	str	r0, [r7, #28]
 8001fa4:	61b9      	str	r1, [r7, #24]
 8001fa6:	617a      	str	r2, [r7, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
    cell_info new_cell;
    new_cell.angle_update=angle_now;
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
    double straight = distanceStraight();
 8001fae:	f7ff fc6f 	bl	8001890 <distanceStraight>
 8001fb2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    bool boolfront = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool boolleft = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool boolright = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	if(HAL_GPIO_ReadPin(Sensor_Left_GPIO_Port, Sensor_Left_Pin) == 0){
 8001fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fcc:	4868      	ldr	r0, [pc, #416]	; (8002170 <update_walls+0x1d4>)
 8001fce:	f003 f81f 	bl	8005010 <HAL_GPIO_ReadPin>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <update_walls+0x42>
		boolleft = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	}
	if(HAL_GPIO_ReadPin(Sensor_Right_GPIO_Port, Sensor_Right_Pin) == 0){
 8001fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe2:	4863      	ldr	r0, [pc, #396]	; (8002170 <update_walls+0x1d4>)
 8001fe4:	f003 f814 	bl	8005010 <HAL_GPIO_ReadPin>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <update_walls+0x58>
		boolright = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	}

    if(straight < 10){
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <update_walls+0x1d8>)
 8001ffa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ffe:	f7fe fd49 	bl	8000a94 <__aeabi_dcmplt>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <update_walls+0x72>
    	boolfront = 1;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }


    new_cell.walls[UP]=boolfront;
 800200e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002012:	f887 3020 	strb.w	r3, [r7, #32]
    new_cell.walls[DOWN]=0;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    new_cell.walls[LEFT]=boolleft;
 800201c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    new_cell.walls[RIGHT]=boolright;
 8002024:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    new_cell.dead=0;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    new_cell.visited=1;
 8002032:	2301      	movs	r3, #1
 8002034:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    maze.cells[row][col]=cell_direction_adjust(new_cell);
 8002038:	494f      	ldr	r1, [pc, #316]	; (8002178 <update_walls+0x1dc>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	011a      	lsls	r2, r3, #4
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	18cc      	adds	r4, r1, r3
 8002046:	4638      	mov	r0, r7
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002052:	f7ff ff2d 	bl	8001eb0 <cell_direction_adjust>
 8002056:	463b      	mov	r3, r7
 8002058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(new_cell.walls[UP]==1&&new_cell.walls[LEFT]==1&&new_cell.walls[RIGHT]==1&&row!=0&&col!=0)
 800205e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d017      	beq.n	8002096 <update_walls+0xfa>
 8002066:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800206a:	2b00      	cmp	r3, #0
 800206c:	d013      	beq.n	8002096 <update_walls+0xfa>
 800206e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00f      	beq.n	8002096 <update_walls+0xfa>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00c      	beq.n	8002096 <update_walls+0xfa>
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d009      	beq.n	8002096 <update_walls+0xfa>
    {
        maze.cells[row][col].dead=1;
 8002082:	493d      	ldr	r1, [pc, #244]	; (8002178 <update_walls+0x1dc>)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	011a      	lsls	r2, r3, #4
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	440b      	add	r3, r1
 8002090:	330c      	adds	r3, #12
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
    }
    for(int i=0;i<4;i++)
 8002096:	2300      	movs	r3, #0
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
 800209a:	e05a      	b.n	8002152 <update_walls+0x1b6>
    {
        int newRow=row+dy[i];
 800209c:	4a37      	ldr	r2, [pc, #220]	; (800217c <update_walls+0x1e0>)
 800209e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4413      	add	r3, r2
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
        int newCol=col+dx[i];
 80020aa:	4a35      	ldr	r2, [pc, #212]	; (8002180 <update_walls+0x1e4>)
 80020ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
        if(isValid(newRow,newCol))
 80020b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020bc:	f7ff fd7e 	bl	8001bbc <isValid>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d042      	beq.n	800214c <update_walls+0x1b0>
        {
            if(i==UP)maze.cells[newRow][newCol].walls[DOWN]=maze.cells[row][col].walls[UP];
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d112      	bne.n	80020f2 <update_walls+0x156>
 80020cc:	492a      	ldr	r1, [pc, #168]	; (8002178 <update_walls+0x1dc>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	011a      	lsls	r2, r3, #4
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	440b      	add	r3, r1
 80020da:	7818      	ldrb	r0, [r3, #0]
 80020dc:	4926      	ldr	r1, [pc, #152]	; (8002178 <update_walls+0x1dc>)
 80020de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e0:	011a      	lsls	r2, r3, #4
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	4413      	add	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	440b      	add	r3, r1
 80020ea:	3301      	adds	r3, #1
 80020ec:	4602      	mov	r2, r0
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e02c      	b.n	800214c <update_walls+0x1b0>
            else if(i==LEFT)maze.cells[newRow][newCol].walls[RIGHT]=maze.cells[row][col].walls[LEFT];
 80020f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d113      	bne.n	8002120 <update_walls+0x184>
 80020f8:	491f      	ldr	r1, [pc, #124]	; (8002178 <update_walls+0x1dc>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	011a      	lsls	r2, r3, #4
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	440b      	add	r3, r1
 8002106:	3302      	adds	r3, #2
 8002108:	7818      	ldrb	r0, [r3, #0]
 800210a:	491b      	ldr	r1, [pc, #108]	; (8002178 <update_walls+0x1dc>)
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	011a      	lsls	r2, r3, #4
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	4413      	add	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	440b      	add	r3, r1
 8002118:	3303      	adds	r3, #3
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e015      	b.n	800214c <update_walls+0x1b0>
            else if(i==RIGHT)maze.cells[newRow][newCol].walls[LEFT]=maze.cells[row][col].walls[RIGHT];
 8002120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002122:	2b03      	cmp	r3, #3
 8002124:	d112      	bne.n	800214c <update_walls+0x1b0>
 8002126:	4914      	ldr	r1, [pc, #80]	; (8002178 <update_walls+0x1dc>)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	011a      	lsls	r2, r3, #4
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	440b      	add	r3, r1
 8002134:	3303      	adds	r3, #3
 8002136:	7818      	ldrb	r0, [r3, #0]
 8002138:	490f      	ldr	r1, [pc, #60]	; (8002178 <update_walls+0x1dc>)
 800213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213c:	011a      	lsls	r2, r3, #4
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	4413      	add	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	440b      	add	r3, r1
 8002146:	3302      	adds	r3, #2
 8002148:	4602      	mov	r2, r0
 800214a:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++)
 800214c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214e:	3301      	adds	r3, #1
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
 8002152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002154:	2b03      	cmp	r3, #3
 8002156:	dda1      	ble.n	800209c <update_walls+0x100>
        }
    }
    return new_cell;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	461c      	mov	r4, r3
 800215c:	f107 0320 	add.w	r3, r7, #32
 8002160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002166:	69f8      	ldr	r0, [r7, #28]
 8002168:	374c      	adds	r7, #76	; 0x4c
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	40010800 	.word	0x40010800
 8002174:	40240000 	.word	0x40240000
 8002178:	2000051c 	.word	0x2000051c
 800217c:	0800cc38 	.word	0x0800cc38
 8002180:	0800cc28 	.word	0x0800cc28

08002184 <go_to_cell>:
void go_to_cell(int *angle_now,int dir)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    switch(dir)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	2b04      	cmp	r3, #4
 8002194:	d832      	bhi.n	80021fc <go_to_cell+0x78>
 8002196:	a201      	add	r2, pc, #4	; (adr r2, 800219c <go_to_cell+0x18>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021fd 	.word	0x080021fd
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021b7 	.word	0x080021b7
 80021a8:	080021d1 	.word	0x080021d1
 80021ac:	080021e7 	.word	0x080021e7
            {
                case -1:
                    break;
                case UP:
                    API_moveForward();
 80021b0:	f7fe fe1e 	bl	8000df0 <API_moveForward>
                    break;
 80021b4:	e023      	b.n	80021fe <go_to_cell+0x7a>
                case DOWN:
                    *angle_now-=180;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f1a3 02b4 	sub.w	r2, r3, #180	; 0xb4
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
                    API_turnRight();
 80021c2:	f7ff f801 	bl	80011c8 <API_turnRight>
                    API_turnRight();
 80021c6:	f7fe ffff 	bl	80011c8 <API_turnRight>
                    API_moveForward();
 80021ca:	f7fe fe11 	bl	8000df0 <API_moveForward>
                    break;
 80021ce:	e016      	b.n	80021fe <go_to_cell+0x7a>
                case LEFT:
                    *angle_now+=90;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	601a      	str	r2, [r3, #0]
                    API_turnLeft();
 80021dc:	f7ff f830 	bl	8001240 <API_turnLeft>
                    API_moveForward();
 80021e0:	f7fe fe06 	bl	8000df0 <API_moveForward>
                    break;
 80021e4:	e00b      	b.n	80021fe <go_to_cell+0x7a>
                case RIGHT:
                    *angle_now-=90;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
                    API_turnRight();
 80021f2:	f7fe ffe9 	bl	80011c8 <API_turnRight>
                    API_moveForward();
 80021f6:	f7fe fdfb 	bl	8000df0 <API_moveForward>
                    break;
 80021fa:	e000      	b.n	80021fe <go_to_cell+0x7a>
                default:
                    break;
 80021fc:	bf00      	nop
            }
            *angle_now = *angle_now % 360;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <go_to_cell+0xb8>)
 8002204:	fb82 1203 	smull	r1, r2, r2, r3
 8002208:	441a      	add	r2, r3
 800220a:	1211      	asrs	r1, r2, #8
 800220c:	17da      	asrs	r2, r3, #31
 800220e:	1a8a      	subs	r2, r1, r2
 8002210:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002214:	fb01 f202 	mul.w	r2, r1, r2
 8002218:	1a9a      	subs	r2, r3, r2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
            // �?ảm bảo góc không bị âm
            if (*angle_now < 0) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da05      	bge.n	8002232 <go_to_cell+0xae>
                *angle_now += 360;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]
            }
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	b60b60b7 	.word	0xb60b60b7

08002240 <check_wall_angle>:
bool check_wall_angle(cell_info cell,int *dir)
{
 8002240:	b490      	push	{r4, r7}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	463c      	mov	r4, r7
 8002248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    switch(cell.angle_update)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002252:	d00a      	beq.n	800226a <check_wall_angle+0x2a>
 8002254:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002258:	dc4d      	bgt.n	80022f6 <check_wall_angle+0xb6>
 800225a:	2bb4      	cmp	r3, #180	; 0xb4
 800225c:	d031      	beq.n	80022c2 <check_wall_angle+0x82>
 800225e:	2bb4      	cmp	r3, #180	; 0xb4
 8002260:	dc49      	bgt.n	80022f6 <check_wall_angle+0xb6>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d013      	beq.n	800228e <check_wall_angle+0x4e>
 8002266:	2b5a      	cmp	r3, #90	; 0x5a
 8002268:	e045      	b.n	80022f6 <check_wall_angle+0xb6>
    {
        case 90:
            break;
        case 270:
            if(*dir%2==0)*dir+=1;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <check_wall_angle+0x42>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	601a      	str	r2, [r3, #0]
            else *dir-=1;
            break;
 8002280:	e039      	b.n	80022f6 <check_wall_angle+0xb6>
            else *dir-=1;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1e5a      	subs	r2, r3, #1
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]
            break;
 800228c:	e033      	b.n	80022f6 <check_wall_angle+0xb6>
        case 0:
            if(*dir==0 || *dir ==1)*dir+=2;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <check_wall_angle+0x5e>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <check_wall_angle+0x6a>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1c9a      	adds	r2, r3, #2
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]
            else if(*dir==2)*dir=1;
            else *dir=0;
            break;
 80022a8:	e025      	b.n	80022f6 <check_wall_angle+0xb6>
            else if(*dir==2)*dir=1;
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d103      	bne.n	80022ba <check_wall_angle+0x7a>
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
            break;
 80022b8:	e01d      	b.n	80022f6 <check_wall_angle+0xb6>
            else *dir=0;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
            break;
 80022c0:	e019      	b.n	80022f6 <check_wall_angle+0xb6>
        case 180:
             if(*dir==2 || *dir ==3)*dir-=2;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d003      	beq.n	80022d2 <check_wall_angle+0x92>
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d105      	bne.n	80022de <check_wall_angle+0x9e>
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1e9a      	subs	r2, r3, #2
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]
            else if(*dir==0)*dir=3;
            else *dir=2;
            break;
 80022dc:	e00a      	b.n	80022f4 <check_wall_angle+0xb4>
            else if(*dir==0)*dir=3;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <check_wall_angle+0xae>
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2203      	movs	r2, #3
 80022ea:	601a      	str	r2, [r3, #0]
            break;
 80022ec:	e002      	b.n	80022f4 <check_wall_angle+0xb4>
            else *dir=2;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
            break;
 80022f4:	bf00      	nop
    }
    return cell.walls[*dir];
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3310      	adds	r3, #16
 80022fc:	443b      	add	r3, r7
 80022fe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bc90      	pop	{r4, r7}
 800230a:	4770      	bx	lr

0800230c <get_min_neighbour>:
coord get_min_neighbour(cell_info cell_wall,coord cur, int (*arr)[ROW][COL],bool change_)
{
 800230c:	b084      	sub	sp, #16
 800230e:	b590      	push	{r4, r7, lr}
 8002310:	b08f      	sub	sp, #60	; 0x3c
 8002312:	af02      	add	r7, sp, #8
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800231a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int min_neightbor=255;
 800231e:	23ff      	movs	r3, #255	; 0xff
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    coord next_step;
    next_step.value=-1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	61bb      	str	r3, [r7, #24]
    int ind;
    for (int dir = 0; dir < 4; ++dir) {
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
 800232c:	e04e      	b.n	80023cc <get_min_neighbour+0xc0>
        int newRow = cur.row + dy[dir]; // 0 0 -1 1
 800232e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002330:	492f      	ldr	r1, [pc, #188]	; (80023f0 <get_min_neighbour+0xe4>)
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002338:	4413      	add	r3, r2
 800233a:	623b      	str	r3, [r7, #32]
        int newCol = cur.col + dx[dir]; //1 -1 0 0
 800233c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800233e:	492d      	ldr	r1, [pc, #180]	; (80023f4 <get_min_neighbour+0xe8>)
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002346:	4413      	add	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]
        ind=dir;
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	60fb      	str	r3, [r7, #12]
        bool check_=cell_wall.walls[dir];
 800234e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(change_)check_=check_wall_angle(cell_wall,&ind);
 800235c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <get_min_neighbour+0x6e>
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800236e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002370:	f7ff ff66 	bl	8002240 <check_wall_angle>
 8002374:	4603      	mov	r3, r0
 8002376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(isValid(newRow,newCol) && !check_)
 800237a:	69f9      	ldr	r1, [r7, #28]
 800237c:	6a38      	ldr	r0, [r7, #32]
 800237e:	f7ff fc1d 	bl	8001bbc <isValid>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d01e      	beq.n	80023c6 <get_min_neighbour+0xba>
 8002388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d017      	beq.n	80023c6 <get_min_neighbour+0xba>
        {
            if((*arr)[newRow][newCol]<=min_neightbor)
 8002396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002398:	6a3a      	ldr	r2, [r7, #32]
 800239a:	0111      	lsls	r1, r2, #4
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	440a      	add	r2, r1
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a6:	429a      	cmp	r2, r3
 80023a8:	db0d      	blt.n	80023c6 <get_min_neighbour+0xba>
            {
                min_neightbor=(*arr)[newRow][newCol];
 80023aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	0111      	lsls	r1, r2, #4
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	440a      	add	r2, r1
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_step.row=newRow;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	613b      	str	r3, [r7, #16]
                next_step.col=newCol;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	617b      	str	r3, [r7, #20]
                next_step.value=ind;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
    for (int dir = 0; dir < 4; ++dir) {
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	3301      	adds	r3, #1
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	ddad      	ble.n	800232e <get_min_neighbour+0x22>
            }
        }
    }
    return next_step;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	461c      	mov	r4, r3
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	3734      	adds	r7, #52	; 0x34
 80023e6:	46bd      	mov	sp, r7
 80023e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023ec:	b004      	add	sp, #16
 80023ee:	4770      	bx	lr
 80023f0:	0800cc38 	.word	0x0800cc38
 80023f4:	0800cc28 	.word	0x0800cc28

080023f8 <flood>:
void flood(Stack *stack_flood,int (*arr)[ROW][COL])
{
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b09a      	sub	sp, #104	; 0x68
 80023fc:	af06      	add	r7, sp, #24
 80023fe:	6178      	str	r0, [r7, #20]
 8002400:	6139      	str	r1, [r7, #16]
    // log_out("flood");
    coord cur_stack;
    coord next_step;

    while(!isEmptyStack(stack_flood))
 8002402:	e0a3      	b.n	800254c <flood+0x154>
    {

        cur_stack=peekStack(stack_flood);
 8002404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002408:	6979      	ldr	r1, [r7, #20]
 800240a:	4618      	mov	r0, r3
 800240c:	f001 faa4 	bl	8003958 <peekStack>
        popStack(stack_flood);
 8002410:	463b      	mov	r3, r7
 8002412:	6979      	ldr	r1, [r7, #20]
 8002414:	4618      	mov	r0, r3
 8002416:	f001 fa69 	bl	80038ec <popStack>
        int min_neightbor=255;
 800241a:	23ff      	movs	r3, #255	; 0xff
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
        bool check_;

        next_step=get_min_neighbour(maze.cells[cur_stack.row][cur_stack.col],cur_stack,arr,0);
 800241e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002422:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8002426:	4950      	ldr	r1, [pc, #320]	; (8002568 <flood+0x170>)
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	4413      	add	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	440b      	add	r3, r1
 8002430:	2200      	movs	r2, #0
 8002432:	9205      	str	r2, [sp, #20]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	9204      	str	r2, [sp, #16]
 8002438:	ac01      	add	r4, sp, #4
 800243a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800243e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002440:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	9200      	str	r2, [sp, #0]
 8002448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244a:	4628      	mov	r0, r5
 800244c:	f7ff ff5e 	bl	800230c <get_min_neighbour>

        min_neightbor=(*arr)[next_step.row][next_step.col];
 8002450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	0109      	lsls	r1, r1, #4
 8002458:	440a      	add	r2, r1
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
        if((*arr)[cur_stack.row][cur_stack.col]-1 != min_neightbor )
 8002460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	0109      	lsls	r1, r1, #4
 8002468:	440a      	add	r2, r1
 800246a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246e:	3b01      	subs	r3, #1
 8002470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002472:	429a      	cmp	r2, r3
 8002474:	d053      	beq.n	800251e <flood+0x126>
        {
            for(int i =0 ;i<4;i++)
 8002476:	2300      	movs	r3, #0
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800247a:	e03b      	b.n	80024f4 <flood+0xfc>
            {
                coord cur_add;
                cur_add.row= cur_stack.row + dy[i]; // 0 0 -1 1
 800247c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247e:	493b      	ldr	r1, [pc, #236]	; (800256c <flood+0x174>)
 8002480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002482:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002486:	4413      	add	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
                cur_add.col= cur_stack.col + dx[i]; //1 -1 0 0
 800248a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248c:	4938      	ldr	r1, [pc, #224]	; (8002570 <flood+0x178>)
 800248e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002490:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002494:	4413      	add	r3, r2
 8002496:	61fb      	str	r3, [r7, #28]
                check_=maze.cells[cur_stack.row][cur_stack.col].walls[i];
 8002498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	4932      	ldr	r1, [pc, #200]	; (8002568 <flood+0x170>)
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	4413      	add	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	18ca      	adds	r2, r1, r3
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	4413      	add	r3, r2
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                if(isValid(cur_add.row,cur_add.col) &&(*arr)[cur_add.row][cur_add.col]!=0&&!check_)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fb80 	bl	8001bbc <isValid>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d015      	beq.n	80024ee <flood+0xf6>
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	0109      	lsls	r1, r1, #4
 80024ca:	440a      	add	r2, r1
 80024cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <flood+0xf6>
 80024d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <flood+0xf6>
                {
                    pushStack(stack_flood,cur_add);
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f001 f9d0 	bl	800388e <pushStack>
            for(int i =0 ;i<4;i++)
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	3301      	adds	r3, #1
 80024f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	ddc0      	ble.n	800247c <flood+0x84>
                }
            }
            if((*arr)[cur_stack.row][cur_stack.col]!=0)(*arr)[cur_stack.row][cur_stack.col]=min_neightbor+1;
 80024fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	0109      	lsls	r1, r1, #4
 8002502:	440a      	add	r2, r1
 8002504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <flood+0x126>
 800250c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800250e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002512:	1c59      	adds	r1, r3, #1
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	0100      	lsls	r0, r0, #4
 8002518:	4402      	add	r2, r0
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        int stack_size=sizeStack(stack_flood);
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f001 fa4a 	bl	80039b8 <sizeStack>
 8002524:	63f8      	str	r0, [r7, #60]	; 0x3c
        if(stack_size>=35){
 8002526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002528:	2b22      	cmp	r3, #34	; 0x22
 800252a:	dd0f      	ble.n	800254c <flood+0x154>
            for(int i=0;i<stack_size;i++)
 800252c:	2300      	movs	r3, #0
 800252e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002530:	e007      	b.n	8002542 <flood+0x14a>
            {
                popStack(stack_flood);
 8002532:	463b      	mov	r3, r7
 8002534:	6979      	ldr	r1, [r7, #20]
 8002536:	4618      	mov	r0, r3
 8002538:	f001 f9d8 	bl	80038ec <popStack>
            for(int i=0;i<stack_size;i++)
 800253c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253e:	3301      	adds	r3, #1
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
 8002542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002546:	429a      	cmp	r2, r3
 8002548:	dbf3      	blt.n	8002532 <flood+0x13a>
            }
            return;
 800254a:	e009      	b.n	8002560 <flood+0x168>
    while(!isEmptyStack(stack_flood))
 800254c:	6978      	ldr	r0, [r7, #20]
 800254e:	f001 f975 	bl	800383c <isEmptyStack>
 8002552:	4603      	mov	r3, r0
 8002554:	f083 0301 	eor.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f47f af52 	bne.w	8002404 <flood+0xc>
        }
    }
}
 8002560:	3750      	adds	r7, #80	; 0x50
 8002562:	46bd      	mov	sp, r7
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
 8002566:	bf00      	nop
 8002568:	2000051c 	.word	0x2000051c
 800256c:	0800cc38 	.word	0x0800cc38
 8002570:	0800cc28 	.word	0x0800cc28

08002574 <floodfill>:
coord floodfill(coord start,coord dest,int (*arr)[ROW][COL],int *angle_now)
{
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af06      	add	r7, sp, #24
 800257e:	f607 6418 	addw	r4, r7, #3608	; 0xe18
 8002582:	f6a4 640c 	subw	r4, r4, #3596	; 0xe0c
 8002586:	6020      	str	r0, [r4, #0]
 8002588:	f607 6018 	addw	r0, r7, #3608	; 0xe18
 800258c:	f6a0 6018 	subw	r0, r0, #3608	; 0xe18
 8002590:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Queue path_queue;
    initializeQueue(&path_queue);
 8002594:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8002598:	f103 0318 	add.w	r3, r3, #24
 800259c:	3b2c      	subs	r3, #44	; 0x2c
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 f825 	bl	80035ee <initializeQueue>

    pushQueue(&path_queue,start);
 80025a4:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80025a8:	f6a3 6318 	subw	r3, r3, #3608	; 0xe18
 80025ac:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 80025b0:	f100 0018 	add.w	r0, r0, #24
 80025b4:	382c      	subs	r0, #44	; 0x2c
 80025b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b8:	f001 f85e 	bl	8003678 <pushQueue>
    coord cur=start;
 80025bc:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 80025c0:	f103 0318 	add.w	r3, r3, #24
 80025c4:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 80025c8:	f607 6218 	addw	r2, r7, #3608	; 0xe18
 80025cc:	f6a2 6218 	subw	r2, r2, #3608	; 0xe18
 80025d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80025d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    cell_info new_cell;

    Stack stack_flood;
    initializeStack(&stack_flood);
 80025d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80025da:	3b6c      	subs	r3, #108	; 0x6c
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f91c 	bl	800381a <initializeStack>

    pushStack(&stack_flood,start);
 80025e2:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80025e6:	f6a3 6318 	subw	r3, r3, #3608	; 0xe18
 80025ea:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80025ee:	386c      	subs	r0, #108	; 0x6c
 80025f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f2:	f001 f94c 	bl	800388e <pushStack>

    int path_distance_value_find=0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80025fc:	f102 0214 	add.w	r2, r2, #20
 8002600:	6013      	str	r3, [r2, #0]
    // int save_row,save_col;
    coord next_step;

    while(1)
    {
        if(!isEmptyQueue(&path_queue)) // dua ra quyet dinh va go
 8002602:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8002606:	f103 0318 	add.w	r3, r3, #24
 800260a:	3b2c      	subs	r3, #44	; 0x2c
 800260c:	4618      	mov	r0, r3
 800260e:	f001 f806 	bl	800361e <isEmptyQueue>
 8002612:	4603      	mov	r3, r0
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80bb 	beq.w	8002796 <floodfill+0x222>
        {
            cur = peekQueue(&path_queue);
 8002620:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8002624:	f103 0318 	add.w	r3, r3, #24
 8002628:	f6a3 62f8 	subw	r2, r3, #3832	; 0xef8
 800262c:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 8002630:	f103 0318 	add.w	r3, r3, #24
 8002634:	3b2c      	subs	r3, #44	; 0x2c
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f001 f865 	bl	8003708 <peekQueue>

            new_cell=update_walls(*angle_now,cur.row,cur.col);
 800263e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002642:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 800264e:	f103 0318 	add.w	r3, r3, #24
 8002652:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 800265c:	f103 0318 	add.w	r3, r3, #24
 8002660:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f507 5078 	add.w	r0, r7, #15872	; 0x3e00
 800266a:	f100 0018 	add.w	r0, r0, #24
 800266e:	f6a0 7008 	subw	r0, r0, #3848	; 0xf08
 8002672:	f7ff fc93 	bl	8001f9c <update_walls>

            if((*arr)[cur.row][cur.col]==(*arr)[dest.row][dest.col]){
 8002676:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 800267a:	f103 0318 	add.w	r3, r3, #24
 800267e:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8002688:	f103 0318 	add.w	r3, r3, #24
 800268c:	f6a3 63f8 	subw	r3, r3, #3832	; 0xef8
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002696:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0109      	lsls	r1, r1, #4
 800269e:	440a      	add	r2, r1
 80026a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026a4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80026a8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80026b2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80026bc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0100      	lsls	r0, r0, #4
 80026c4:	4401      	add	r1, r0
 80026c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d065      	beq.n	800279a <floodfill+0x226>
                break;
            }
            flood(&stack_flood,arr);
 80026ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026d2:	3b6c      	subs	r3, #108	; 0x6c
 80026d4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80026d8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80026dc:	6811      	ldr	r1, [r2, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fe8a 	bl	80023f8 <flood>
            popQueue(&path_queue);
 80026e4:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80026e8:	f103 0318 	add.w	r3, r3, #24
 80026ec:	3b2c      	subs	r3, #44	; 0x2c
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fff0 	bl	80036d4 <popQueue>
            next_step=get_min_neighbour(new_cell,cur,arr,1);
 80026f4:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80026f8:	f6a3 55f8 	subw	r5, r3, #3576	; 0xdf8
 80026fc:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 8002700:	f103 0318 	add.w	r3, r3, #24
 8002704:	f6a3 7308 	subw	r3, r3, #3848	; 0xf08
 8002708:	2201      	movs	r2, #1
 800270a:	9205      	str	r2, [sp, #20]
 800270c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8002710:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	9204      	str	r2, [sp, #16]
 8002718:	f507 5278 	add.w	r2, r7, #15872	; 0x3e00
 800271c:	f102 0218 	add.w	r2, r2, #24
 8002720:	f6a2 62f8 	subw	r2, r2, #3832	; 0xef8
 8002724:	ac01      	add	r4, sp, #4
 8002726:	ca07      	ldmia	r2, {r0, r1, r2}
 8002728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	9200      	str	r2, [sp, #0]
 8002730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002732:	4628      	mov	r0, r5
 8002734:	f7ff fdea 	bl	800230c <get_min_neighbour>
            pushQueue(&path_queue,next_step);
 8002738:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800273c:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8002740:	f507 503d 	add.w	r0, r7, #12096	; 0x2f40
 8002744:	f100 0018 	add.w	r0, r0, #24
 8002748:	382c      	subs	r0, #44	; 0x2c
 800274a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274c:	f000 ff94 	bl	8003678 <pushQueue>
            pushStack(&stack_flood,next_step);
 8002750:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8002754:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 8002758:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800275c:	386c      	subs	r0, #108	; 0x6c
 800275e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002760:	f001 f895 	bl	800388e <pushStack>
            go_to_cell(angle_now,next_step.value);
 8002764:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8002768:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4619      	mov	r1, r3
 8002770:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002774:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f7ff fd03 	bl	8002184 <go_to_cell>
            path_distance_value_find++;
 800277e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002782:	f103 0314 	add.w	r3, r3, #20
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 800278e:	f102 0214 	add.w	r2, r2, #20
 8002792:	6013      	str	r3, [r2, #0]
        if(!isEmptyQueue(&path_queue)) // dua ra quyet dinh va go
 8002794:	e735      	b.n	8002602 <floodfill+0x8e>
        }
        else{
            break;
 8002796:	bf00      	nop
 8002798:	e009      	b.n	80027ae <floodfill+0x23a>
                break;
 800279a:	bf00      	nop
        }
    }

    while(!isEmptyQueue(&path_queue)) popQueue(&path_queue);
 800279c:	e007      	b.n	80027ae <floodfill+0x23a>
 800279e:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80027a2:	f103 0318 	add.w	r3, r3, #24
 80027a6:	3b2c      	subs	r3, #44	; 0x2c
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 ff93 	bl	80036d4 <popQueue>
 80027ae:	f507 533d 	add.w	r3, r7, #12096	; 0x2f40
 80027b2:	f103 0318 	add.w	r3, r3, #24
 80027b6:	3b2c      	subs	r3, #44	; 0x2c
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 ff30 	bl	800361e <isEmptyQueue>
 80027be:	4603      	mov	r3, r0
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e9      	bne.n	800279e <floodfill+0x22a>

    coord p_return={next_step.row,next_step.col,0};
 80027ca:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80027ce:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80027d8:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80027e2:	f6a3 53f8 	subw	r3, r3, #3576	; 0xdf8
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80027ec:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 80027f6:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
    return p_return;
 80027fe:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 8002802:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f607 6218 	addw	r2, r7, #3608	; 0xe18
 800280c:	f6a2 6204 	subw	r2, r2, #3588	; 0xe04
 8002810:	ca07      	ldmia	r2, {r0, r1, r2}
 8002812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002816:	f607 6318 	addw	r3, r7, #3608	; 0xe18
 800281a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800282c <init_flood_start>:
void init_flood_start(int (*arr)[ROW][COL],int row_,int col_,int back_)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b09a      	sub	sp, #104	; 0x68
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
    int count_=0;
 800283a:	2300      	movs	r3, #0
 800283c:	65bb      	str	r3, [r7, #88]	; 0x58
    for(int i=0;i<16;i++)
 800283e:	2300      	movs	r3, #0
 8002840:	667b      	str	r3, [r7, #100]	; 0x64
 8002842:	e037      	b.n	80028b4 <init_flood_start+0x88>
    {
        for(int j = 0 ;j<16;j++)
 8002844:	2300      	movs	r3, #0
 8002846:	663b      	str	r3, [r7, #96]	; 0x60
 8002848:	e02e      	b.n	80028a8 <init_flood_start+0x7c>
        {
            (*arr)[i][j]=-1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800284e:	0111      	lsls	r1, r2, #4
 8002850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002852:	440a      	add	r2, r1
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            if(back_==2&&maze.cells[i][j].visited==false){
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11f      	bne.n	80028a2 <init_flood_start+0x76>
 8002862:	496b      	ldr	r1, [pc, #428]	; (8002a10 <init_flood_start+0x1e4>)
 8002864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002866:	011a      	lsls	r2, r3, #4
 8002868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800286a:	4413      	add	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	440b      	add	r3, r1
 8002870:	3304      	adds	r3, #4
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	f083 0301 	eor.w	r3, r3, #1
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d011      	beq.n	80028a2 <init_flood_start+0x76>
                (*arr)[i][j]=255;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002882:	0111      	lsls	r1, r2, #4
 8002884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002886:	440a      	add	r2, r1
 8002888:	21ff      	movs	r1, #255	; 0xff
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                maze.cells[i][j].dead=true;
 800288e:	4960      	ldr	r1, [pc, #384]	; (8002a10 <init_flood_start+0x1e4>)
 8002890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002892:	011a      	lsls	r2, r3, #4
 8002894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002896:	4413      	add	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	440b      	add	r3, r1
 800289c:	330c      	adds	r3, #12
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
        for(int j = 0 ;j<16;j++)
 80028a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a4:	3301      	adds	r3, #1
 80028a6:	663b      	str	r3, [r7, #96]	; 0x60
 80028a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	ddcd      	ble.n	800284a <init_flood_start+0x1e>
    for(int i=0;i<16;i++)
 80028ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b0:	3301      	adds	r3, #1
 80028b2:	667b      	str	r3, [r7, #100]	; 0x64
 80028b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	ddc4      	ble.n	8002844 <init_flood_start+0x18>
            }
        }
    }
    if(back_!=1)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d043      	beq.n	8002948 <init_flood_start+0x11c>
    {
        coord point2={row_+1,col_,count_};
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3301      	adds	r3, #1
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        pushQueue(&myQueue,point2);
 80028ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d4:	484f      	ldr	r0, [pc, #316]	; (8002a14 <init_flood_start+0x1e8>)
 80028d6:	f000 fecf 	bl	8003678 <pushQueue>
        (*arr)[row_+1][col_]=0;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0111      	lsls	r1, r2, #4
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	440a      	add	r2, r1
 80028e6:	2100      	movs	r1, #0
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        coord point3={row_,col_+1,count_};
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3301      	adds	r3, #1
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
        pushQueue(&myQueue,point3);
 80028fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002900:	4844      	ldr	r0, [pc, #272]	; (8002a14 <init_flood_start+0x1e8>)
 8002902:	f000 feb9 	bl	8003678 <pushQueue>
        (*arr)[row_][col_+1]=0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	0109      	lsls	r1, r1, #4
 8002910:	440a      	add	r2, r1
 8002912:	2100      	movs	r1, #0
 8002914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        coord point4={row_+1,col_+1,count_};
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	3301      	adds	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3301      	adds	r3, #1
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
        pushQueue(&myQueue,point4);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292e:	4839      	ldr	r0, [pc, #228]	; (8002a14 <init_flood_start+0x1e8>)
 8002930:	f000 fea2 	bl	8003678 <pushQueue>
        (*arr)[row_+1][col_+1]=0;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1c59      	adds	r1, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	0109      	lsls	r1, r1, #4
 8002940:	440a      	add	r2, r1
 8002942:	2100      	movs	r1, #0
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    coord point={row_,col_,count_};
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	643b      	str	r3, [r7, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	647b      	str	r3, [r7, #68]	; 0x44
 8002950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002952:	64bb      	str	r3, [r7, #72]	; 0x48
    pushQueue(&myQueue,point);
 8002954:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295a:	482e      	ldr	r0, [pc, #184]	; (8002a14 <init_flood_start+0x1e8>)
 800295c:	f000 fe8c 	bl	8003678 <pushQueue>
    (*arr)[row_][col_]=0;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	0111      	lsls	r1, r2, #4
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	440a      	add	r2, r1
 800296a:	2100      	movs	r1, #0
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    while(!isEmptyQueue(&myQueue))
 8002970:	e040      	b.n	80029f4 <init_flood_start+0x1c8>
    {
        coord frontCoord = peekQueue(&myQueue);
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4927      	ldr	r1, [pc, #156]	; (8002a14 <init_flood_start+0x1e8>)
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fec5 	bl	8003708 <peekQueue>
        popQueue(&myQueue);
 800297e:	4825      	ldr	r0, [pc, #148]	; (8002a14 <init_flood_start+0x1e8>)
 8002980:	f000 fea8 	bl	80036d4 <popQueue>
          for (int i = 0; i < 4; ++i) {
 8002984:	2300      	movs	r3, #0
 8002986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002988:	e029      	b.n	80029de <init_flood_start+0x1b2>
                int newRow = frontCoord.row + dy[i]; // 0 0 -1 1
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4922      	ldr	r1, [pc, #136]	; (8002a18 <init_flood_start+0x1ec>)
 800298e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002994:	4413      	add	r3, r2
 8002996:	657b      	str	r3, [r7, #84]	; 0x54
                int newCol = frontCoord.col + dx[i]; //1 -1 0 0
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4920      	ldr	r1, [pc, #128]	; (8002a1c <init_flood_start+0x1f0>)
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029a2:	4413      	add	r3, r2
 80029a4:	653b      	str	r3, [r7, #80]	; 0x50
                bool check_=maze.cells[frontCoord.row][frontCoord.col].walls[i];
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4919      	ldr	r1, [pc, #100]	; (8002a10 <init_flood_start+0x1e4>)
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	18ca      	adds	r2, r1, r3
 80029b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(!check_)check_and_fill(*arr,newRow,newCol,frontCoord.value);
 80029be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <init_flood_start+0x1ac>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80029d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff f93a 	bl	8001c4c <check_and_fill>
          for (int i = 0; i < 4; ++i) {
 80029d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029da:	3301      	adds	r3, #1
 80029dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	ddd2      	ble.n	800298a <init_flood_start+0x15e>
          }
          if(sizeQueue(&myQueue)>120){
 80029e4:	480b      	ldr	r0, [pc, #44]	; (8002a14 <init_flood_start+0x1e8>)
 80029e6:	f000 fec1 	bl	800376c <sizeQueue>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b78      	cmp	r3, #120	; 0x78
 80029ee:	dd01      	ble.n	80029f4 <init_flood_start+0x1c8>
            break;
 80029f0:	bf00      	nop
          }
    }
}
 80029f2:	e008      	b.n	8002a06 <init_flood_start+0x1da>
    while(!isEmptyQueue(&myQueue))
 80029f4:	4807      	ldr	r0, [pc, #28]	; (8002a14 <init_flood_start+0x1e8>)
 80029f6:	f000 fe12 	bl	800361e <isEmptyQueue>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f083 0301 	eor.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1b5      	bne.n	8002972 <init_flood_start+0x146>
}
 8002a06:	bf00      	nop
 8002a08:	3768      	adds	r7, #104	; 0x68
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000051c 	.word	0x2000051c
 8002a14:	2000151c 	.word	0x2000151c
 8002a18:	0800cc38 	.word	0x0800cc38
 8002a1c:	0800cc28 	.word	0x0800cc28

08002a20 <shorted_path_go>:

void shorted_path_go(int (*arr)[ROW][COL],int angle_now,coord start,coord dest)
{
 8002a20:	b082      	sub	sp, #8
 8002a22:	b590      	push	{r4, r7, lr}
 8002a24:	f6ad 7df4 	subw	sp, sp, #4084	; 0xff4
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	f507 647f 	add.w	r4, r7, #4080	; 0xff0
 8002a2e:	f6a4 74ec 	subw	r4, r4, #4076	; 0xfec
 8002a32:	6020      	str	r0, [r4, #0]
 8002a34:	f507 607f 	add.w	r0, r7, #4080	; 0xff0
 8002a38:	f5a0 607f 	sub.w	r0, r0, #4080	; 0xff0
 8002a3c:	6001      	str	r1, [r0, #0]
 8002a3e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002a42:	e881 000c 	stmia.w	r1, {r2, r3}
    QueueInt next_dir_path;
    initializeQueueInt(&next_dir_path);
 8002a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fea3 	bl	8003796 <initializeQueueInt>

    int save_row,save_col;
    coord cur=start;
 8002a50:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002a54:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002a58:	461c      	mov	r4, r3
 8002a5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002a5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for(int i=0;i<(*arr)[start.row][start.col];i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8002a6c:	e0af      	b.n	8002bce <shorted_path_go+0x1ae>
    {
            int next_dir=-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
            int newRow;
            int newCol;
            for (int dir = 0; dir < 4; ++dir) {
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
 8002a7c:	e071      	b.n	8002b62 <shorted_path_go+0x142>
                newRow = cur.row + dy[dir]; // 0 0 -1 1
 8002a7e:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002a82:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4960      	ldr	r1, [pc, #384]	; (8002c0c <shorted_path_go+0x1ec>)
 8002a8a:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8002a8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a92:	4413      	add	r3, r2
 8002a94:	f8c7 3fd8 	str.w	r3, [r7, #4056]	; 0xfd8
                newCol = cur.col + dx[dir]; //1 -1 0 0
 8002a98:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002a9c:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	495b      	ldr	r1, [pc, #364]	; (8002c10 <shorted_path_go+0x1f0>)
 8002aa4:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8002aa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002aac:	4413      	add	r3, r2
 8002aae:	f8c7 3fd4 	str.w	r3, [r7, #4052]	; 0xfd4
                bool check_=maze.cells[cur.row][cur.col].walls[dir];
 8002ab2:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002ab6:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002ac0:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4953      	ldr	r1, [pc, #332]	; (8002c14 <shorted_path_go+0x1f4>)
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	18ca      	adds	r2, r1, r3
 8002ad0:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	f887 3fd3 	strb.w	r3, [r7, #4051]	; 0xfd3
                if(isValid(newRow,newCol) && !check_)
 8002adc:	f8d7 1fd4 	ldr.w	r1, [r7, #4052]	; 0xfd4
 8002ae0:	f8d7 0fd8 	ldr.w	r0, [r7, #4056]	; 0xfd8
 8002ae4:	f7ff f86a 	bl	8001bbc <isValid>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d034      	beq.n	8002b58 <shorted_path_go+0x138>
 8002aee:	f897 3fd3 	ldrb.w	r3, [r7, #4051]	; 0xfd3
 8002af2:	f083 0301 	eor.w	r3, r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02d      	beq.n	8002b58 <shorted_path_go+0x138>
                {
                    if((*arr)[newRow][newCol]<(*arr)[cur.row][cur.col])
 8002afc:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b00:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8d7 2fd8 	ldr.w	r2, [r7, #4056]	; 0xfd8
 8002b0a:	0111      	lsls	r1, r2, #4
 8002b0c:	f8d7 2fd4 	ldr.w	r2, [r7, #4052]	; 0xfd4
 8002b10:	440a      	add	r2, r1
 8002b12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b16:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b1a:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b24:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b2e:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0100      	lsls	r0, r0, #4
 8002b36:	4401      	add	r1, r0
 8002b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	da0b      	bge.n	8002b58 <shorted_path_go+0x138>
                    {
                        next_dir=dir;
 8002b40:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8002b44:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
                        save_row=newRow;
 8002b48:	f8d7 3fd8 	ldr.w	r3, [r7, #4056]	; 0xfd8
 8002b4c:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
                        save_col=newCol;
 8002b50:	f8d7 3fd4 	ldr.w	r3, [r7, #4052]	; 0xfd4
 8002b54:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
            for (int dir = 0; dir < 4; ++dir) {
 8002b58:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
 8002b62:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	; 0xfdc
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	dd89      	ble.n	8002a7e <shorted_path_go+0x5e>
                    }
                }
            }
            if(next_dir!=-1)
 8002b6a:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	; 0xfe0
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d027      	beq.n	8002bc4 <shorted_path_go+0x1a4>
            {
                cur.row=save_row;
 8002b74:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b78:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002b7c:	f8d7 2fec 	ldr.w	r2, [r7, #4076]	; 0xfec
 8002b80:	601a      	str	r2, [r3, #0]
                cur.col=save_col;
 8002b82:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002b86:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8002b8a:	f8d7 2fe8 	ldr.w	r2, [r7, #4072]	; 0xfe8
 8002b8e:	605a      	str	r2, [r3, #4]
                pushQueueInt(&next_dir_path,next_dir);
 8002b90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b94:	f8d7 1fe0 	ldr.w	r1, [r7, #4064]	; 0xfe0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fe20 	bl	80037de <pushQueueInt>
                char value[20];
                intToStr((*arr)[save_row][save_col], value);
 8002b9e:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002ba2:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8d7 2fec 	ldr.w	r2, [r7, #4076]	; 0xfec
 8002bac:	0111      	lsls	r1, r2, #4
 8002bae:	f8d7 2fe8 	ldr.w	r2, [r7, #4072]	; 0xfe8
 8002bb2:	440a      	add	r2, r1
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	f107 0208 	add.w	r2, r7, #8
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f966 	bl	8001e90 <intToStr>
    for(int i=0;i<(*arr)[start.row][start.col];i++)
 8002bc4:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 8002bce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002bd8:	f103 0304 	add.w	r3, r3, #4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002be2:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	0109      	lsls	r1, r1, #4
 8002bea:	440a      	add	r2, r1
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	f8d7 2fe4 	ldr.w	r2, [r7, #4068]	; 0xfe4
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f6ff af3a 	blt.w	8002a6e <shorted_path_go+0x4e>

            }
    }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	f607 77f4 	addw	r7, r7, #4084	; 0xff4
 8002c02:	46bd      	mov	sp, r7
 8002c04:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c08:	b002      	add	sp, #8
 8002c0a:	4770      	bx	lr
 8002c0c:	0800cc38 	.word	0x0800cc38
 8002c10:	0800cc28 	.word	0x0800cc28
 8002c14:	2000051c 	.word	0x2000051c

08002c18 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d10a      	bne.n	8002c40 <HAL_TIM_IC_CaptureCallback+0x28>
    {
        counterTim2 = __HAL_TIM_GET_COUNTER(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002c32:	6013      	str	r3, [r2, #0]
        countTim2 = (int16_t)counterTim2;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_TIM_IC_CaptureCallback+0x54>)
 8002c3c:	801a      	strh	r2, [r3, #0]
    else if (htim->Instance == TIM3)
    {
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
        countTim3 = (int16_t)counterTim3;
    }
}
 8002c3e:	e00e      	b.n	8002c5e <HAL_TIM_IC_CaptureCallback+0x46>
    else if (htim->Instance == TIM3)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d109      	bne.n	8002c5e <HAL_TIM_IC_CaptureCallback+0x46>
        counterTim3 = __HAL_TIM_GET_COUNTER(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002c52:	6013      	str	r3, [r2, #0]
        countTim3 = (int16_t)counterTim3;
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002c5c:	801a      	strh	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	2000050c 	.word	0x2000050c
 8002c6c:	20000510 	.word	0x20000510
 8002c70:	40000400 	.word	0x40000400
 8002c74:	20000514 	.word	0x20000514
 8002c78:	20000518 	.word	0x20000518

08002c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7e:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 8002c82:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c84:	f001 fa32 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c88:	f000 f8fc 	bl	8002e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c8c:	f000 fc24 	bl	80034d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002c90:	f000 f954 	bl	8002f3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c94:	f000 fa0c 	bl	80030b0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002c98:	f000 fa38 	bl	800310c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c9c:	f000 fad4 	bl	8003248 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ca0:	f000 fb26 	bl	80032f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ca4:	f000 fb78 	bl	8003398 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002ca8:	f000 fbec 	bl	8003484 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8002cac:	f000 f984 	bl	8002fb8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002cb0:	f000 f9c0 	bl	8003034 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8002cb4:	213c      	movs	r1, #60	; 0x3c
 8002cb6:	486d      	ldr	r0, [pc, #436]	; (8002e6c <main+0x1f0>)
 8002cb8:	f004 f9fa 	bl	80070b0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002cbc:	213c      	movs	r1, #60	; 0x3c
 8002cbe:	486c      	ldr	r0, [pc, #432]	; (8002e70 <main+0x1f4>)
 8002cc0:	f004 f9f6 	bl	80070b0 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002cc4:	210c      	movs	r1, #12
 8002cc6:	486b      	ldr	r0, [pc, #428]	; (8002e74 <main+0x1f8>)
 8002cc8:	f004 f896 	bl	8006df8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002ccc:	210c      	movs	r1, #12
 8002cce:	486a      	ldr	r0, [pc, #424]	; (8002e78 <main+0x1fc>)
 8002cd0:	f004 f892 	bl	8006df8 <HAL_TIM_PWM_Start>


//  API_moveForward();
//  while(1);

  while (MPU6050_Init(&hi2c1) == 1);
 8002cd4:	bf00      	nop
 8002cd6:	4869      	ldr	r0, [pc, #420]	; (8002e7c <main+0x200>)
 8002cd8:	f7fe fb1c 	bl	8001314 <MPU6050_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d0f9      	beq.n	8002cd6 <main+0x5a>
  filter_gyro();
 8002ce2:	f7fe fec5 	bl	8001a70 <filter_gyro>
//		currentTime = HAL_GetTick();
//		elapsedTime = currentTime - previousTime;
//		dt = ((double) elapsedTime) / 1000;
//  }

  initializeQueue(&myQueue);
 8002ce6:	4866      	ldr	r0, [pc, #408]	; (8002e80 <main+0x204>)
 8002ce8:	f000 fc81 	bl	80035ee <initializeQueue>
  int arr[ROW][COL];

  init_arr(arr,ROW,COL);
 8002cec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fe ff7f 	bl	8001bf8 <init_arr>
  init_flood(arr,7,7);
 8002cfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cfe:	2207      	movs	r2, #7
 8002d00:	2107      	movs	r1, #7
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe ffde 	bl	8001cc4 <init_flood>
  init_maze();
 8002d08:	f7ff f872 	bl	8001df0 <init_maze>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  coord start={0,0,arr[0][0]};
 8002d0c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d10:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d1c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d28:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d32:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002d36:	609a      	str	r2, [r3, #8]
  coord dest={7,7,arr[7][7]};
 8002d38:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d3c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d48:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d54:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002d58:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 8002d5c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d60:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8002d64:	609a      	str	r2, [r3, #8]
  int angle_now=90;
 8002d66:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d6a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8002d6e:	225a      	movs	r2, #90	; 0x5a
 8002d70:	601a      	str	r2, [r3, #0]
  coord new_coord;
  new_coord = floodfill(start,dest,&arr,&angle_now);
 8002d72:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d76:	f5a3 6585 	sub.w	r5, r3, #1064	; 0x428
 8002d7a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002d7e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002d82:	f107 021c 	add.w	r2, r7, #28
 8002d86:	9204      	str	r2, [sp, #16]
 8002d88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d8c:	9203      	str	r2, [sp, #12]
 8002d8e:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002d92:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8002d96:	466c      	mov	r4, sp
 8002d98:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da0:	4628      	mov	r0, r5
 8002da2:	f7ff fbe7 	bl	8002574 <floodfill>

  init_flood_start(&arr,0,0,1);
 8002da6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002daa:	2301      	movs	r3, #1
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	f7ff fd3c 	bl	800282c <init_flood_start>
  new_coord=floodfill(new_coord,start,&arr,&angle_now);
 8002db4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002db8:	f5a3 6685 	sub.w	r6, r3, #1064	; 0x428
 8002dbc:	463d      	mov	r5, r7
 8002dbe:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002dc2:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002dc6:	f107 021c 	add.w	r2, r7, #28
 8002dca:	9204      	str	r2, [sp, #16]
 8002dcc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002dd0:	9203      	str	r2, [sp, #12]
 8002dd2:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002dd6:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8002dda:	466c      	mov	r4, sp
 8002ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de4:	4628      	mov	r0, r5
 8002de6:	f7ff fbc5 	bl	8002574 <floodfill>
 8002dea:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002dee:	f5a3 6287 	sub.w	r2, r3, #1080	; 0x438
 8002df2:	4633      	mov	r3, r6
 8002df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  init_flood_start(&arr,7,7,2);
 8002dfa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002dfe:	2302      	movs	r3, #2
 8002e00:	2207      	movs	r2, #7
 8002e02:	2107      	movs	r1, #7
 8002e04:	f7ff fd12 	bl	800282c <init_flood_start>
  shorted_path_go(&arr,angle_now,new_coord,dest);
 8002e08:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002e0c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8002e10:	681e      	ldr	r6, [r3, #0]
 8002e12:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002e16:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002e1a:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8002e1e:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002e22:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8002e26:	ac01      	add	r4, sp, #4
 8002e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	9200      	str	r2, [sp, #0]
 8002e32:	cb0c      	ldmia	r3, {r2, r3}
 8002e34:	4631      	mov	r1, r6
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7ff fdf2 	bl	8002a20 <shorted_path_go>
  floodfill(start,dest,&arr,&angle_now);
 8002e3c:	463d      	mov	r5, r7
 8002e3e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8002e42:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002e46:	f107 021c 	add.w	r2, r7, #28
 8002e4a:	9204      	str	r2, [sp, #16]
 8002e4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e50:	9203      	str	r2, [sp, #12]
 8002e52:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002e56:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8002e5a:	466c      	mov	r4, sp
 8002e5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e64:	4628      	mov	r0, r5
 8002e66:	f7ff fb85 	bl	8002574 <floodfill>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <main+0x1ee>
 8002e6c:	20000354 	.word	0x20000354
 8002e70:	2000039c 	.word	0x2000039c
 8002e74:	2000030c 	.word	0x2000030c
 8002e78:	200003e4 	.word	0x200003e4
 8002e7c:	200002b8 	.word	0x200002b8
 8002e80:	2000151c 	.word	0x2000151c

08002e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b096      	sub	sp, #88	; 0x58
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e8e:	2228      	movs	r2, #40	; 0x28
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f006 fac2 	bl	800941c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ed4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ed8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 f944 	bl	800616c <HAL_RCC_OscConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002eea:	f000 fb7b 	bl	80035e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eee:	230f      	movs	r3, #15
 8002ef0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	2102      	movs	r1, #2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fbb0 	bl	8006670 <HAL_RCC_ClockConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002f16:	f000 fb65 	bl	80035e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fd31 	bl	800698c <HAL_RCCEx_PeriphCLKConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002f30:	f000 fb58 	bl	80035e4 <Error_Handler>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3758      	adds	r7, #88	; 0x58
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f4e:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <MX_ADC1_Init+0x78>)
 8002f50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f52:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002f6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f7a:	f001 f93d 	bl	80041f8 <HAL_ADC_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002f84:	f000 fb2e 	bl	80035e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002f90:	2307      	movs	r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <MX_ADC1_Init+0x74>)
 8002f9a:	f001 fc03 	bl	80047a4 <HAL_ADC_ConfigChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002fa4:	f000 fb1e 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000228 	.word	0x20000228
 8002fb4:	40012400 	.word	0x40012400

08002fb8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <MX_ADC2_Init+0x74>)
 8002fca:	4a19      	ldr	r2, [pc, #100]	; (8003030 <MX_ADC2_Init+0x78>)
 8002fcc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <MX_ADC2_Init+0x74>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <MX_ADC2_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <MX_ADC2_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_ADC2_Init+0x74>)
 8002fe2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002fe6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <MX_ADC2_Init+0x74>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_ADC2_Init+0x74>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ff4:	480d      	ldr	r0, [pc, #52]	; (800302c <MX_ADC2_Init+0x74>)
 8002ff6:	f001 f8ff 	bl	80041f8 <HAL_ADC_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8003000:	f000 faf0 	bl	80035e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003004:	2301      	movs	r3, #1
 8003006:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003008:	2301      	movs	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800300c:	2307      	movs	r3, #7
 800300e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_ADC2_Init+0x74>)
 8003016:	f001 fbc5 	bl	80047a4 <HAL_ADC_ConfigChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8003020:	f000 fae0 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000258 	.word	0x20000258
 8003030:	40012800 	.word	0x40012800

08003034 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003044:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <MX_ADC3_Init+0x74>)
 8003046:	4a19      	ldr	r2, [pc, #100]	; (80030ac <MX_ADC3_Init+0x78>)
 8003048:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800304a:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <MX_ADC3_Init+0x74>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <MX_ADC3_Init+0x74>)
 8003052:	2200      	movs	r2, #0
 8003054:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <MX_ADC3_Init+0x74>)
 8003058:	2200      	movs	r2, #0
 800305a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <MX_ADC3_Init+0x74>)
 800305e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003062:	61da      	str	r2, [r3, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <MX_ADC3_Init+0x74>)
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 1;
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <MX_ADC3_Init+0x74>)
 800306c:	2201      	movs	r2, #1
 800306e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003070:	480d      	ldr	r0, [pc, #52]	; (80030a8 <MX_ADC3_Init+0x74>)
 8003072:	f001 f8c1 	bl	80041f8 <HAL_ADC_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 800307c:	f000 fab2 	bl	80035e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003080:	230b      	movs	r3, #11
 8003082:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003084:	2301      	movs	r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8003088:	2306      	movs	r3, #6
 800308a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_ADC3_Init+0x74>)
 8003092:	f001 fb87 	bl	80047a4 <HAL_ADC_ConfigChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_ADC3_Init+0x6c>
  {
    Error_Handler();
 800309c:	f000 faa2 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000288 	.word	0x20000288
 80030ac:	40013c00 	.word	0x40013c00

080030b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <MX_I2C1_Init+0x50>)
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <MX_I2C1_Init+0x54>)
 80030b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <MX_I2C1_Init+0x50>)
 80030bc:	4a12      	ldr	r2, [pc, #72]	; (8003108 <MX_I2C1_Init+0x58>)
 80030be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <MX_I2C1_Init+0x50>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <MX_I2C1_Init+0x50>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <MX_I2C1_Init+0x50>)
 80030ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <MX_I2C1_Init+0x50>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <MX_I2C1_Init+0x50>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <MX_I2C1_Init+0x50>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <MX_I2C1_Init+0x50>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030ec:	4804      	ldr	r0, [pc, #16]	; (8003100 <MX_I2C1_Init+0x50>)
 80030ee:	f001 ffd7 	bl	80050a0 <HAL_I2C_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030f8:	f000 fa74 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	200002b8 	.word	0x200002b8
 8003104:	40005400 	.word	0x40005400
 8003108:	000186a0 	.word	0x000186a0

0800310c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b096      	sub	sp, #88	; 0x58
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003112:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003120:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800312a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	615a      	str	r2, [r3, #20]
 800313c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2220      	movs	r2, #32
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f006 f969 	bl	800941c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800314a:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <MX_TIM1_Init+0x134>)
 800314c:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <MX_TIM1_Init+0x138>)
 800314e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 8003150:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <MX_TIM1_Init+0x134>)
 8003152:	2211      	movs	r2, #17
 8003154:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003156:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <MX_TIM1_Init+0x134>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <MX_TIM1_Init+0x134>)
 800315e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003162:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <MX_TIM1_Init+0x134>)
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800316a:	4b35      	ldr	r3, [pc, #212]	; (8003240 <MX_TIM1_Init+0x134>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003170:	4b33      	ldr	r3, [pc, #204]	; (8003240 <MX_TIM1_Init+0x134>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003176:	4832      	ldr	r0, [pc, #200]	; (8003240 <MX_TIM1_Init+0x134>)
 8003178:	f003 fd96 	bl	8006ca8 <HAL_TIM_Base_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003182:	f000 fa2f 	bl	80035e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800318c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003190:	4619      	mov	r1, r3
 8003192:	482b      	ldr	r0, [pc, #172]	; (8003240 <MX_TIM1_Init+0x134>)
 8003194:	f004 f9ec 	bl	8007570 <HAL_TIM_ConfigClockSource>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800319e:	f000 fa21 	bl	80035e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031a2:	4827      	ldr	r0, [pc, #156]	; (8003240 <MX_TIM1_Init+0x134>)
 80031a4:	f003 fdcf 	bl	8006d46 <HAL_TIM_PWM_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80031ae:	f000 fa19 	bl	80035e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031be:	4619      	mov	r1, r3
 80031c0:	481f      	ldr	r0, [pc, #124]	; (8003240 <MX_TIM1_Init+0x134>)
 80031c2:	f004 fdad 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80031cc:	f000 fa0a 	bl	80035e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031d0:	2360      	movs	r3, #96	; 0x60
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031d8:	2300      	movs	r3, #0
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ec:	220c      	movs	r2, #12
 80031ee:	4619      	mov	r1, r3
 80031f0:	4813      	ldr	r0, [pc, #76]	; (8003240 <MX_TIM1_Init+0x134>)
 80031f2:	f004 f8fb 	bl	80073ec <HAL_TIM_PWM_ConfigChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80031fc:	f000 f9f2 	bl	80035e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003218:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	4619      	mov	r1, r3
 8003222:	4807      	ldr	r0, [pc, #28]	; (8003240 <MX_TIM1_Init+0x134>)
 8003224:	f004 fde8 	bl	8007df8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800322e:	f000 f9d9 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003232:	4803      	ldr	r0, [pc, #12]	; (8003240 <MX_TIM1_Init+0x134>)
 8003234:	f000 fdac 	bl	8003d90 <HAL_TIM_MspPostInit>

}
 8003238:	bf00      	nop
 800323a:	3758      	adds	r7, #88	; 0x58
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	2000030c 	.word	0x2000030c
 8003244:	40012c00 	.word	0x40012c00

08003248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800324e:	f107 030c 	add.w	r3, r7, #12
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f006 f8e0 	bl	800941c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <MX_TIM2_Init+0xa4>)
 8003266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800326a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <MX_TIM2_Init+0xa4>)
 800326e:	2200      	movs	r2, #0
 8003270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <MX_TIM2_Init+0xa4>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <MX_TIM2_Init+0xa4>)
 800327a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <MX_TIM2_Init+0xa4>)
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <MX_TIM2_Init+0xa4>)
 8003288:	2200      	movs	r2, #0
 800328a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800328c:	2303      	movs	r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003290:	2302      	movs	r3, #2
 8003292:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80032a0:	2302      	movs	r3, #2
 80032a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032a4:	2301      	movs	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	4619      	mov	r1, r3
 80032b6:	480d      	ldr	r0, [pc, #52]	; (80032ec <MX_TIM2_Init+0xa4>)
 80032b8:	f003 fe58 	bl	8006f6c <HAL_TIM_Encoder_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80032c2:	f000 f98f 	bl	80035e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <MX_TIM2_Init+0xa4>)
 80032d4:	f004 fd24 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80032de:	f000 f981 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	3730      	adds	r7, #48	; 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000354 	.word	0x20000354

080032f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f006 f88c 	bl	800941c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003304:	1d3b      	adds	r3, r7, #4
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <MX_TIM3_Init+0xa0>)
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <MX_TIM3_Init+0xa4>)
 8003310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <MX_TIM3_Init+0xa0>)
 8003314:	2200      	movs	r2, #0
 8003316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <MX_TIM3_Init+0xa0>)
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <MX_TIM3_Init+0xa0>)
 8003320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003324:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003326:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <MX_TIM3_Init+0xa0>)
 8003328:	2200      	movs	r2, #0
 800332a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <MX_TIM3_Init+0xa0>)
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003332:	2303      	movs	r3, #3
 8003334:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003336:	2302      	movs	r3, #2
 8003338:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800333a:	2301      	movs	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003346:	2302      	movs	r3, #2
 8003348:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800334a:	2301      	movs	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	4619      	mov	r1, r3
 800335c:	480c      	ldr	r0, [pc, #48]	; (8003390 <MX_TIM3_Init+0xa0>)
 800335e:	f003 fe05 	bl	8006f6c <HAL_TIM_Encoder_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003368:	f000 f93c 	bl	80035e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_TIM3_Init+0xa0>)
 800337a:	f004 fcd1 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003384:	f000 f92e 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003388:	bf00      	nop
 800338a:	3730      	adds	r7, #48	; 0x30
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	2000039c 	.word	0x2000039c
 8003394:	40000400 	.word	0x40000400

08003398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	; 0x38
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800339e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ac:	f107 0320 	add.w	r3, r7, #32
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
 80033c4:	615a      	str	r2, [r3, #20]
 80033c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <MX_TIM4_Init+0xe4>)
 80033ca:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <MX_TIM4_Init+0xe8>)
 80033cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <MX_TIM4_Init+0xe4>)
 80033d0:	2211      	movs	r2, #17
 80033d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d4:	4b29      	ldr	r3, [pc, #164]	; (800347c <MX_TIM4_Init+0xe4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <MX_TIM4_Init+0xe4>)
 80033dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80033e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <MX_TIM4_Init+0xe4>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <MX_TIM4_Init+0xe4>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033ee:	4823      	ldr	r0, [pc, #140]	; (800347c <MX_TIM4_Init+0xe4>)
 80033f0:	f003 fc5a 	bl	8006ca8 <HAL_TIM_Base_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80033fa:	f000 f8f3 	bl	80035e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003408:	4619      	mov	r1, r3
 800340a:	481c      	ldr	r0, [pc, #112]	; (800347c <MX_TIM4_Init+0xe4>)
 800340c:	f004 f8b0 	bl	8007570 <HAL_TIM_ConfigClockSource>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003416:	f000 f8e5 	bl	80035e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800341a:	4818      	ldr	r0, [pc, #96]	; (800347c <MX_TIM4_Init+0xe4>)
 800341c:	f003 fc93 	bl	8006d46 <HAL_TIM_PWM_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003426:	f000 f8dd 	bl	80035e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003432:	f107 0320 	add.w	r3, r7, #32
 8003436:	4619      	mov	r1, r3
 8003438:	4810      	ldr	r0, [pc, #64]	; (800347c <MX_TIM4_Init+0xe4>)
 800343a:	f004 fc71 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003444:	f000 f8ce 	bl	80035e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003448:	2360      	movs	r3, #96	; 0x60
 800344a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	220c      	movs	r2, #12
 800345c:	4619      	mov	r1, r3
 800345e:	4807      	ldr	r0, [pc, #28]	; (800347c <MX_TIM4_Init+0xe4>)
 8003460:	f003 ffc4 	bl	80073ec <HAL_TIM_PWM_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800346a:	f000 f8bb 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800346e:	4803      	ldr	r0, [pc, #12]	; (800347c <MX_TIM4_Init+0xe4>)
 8003470:	f000 fc8e 	bl	8003d90 <HAL_TIM_MspPostInit>

}
 8003474:	bf00      	nop
 8003476:	3738      	adds	r7, #56	; 0x38
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200003e4 	.word	0x200003e4
 8003480:	40000800 	.word	0x40000800

08003484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <MX_USART1_UART_Init+0x50>)
 800348c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 8003490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 80034aa:	220c      	movs	r2, #12
 80034ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <MX_USART1_UART_Init+0x4c>)
 80034bc:	f004 fcff 	bl	8007ebe <HAL_UART_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034c6:	f000 f88d 	bl	80035e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000042c 	.word	0x2000042c
 80034d4:	40013800 	.word	0x40013800

080034d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ec:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <MX_GPIO_Init+0x100>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <MX_GPIO_Init+0x100>)
 80034f2:	f043 0320 	orr.w	r3, r3, #32
 80034f6:	6193      	str	r3, [r2, #24]
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <MX_GPIO_Init+0x100>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003504:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <MX_GPIO_Init+0x100>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	4a33      	ldr	r2, [pc, #204]	; (80035d8 <MX_GPIO_Init+0x100>)
 800350a:	f043 0310 	orr.w	r3, r3, #16
 800350e:	6193      	str	r3, [r2, #24]
 8003510:	4b31      	ldr	r3, [pc, #196]	; (80035d8 <MX_GPIO_Init+0x100>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800351c:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <MX_GPIO_Init+0x100>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <MX_GPIO_Init+0x100>)
 8003522:	f043 0304 	orr.w	r3, r3, #4
 8003526:	6193      	str	r3, [r2, #24]
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <MX_GPIO_Init+0x100>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <MX_GPIO_Init+0x100>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <MX_GPIO_Init+0x100>)
 800353a:	f043 0308 	orr.w	r3, r3, #8
 800353e:	6193      	str	r3, [r2, #24]
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <MX_GPIO_Init+0x100>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED1_Pin|STBY_Pin, GPIO_PIN_RESET);
 800354c:	2200      	movs	r2, #0
 800354e:	2138      	movs	r1, #56	; 0x38
 8003550:	4822      	ldr	r0, [pc, #136]	; (80035dc <MX_GPIO_Init+0x104>)
 8003552:	f001 fd74 	bl	800503e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 8003556:	2200      	movs	r2, #0
 8003558:	f64c 4133 	movw	r1, #52275	; 0xcc33
 800355c:	4820      	ldr	r0, [pc, #128]	; (80035e0 <MX_GPIO_Init+0x108>)
 800355e:	f001 fd6e 	bl	800503e <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_Pin LED1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|STBY_Pin;
 8003562:	2338      	movs	r3, #56	; 0x38
 8003564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003566:	2301      	movs	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2302      	movs	r3, #2
 8003570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	f107 0310 	add.w	r3, r7, #16
 8003576:	4619      	mov	r1, r3
 8003578:	4818      	ldr	r0, [pc, #96]	; (80035dc <MX_GPIO_Init+0x104>)
 800357a:	f001 fbb5 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AI2_Pin AI1_Pin BI1_Pin BI2_Pin
                           LED5_Pin LED6_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = AI2_Pin|AI1_Pin|BI1_Pin|BI2_Pin
 800357e:	f64c 4333 	movw	r3, #52275	; 0xcc33
 8003582:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED3_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003584:	2301      	movs	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2302      	movs	r3, #2
 800358e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003590:	f107 0310 	add.w	r3, r7, #16
 8003594:	4619      	mov	r1, r3
 8003596:	4812      	ldr	r0, [pc, #72]	; (80035e0 <MX_GPIO_Init+0x108>)
 8003598:	f001 fba6 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800359c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035aa:	f107 0310 	add.w	r3, r7, #16
 80035ae:	4619      	mov	r1, r3
 80035b0:	480b      	ldr	r0, [pc, #44]	; (80035e0 <MX_GPIO_Init+0x108>)
 80035b2:	f001 fb99 	bl	8004ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_Right_Pin Sensor_Left_Pin */
  GPIO_InitStruct.Pin = Sensor_Right_Pin|Sensor_Left_Pin;
 80035b6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80035ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4619      	mov	r1, r3
 80035ca:	4804      	ldr	r0, [pc, #16]	; (80035dc <MX_GPIO_Init+0x104>)
 80035cc:	f001 fb8c 	bl	8004ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035d0:	bf00      	nop
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40010800 	.word	0x40010800
 80035e0:	40010c00 	.word	0x40010c00

080035e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e8:	b672      	cpsid	i
}
 80035ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035ec:	e7fe      	b.n	80035ec <Error_Handler+0x8>

080035ee <initializeQueue>:
#include "queue.h"


void initializeQueue(Queue* q)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
    q->front = -1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80035fc:	461a      	mov	r2, r3
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
    q->rear = 0;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800360c:	461a      	mov	r2, r3
 800360e:	2300      	movs	r3, #0
 8003610:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <isEmptyQueue>:

bool isEmptyQueue(Queue* q) { 
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
    return (q->front == q->rear - 1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800362c:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003636:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 800363a:	3b01      	subs	r3, #1
 800363c:	429a      	cmp	r2, r3
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <isFullQueue>:

bool isFullQueue(Queue* q) { 
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    return (q->rear == MAX_SIZE); 
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800365e:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 8003662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <pushQueue>:

void pushQueue(Queue* q, coord value)
{
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	4638      	mov	r0, r7
 8003682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (isFullQueue(q)) {
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff ffe2 	bl	8003650 <isFullQueue>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11c      	bne.n	80036cc <pushQueue+0x54>
        return;
    }
    q->items[q->rear] = value;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003698:	f8d3 2ee4 	ldr.w	r2, [r3, #3812]	; 0xee4
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	461c      	mov	r4, r3
 80036aa:	463b      	mov	r3, r7
 80036ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    q->rear++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036ba:	f8d3 3ee4 	ldr.w	r3, [r3, #3812]	; 0xee4
 80036be:	3301      	adds	r3, #1
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80036c6:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
 80036ca:	e000      	b.n	80036ce <pushQueue+0x56>
        return;
 80036cc:	bf00      	nop
}
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}

080036d4 <popQueue>:

void popQueue(Queue* q)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    if (isEmptyQueue(q)) {
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff9e 	bl	800361e <isEmptyQueue>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <popQueue+0x2c>
        return;
    }
    q->front++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036ee:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80036f2:	3301      	adds	r3, #1
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80036fa:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
 80036fe:	e000      	b.n	8003702 <popQueue+0x2e>
        return;
 8003700:	bf00      	nop
}
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <peekQueue>:

coord peekQueue(Queue* q)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
    if (isEmptyQueue(q)) {
 8003712:	6838      	ldr	r0, [r7, #0]
 8003714:	f7ff ff83 	bl	800361e <isEmptyQueue>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <peekQueue+0x34>
        coord empty = {-1, -1, -1};
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <peekQueue+0x60>)
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	ca07      	ldmia	r2, {r0, r1, r2}
 8003726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return empty;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	461c      	mov	r4, r3
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return q->items[q->front + 1];
}
 800373a:	e010      	b.n	800375e <peekQueue+0x56>
    return q->items[q->front + 1];
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003742:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	18ca      	adds	r2, r1, r3
 8003756:	4603      	mov	r3, r0
 8003758:	ca07      	ldmia	r2, {r0, r1, r2}
 800375a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	bf00      	nop
 8003768:	0800cc10 	.word	0x0800cc10

0800376c <sizeQueue>:


int sizeQueue(Queue* q){
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    return q->rear - q->front - 1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800377a:	f8d3 2ee4 	ldr.w	r2, [r3, #3812]	; 0xee4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003784:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	3b01      	subs	r3, #1
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <initializeQueueInt>:
#include "queue_int.h"


void initializeQueueInt(QueueInt* q)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
    q->front = -1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	f8c3 2fa0 	str.w	r2, [r3, #4000]	; 0xfa0
    q->rear = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <isFullQueueInt>:

bool isEmptyQueueInt(QueueInt* q) { 
    return (q->front == q->rear - 1);
}

bool isFullQueueInt(QueueInt* q) { 
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
    return (q->rear == MAX_SIZE); 
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 80037c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <pushQueueInt>:

void pushQueueInt(QueueInt* q, int value)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
    if (isFullQueueInt(q)) {
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ffe6 	bl	80037ba <isFullQueueInt>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10e      	bne.n	8003812 <pushQueueInt+0x34>
        return;
    }
    q->items[q->rear] = value;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 2fa4 	ldr.w	r2, [r3, #4004]	; 0xfa4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6839      	ldr	r1, [r7, #0]
 80037fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    q->rear++;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
 8003810:	e000      	b.n	8003814 <pushQueueInt+0x36>
        return;
 8003812:	bf00      	nop
}
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <initializeStack>:
#include "stack.h"

void initializeStack(Stack *stack) {
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
    stack->top = -1;  
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003828:	461a      	mov	r2, r3
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <isEmptyStack>:

bool isEmptyStack(Stack *stack) {
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
    return stack->top == -1;  
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800384a:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <isFullStack>:

bool isFullStack(Stack *stack) {
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    return stack->top == MAX_SIZE - 1;  
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003872:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 8003876:	f240 32e7 	movw	r2, #999	; 0x3e7
 800387a:	4293      	cmp	r3, r2
 800387c:	bf0c      	ite	eq
 800387e:	2301      	moveq	r3, #1
 8003880:	2300      	movne	r3, #0
 8003882:	b2db      	uxtb	r3, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <pushStack>:

void pushStack(Stack *stack, coord value) {
 800388e:	b590      	push	{r4, r7, lr}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	4638      	mov	r0, r7
 8003898:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (isFullStack(stack)) {
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff ffe1 	bl	8003864 <isFullStack>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11c      	bne.n	80038e2 <pushStack+0x54>
        return;
    }
    stack->arr[++stack->top] = value;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038ae:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80038b2:	3301      	adds	r3, #1
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80038ba:	f8c2 3ee0 	str.w	r3, [r2, #3808]	; 0xee0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038c4:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	461c      	mov	r4, r3
 80038d6:	463b      	mov	r3, r7
 80038d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038e0:	e000      	b.n	80038e4 <pushStack+0x56>
        return;
 80038e2:	bf00      	nop
}
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}
	...

080038ec <popStack>:

coord popStack(Stack *stack) {
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
    if (isEmptyStack(stack)) {
 80038f6:	6838      	ldr	r0, [r7, #0]
 80038f8:	f7ff ffa0 	bl	800383c <isEmptyStack>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00e      	beq.n	8003920 <popStack+0x34>
        coord error = {-1, -1, -1}; // or any other error indication
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <popStack+0x68>)
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	ca07      	ldmia	r2, {r0, r1, r2}
 800390a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return error;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	461c      	mov	r4, r3
 8003912:	f107 030c 	add.w	r3, r7, #12
 8003916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800391a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return stack->arr[stack->top--];
}
 800391e:	e015      	b.n	800394c <popStack+0x60>
    return stack->arr[stack->top--];
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003926:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 800392a:	1e53      	subs	r3, r2, #1
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8003932:	f8c1 3ee0 	str.w	r3, [r1, #3808]	; 0xee0
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	18ca      	adds	r2, r1, r3
 8003944:	4603      	mov	r3, r0
 8003946:	ca07      	ldmia	r2, {r0, r1, r2}
 8003948:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	0800cc1c 	.word	0x0800cc1c

08003958 <peekStack>:

coord peekStack(Stack *stack) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
    if (isEmptyStack(stack)) {
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f7ff ff6a 	bl	800383c <isEmptyStack>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <peekStack+0x34>
        coord error = {-1, -1, -1}; // or any other error indication
 800396e:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <peekStack+0x5c>)
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	ca07      	ldmia	r2, {r0, r1, r2}
 8003976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return error;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	461c      	mov	r4, r3
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003986:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
    return stack->arr[stack->top];
}
 800398a:	e00f      	b.n	80039ac <peekStack+0x54>
    return stack->arr[stack->top];
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003992:	f8d3 2ee0 	ldr.w	r2, [r3, #3808]	; 0xee0
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	18ca      	adds	r2, r1, r3
 80039a4:	4603      	mov	r3, r0
 80039a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	0800cc1c 	.word	0x0800cc1c

080039b8 <sizeStack>:
int sizeStack(Stack *stack){
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    return stack->top + 1;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039c6:	f8d3 3ee0 	ldr.w	r3, [r3, #3808]	; 0xee0
 80039ca:	3301      	adds	r3, #1
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_MspInit+0x5c>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_MspInit+0x5c>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6193      	str	r3, [r2, #24]
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_MspInit+0x5c>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_MspInit+0x5c>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_MspInit+0x5c>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	61d3      	str	r3, [r2, #28]
 8003a02:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_MspInit+0x5c>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_MspInit+0x60>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_MspInit+0x60>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40010000 	.word	0x40010000

08003a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08c      	sub	sp, #48	; 0x30
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0320 	add.w	r3, r7, #32
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <HAL_ADC_MspInit+0x10c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d122      	bne.n	8003aa2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4a3a      	ldr	r2, [pc, #232]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a66:	6193      	str	r3, [r2, #24]
 8003a68:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a74:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	6193      	str	r3, [r2, #24]
 8003a80:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a90:	2303      	movs	r3, #3
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a94:	f107 0320 	add.w	r3, r7, #32
 8003a98:	4619      	mov	r1, r3
 8003a9a:	482d      	ldr	r0, [pc, #180]	; (8003b50 <HAL_ADC_MspInit+0x114>)
 8003a9c:	f001 f924 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003aa0:	e04e      	b.n	8003b40 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <HAL_ADC_MspInit+0x118>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d122      	bne.n	8003af2 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab6:	6193      	str	r3, [r2, #24]
 8003ab8:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	6193      	str	r3, [r2, #24]
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003adc:	2302      	movs	r3, #2
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 0320 	add.w	r3, r7, #32
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4819      	ldr	r0, [pc, #100]	; (8003b50 <HAL_ADC_MspInit+0x114>)
 8003aec:	f001 f8fc 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003af0:	e026      	b.n	8003b40 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC3)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_ADC_MspInit+0x11c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d121      	bne.n	8003b40 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	6193      	str	r3, [r2, #24]
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003b1a:	f043 0310 	orr.w	r3, r3, #16
 8003b1e:	6193      	str	r3, [r2, #24]
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_ADC_MspInit+0x110>)
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b30:	2303      	movs	r3, #3
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b34:	f107 0320 	add.w	r3, r7, #32
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4808      	ldr	r0, [pc, #32]	; (8003b5c <HAL_ADC_MspInit+0x120>)
 8003b3c:	f001 f8d4 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003b40:	bf00      	nop
 8003b42:	3730      	adds	r7, #48	; 0x30
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40012400 	.word	0x40012400
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40010800 	.word	0x40010800
 8003b54:	40012800 	.word	0x40012800
 8003b58:	40013c00 	.word	0x40013c00
 8003b5c:	40011000 	.word	0x40011000

08003b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <HAL_I2C_MspInit+0x70>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d123      	bne.n	8003bc8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_I2C_MspInit+0x74>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <HAL_I2C_MspInit+0x74>)
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	6193      	str	r3, [r2, #24]
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <HAL_I2C_MspInit+0x74>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b98:	23c0      	movs	r3, #192	; 0xc0
 8003b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b9c:	2312      	movs	r3, #18
 8003b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba4:	f107 0310 	add.w	r3, r7, #16
 8003ba8:	4619      	mov	r1, r3
 8003baa:	480b      	ldr	r0, [pc, #44]	; (8003bd8 <HAL_I2C_MspInit+0x78>)
 8003bac:	f001 f89c 	bl	8004ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_I2C_MspInit+0x74>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <HAL_I2C_MspInit+0x74>)
 8003bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bba:	61d3      	str	r3, [r2, #28]
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_I2C_MspInit+0x74>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bc8:	bf00      	nop
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40005400 	.word	0x40005400
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40010c00 	.word	0x40010c00

08003bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_TIM_Base_MspInit+0x58>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10c      	bne.n	8003c08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_TIM_Base_MspInit+0x5c>)
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <HAL_TIM_Base_MspInit+0x5c>)
 8003bf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bf8:	6193      	str	r3, [r2, #24]
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <HAL_TIM_Base_MspInit+0x5c>)
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c06:	e010      	b.n	8003c2a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_TIM_Base_MspInit+0x60>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10b      	bne.n	8003c2a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_TIM_Base_MspInit+0x5c>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_TIM_Base_MspInit+0x5c>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	61d3      	str	r3, [r2, #28]
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_TIM_Base_MspInit+0x5c>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40000800 	.word	0x40000800

08003c40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	; 0x30
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d157      	bne.n	8003d10 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c60:	4b46      	ldr	r3, [pc, #280]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	4a45      	ldr	r2, [pc, #276]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	61d3      	str	r3, [r2, #28]
 8003c6c:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c78:	4b40      	ldr	r3, [pc, #256]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	6193      	str	r3, [r2, #24]
 8003c84:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c90:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4a39      	ldr	r2, [pc, #228]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c96:	f043 0308 	orr.w	r3, r3, #8
 8003c9a:	6193      	str	r3, [r2, #24]
 8003c9c:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb6:	f107 031c 	add.w	r3, r7, #28
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4830      	ldr	r0, [pc, #192]	; (8003d80 <HAL_TIM_Encoder_MspInit+0x140>)
 8003cbe:	f001 f813 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cce:	f107 031c 	add.w	r3, r7, #28
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	482b      	ldr	r0, [pc, #172]	; (8003d84 <HAL_TIM_Encoder_MspInit+0x144>)
 8003cd6:	f001 f807 	bl	8004ce8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003cda:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <HAL_TIM_Encoder_MspInit+0x148>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf8:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <HAL_TIM_Encoder_MspInit+0x148>)
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2100      	movs	r1, #0
 8003d02:	201c      	movs	r0, #28
 8003d04:	f000 ffb9 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d08:	201c      	movs	r0, #28
 8003d0a:	f000 ffd2 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d0e:	e030      	b.n	8003d72 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <HAL_TIM_Encoder_MspInit+0x14c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d12b      	bne.n	8003d72 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	61d3      	str	r3, [r2, #28]
 8003d26:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	6193      	str	r3, [r2, #24]
 8003d3e:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d4a:	23c0      	movs	r3, #192	; 0xc0
 8003d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d56:	f107 031c 	add.w	r3, r7, #28
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4808      	ldr	r0, [pc, #32]	; (8003d80 <HAL_TIM_Encoder_MspInit+0x140>)
 8003d5e:	f000 ffc3 	bl	8004ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	201d      	movs	r0, #29
 8003d68:	f000 ff87 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d6c:	201d      	movs	r0, #29
 8003d6e:	f000 ffa0 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
}
 8003d72:	bf00      	nop
 8003d74:	3730      	adds	r7, #48	; 0x30
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40010800 	.word	0x40010800
 8003d84:	40010c00 	.word	0x40010c00
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40000400 	.word	0x40000400

08003d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d98:	f107 0310 	add.w	r3, r7, #16
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_TIM_MspPostInit+0x98>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d119      	bne.n	8003de4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db0:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <HAL_TIM_MspPostInit+0x9c>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_TIM_MspPostInit+0x9c>)
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	6193      	str	r3, [r2, #24]
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <HAL_TIM_MspPostInit+0x9c>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd6:	f107 0310 	add.w	r3, r7, #16
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4814      	ldr	r0, [pc, #80]	; (8003e30 <HAL_TIM_MspPostInit+0xa0>)
 8003dde:	f000 ff83 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003de2:	e01d      	b.n	8003e20 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <HAL_TIM_MspPostInit+0xa4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d118      	bne.n	8003e20 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_TIM_MspPostInit+0x9c>)
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <HAL_TIM_MspPostInit+0x9c>)
 8003df4:	f043 0308 	orr.w	r3, r3, #8
 8003df8:	6193      	str	r3, [r2, #24]
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_TIM_MspPostInit+0x9c>)
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2302      	movs	r3, #2
 8003e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e14:	f107 0310 	add.w	r3, r7, #16
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4807      	ldr	r0, [pc, #28]	; (8003e38 <HAL_TIM_MspPostInit+0xa8>)
 8003e1c:	f000 ff64 	bl	8004ce8 <HAL_GPIO_Init>
}
 8003e20:	bf00      	nop
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40010800 	.word	0x40010800
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40010c00 	.word	0x40010c00

08003e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 0310 	add.w	r3, r7, #16
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_UART_MspInit+0x8c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d131      	bne.n	8003ec0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_UART_MspInit+0x90>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	4a1a      	ldr	r2, [pc, #104]	; (8003ecc <HAL_UART_MspInit+0x90>)
 8003e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e66:	6193      	str	r3, [r2, #24]
 8003e68:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <HAL_UART_MspInit+0x90>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <HAL_UART_MspInit+0x90>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <HAL_UART_MspInit+0x90>)
 8003e7a:	f043 0304 	orr.w	r3, r3, #4
 8003e7e:	6193      	str	r3, [r2, #24]
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_UART_MspInit+0x90>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e92:	2302      	movs	r3, #2
 8003e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e96:	2303      	movs	r3, #3
 8003e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9a:	f107 0310 	add.w	r3, r7, #16
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <HAL_UART_MspInit+0x94>)
 8003ea2:	f000 ff21 	bl	8004ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <HAL_UART_MspInit+0x94>)
 8003ebc:	f000 ff14 	bl	8004ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ec0:	bf00      	nop
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40013800 	.word	0x40013800
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40010800 	.word	0x40010800

08003ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <NMI_Handler+0x4>

08003eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <HardFault_Handler+0x4>

08003ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <MemManage_Handler+0x4>

08003ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <BusFault_Handler+0x4>

08003eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <UsageFault_Handler+0x4>

08003ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f1a:	f000 f92d 	bl	8004178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <TIM2_IRQHandler+0x10>)
 8003f2a:	f003 f96f 	bl	800720c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000354 	.word	0x20000354

08003f38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f3c:	4802      	ldr	r0, [pc, #8]	; (8003f48 <TIM3_IRQHandler+0x10>)
 8003f3e:	f003 f965 	bl	800720c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2000039c 	.word	0x2000039c

08003f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return 1;
 8003f50:	2301      	movs	r3, #1
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <_kill>:

int _kill(int pid, int sig)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f64:	f005 faac 	bl	80094c0 <__errno>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2216      	movs	r2, #22
 8003f6c:	601a      	str	r2, [r3, #0]
  return -1;
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_exit>:

void _exit (int status)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f82:	f04f 31ff 	mov.w	r1, #4294967295
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ffe7 	bl	8003f5a <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f8c:	e7fe      	b.n	8003f8c <_exit+0x12>

08003f8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e00a      	b.n	8003fb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fa0:	f3af 8000 	nop.w
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	60ba      	str	r2, [r7, #8]
 8003fac:	b2ca      	uxtb	r2, r1
 8003fae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	dbf0      	blt.n	8003fa0 <_read+0x12>
  }

  return len;
 8003fbe:	687b      	ldr	r3, [r7, #4]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fee:	605a      	str	r2, [r3, #4]
  return 0;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <_isatty>:

int _isatty(int file)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004004:	2301      	movs	r3, #1
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <_sbrk+0x5c>)
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <_sbrk+0x60>)
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <_sbrk+0x64>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <_sbrk+0x64>)
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <_sbrk+0x68>)
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <_sbrk+0x64>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	429a      	cmp	r2, r3
 8004056:	d207      	bcs.n	8004068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004058:	f005 fa32 	bl	80094c0 <__errno>
 800405c:	4603      	mov	r3, r0
 800405e:	220c      	movs	r2, #12
 8004060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	e009      	b.n	800407c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <_sbrk+0x64>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <_sbrk+0x64>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	4a05      	ldr	r2, [pc, #20]	; (800408c <_sbrk+0x64>)
 8004078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	2000c000 	.word	0x2000c000
 8004088:	00000400 	.word	0x00000400
 800408c:	20004404 	.word	0x20004404
 8004090:	20004558 	.word	0x20004558

08004094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040a0:	f7ff fff8 	bl	8004094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a4:	480b      	ldr	r0, [pc, #44]	; (80040d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80040a6:	490c      	ldr	r1, [pc, #48]	; (80040d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80040a8:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80040aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040ac:	e002      	b.n	80040b4 <LoopCopyDataInit>

080040ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040b2:	3304      	adds	r3, #4

080040b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b8:	d3f9      	bcc.n	80040ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040bc:	4c09      	ldr	r4, [pc, #36]	; (80040e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040c0:	e001      	b.n	80040c6 <LoopFillZerobss>

080040c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c4:	3204      	adds	r2, #4

080040c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c8:	d3fb      	bcc.n	80040c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040ca:	f005 f9ff 	bl	80094cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040ce:	f7fe fdd5 	bl	8002c7c <main>
  bx lr
 80040d2:	4770      	bx	lr
  ldr r0, =_sdata
 80040d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80040dc:	0800d0b8 	.word	0x0800d0b8
  ldr r2, =_sbss
 80040e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80040e4:	20004558 	.word	0x20004558

080040e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC1_2_IRQHandler>
	...

080040ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040f0:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_Init+0x28>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_Init+0x28>)
 80040f6:	f043 0310 	orr.w	r3, r3, #16
 80040fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040fc:	2003      	movs	r0, #3
 80040fe:	f000 fdb1 	bl	8004c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004102:	200f      	movs	r0, #15
 8004104:	f000 f808 	bl	8004118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004108:	f7ff fc66 	bl	80039d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40022000 	.word	0x40022000

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_InitTick+0x54>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_InitTick+0x58>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fdc9 	bl	8004cce <HAL_SYSTICK_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00e      	b.n	8004164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d80a      	bhi.n	8004162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800414c:	2200      	movs	r2, #0
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f000 fd91 	bl	8004c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <HAL_InitTick+0x5c>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000010 	.word	0x20000010
 8004170:	20000018 	.word	0x20000018
 8004174:	20000014 	.word	0x20000014

08004178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_IncTick+0x1c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_IncTick+0x20>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a03      	ldr	r2, [pc, #12]	; (8004198 <HAL_IncTick+0x20>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr
 8004194:	20000018 	.word	0x20000018
 8004198:	20004408 	.word	0x20004408

0800419c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return uwTick;
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <HAL_GetTick+0x10>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20004408 	.word	0x20004408

080041b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b8:	f7ff fff0 	bl	800419c <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d005      	beq.n	80041d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_Delay+0x44>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041d6:	bf00      	nop
 80041d8:	f7ff ffe0 	bl	800419c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d8f7      	bhi.n	80041d8 <HAL_Delay+0x28>
  {
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000018 	.word	0x20000018

080041f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0ce      	b.n	80043b8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fc00 	bl	8003a3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fc03 	bl	8004a48 <ADC_ConversionStop_Disable>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 80a9 	bne.w	80043a6 <HAL_ADC_Init+0x1ae>
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 80a5 	bne.w	80043a6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004264:	f023 0302 	bic.w	r3, r3, #2
 8004268:	f043 0202 	orr.w	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4951      	ldr	r1, [pc, #324]	; (80043c0 <HAL_ADC_Init+0x1c8>)
 800427a:	428b      	cmp	r3, r1
 800427c:	d10a      	bne.n	8004294 <HAL_ADC_Init+0x9c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004286:	d002      	beq.n	800428e <HAL_ADC_Init+0x96>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	e004      	b.n	8004298 <HAL_ADC_Init+0xa0>
 800428e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004292:	e001      	b.n	8004298 <HAL_ADC_Init+0xa0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004298:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7b1b      	ldrb	r3, [r3, #12]
 800429e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b0:	d003      	beq.n	80042ba <HAL_ADC_Init+0xc2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_ADC_Init+0xc8>
 80042ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042be:	e000      	b.n	80042c2 <HAL_ADC_Init+0xca>
 80042c0:	2300      	movs	r3, #0
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7d1b      	ldrb	r3, [r3, #20]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d119      	bne.n	8004304 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7b1b      	ldrb	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	3b01      	subs	r3, #1
 80042de:	035a      	lsls	r2, r3, #13
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e00b      	b.n	8004304 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	f043 0201 	orr.w	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_ADC_Init+0x1cc>)
 8004320:	4013      	ands	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	430b      	orrs	r3, r1
 800432a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	d003      	beq.n	800433e <HAL_ADC_Init+0x146>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d104      	bne.n	8004348 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	3b01      	subs	r3, #1
 8004344:	051b      	lsls	r3, r3, #20
 8004346:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	430a      	orrs	r2, r1
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_ADC_Init+0x1d0>)
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d10b      	bne.n	8004384 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	f023 0303 	bic.w	r3, r3, #3
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004382:	e018      	b.n	80043b6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f023 0312 	bic.w	r3, r3, #18
 800438c:	f043 0210 	orr.w	r2, r3, #16
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043a4:	e007      	b.n	80043b6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40013c00 	.word	0x40013c00
 80043c4:	ffe1f7fd 	.word	0xffe1f7fd
 80043c8:	ff1f0efe 	.word	0xff1f0efe

080043cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Start+0x1a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e098      	b.n	8004518 <HAL_ADC_Start+0x14c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fad0 	bl	8004994 <ADC_Enable>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 8087 	bne.w	800450e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a41      	ldr	r2, [pc, #260]	; (8004520 <HAL_ADC_Start+0x154>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d105      	bne.n	800442a <HAL_ADC_Start+0x5e>
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_ADC_Start+0x158>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d115      	bne.n	8004456 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d026      	beq.n	8004492 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800444c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004454:	e01d      	b.n	8004492 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <HAL_ADC_Start+0x158>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_ADC_Start+0xaa>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <HAL_ADC_Start+0x154>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10d      	bne.n	8004492 <HAL_ADC_Start+0xc6>
 8004476:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_ADC_Start+0x158>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800448a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f023 0206 	bic.w	r2, r3, #6
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80044aa:	e002      	b.n	80044b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0202 	mvn.w	r2, #2
 80044c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044d2:	d113      	bne.n	80044fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044d8:	4a11      	ldr	r2, [pc, #68]	; (8004520 <HAL_ADC_Start+0x154>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d105      	bne.n	80044ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_ADC_Start+0x158>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	e00c      	b.n	8004516 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	e003      	b.n	8004516 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40012800 	.word	0x40012800
 8004524:	40012400 	.word	0x40012400

08004528 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_ADC_Stop+0x1a>
 800453e:	2302      	movs	r3, #2
 8004540:	e01a      	b.n	8004578 <HAL_ADC_Stop+0x50>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa7c 	bl	8004a48 <ADC_ConversionStop_Disable>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	f043 0201 	orr.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004576:	7bfb      	ldrb	r3, [r7, #15]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004596:	f7ff fe01 	bl	800419c <HAL_GetTick>
 800459a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0d3      	b.n	800476a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d131      	bne.n	8004634 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d12a      	bne.n	8004634 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80045de:	e021      	b.n	8004624 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d01d      	beq.n	8004624 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_ADC_PollForConversion+0x7e>
 80045ee:	f7ff fdd5 	bl	800419c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d212      	bcs.n	8004624 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	f043 0204 	orr.w	r2, r3, #4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0a2      	b.n	800476a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0d6      	beq.n	80045e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004632:	e070      	b.n	8004716 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004634:	4b4f      	ldr	r3, [pc, #316]	; (8004774 <HAL_ADC_PollForConversion+0x1f4>)
 8004636:	681c      	ldr	r4, [r3, #0]
 8004638:	2002      	movs	r0, #2
 800463a:	f002 fa5d 	bl	8006af8 <HAL_RCCEx_GetPeriphCLKFreq>
 800463e:	4603      	mov	r3, r0
 8004640:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6919      	ldr	r1, [r3, #16]
 800464a:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_ADC_PollForConversion+0x1f8>)
 800464c:	400b      	ands	r3, r1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d118      	bne.n	8004684 <HAL_ADC_PollForConversion+0x104>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68d9      	ldr	r1, [r3, #12]
 8004658:	4b48      	ldr	r3, [pc, #288]	; (800477c <HAL_ADC_PollForConversion+0x1fc>)
 800465a:	400b      	ands	r3, r1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d111      	bne.n	8004684 <HAL_ADC_PollForConversion+0x104>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6919      	ldr	r1, [r3, #16]
 8004666:	4b46      	ldr	r3, [pc, #280]	; (8004780 <HAL_ADC_PollForConversion+0x200>)
 8004668:	400b      	ands	r3, r1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <HAL_ADC_PollForConversion+0x100>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68d9      	ldr	r1, [r3, #12]
 8004674:	4b43      	ldr	r3, [pc, #268]	; (8004784 <HAL_ADC_PollForConversion+0x204>)
 8004676:	400b      	ands	r3, r1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_ADC_PollForConversion+0x100>
 800467c:	2314      	movs	r3, #20
 800467e:	e020      	b.n	80046c2 <HAL_ADC_PollForConversion+0x142>
 8004680:	2329      	movs	r3, #41	; 0x29
 8004682:	e01e      	b.n	80046c2 <HAL_ADC_PollForConversion+0x142>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6919      	ldr	r1, [r3, #16]
 800468a:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <HAL_ADC_PollForConversion+0x200>)
 800468c:	400b      	ands	r3, r1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_ADC_PollForConversion+0x120>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68d9      	ldr	r1, [r3, #12]
 8004698:	4b3a      	ldr	r3, [pc, #232]	; (8004784 <HAL_ADC_PollForConversion+0x204>)
 800469a:	400b      	ands	r3, r1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <HAL_ADC_PollForConversion+0x13c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6919      	ldr	r1, [r3, #16]
 80046a6:	4b38      	ldr	r3, [pc, #224]	; (8004788 <HAL_ADC_PollForConversion+0x208>)
 80046a8:	400b      	ands	r3, r1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <HAL_ADC_PollForConversion+0x140>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68d9      	ldr	r1, [r3, #12]
 80046b4:	4b34      	ldr	r3, [pc, #208]	; (8004788 <HAL_ADC_PollForConversion+0x208>)
 80046b6:	400b      	ands	r3, r1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_ADC_PollForConversion+0x140>
 80046bc:	2354      	movs	r3, #84	; 0x54
 80046be:	e000      	b.n	80046c2 <HAL_ADC_PollForConversion+0x142>
 80046c0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80046c8:	e021      	b.n	800470e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d01a      	beq.n	8004708 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_ADC_PollForConversion+0x168>
 80046d8:	f7ff fd60 	bl	800419c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d20f      	bcs.n	8004708 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d90b      	bls.n	8004708 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	f043 0204 	orr.w	r2, r3, #4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e030      	b.n	800476a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	d8d9      	bhi.n	80046ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0212 	mvn.w	r2, #18
 800471e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004736:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800473a:	d115      	bne.n	8004768 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004740:	2b00      	cmp	r3, #0
 8004742:	d111      	bne.n	8004768 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f043 0201 	orr.w	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd90      	pop	{r4, r7, pc}
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010
 8004778:	24924924 	.word	0x24924924
 800477c:	00924924 	.word	0x00924924
 8004780:	12492492 	.word	0x12492492
 8004784:	00492492 	.word	0x00492492
 8004788:	00249249 	.word	0x00249249

0800478c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x20>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e0dc      	b.n	800497e <HAL_ADC_ConfigChannel+0x1da>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b06      	cmp	r3, #6
 80047d2:	d81c      	bhi.n	800480e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	3b05      	subs	r3, #5
 80047e6:	221f      	movs	r2, #31
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	4019      	ands	r1, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	3b05      	subs	r3, #5
 8004800:	fa00 f203 	lsl.w	r2, r0, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	635a      	str	r2, [r3, #52]	; 0x34
 800480c:	e03c      	b.n	8004888 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d81c      	bhi.n	8004850 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	3b23      	subs	r3, #35	; 0x23
 8004828:	221f      	movs	r2, #31
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	4019      	ands	r1, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	3b23      	subs	r3, #35	; 0x23
 8004842:	fa00 f203 	lsl.w	r2, r0, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
 800484e:	e01b      	b.n	8004888 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	3b41      	subs	r3, #65	; 0x41
 8004862:	221f      	movs	r2, #31
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	4019      	ands	r1, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	3b41      	subs	r3, #65	; 0x41
 800487c:	fa00 f203 	lsl.w	r2, r0, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b09      	cmp	r3, #9
 800488e:	d91c      	bls.n	80048ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	3b1e      	subs	r3, #30
 80048a2:	2207      	movs	r2, #7
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	4019      	ands	r1, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6898      	ldr	r0, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	3b1e      	subs	r3, #30
 80048bc:	fa00 f203 	lsl.w	r2, r0, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e019      	b.n	80048fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6919      	ldr	r1, [r3, #16]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	2207      	movs	r2, #7
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	4019      	ands	r1, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6898      	ldr	r0, [r3, #8]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	fa00 f203 	lsl.w	r2, r0, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b10      	cmp	r3, #16
 8004904:	d003      	beq.n	800490e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800490a:	2b11      	cmp	r3, #17
 800490c:	d132      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_ADC_ConfigChannel+0x1e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d125      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d126      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004934:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d11a      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <HAL_ADC_ConfigChannel+0x1e8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a13      	ldr	r2, [pc, #76]	; (8004990 <HAL_ADC_ConfigChannel+0x1ec>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	0c9a      	lsrs	r2, r3, #18
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004954:	e002      	b.n	800495c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3b01      	subs	r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f9      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x1b2>
 8004962:	e007      	b.n	8004974 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	40012400 	.word	0x40012400
 800498c:	20000010 	.word	0x20000010
 8004990:	431bde83 	.word	0x431bde83

08004994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d040      	beq.n	8004a34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <ADC_Enable+0xac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <ADC_Enable+0xb0>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	0c9b      	lsrs	r3, r3, #18
 80049ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80049d0:	e002      	b.n	80049d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f9      	bne.n	80049d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049de:	f7ff fbdd 	bl	800419c <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80049e4:	e01f      	b.n	8004a26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049e6:	f7ff fbd9 	bl	800419c <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d918      	bls.n	8004a26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d011      	beq.n	8004a26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a06:	f043 0210 	orr.w	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	f043 0201 	orr.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e007      	b.n	8004a36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d1d8      	bne.n	80049e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000010 	.word	0x20000010
 8004a44:	431bde83 	.word	0x431bde83

08004a48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d12e      	bne.n	8004ac0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a72:	f7ff fb93 	bl	800419c <HAL_GetTick>
 8004a76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a78:	e01b      	b.n	8004ab2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a7a:	f7ff fb8f 	bl	800419c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d914      	bls.n	8004ab2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10d      	bne.n	8004ab2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	f043 0210 	orr.w	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f043 0201 	orr.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e007      	b.n	8004ac2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d0dc      	beq.n	8004a7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004afe:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	60d3      	str	r3, [r2, #12]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <__NVIC_GetPriorityGrouping+0x18>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	f003 0307 	and.w	r3, r3, #7
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	db0b      	blt.n	8004b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	f003 021f 	and.w	r2, r3, #31
 8004b48:	4906      	ldr	r1, [pc, #24]	; (8004b64 <__NVIC_EnableIRQ+0x34>)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2001      	movs	r0, #1
 8004b52:	fa00 f202 	lsl.w	r2, r0, r2
 8004b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	e000e100 	.word	0xe000e100

08004b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	6039      	str	r1, [r7, #0]
 8004b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db0a      	blt.n	8004b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	490c      	ldr	r1, [pc, #48]	; (8004bb4 <__NVIC_SetPriority+0x4c>)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b90:	e00a      	b.n	8004ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4908      	ldr	r1, [pc, #32]	; (8004bb8 <__NVIC_SetPriority+0x50>)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	761a      	strb	r2, [r3, #24]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000e100 	.word	0xe000e100
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f1c3 0307 	rsb	r3, r3, #7
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	bf28      	it	cs
 8004bda:	2304      	movcs	r3, #4
 8004bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3304      	adds	r3, #4
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d902      	bls.n	8004bec <NVIC_EncodePriority+0x30>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3b03      	subs	r3, #3
 8004bea:	e000      	b.n	8004bee <NVIC_EncodePriority+0x32>
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	401a      	ands	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c04:	f04f 31ff 	mov.w	r1, #4294967295
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	43d9      	mvns	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	4313      	orrs	r3, r2
         );
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	; 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c30:	d301      	bcc.n	8004c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c32:	2301      	movs	r3, #1
 8004c34:	e00f      	b.n	8004c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <SysTick_Config+0x40>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c3e:	210f      	movs	r1, #15
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	f7ff ff90 	bl	8004b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <SysTick_Config+0x40>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <SysTick_Config+0x40>)
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000e010 	.word	0xe000e010

08004c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff2d 	bl	8004acc <__NVIC_SetPriorityGrouping>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	4603      	mov	r3, r0
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c8c:	f7ff ff42 	bl	8004b14 <__NVIC_GetPriorityGrouping>
 8004c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f7ff ff90 	bl	8004bbc <NVIC_EncodePriority>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ff5f 	bl	8004b68 <__NVIC_SetPriority>
}
 8004caa:	bf00      	nop
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	4603      	mov	r3, r0
 8004cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff ff35 	bl	8004b30 <__NVIC_EnableIRQ>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff ffa2 	bl	8004c20 <SysTick_Config>
 8004cdc:	4603      	mov	r3, r0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b08b      	sub	sp, #44	; 0x2c
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cfa:	e179      	b.n	8004ff0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	f040 8168 	bne.w	8004fea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4a96      	ldr	r2, [pc, #600]	; (8004f78 <HAL_GPIO_Init+0x290>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d05e      	beq.n	8004de2 <HAL_GPIO_Init+0xfa>
 8004d24:	4a94      	ldr	r2, [pc, #592]	; (8004f78 <HAL_GPIO_Init+0x290>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d875      	bhi.n	8004e16 <HAL_GPIO_Init+0x12e>
 8004d2a:	4a94      	ldr	r2, [pc, #592]	; (8004f7c <HAL_GPIO_Init+0x294>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d058      	beq.n	8004de2 <HAL_GPIO_Init+0xfa>
 8004d30:	4a92      	ldr	r2, [pc, #584]	; (8004f7c <HAL_GPIO_Init+0x294>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d86f      	bhi.n	8004e16 <HAL_GPIO_Init+0x12e>
 8004d36:	4a92      	ldr	r2, [pc, #584]	; (8004f80 <HAL_GPIO_Init+0x298>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d052      	beq.n	8004de2 <HAL_GPIO_Init+0xfa>
 8004d3c:	4a90      	ldr	r2, [pc, #576]	; (8004f80 <HAL_GPIO_Init+0x298>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d869      	bhi.n	8004e16 <HAL_GPIO_Init+0x12e>
 8004d42:	4a90      	ldr	r2, [pc, #576]	; (8004f84 <HAL_GPIO_Init+0x29c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d04c      	beq.n	8004de2 <HAL_GPIO_Init+0xfa>
 8004d48:	4a8e      	ldr	r2, [pc, #568]	; (8004f84 <HAL_GPIO_Init+0x29c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d863      	bhi.n	8004e16 <HAL_GPIO_Init+0x12e>
 8004d4e:	4a8e      	ldr	r2, [pc, #568]	; (8004f88 <HAL_GPIO_Init+0x2a0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d046      	beq.n	8004de2 <HAL_GPIO_Init+0xfa>
 8004d54:	4a8c      	ldr	r2, [pc, #560]	; (8004f88 <HAL_GPIO_Init+0x2a0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d85d      	bhi.n	8004e16 <HAL_GPIO_Init+0x12e>
 8004d5a:	2b12      	cmp	r3, #18
 8004d5c:	d82a      	bhi.n	8004db4 <HAL_GPIO_Init+0xcc>
 8004d5e:	2b12      	cmp	r3, #18
 8004d60:	d859      	bhi.n	8004e16 <HAL_GPIO_Init+0x12e>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_GPIO_Init+0x80>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004de3 	.word	0x08004de3
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004dcf 	.word	0x08004dcf
 8004d74:	08004e11 	.word	0x08004e11
 8004d78:	08004e17 	.word	0x08004e17
 8004d7c:	08004e17 	.word	0x08004e17
 8004d80:	08004e17 	.word	0x08004e17
 8004d84:	08004e17 	.word	0x08004e17
 8004d88:	08004e17 	.word	0x08004e17
 8004d8c:	08004e17 	.word	0x08004e17
 8004d90:	08004e17 	.word	0x08004e17
 8004d94:	08004e17 	.word	0x08004e17
 8004d98:	08004e17 	.word	0x08004e17
 8004d9c:	08004e17 	.word	0x08004e17
 8004da0:	08004e17 	.word	0x08004e17
 8004da4:	08004e17 	.word	0x08004e17
 8004da8:	08004e17 	.word	0x08004e17
 8004dac:	08004dc5 	.word	0x08004dc5
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	4a75      	ldr	r2, [pc, #468]	; (8004f8c <HAL_GPIO_Init+0x2a4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004dba:	e02c      	b.n	8004e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	623b      	str	r3, [r7, #32]
          break;
 8004dc2:	e029      	b.n	8004e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	623b      	str	r3, [r7, #32]
          break;
 8004dcc:	e024      	b.n	8004e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	623b      	str	r3, [r7, #32]
          break;
 8004dd6:	e01f      	b.n	8004e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	623b      	str	r3, [r7, #32]
          break;
 8004de0:	e01a      	b.n	8004e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004dea:	2304      	movs	r3, #4
 8004dec:	623b      	str	r3, [r7, #32]
          break;
 8004dee:	e013      	b.n	8004e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004df8:	2308      	movs	r3, #8
 8004dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	611a      	str	r2, [r3, #16]
          break;
 8004e02:	e009      	b.n	8004e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e04:	2308      	movs	r3, #8
 8004e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	615a      	str	r2, [r3, #20]
          break;
 8004e0e:	e003      	b.n	8004e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e10:	2300      	movs	r3, #0
 8004e12:	623b      	str	r3, [r7, #32]
          break;
 8004e14:	e000      	b.n	8004e18 <HAL_GPIO_Init+0x130>
          break;
 8004e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2bff      	cmp	r3, #255	; 0xff
 8004e1c:	d801      	bhi.n	8004e22 <HAL_GPIO_Init+0x13a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	e001      	b.n	8004e26 <HAL_GPIO_Init+0x13e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2bff      	cmp	r3, #255	; 0xff
 8004e2c:	d802      	bhi.n	8004e34 <HAL_GPIO_Init+0x14c>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	e002      	b.n	8004e3a <HAL_GPIO_Init+0x152>
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	3b08      	subs	r3, #8
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	210f      	movs	r1, #15
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	6a39      	ldr	r1, [r7, #32]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	431a      	orrs	r2, r3
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80c1 	beq.w	8004fea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e68:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <HAL_GPIO_Init+0x2a8>)
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	4a48      	ldr	r2, [pc, #288]	; (8004f90 <HAL_GPIO_Init+0x2a8>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6193      	str	r3, [r2, #24]
 8004e74:	4b46      	ldr	r3, [pc, #280]	; (8004f90 <HAL_GPIO_Init+0x2a8>)
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e80:	4a44      	ldr	r2, [pc, #272]	; (8004f94 <HAL_GPIO_Init+0x2ac>)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	3302      	adds	r3, #2
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	220f      	movs	r2, #15
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3c      	ldr	r2, [pc, #240]	; (8004f98 <HAL_GPIO_Init+0x2b0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01f      	beq.n	8004eec <HAL_GPIO_Init+0x204>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3b      	ldr	r2, [pc, #236]	; (8004f9c <HAL_GPIO_Init+0x2b4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d019      	beq.n	8004ee8 <HAL_GPIO_Init+0x200>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <HAL_GPIO_Init+0x2b8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d013      	beq.n	8004ee4 <HAL_GPIO_Init+0x1fc>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a39      	ldr	r2, [pc, #228]	; (8004fa4 <HAL_GPIO_Init+0x2bc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_GPIO_Init+0x1f8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <HAL_GPIO_Init+0x2c0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <HAL_GPIO_Init+0x1f4>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a37      	ldr	r2, [pc, #220]	; (8004fac <HAL_GPIO_Init+0x2c4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d101      	bne.n	8004ed8 <HAL_GPIO_Init+0x1f0>
 8004ed4:	2305      	movs	r3, #5
 8004ed6:	e00a      	b.n	8004eee <HAL_GPIO_Init+0x206>
 8004ed8:	2306      	movs	r3, #6
 8004eda:	e008      	b.n	8004eee <HAL_GPIO_Init+0x206>
 8004edc:	2304      	movs	r3, #4
 8004ede:	e006      	b.n	8004eee <HAL_GPIO_Init+0x206>
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e004      	b.n	8004eee <HAL_GPIO_Init+0x206>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e002      	b.n	8004eee <HAL_GPIO_Init+0x206>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <HAL_GPIO_Init+0x206>
 8004eec:	2300      	movs	r3, #0
 8004eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef0:	f002 0203 	and.w	r2, r2, #3
 8004ef4:	0092      	lsls	r2, r2, #2
 8004ef6:	4093      	lsls	r3, r2
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004efe:	4925      	ldr	r1, [pc, #148]	; (8004f94 <HAL_GPIO_Init+0x2ac>)
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	089b      	lsrs	r3, r3, #2
 8004f04:	3302      	adds	r3, #2
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f18:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4924      	ldr	r1, [pc, #144]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	608b      	str	r3, [r1, #8]
 8004f24:	e006      	b.n	8004f34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f26:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	4920      	ldr	r1, [pc, #128]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d006      	beq.n	8004f4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	491a      	ldr	r1, [pc, #104]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
 8004f4c:	e006      	b.n	8004f5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f4e:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	4916      	ldr	r1, [pc, #88]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d025      	beq.n	8004fb4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4910      	ldr	r1, [pc, #64]	; (8004fb0 <HAL_GPIO_Init+0x2c8>)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	604b      	str	r3, [r1, #4]
 8004f74:	e025      	b.n	8004fc2 <HAL_GPIO_Init+0x2da>
 8004f76:	bf00      	nop
 8004f78:	10320000 	.word	0x10320000
 8004f7c:	10310000 	.word	0x10310000
 8004f80:	10220000 	.word	0x10220000
 8004f84:	10210000 	.word	0x10210000
 8004f88:	10120000 	.word	0x10120000
 8004f8c:	10110000 	.word	0x10110000
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40010800 	.word	0x40010800
 8004f9c:	40010c00 	.word	0x40010c00
 8004fa0:	40011000 	.word	0x40011000
 8004fa4:	40011400 	.word	0x40011400
 8004fa8:	40011800 	.word	0x40011800
 8004fac:	40011c00 	.word	0x40011c00
 8004fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004fb4:	4b15      	ldr	r3, [pc, #84]	; (800500c <HAL_GPIO_Init+0x324>)
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	4913      	ldr	r1, [pc, #76]	; (800500c <HAL_GPIO_Init+0x324>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <HAL_GPIO_Init+0x324>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	490e      	ldr	r1, [pc, #56]	; (800500c <HAL_GPIO_Init+0x324>)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]
 8004fda:	e006      	b.n	8004fea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_GPIO_Init+0x324>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	4909      	ldr	r1, [pc, #36]	; (800500c <HAL_GPIO_Init+0x324>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	3301      	adds	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f47f ae7e 	bne.w	8004cfc <HAL_GPIO_Init+0x14>
  }
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	372c      	adds	r7, #44	; 0x2c
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	40010400 	.word	0x40010400

08005010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	887b      	ldrh	r3, [r7, #2]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	e001      	b.n	8005032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr

0800503e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	807b      	strh	r3, [r7, #2]
 800504a:	4613      	mov	r3, r2
 800504c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800504e:	787b      	ldrb	r3, [r7, #1]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005054:	887a      	ldrh	r2, [r7, #2]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800505a:	e003      	b.n	8005064 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	041a      	lsls	r2, r3, #16
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	460b      	mov	r3, r1
 8005078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005080:	887a      	ldrh	r2, [r7, #2]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4013      	ands	r3, r2
 8005086:	041a      	lsls	r2, r3, #16
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	43d9      	mvns	r1, r3
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	400b      	ands	r3, r1
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e12b      	b.n	800530a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fe fd4a 	bl	8003b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	; 0x24
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005102:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005104:	f001 fbfc 	bl	8006900 <HAL_RCC_GetPCLK1Freq>
 8005108:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4a81      	ldr	r2, [pc, #516]	; (8005314 <HAL_I2C_Init+0x274>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d807      	bhi.n	8005124 <HAL_I2C_Init+0x84>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a80      	ldr	r2, [pc, #512]	; (8005318 <HAL_I2C_Init+0x278>)
 8005118:	4293      	cmp	r3, r2
 800511a:	bf94      	ite	ls
 800511c:	2301      	movls	r3, #1
 800511e:	2300      	movhi	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e006      	b.n	8005132 <HAL_I2C_Init+0x92>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a7d      	ldr	r2, [pc, #500]	; (800531c <HAL_I2C_Init+0x27c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	bf94      	ite	ls
 800512c:	2301      	movls	r3, #1
 800512e:	2300      	movhi	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0e7      	b.n	800530a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4a78      	ldr	r2, [pc, #480]	; (8005320 <HAL_I2C_Init+0x280>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0c9b      	lsrs	r3, r3, #18
 8005144:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4a6a      	ldr	r2, [pc, #424]	; (8005314 <HAL_I2C_Init+0x274>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d802      	bhi.n	8005174 <HAL_I2C_Init+0xd4>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3301      	adds	r3, #1
 8005172:	e009      	b.n	8005188 <HAL_I2C_Init+0xe8>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	4a69      	ldr	r2, [pc, #420]	; (8005324 <HAL_I2C_Init+0x284>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	099b      	lsrs	r3, r3, #6
 8005186:	3301      	adds	r3, #1
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	430b      	orrs	r3, r1
 800518e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800519a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	495c      	ldr	r1, [pc, #368]	; (8005314 <HAL_I2C_Init+0x274>)
 80051a4:	428b      	cmp	r3, r1
 80051a6:	d819      	bhi.n	80051dc <HAL_I2C_Init+0x13c>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1e59      	subs	r1, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051bc:	400b      	ands	r3, r1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_I2C_Init+0x138>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1e59      	subs	r1, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80051d0:	3301      	adds	r3, #1
 80051d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d6:	e051      	b.n	800527c <HAL_I2C_Init+0x1dc>
 80051d8:	2304      	movs	r3, #4
 80051da:	e04f      	b.n	800527c <HAL_I2C_Init+0x1dc>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d111      	bne.n	8005208 <HAL_I2C_Init+0x168>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1e58      	subs	r0, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	440b      	add	r3, r1
 80051f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051f6:	3301      	adds	r3, #1
 80051f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	e012      	b.n	800522e <HAL_I2C_Init+0x18e>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1e58      	subs	r0, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	0099      	lsls	r1, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	fbb0 f3f3 	udiv	r3, r0, r3
 800521e:	3301      	adds	r3, #1
 8005220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Init+0x196>
 8005232:	2301      	movs	r3, #1
 8005234:	e022      	b.n	800527c <HAL_I2C_Init+0x1dc>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10e      	bne.n	800525c <HAL_I2C_Init+0x1bc>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1e58      	subs	r0, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6859      	ldr	r1, [r3, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	440b      	add	r3, r1
 800524c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005250:	3301      	adds	r3, #1
 8005252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525a:	e00f      	b.n	800527c <HAL_I2C_Init+0x1dc>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1e58      	subs	r0, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6859      	ldr	r1, [r3, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	0099      	lsls	r1, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005272:	3301      	adds	r3, #1
 8005274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	6809      	ldr	r1, [r1, #0]
 8005280:	4313      	orrs	r3, r2
 8005282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6911      	ldr	r1, [r2, #16]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68d2      	ldr	r2, [r2, #12]
 80052b6:	4311      	orrs	r1, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	430b      	orrs	r3, r1
 80052be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	000186a0 	.word	0x000186a0
 8005318:	001e847f 	.word	0x001e847f
 800531c:	003d08ff 	.word	0x003d08ff
 8005320:	431bde83 	.word	0x431bde83
 8005324:	10624dd3 	.word	0x10624dd3

08005328 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	4608      	mov	r0, r1
 8005332:	4611      	mov	r1, r2
 8005334:	461a      	mov	r2, r3
 8005336:	4603      	mov	r3, r0
 8005338:	817b      	strh	r3, [r7, #10]
 800533a:	460b      	mov	r3, r1
 800533c:	813b      	strh	r3, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005342:	f7fe ff2b 	bl	800419c <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b20      	cmp	r3, #32
 8005352:	f040 80d9 	bne.w	8005508 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2319      	movs	r3, #25
 800535c:	2201      	movs	r2, #1
 800535e:	496d      	ldr	r1, [pc, #436]	; (8005514 <HAL_I2C_Mem_Write+0x1ec>)
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fccd 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
 800536e:	e0cc      	b.n	800550a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_I2C_Mem_Write+0x56>
 800537a:	2302      	movs	r3, #2
 800537c:	e0c5      	b.n	800550a <HAL_I2C_Mem_Write+0x1e2>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d007      	beq.n	80053a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2221      	movs	r2, #33	; 0x21
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2240      	movs	r2, #64	; 0x40
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a4d      	ldr	r2, [pc, #308]	; (8005518 <HAL_I2C_Mem_Write+0x1f0>)
 80053e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053e6:	88f8      	ldrh	r0, [r7, #6]
 80053e8:	893a      	ldrh	r2, [r7, #8]
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	4603      	mov	r3, r0
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fb04 	bl	8005a04 <I2C_RequestMemoryWrite>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d052      	beq.n	80054a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e081      	b.n	800550a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fd92 	bl	8005f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b04      	cmp	r3, #4
 800541c:	d107      	bne.n	800542e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e06b      	b.n	800550a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	781a      	ldrb	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b04      	cmp	r3, #4
 800546e:	d11b      	bne.n	80054a8 <HAL_I2C_Mem_Write+0x180>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d017      	beq.n	80054a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1aa      	bne.n	8005406 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 fd85 	bl	8005fc4 <I2C_WaitOnBTFFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d107      	bne.n	80054d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e016      	b.n	800550a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	00100002 	.word	0x00100002
 8005518:	ffff0000 	.word	0xffff0000

0800551c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08c      	sub	sp, #48	; 0x30
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	4608      	mov	r0, r1
 8005526:	4611      	mov	r1, r2
 8005528:	461a      	mov	r2, r3
 800552a:	4603      	mov	r3, r0
 800552c:	817b      	strh	r3, [r7, #10]
 800552e:	460b      	mov	r3, r1
 8005530:	813b      	strh	r3, [r7, #8]
 8005532:	4613      	mov	r3, r2
 8005534:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800553a:	f7fe fe2f 	bl	800419c <HAL_GetTick>
 800553e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b20      	cmp	r3, #32
 800554a:	f040 8250 	bne.w	80059ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	2319      	movs	r3, #25
 8005554:	2201      	movs	r2, #1
 8005556:	4982      	ldr	r1, [pc, #520]	; (8005760 <HAL_I2C_Mem_Read+0x244>)
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fbd1 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
 8005566:	e243      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_I2C_Mem_Read+0x5a>
 8005572:	2302      	movs	r3, #2
 8005574:	e23c      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d007      	beq.n	800559c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2222      	movs	r2, #34	; 0x22
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2240      	movs	r2, #64	; 0x40
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4a62      	ldr	r2, [pc, #392]	; (8005764 <HAL_I2C_Mem_Read+0x248>)
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055de:	88f8      	ldrh	r0, [r7, #6]
 80055e0:	893a      	ldrh	r2, [r7, #8]
 80055e2:	8979      	ldrh	r1, [r7, #10]
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	4603      	mov	r3, r0
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fa9e 	bl	8005b30 <I2C_RequestMemoryRead>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e1f8      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d113      	bne.n	800562e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e1cc      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	2b01      	cmp	r3, #1
 8005634:	d11e      	bne.n	8005674 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005644:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005646:	b672      	cpsid	i
}
 8005648:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564a:	2300      	movs	r3, #0
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005670:	b662      	cpsie	i
}
 8005672:	e035      	b.n	80056e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005678:	2b02      	cmp	r3, #2
 800567a:	d11e      	bne.n	80056ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800568c:	b672      	cpsid	i
}
 800568e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056b6:	b662      	cpsie	i
}
 80056b8:	e012      	b.n	80056e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ca:	2300      	movs	r3, #0
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80056e0:	e172      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	f200 811f 	bhi.w	800592a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d123      	bne.n	800573c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fcab 	bl	8006054 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e173      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800573a:	e145      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	2b02      	cmp	r3, #2
 8005742:	d152      	bne.n	80057ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	2200      	movs	r2, #0
 800574c:	4906      	ldr	r1, [pc, #24]	; (8005768 <HAL_I2C_Mem_Read+0x24c>)
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fad6 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e148      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
 800575e:	bf00      	nop
 8005760:	00100002 	.word	0x00100002
 8005764:	ffff0000 	.word	0xffff0000
 8005768:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800576c:	b672      	cpsid	i
}
 800576e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80057b2:	b662      	cpsie	i
}
 80057b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057e8:	e0ee      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	2200      	movs	r2, #0
 80057f2:	4981      	ldr	r1, [pc, #516]	; (80059f8 <HAL_I2C_Mem_Read+0x4dc>)
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fa83 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0f5      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005814:	b672      	cpsid	i
}
 8005816:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800584a:	4b6c      	ldr	r3, [pc, #432]	; (80059fc <HAL_I2C_Mem_Read+0x4e0>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	08db      	lsrs	r3, r3, #3
 8005850:	4a6b      	ldr	r2, [pc, #428]	; (8005a00 <HAL_I2C_Mem_Read+0x4e4>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	0a1a      	lsrs	r2, r3, #8
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	00da      	lsls	r2, r3, #3
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	3b01      	subs	r3, #1
 8005868:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d118      	bne.n	80058a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005892:	b662      	cpsie	i
}
 8005894:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0a6      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d1d9      	bne.n	8005864 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80058f2:	b662      	cpsie	i
}
 80058f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005928:	e04e      	b.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fb90 	bl	8006054 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e058      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b04      	cmp	r3, #4
 800597c:	d124      	bne.n	80059c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005982:	2b03      	cmp	r3, #3
 8005984:	d107      	bne.n	8005996 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005994:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f47f ae88 	bne.w	80056e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3728      	adds	r7, #40	; 0x28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	00010004 	.word	0x00010004
 80059fc:	20000010 	.word	0x20000010
 8005a00:	14f8b589 	.word	0x14f8b589

08005a04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	817b      	strh	r3, [r7, #10]
 8005a16:	460b      	mov	r3, r1
 8005a18:	813b      	strh	r3, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f960 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a54:	d103      	bne.n	8005a5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e05f      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	492d      	ldr	r1, [pc, #180]	; (8005b2c <I2C_RequestMemoryWrite+0x128>)
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f9bb 	bl	8005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e04c      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa0:	6a39      	ldr	r1, [r7, #32]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa46 	bl	8005f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d107      	bne.n	8005ac6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e02b      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d105      	bne.n	8005adc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad0:	893b      	ldrh	r3, [r7, #8]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	e021      	b.n	8005b20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fa20 	bl	8005f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d107      	bne.n	8005b12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e005      	b.n	8005b22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b16:	893b      	ldrh	r3, [r7, #8]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	00010002 	.word	0x00010002

08005b30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	4608      	mov	r0, r1
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	817b      	strh	r3, [r7, #10]
 8005b42:	460b      	mov	r3, r1
 8005b44:	813b      	strh	r3, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f8c2 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b90:	d103      	bne.n	8005b9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0aa      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b9e:	897b      	ldrh	r3, [r7, #10]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	6a3a      	ldr	r2, [r7, #32]
 8005bb2:	4952      	ldr	r1, [pc, #328]	; (8005cfc <I2C_RequestMemoryRead+0x1cc>)
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f91d 	bl	8005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e097      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bdc:	6a39      	ldr	r1, [r7, #32]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f9a8 	bl	8005f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00d      	beq.n	8005c06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d107      	bne.n	8005c02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e076      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d105      	bne.n	8005c18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c0c:	893b      	ldrh	r3, [r7, #8]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	611a      	str	r2, [r3, #16]
 8005c16:	e021      	b.n	8005c5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c18:	893b      	ldrh	r3, [r7, #8]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	6a39      	ldr	r1, [r7, #32]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f982 	bl	8005f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d107      	bne.n	8005c4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e050      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c52:	893b      	ldrh	r3, [r7, #8]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	6a39      	ldr	r1, [r7, #32]
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f967 	bl	8005f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00d      	beq.n	8005c88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d107      	bne.n	8005c84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e035      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f82b 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbe:	d103      	bne.n	8005cc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e013      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ccc:	897b      	ldrh	r3, [r7, #10]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	6a3a      	ldr	r2, [r7, #32]
 8005ce0:	4906      	ldr	r1, [pc, #24]	; (8005cfc <I2C_RequestMemoryRead+0x1cc>)
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f886 	bl	8005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	00010002 	.word	0x00010002

08005d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d10:	e048      	b.n	8005da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d044      	beq.n	8005da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fe fa3f 	bl	800419c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d139      	bne.n	8005da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d10d      	bne.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	43da      	mvns	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	e00c      	b.n	8005d70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	43da      	mvns	r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d116      	bne.n	8005da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	f043 0220 	orr.w	r2, r3, #32
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e023      	b.n	8005dec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	0c1b      	lsrs	r3, r3, #16
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10d      	bne.n	8005dca <I2C_WaitOnFlagUntilTimeout+0xca>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	43da      	mvns	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4013      	ands	r3, r2
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	e00c      	b.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	43da      	mvns	r2, r3
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d093      	beq.n	8005d12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e02:	e071      	b.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e12:	d123      	bne.n	8005e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e067      	b.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d041      	beq.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e64:	f7fe f99a 	bl	800419c <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d302      	bcc.n	8005e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d136      	bne.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	0c1b      	lsrs	r3, r3, #16
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d10c      	bne.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	43da      	mvns	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	e00b      	b.n	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	43da      	mvns	r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bf14      	ite	ne
 8005eb0:	2301      	movne	r3, #1
 8005eb2:	2300      	moveq	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e021      	b.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10c      	bne.n	8005f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	43da      	mvns	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4013      	ands	r3, r2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	e00b      	b.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	43da      	mvns	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf14      	ite	ne
 8005f1e:	2301      	movne	r3, #1
 8005f20:	2300      	moveq	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f47f af6d 	bne.w	8005e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f40:	e034      	b.n	8005fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f8e3 	bl	800610e <I2C_IsAcknowledgeFailed>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e034      	b.n	8005fbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d028      	beq.n	8005fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5a:	f7fe f91f 	bl	800419c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d302      	bcc.n	8005f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d11d      	bne.n	8005fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d016      	beq.n	8005fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	f043 0220 	orr.w	r2, r3, #32
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e007      	b.n	8005fbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb6:	2b80      	cmp	r3, #128	; 0x80
 8005fb8:	d1c3      	bne.n	8005f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fd0:	e034      	b.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f89b 	bl	800610e <I2C_IsAcknowledgeFailed>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e034      	b.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d028      	beq.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fe f8d7 	bl	800419c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11d      	bne.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b04      	cmp	r3, #4
 800600c:	d016      	beq.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e007      	b.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b04      	cmp	r3, #4
 8006048:	d1c3      	bne.n	8005fd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006060:	e049      	b.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d119      	bne.n	80060a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0210 	mvn.w	r2, #16
 8006078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e030      	b.n	8006106 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a4:	f7fe f87a 	bl	800419c <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d302      	bcc.n	80060ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d11d      	bne.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d016      	beq.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e007      	b.n	8006106 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d1ae      	bne.n	8006062 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006124:	d11b      	bne.n	800615e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800612e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	f043 0204 	orr.w	r2, r3, #4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
	...

0800616c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e272      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 8087 	beq.w	800629a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800618c:	4b92      	ldr	r3, [pc, #584]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b04      	cmp	r3, #4
 8006196:	d00c      	beq.n	80061b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006198:	4b8f      	ldr	r3, [pc, #572]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 030c 	and.w	r3, r3, #12
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d112      	bne.n	80061ca <HAL_RCC_OscConfig+0x5e>
 80061a4:	4b8c      	ldr	r3, [pc, #560]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b0:	d10b      	bne.n	80061ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b2:	4b89      	ldr	r3, [pc, #548]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d06c      	beq.n	8006298 <HAL_RCC_OscConfig+0x12c>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d168      	bne.n	8006298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e24c      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d106      	bne.n	80061e2 <HAL_RCC_OscConfig+0x76>
 80061d4:	4b80      	ldr	r3, [pc, #512]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a7f      	ldr	r2, [pc, #508]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	e02e      	b.n	8006240 <HAL_RCC_OscConfig+0xd4>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10c      	bne.n	8006204 <HAL_RCC_OscConfig+0x98>
 80061ea:	4b7b      	ldr	r3, [pc, #492]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a7a      	ldr	r2, [pc, #488]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	4b78      	ldr	r3, [pc, #480]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a77      	ldr	r2, [pc, #476]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80061fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	e01d      	b.n	8006240 <HAL_RCC_OscConfig+0xd4>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0xbc>
 800620e:	4b72      	ldr	r3, [pc, #456]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a71      	ldr	r2, [pc, #452]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 8006214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b6f      	ldr	r3, [pc, #444]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a6e      	ldr	r2, [pc, #440]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 8006220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e00b      	b.n	8006240 <HAL_RCC_OscConfig+0xd4>
 8006228:	4b6b      	ldr	r3, [pc, #428]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a6a      	ldr	r2, [pc, #424]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800622e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	4b68      	ldr	r3, [pc, #416]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a67      	ldr	r2, [pc, #412]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800623a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d013      	beq.n	8006270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd ffa8 	bl	800419c <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006250:	f7fd ffa4 	bl	800419c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e200      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006262:	4b5d      	ldr	r3, [pc, #372]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0xe4>
 800626e:	e014      	b.n	800629a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fd ff94 	bl	800419c <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006278:	f7fd ff90 	bl	800419c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b64      	cmp	r3, #100	; 0x64
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e1ec      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800628a:	4b53      	ldr	r3, [pc, #332]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x10c>
 8006296:	e000      	b.n	800629a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d063      	beq.n	800636e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062a6:	4b4c      	ldr	r3, [pc, #304]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062b2:	4b49      	ldr	r3, [pc, #292]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d11c      	bne.n	80062f8 <HAL_RCC_OscConfig+0x18c>
 80062be:	4b46      	ldr	r3, [pc, #280]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d116      	bne.n	80062f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	4b43      	ldr	r3, [pc, #268]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_RCC_OscConfig+0x176>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d001      	beq.n	80062e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e1c0      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e2:	4b3d      	ldr	r3, [pc, #244]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4939      	ldr	r1, [pc, #228]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f6:	e03a      	b.n	800636e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d020      	beq.n	8006342 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <HAL_RCC_OscConfig+0x270>)
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006306:	f7fd ff49 	bl	800419c <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800630e:	f7fd ff45 	bl	800419c <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e1a1      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006320:	4b2d      	ldr	r3, [pc, #180]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632c:	4b2a      	ldr	r3, [pc, #168]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4927      	ldr	r1, [pc, #156]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
 8006340:	e015      	b.n	800636e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006342:	4b26      	ldr	r3, [pc, #152]	; (80063dc <HAL_RCC_OscConfig+0x270>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fd ff28 	bl	800419c <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006350:	f7fd ff24 	bl	800419c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e180      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006362:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d03a      	beq.n	80063f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d019      	beq.n	80063b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <HAL_RCC_OscConfig+0x274>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006388:	f7fd ff08 	bl	800419c <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006390:	f7fd ff04 	bl	800419c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e160      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a2:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <HAL_RCC_OscConfig+0x26c>)
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f0      	beq.n	8006390 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063ae:	2001      	movs	r0, #1
 80063b0:	f000 face 	bl	8006950 <RCC_Delay>
 80063b4:	e01c      	b.n	80063f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <HAL_RCC_OscConfig+0x274>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063bc:	f7fd feee 	bl	800419c <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c2:	e00f      	b.n	80063e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fd feea 	bl	800419c <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d908      	bls.n	80063e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e146      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
 80063d6:	bf00      	nop
 80063d8:	40021000 	.word	0x40021000
 80063dc:	42420000 	.word	0x42420000
 80063e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e4:	4b92      	ldr	r3, [pc, #584]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e9      	bne.n	80063c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80a6 	beq.w	800654a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006402:	4b8b      	ldr	r3, [pc, #556]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10d      	bne.n	800642a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800640e:	4b88      	ldr	r3, [pc, #544]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	4a87      	ldr	r2, [pc, #540]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006418:	61d3      	str	r3, [r2, #28]
 800641a:	4b85      	ldr	r3, [pc, #532]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006422:	60bb      	str	r3, [r7, #8]
 8006424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800642a:	4b82      	ldr	r3, [pc, #520]	; (8006634 <HAL_RCC_OscConfig+0x4c8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d118      	bne.n	8006468 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006436:	4b7f      	ldr	r3, [pc, #508]	; (8006634 <HAL_RCC_OscConfig+0x4c8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7e      	ldr	r2, [pc, #504]	; (8006634 <HAL_RCC_OscConfig+0x4c8>)
 800643c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006442:	f7fd feab 	bl	800419c <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800644a:	f7fd fea7 	bl	800419c <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b64      	cmp	r3, #100	; 0x64
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e103      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645c:	4b75      	ldr	r3, [pc, #468]	; (8006634 <HAL_RCC_OscConfig+0x4c8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x312>
 8006470:	4b6f      	ldr	r3, [pc, #444]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	4a6e      	ldr	r2, [pc, #440]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6213      	str	r3, [r2, #32]
 800647c:	e02d      	b.n	80064da <HAL_RCC_OscConfig+0x36e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x334>
 8006486:	4b6a      	ldr	r3, [pc, #424]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4a69      	ldr	r2, [pc, #420]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	6213      	str	r3, [r2, #32]
 8006492:	4b67      	ldr	r3, [pc, #412]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	4a66      	ldr	r2, [pc, #408]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006498:	f023 0304 	bic.w	r3, r3, #4
 800649c:	6213      	str	r3, [r2, #32]
 800649e:	e01c      	b.n	80064da <HAL_RCC_OscConfig+0x36e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d10c      	bne.n	80064c2 <HAL_RCC_OscConfig+0x356>
 80064a8:	4b61      	ldr	r3, [pc, #388]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	4a60      	ldr	r2, [pc, #384]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064ae:	f043 0304 	orr.w	r3, r3, #4
 80064b2:	6213      	str	r3, [r2, #32]
 80064b4:	4b5e      	ldr	r3, [pc, #376]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	4a5d      	ldr	r2, [pc, #372]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6213      	str	r3, [r2, #32]
 80064c0:	e00b      	b.n	80064da <HAL_RCC_OscConfig+0x36e>
 80064c2:	4b5b      	ldr	r3, [pc, #364]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4a5a      	ldr	r2, [pc, #360]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	6213      	str	r3, [r2, #32]
 80064ce:	4b58      	ldr	r3, [pc, #352]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	4a57      	ldr	r2, [pc, #348]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80064d4:	f023 0304 	bic.w	r3, r3, #4
 80064d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d015      	beq.n	800650e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e2:	f7fd fe5b 	bl	800419c <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e8:	e00a      	b.n	8006500 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fd fe57 	bl	800419c <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e0b1      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006500:	4b4b      	ldr	r3, [pc, #300]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0ee      	beq.n	80064ea <HAL_RCC_OscConfig+0x37e>
 800650c:	e014      	b.n	8006538 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650e:	f7fd fe45 	bl	800419c <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006516:	f7fd fe41 	bl	800419c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	; 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e09b      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800652c:	4b40      	ldr	r3, [pc, #256]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ee      	bne.n	8006516 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d105      	bne.n	800654a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800653e:	4b3c      	ldr	r3, [pc, #240]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	4a3b      	ldr	r2, [pc, #236]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006548:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8087 	beq.w	8006662 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006554:	4b36      	ldr	r3, [pc, #216]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 030c 	and.w	r3, r3, #12
 800655c:	2b08      	cmp	r3, #8
 800655e:	d061      	beq.n	8006624 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d146      	bne.n	80065f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006568:	4b33      	ldr	r3, [pc, #204]	; (8006638 <HAL_RCC_OscConfig+0x4cc>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656e:	f7fd fe15 	bl	800419c <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006576:	f7fd fe11 	bl	800419c <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e06d      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006588:	4b29      	ldr	r3, [pc, #164]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659c:	d108      	bne.n	80065b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	4921      	ldr	r1, [pc, #132]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065b0:	4b1f      	ldr	r3, [pc, #124]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a19      	ldr	r1, [r3, #32]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	430b      	orrs	r3, r1
 80065c2:	491b      	ldr	r1, [pc, #108]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c8:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <HAL_RCC_OscConfig+0x4cc>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ce:	f7fd fde5 	bl	800419c <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d6:	f7fd fde1 	bl	800419c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e03d      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065e8:	4b11      	ldr	r3, [pc, #68]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0x46a>
 80065f4:	e035      	b.n	8006662 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <HAL_RCC_OscConfig+0x4cc>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fc:	f7fd fdce 	bl	800419c <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006604:	f7fd fdca 	bl	800419c <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e026      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_RCC_OscConfig+0x4c4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x498>
 8006622:	e01e      	b.n	8006662 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d107      	bne.n	800663c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e019      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
 8006630:	40021000 	.word	0x40021000
 8006634:	40007000 	.word	0x40007000
 8006638:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_RCC_OscConfig+0x500>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	429a      	cmp	r2, r3
 800664e:	d106      	bne.n	800665e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	429a      	cmp	r2, r3
 800665c:	d001      	beq.n	8006662 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40021000 	.word	0x40021000

08006670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0d0      	b.n	8006826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006684:	4b6a      	ldr	r3, [pc, #424]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d910      	bls.n	80066b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006692:	4b67      	ldr	r3, [pc, #412]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f023 0207 	bic.w	r2, r3, #7
 800669a:	4965      	ldr	r1, [pc, #404]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	4313      	orrs	r3, r2
 80066a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a2:	4b63      	ldr	r3, [pc, #396]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d001      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0b8      	b.n	8006826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d020      	beq.n	8006702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066cc:	4b59      	ldr	r3, [pc, #356]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a58      	ldr	r2, [pc, #352]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066e4:	4b53      	ldr	r3, [pc, #332]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4a52      	ldr	r2, [pc, #328]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066f0:	4b50      	ldr	r3, [pc, #320]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	494d      	ldr	r1, [pc, #308]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d040      	beq.n	8006790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d107      	bne.n	8006726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006716:	4b47      	ldr	r3, [pc, #284]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d115      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e07f      	b.n	8006826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672e:	4b41      	ldr	r3, [pc, #260]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e073      	b.n	8006826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673e:	4b3d      	ldr	r3, [pc, #244]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e06b      	b.n	8006826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800674e:	4b39      	ldr	r3, [pc, #228]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f023 0203 	bic.w	r2, r3, #3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4936      	ldr	r1, [pc, #216]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006760:	f7fd fd1c 	bl	800419c <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	e00a      	b.n	800677e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006768:	f7fd fd18 	bl	800419c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f241 3288 	movw	r2, #5000	; 0x1388
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e053      	b.n	8006826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677e:	4b2d      	ldr	r3, [pc, #180]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f003 020c 	and.w	r2, r3, #12
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	429a      	cmp	r2, r3
 800678e:	d1eb      	bne.n	8006768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006790:	4b27      	ldr	r3, [pc, #156]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d210      	bcs.n	80067c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b24      	ldr	r3, [pc, #144]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f023 0207 	bic.w	r2, r3, #7
 80067a6:	4922      	ldr	r1, [pc, #136]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ae:	4b20      	ldr	r3, [pc, #128]	; (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d001      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e032      	b.n	8006826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067cc:	4b19      	ldr	r3, [pc, #100]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4916      	ldr	r1, [pc, #88]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	490e      	ldr	r1, [pc, #56]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067fe:	f000 f821 	bl	8006844 <HAL_RCC_GetSysClockFreq>
 8006802:	4602      	mov	r2, r0
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	091b      	lsrs	r3, r3, #4
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	490a      	ldr	r1, [pc, #40]	; (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006810:	5ccb      	ldrb	r3, [r1, r3]
 8006812:	fa22 f303 	lsr.w	r3, r2, r3
 8006816:	4a09      	ldr	r2, [pc, #36]	; (800683c <HAL_RCC_ClockConfig+0x1cc>)
 8006818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <HAL_RCC_ClockConfig+0x1d0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fd fc7a 	bl	8004118 <HAL_InitTick>

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40022000 	.word	0x40022000
 8006834:	40021000 	.word	0x40021000
 8006838:	0800cc48 	.word	0x0800cc48
 800683c:	20000010 	.word	0x20000010
 8006840:	20000014 	.word	0x20000014

08006844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	2300      	movs	r3, #0
 8006858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800685e:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b04      	cmp	r3, #4
 800686c:	d002      	beq.n	8006874 <HAL_RCC_GetSysClockFreq+0x30>
 800686e:	2b08      	cmp	r3, #8
 8006870:	d003      	beq.n	800687a <HAL_RCC_GetSysClockFreq+0x36>
 8006872:	e027      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <HAL_RCC_GetSysClockFreq+0x98>)
 8006876:	613b      	str	r3, [r7, #16]
      break;
 8006878:	e027      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	0c9b      	lsrs	r3, r3, #18
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006884:	5cd3      	ldrb	r3, [r2, r3]
 8006886:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d010      	beq.n	80068b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	0c5b      	lsrs	r3, r3, #17
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	4a11      	ldr	r2, [pc, #68]	; (80068e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800689e:	5cd3      	ldrb	r3, [r2, r3]
 80068a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a0d      	ldr	r2, [pc, #52]	; (80068dc <HAL_RCC_GetSysClockFreq+0x98>)
 80068a6:	fb03 f202 	mul.w	r2, r3, r2
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	e004      	b.n	80068be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a0c      	ldr	r2, [pc, #48]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	613b      	str	r3, [r7, #16]
      break;
 80068c2:	e002      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_RCC_GetSysClockFreq+0x98>)
 80068c6:	613b      	str	r3, [r7, #16]
      break;
 80068c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ca:	693b      	ldr	r3, [r7, #16]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40021000 	.word	0x40021000
 80068dc:	007a1200 	.word	0x007a1200
 80068e0:	0800cc60 	.word	0x0800cc60
 80068e4:	0800cc70 	.word	0x0800cc70
 80068e8:	003d0900 	.word	0x003d0900

080068ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f0:	4b02      	ldr	r3, [pc, #8]	; (80068fc <HAL_RCC_GetHCLKFreq+0x10>)
 80068f2:	681b      	ldr	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	20000010 	.word	0x20000010

08006900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006904:	f7ff fff2 	bl	80068ec <HAL_RCC_GetHCLKFreq>
 8006908:	4602      	mov	r2, r0
 800690a:	4b05      	ldr	r3, [pc, #20]	; (8006920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	0a1b      	lsrs	r3, r3, #8
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	4903      	ldr	r1, [pc, #12]	; (8006924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006916:	5ccb      	ldrb	r3, [r1, r3]
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800691c:	4618      	mov	r0, r3
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40021000 	.word	0x40021000
 8006924:	0800cc58 	.word	0x0800cc58

08006928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800692c:	f7ff ffde 	bl	80068ec <HAL_RCC_GetHCLKFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	0adb      	lsrs	r3, r3, #11
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	4903      	ldr	r1, [pc, #12]	; (800694c <HAL_RCC_GetPCLK2Freq+0x24>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40021000 	.word	0x40021000
 800694c:	0800cc58 	.word	0x0800cc58

08006950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <RCC_Delay+0x34>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a0a      	ldr	r2, [pc, #40]	; (8006988 <RCC_Delay+0x38>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	0a5b      	lsrs	r3, r3, #9
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800696c:	bf00      	nop
  }
  while (Delay --);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1e5a      	subs	r2, r3, #1
 8006972:	60fa      	str	r2, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f9      	bne.n	800696c <RCC_Delay+0x1c>
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	20000010 	.word	0x20000010
 8006988:	10624dd3 	.word	0x10624dd3

0800698c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d07d      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ac:	4b4f      	ldr	r3, [pc, #316]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10d      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b8:	4b4c      	ldr	r3, [pc, #304]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	4a4b      	ldr	r2, [pc, #300]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c2:	61d3      	str	r3, [r2, #28]
 80069c4:	4b49      	ldr	r3, [pc, #292]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d4:	4b46      	ldr	r3, [pc, #280]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d118      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069e0:	4b43      	ldr	r3, [pc, #268]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a42      	ldr	r2, [pc, #264]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ec:	f7fd fbd6 	bl	800419c <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f2:	e008      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f4:	f7fd fbd2 	bl	800419c <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b64      	cmp	r3, #100	; 0x64
 8006a00:	d901      	bls.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e06d      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a06:	4b3a      	ldr	r3, [pc, #232]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a12:	4b36      	ldr	r3, [pc, #216]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d02e      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d027      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a30:	4b2e      	ldr	r3, [pc, #184]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a46:	4a29      	ldr	r2, [pc, #164]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d014      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a56:	f7fd fba1 	bl	800419c <HAL_GetTick>
 8006a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5c:	e00a      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a5e:	f7fd fb9d 	bl	800419c <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e036      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a74:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0ee      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a80:	4b1a      	ldr	r3, [pc, #104]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4917      	ldr	r1, [pc, #92]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a98:	4b14      	ldr	r3, [pc, #80]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	4a13      	ldr	r2, [pc, #76]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	490b      	ldr	r1, [pc, #44]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ace:	4b07      	ldr	r3, [pc, #28]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	4904      	ldr	r1, [pc, #16]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40021000 	.word	0x40021000
 8006af0:	40007000 	.word	0x40007000
 8006af4:	42420440 	.word	0x42420440

08006af8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	2b0f      	cmp	r3, #15
 8006b1a:	f200 80af 	bhi.w	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006bfb 	.word	0x08006bfb
 8006b28:	08006c61 	.word	0x08006c61
 8006b2c:	08006c7d 	.word	0x08006c7d
 8006b30:	08006beb 	.word	0x08006beb
 8006b34:	08006c7d 	.word	0x08006c7d
 8006b38:	08006c7d 	.word	0x08006c7d
 8006b3c:	08006c7d 	.word	0x08006c7d
 8006b40:	08006bf3 	.word	0x08006bf3
 8006b44:	08006c7d 	.word	0x08006c7d
 8006b48:	08006c7d 	.word	0x08006c7d
 8006b4c:	08006c7d 	.word	0x08006c7d
 8006b50:	08006c7d 	.word	0x08006c7d
 8006b54:	08006c7d 	.word	0x08006c7d
 8006b58:	08006c7d 	.word	0x08006c7d
 8006b5c:	08006c7d 	.word	0x08006c7d
 8006b60:	08006b65 	.word	0x08006b65
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006b64:	4b4a      	ldr	r3, [pc, #296]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006b6a:	4b49      	ldr	r3, [pc, #292]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8084 	beq.w	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	0c9b      	lsrs	r3, r3, #18
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	4a44      	ldr	r2, [pc, #272]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8006b82:	5cd3      	ldrb	r3, [r2, r3]
 8006b84:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d015      	beq.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b90:	4b3f      	ldr	r3, [pc, #252]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	0c5b      	lsrs	r3, r3, #17
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	4a3f      	ldr	r2, [pc, #252]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8006b9c:	5cd3      	ldrb	r3, [r2, r3]
 8006b9e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00d      	beq.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006baa:	4a3c      	ldr	r2, [pc, #240]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	e004      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4a38      	ldr	r2, [pc, #224]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006bc6:	4b32      	ldr	r3, [pc, #200]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd2:	d102      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006bd8:	e052      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4a31      	ldr	r2, [pc, #196]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8006be0:	fba2 2303 	umull	r2, r3, r2, r3
 8006be4:	085b      	lsrs	r3, r3, #1
 8006be6:	61bb      	str	r3, [r7, #24]
      break;
 8006be8:	e04a      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006bea:	f7ff fe2b 	bl	8006844 <HAL_RCC_GetSysClockFreq>
 8006bee:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006bf0:	e049      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7ff fe27 	bl	8006844 <HAL_RCC_GetSysClockFreq>
 8006bf6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006bf8:	e045      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006bfa:	4b25      	ldr	r3, [pc, #148]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c0a:	d108      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8006c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	e01f      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c28:	d109      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006c2a:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8006c36:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	e00f      	b.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c48:	d11c      	bne.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d016      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8006c56:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c5a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006c5c:	e012      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006c5e:	e011      	b.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006c60:	f7ff fe62 	bl	8006928 <HAL_RCC_GetPCLK2Freq>
 8006c64:	4602      	mov	r2, r0
 8006c66:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	0b9b      	lsrs	r3, r3, #14
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	3301      	adds	r3, #1
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	61bb      	str	r3, [r7, #24]
      break;
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e002      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8006c80:	bf00      	nop
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8006c84:	bf00      	nop
    }
  }
  return (frequency);
 8006c86:	69bb      	ldr	r3, [r7, #24]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40021000 	.word	0x40021000
 8006c94:	0800cc74 	.word	0x0800cc74
 8006c98:	0800cc84 	.word	0x0800cc84
 8006c9c:	007a1200 	.word	0x007a1200
 8006ca0:	003d0900 	.word	0x003d0900
 8006ca4:	aaaaaaab 	.word	0xaaaaaaab

08006ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e041      	b.n	8006d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fc ff84 	bl	8003bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f000 fd2e 	bl	8007748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e041      	b.n	8006ddc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d106      	bne.n	8006d72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f839 	bl	8006de4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f000 fcdf 	bl	8007748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr
	...

08006df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <HAL_TIM_PWM_Start+0x24>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	bf14      	ite	ne
 8006e14:	2301      	movne	r3, #1
 8006e16:	2300      	moveq	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	e022      	b.n	8006e62 <HAL_TIM_PWM_Start+0x6a>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d109      	bne.n	8006e36 <HAL_TIM_PWM_Start+0x3e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	bf14      	ite	ne
 8006e2e:	2301      	movne	r3, #1
 8006e30:	2300      	moveq	r3, #0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	e015      	b.n	8006e62 <HAL_TIM_PWM_Start+0x6a>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d109      	bne.n	8006e50 <HAL_TIM_PWM_Start+0x58>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	bf14      	ite	ne
 8006e48:	2301      	movne	r3, #1
 8006e4a:	2300      	moveq	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	e008      	b.n	8006e62 <HAL_TIM_PWM_Start+0x6a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	bf14      	ite	ne
 8006e5c:	2301      	movne	r3, #1
 8006e5e:	2300      	moveq	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e072      	b.n	8006f50 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <HAL_TIM_PWM_Start+0x82>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e78:	e013      	b.n	8006ea2 <HAL_TIM_PWM_Start+0xaa>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_PWM_Start+0x92>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e88:	e00b      	b.n	8006ea2 <HAL_TIM_PWM_Start+0xaa>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_PWM_Start+0xa2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e98:	e003      	b.n	8006ea2 <HAL_TIM_PWM_Start+0xaa>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 ff14 	bl	8007cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a28      	ldr	r2, [pc, #160]	; (8006f58 <HAL_TIM_PWM_Start+0x160>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <HAL_TIM_PWM_Start+0xcc>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <HAL_TIM_PWM_Start+0x164>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIM_PWM_Start+0xd0>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <HAL_TIM_PWM_Start+0xd2>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	; (8006f58 <HAL_TIM_PWM_Start+0x160>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <HAL_TIM_PWM_Start+0x122>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <HAL_TIM_PWM_Start+0x164>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_TIM_PWM_Start+0x122>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efa:	d00e      	beq.n	8006f1a <HAL_TIM_PWM_Start+0x122>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a17      	ldr	r2, [pc, #92]	; (8006f60 <HAL_TIM_PWM_Start+0x168>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_TIM_PWM_Start+0x122>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a16      	ldr	r2, [pc, #88]	; (8006f64 <HAL_TIM_PWM_Start+0x16c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIM_PWM_Start+0x122>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <HAL_TIM_PWM_Start+0x170>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d111      	bne.n	8006f3e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b06      	cmp	r3, #6
 8006f2a:	d010      	beq.n	8006f4e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3c:	e007      	b.n	8006f4e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0201 	orr.w	r2, r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40012c00 	.word	0x40012c00
 8006f5c:	40013400 	.word	0x40013400
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00

08006f6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e093      	b.n	80070a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fc fe53 	bl	8003c40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6812      	ldr	r2, [r2, #0]
 8006fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb0:	f023 0307 	bic.w	r3, r3, #7
 8006fb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f000 fbc1 	bl	8007748 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fee:	f023 0303 	bic.w	r3, r3, #3
 8006ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	4313      	orrs	r3, r2
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800700c:	f023 030c 	bic.w	r3, r3, #12
 8007010:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	4313      	orrs	r3, r2
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	011a      	lsls	r2, r3, #4
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	031b      	lsls	r3, r3, #12
 800703c:	4313      	orrs	r3, r2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800704a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	4313      	orrs	r3, r2
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80070d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d110      	bne.n	8007102 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d102      	bne.n	80070ec <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80070e6:	7b7b      	ldrb	r3, [r7, #13]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d001      	beq.n	80070f0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e089      	b.n	8007204 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007100:	e031      	b.n	8007166 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b04      	cmp	r3, #4
 8007106:	d110      	bne.n	800712a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d102      	bne.n	8007114 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800710e:	7b3b      	ldrb	r3, [r7, #12]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d001      	beq.n	8007118 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e075      	b.n	8007204 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007128:	e01d      	b.n	8007166 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d108      	bne.n	8007142 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d105      	bne.n	8007142 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007136:	7b7b      	ldrb	r3, [r7, #13]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d102      	bne.n	8007142 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800713c:	7b3b      	ldrb	r3, [r7, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d001      	beq.n	8007146 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e05e      	b.n	8007204 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2202      	movs	r2, #2
 8007152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_TIM_Encoder_Start_IT+0xc4>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b04      	cmp	r3, #4
 8007170:	d010      	beq.n	8007194 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007172:	e01f      	b.n	80071b4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2201      	movs	r2, #1
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fdab 	bl	8007cd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0202 	orr.w	r2, r2, #2
 8007190:	60da      	str	r2, [r3, #12]
      break;
 8007192:	e02e      	b.n	80071f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	2104      	movs	r1, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fd9b 	bl	8007cd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0204 	orr.w	r2, r2, #4
 80071b0:	60da      	str	r2, [r3, #12]
      break;
 80071b2:	e01e      	b.n	80071f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2201      	movs	r2, #1
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fd8b 	bl	8007cd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2201      	movs	r2, #1
 80071c8:	2104      	movs	r1, #4
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fd84 	bl	8007cd8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0202 	orr.w	r2, r2, #2
 80071de:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0204 	orr.w	r2, r2, #4
 80071ee:	60da      	str	r2, [r3, #12]
      break;
 80071f0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d020      	beq.n	8007270 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d01b      	beq.n	8007270 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0202 	mvn.w	r2, #2
 8007240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fb fcde 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 800725c:	e005      	b.n	800726a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa56 	bl	8007710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa5c 	bl	8007722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d020      	beq.n	80072bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01b      	beq.n	80072bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0204 	mvn.w	r2, #4
 800728c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7fb fcb8 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 80072a8:	e005      	b.n	80072b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa30 	bl	8007710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa36 	bl	8007722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d020      	beq.n	8007308 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01b      	beq.n	8007308 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0208 	mvn.w	r2, #8
 80072d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2204      	movs	r2, #4
 80072de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fb fc92 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 80072f4:	e005      	b.n	8007302 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa0a 	bl	8007710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa10 	bl	8007722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 0310 	and.w	r3, r3, #16
 800730e:	2b00      	cmp	r3, #0
 8007310:	d020      	beq.n	8007354 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01b      	beq.n	8007354 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f06f 0210 	mvn.w	r2, #16
 8007324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2208      	movs	r2, #8
 800732a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fb fc6c 	bl	8002c18 <HAL_TIM_IC_CaptureCallback>
 8007340:	e005      	b.n	800734e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f9e4 	bl	8007710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f9ea 	bl	8007722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0201 	mvn.w	r2, #1
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9c3 	bl	80076fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00c      	beq.n	800739c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b00      	cmp	r3, #0
 800738a:	d007      	beq.n	800739c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fd88 	bl	8007eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00c      	beq.n	80073c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d007      	beq.n	80073c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f9ba 	bl	8007734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00c      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d007      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0220 	mvn.w	r2, #32
 80073dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fd5b 	bl	8007e9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007406:	2302      	movs	r3, #2
 8007408:	e0ae      	b.n	8007568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b0c      	cmp	r3, #12
 8007416:	f200 809f 	bhi.w	8007558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007455 	.word	0x08007455
 8007424:	08007559 	.word	0x08007559
 8007428:	08007559 	.word	0x08007559
 800742c:	08007559 	.word	0x08007559
 8007430:	08007495 	.word	0x08007495
 8007434:	08007559 	.word	0x08007559
 8007438:	08007559 	.word	0x08007559
 800743c:	08007559 	.word	0x08007559
 8007440:	080074d7 	.word	0x080074d7
 8007444:	08007559 	.word	0x08007559
 8007448:	08007559 	.word	0x08007559
 800744c:	08007559 	.word	0x08007559
 8007450:	08007517 	.word	0x08007517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f9fa 	bl	8007854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0208 	orr.w	r2, r2, #8
 800746e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0204 	bic.w	r2, r2, #4
 800747e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6999      	ldr	r1, [r3, #24]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	619a      	str	r2, [r3, #24]
      break;
 8007492:	e064      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fa4a 	bl	8007934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	699a      	ldr	r2, [r3, #24]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6999      	ldr	r1, [r3, #24]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	021a      	lsls	r2, r3, #8
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	619a      	str	r2, [r3, #24]
      break;
 80074d4:	e043      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fa9d 	bl	8007a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69da      	ldr	r2, [r3, #28]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0208 	orr.w	r2, r2, #8
 80074f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69da      	ldr	r2, [r3, #28]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 0204 	bic.w	r2, r2, #4
 8007500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69d9      	ldr	r1, [r3, #28]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	61da      	str	r2, [r3, #28]
      break;
 8007514:	e023      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	4618      	mov	r0, r3
 800751e:	f000 faf1 	bl	8007b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69d9      	ldr	r1, [r3, #28]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	021a      	lsls	r2, r3, #8
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	61da      	str	r2, [r3, #28]
      break;
 8007556:	e002      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	75fb      	strb	r3, [r7, #23]
      break;
 800755c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x1c>
 8007588:	2302      	movs	r3, #2
 800758a:	e0b4      	b.n	80076f6 <HAL_TIM_ConfigClockSource+0x186>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c4:	d03e      	beq.n	8007644 <HAL_TIM_ConfigClockSource+0xd4>
 80075c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ca:	f200 8087 	bhi.w	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 80075ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d2:	f000 8086 	beq.w	80076e2 <HAL_TIM_ConfigClockSource+0x172>
 80075d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075da:	d87f      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 80075dc:	2b70      	cmp	r3, #112	; 0x70
 80075de:	d01a      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0xa6>
 80075e0:	2b70      	cmp	r3, #112	; 0x70
 80075e2:	d87b      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 80075e4:	2b60      	cmp	r3, #96	; 0x60
 80075e6:	d050      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x11a>
 80075e8:	2b60      	cmp	r3, #96	; 0x60
 80075ea:	d877      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 80075ec:	2b50      	cmp	r3, #80	; 0x50
 80075ee:	d03c      	beq.n	800766a <HAL_TIM_ConfigClockSource+0xfa>
 80075f0:	2b50      	cmp	r3, #80	; 0x50
 80075f2:	d873      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d058      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x13a>
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d86f      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 80075fc:	2b30      	cmp	r3, #48	; 0x30
 80075fe:	d064      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0x15a>
 8007600:	2b30      	cmp	r3, #48	; 0x30
 8007602:	d86b      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 8007604:	2b20      	cmp	r3, #32
 8007606:	d060      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0x15a>
 8007608:	2b20      	cmp	r3, #32
 800760a:	d867      	bhi.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d05c      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0x15a>
 8007610:	2b10      	cmp	r3, #16
 8007612:	d05a      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0x15a>
 8007614:	e062      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007626:	f000 fb38 	bl	8007c9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	609a      	str	r2, [r3, #8]
      break;
 8007642:	e04f      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007654:	f000 fb21 	bl	8007c9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007666:	609a      	str	r2, [r3, #8]
      break;
 8007668:	e03c      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007676:	461a      	mov	r2, r3
 8007678:	f000 fa98 	bl	8007bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2150      	movs	r1, #80	; 0x50
 8007682:	4618      	mov	r0, r3
 8007684:	f000 faef 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 8007688:	e02c      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007696:	461a      	mov	r2, r3
 8007698:	f000 fab6 	bl	8007c08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2160      	movs	r1, #96	; 0x60
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fadf 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80076a8:	e01c      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076b6:	461a      	mov	r2, r3
 80076b8:	f000 fa78 	bl	8007bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2140      	movs	r1, #64	; 0x40
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 facf 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80076c8:	e00c      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f000 fac6 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80076da:	e003      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
      break;
 80076e0:	e000      	b.n	80076e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr

08007722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr

08007734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr
	...

08007748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a39      	ldr	r2, [pc, #228]	; (8007840 <TIM_Base_SetConfig+0xf8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <TIM_Base_SetConfig+0x40>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a38      	ldr	r2, [pc, #224]	; (8007844 <TIM_Base_SetConfig+0xfc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00f      	beq.n	8007788 <TIM_Base_SetConfig+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d00b      	beq.n	8007788 <TIM_Base_SetConfig+0x40>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a35      	ldr	r2, [pc, #212]	; (8007848 <TIM_Base_SetConfig+0x100>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a34      	ldr	r2, [pc, #208]	; (800784c <TIM_Base_SetConfig+0x104>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a33      	ldr	r2, [pc, #204]	; (8007850 <TIM_Base_SetConfig+0x108>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d108      	bne.n	800779a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a28      	ldr	r2, [pc, #160]	; (8007840 <TIM_Base_SetConfig+0xf8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <TIM_Base_SetConfig+0x82>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a27      	ldr	r2, [pc, #156]	; (8007844 <TIM_Base_SetConfig+0xfc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00f      	beq.n	80077ca <TIM_Base_SetConfig+0x82>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b0:	d00b      	beq.n	80077ca <TIM_Base_SetConfig+0x82>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a24      	ldr	r2, [pc, #144]	; (8007848 <TIM_Base_SetConfig+0x100>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d007      	beq.n	80077ca <TIM_Base_SetConfig+0x82>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a23      	ldr	r2, [pc, #140]	; (800784c <TIM_Base_SetConfig+0x104>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d003      	beq.n	80077ca <TIM_Base_SetConfig+0x82>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a22      	ldr	r2, [pc, #136]	; (8007850 <TIM_Base_SetConfig+0x108>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d108      	bne.n	80077dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a0f      	ldr	r2, [pc, #60]	; (8007840 <TIM_Base_SetConfig+0xf8>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_Base_SetConfig+0xc8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a0e      	ldr	r2, [pc, #56]	; (8007844 <TIM_Base_SetConfig+0xfc>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d103      	bne.n	8007818 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f023 0201 	bic.w	r2, r3, #1
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	611a      	str	r2, [r3, #16]
  }
}
 8007836:	bf00      	nop
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00

08007854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f023 0201 	bic.w	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 0302 	bic.w	r3, r3, #2
 800789c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a20      	ldr	r2, [pc, #128]	; (800792c <TIM_OC1_SetConfig+0xd8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_OC1_SetConfig+0x64>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <TIM_OC1_SetConfig+0xdc>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d10c      	bne.n	80078d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0308 	bic.w	r3, r3, #8
 80078be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 0304 	bic.w	r3, r3, #4
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a15      	ldr	r2, [pc, #84]	; (800792c <TIM_OC1_SetConfig+0xd8>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_OC1_SetConfig+0x8e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a14      	ldr	r2, [pc, #80]	; (8007930 <TIM_OC1_SetConfig+0xdc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d111      	bne.n	8007906 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	621a      	str	r2, [r3, #32]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400

08007934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	f023 0210 	bic.w	r2, r3, #16
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f023 0320 	bic.w	r3, r3, #32
 800797e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <TIM_OC2_SetConfig+0xe0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_OC2_SetConfig+0x68>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <TIM_OC2_SetConfig+0xe4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d10d      	bne.n	80079b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a16      	ldr	r2, [pc, #88]	; (8007a14 <TIM_OC2_SetConfig+0xe0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d003      	beq.n	80079c8 <TIM_OC2_SetConfig+0x94>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <TIM_OC2_SetConfig+0xe4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d113      	bne.n	80079f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40013400 	.word	0x40013400

08007a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 0303 	bic.w	r3, r3, #3
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a21      	ldr	r2, [pc, #132]	; (8007afc <TIM_OC3_SetConfig+0xe0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d003      	beq.n	8007a82 <TIM_OC3_SetConfig+0x66>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a20      	ldr	r2, [pc, #128]	; (8007b00 <TIM_OC3_SetConfig+0xe4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d10d      	bne.n	8007a9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a16      	ldr	r2, [pc, #88]	; (8007afc <TIM_OC3_SetConfig+0xe0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d003      	beq.n	8007aae <TIM_OC3_SetConfig+0x92>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <TIM_OC3_SetConfig+0xe4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d113      	bne.n	8007ad6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	621a      	str	r2, [r3, #32]
}
 8007af0:	bf00      	nop
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40013400 	.word	0x40013400

08007b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	031b      	lsls	r3, r3, #12
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a11      	ldr	r2, [pc, #68]	; (8007ba4 <TIM_OC4_SetConfig+0xa0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <TIM_OC4_SetConfig+0x68>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a10      	ldr	r2, [pc, #64]	; (8007ba8 <TIM_OC4_SetConfig+0xa4>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d109      	bne.n	8007b80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	019b      	lsls	r3, r3, #6
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40013400 	.word	0x40013400

08007bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 030a 	bic.w	r3, r3, #10
 8007be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	621a      	str	r2, [r3, #32]
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr

08007c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f023 0210 	bic.w	r2, r3, #16
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	031b      	lsls	r3, r3, #12
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr

08007c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f043 0307 	orr.w	r3, r3, #7
 8007c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	609a      	str	r2, [r3, #8]
}
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr

08007c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b087      	sub	sp, #28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	021a      	lsls	r2, r3, #8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	609a      	str	r2, [r3, #8]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr

08007cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	2201      	movs	r2, #1
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1a      	ldr	r2, [r3, #32]
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	401a      	ands	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a1a      	ldr	r2, [r3, #32]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d10:	431a      	orrs	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	bf00      	nop
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr

08007d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e050      	b.n	8007dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1b      	ldr	r2, [pc, #108]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d018      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a19      	ldr	r2, [pc, #100]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d013      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8e:	d00e      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a15      	ldr	r2, [pc, #84]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d009      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a14      	ldr	r2, [pc, #80]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a12      	ldr	r2, [pc, #72]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d10c      	bne.n	8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40013400 	.word	0x40013400
 8007dec:	40000400 	.word	0x40000400
 8007df0:	40000800 	.word	0x40000800
 8007df4:	40000c00 	.word	0x40000c00

08007df8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e03d      	b.n	8007e90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bc80      	pop	{r7}
 8007e98:	4770      	bx	lr

08007e9a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr

08007eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bc80      	pop	{r7}
 8007ebc:	4770      	bx	lr

08007ebe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e042      	b.n	8007f56 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fb ffa9 	bl	8003e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2224      	movs	r2, #36	; 0x24
 8007eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f972 	bl	80081ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b08a      	sub	sp, #40	; 0x28
 8007f62:	af02      	add	r7, sp, #8
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d175      	bne.n	800806a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <HAL_UART_Transmit+0x2c>
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e06e      	b.n	800806c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2221      	movs	r2, #33	; 0x21
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f9c:	f7fc f8fe 	bl	800419c <HAL_GetTick>
 8007fa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	88fa      	ldrh	r2, [r7, #6]
 8007fa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb6:	d108      	bne.n	8007fca <HAL_UART_Transmit+0x6c>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d104      	bne.n	8007fca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	e003      	b.n	8007fd2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fd2:	e02e      	b.n	8008032 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2180      	movs	r1, #128	; 0x80
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f848 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e03a      	b.n	800806c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800800a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	3302      	adds	r3, #2
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	e007      	b.n	8008024 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3301      	adds	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1cb      	bne.n	8007fd4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2200      	movs	r2, #0
 8008044:	2140      	movs	r1, #64	; 0x40
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 f814 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e006      	b.n	800806c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2220      	movs	r2, #32
 8008062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	e000      	b.n	800806c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800806a:	2302      	movs	r3, #2
  }
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e03b      	b.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d037      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808e:	f7fc f885 	bl	800419c <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e03a      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d023      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d020      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d01d      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d116      	bne.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f81d 	bl	8008126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2208      	movs	r2, #8
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e00f      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4013      	ands	r3, r2
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	bf0c      	ite	eq
 800810e:	2301      	moveq	r3, #1
 8008110:	2300      	movne	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	429a      	cmp	r2, r3
 800811a:	d0b4      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008126:	b480      	push	{r7}
 8008128:	b095      	sub	sp, #84	; 0x54
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	330c      	adds	r3, #12
 800814c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800814e:	643a      	str	r2, [r7, #64]	; 0x40
 8008150:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e5      	bne.n	800812e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3314      	adds	r3, #20
 8008168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	61fb      	str	r3, [r7, #28]
   return(result);
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	64bb      	str	r3, [r7, #72]	; 0x48
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e5      	bne.n	8008162 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	2b01      	cmp	r3, #1
 800819c:	d119      	bne.n	80081d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	330c      	adds	r3, #12
 80081a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f023 0310 	bic.w	r3, r3, #16
 80081b4:	647b      	str	r3, [r7, #68]	; 0x44
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081be:	61ba      	str	r2, [r7, #24]
 80081c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6979      	ldr	r1, [r7, #20]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	613b      	str	r3, [r7, #16]
   return(result);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e5      	bne.n	800819e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081e0:	bf00      	nop
 80081e2:	3754      	adds	r7, #84	; 0x54
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr
	...

080081ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	4313      	orrs	r3, r2
 800821a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008226:	f023 030c 	bic.w	r3, r3, #12
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	430b      	orrs	r3, r1
 8008232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a2c      	ldr	r2, [pc, #176]	; (8008300 <UART_SetConfig+0x114>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d103      	bne.n	800825c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008254:	f7fe fb68 	bl	8006928 <HAL_RCC_GetPCLK2Freq>
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	e002      	b.n	8008262 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800825c:	f7fe fb50 	bl	8006900 <HAL_RCC_GetPCLK1Freq>
 8008260:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009a      	lsls	r2, r3, #2
 800826c:	441a      	add	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	fbb2 f3f3 	udiv	r3, r2, r3
 8008278:	4a22      	ldr	r2, [pc, #136]	; (8008304 <UART_SetConfig+0x118>)
 800827a:	fba2 2303 	umull	r2, r3, r2, r3
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	0119      	lsls	r1, r3, #4
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009a      	lsls	r2, r3, #2
 800828c:	441a      	add	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	fbb2 f2f3 	udiv	r2, r2, r3
 8008298:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <UART_SetConfig+0x118>)
 800829a:	fba3 0302 	umull	r0, r3, r3, r2
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	2064      	movs	r0, #100	; 0x64
 80082a2:	fb00 f303 	mul.w	r3, r0, r3
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	011b      	lsls	r3, r3, #4
 80082aa:	3332      	adds	r3, #50	; 0x32
 80082ac:	4a15      	ldr	r2, [pc, #84]	; (8008304 <UART_SetConfig+0x118>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	095b      	lsrs	r3, r3, #5
 80082b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082b8:	4419      	add	r1, r3
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009a      	lsls	r2, r3, #2
 80082c4:	441a      	add	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80082d0:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <UART_SetConfig+0x118>)
 80082d2:	fba3 0302 	umull	r0, r3, r3, r2
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2064      	movs	r0, #100	; 0x64
 80082da:	fb00 f303 	mul.w	r3, r0, r3
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	3332      	adds	r3, #50	; 0x32
 80082e4:	4a07      	ldr	r2, [pc, #28]	; (8008304 <UART_SetConfig+0x118>)
 80082e6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	f003 020f 	and.w	r2, r3, #15
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	440a      	add	r2, r1
 80082f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40013800 	.word	0x40013800
 8008304:	51eb851f 	.word	0x51eb851f

08008308 <__cvt>:
 8008308:	2b00      	cmp	r3, #0
 800830a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830e:	461f      	mov	r7, r3
 8008310:	bfbb      	ittet	lt
 8008312:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008316:	461f      	movlt	r7, r3
 8008318:	2300      	movge	r3, #0
 800831a:	232d      	movlt	r3, #45	; 0x2d
 800831c:	b088      	sub	sp, #32
 800831e:	4614      	mov	r4, r2
 8008320:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008322:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008324:	7013      	strb	r3, [r2, #0]
 8008326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008328:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800832c:	f023 0820 	bic.w	r8, r3, #32
 8008330:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008334:	d005      	beq.n	8008342 <__cvt+0x3a>
 8008336:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800833a:	d100      	bne.n	800833e <__cvt+0x36>
 800833c:	3501      	adds	r5, #1
 800833e:	2302      	movs	r3, #2
 8008340:	e000      	b.n	8008344 <__cvt+0x3c>
 8008342:	2303      	movs	r3, #3
 8008344:	aa07      	add	r2, sp, #28
 8008346:	9204      	str	r2, [sp, #16]
 8008348:	aa06      	add	r2, sp, #24
 800834a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800834e:	e9cd 3500 	strd	r3, r5, [sp]
 8008352:	4622      	mov	r2, r4
 8008354:	463b      	mov	r3, r7
 8008356:	f001 f97b 	bl	8009650 <_dtoa_r>
 800835a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800835e:	4606      	mov	r6, r0
 8008360:	d102      	bne.n	8008368 <__cvt+0x60>
 8008362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008364:	07db      	lsls	r3, r3, #31
 8008366:	d522      	bpl.n	80083ae <__cvt+0xa6>
 8008368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800836c:	eb06 0905 	add.w	r9, r6, r5
 8008370:	d110      	bne.n	8008394 <__cvt+0x8c>
 8008372:	7833      	ldrb	r3, [r6, #0]
 8008374:	2b30      	cmp	r3, #48	; 0x30
 8008376:	d10a      	bne.n	800838e <__cvt+0x86>
 8008378:	2200      	movs	r2, #0
 800837a:	2300      	movs	r3, #0
 800837c:	4620      	mov	r0, r4
 800837e:	4639      	mov	r1, r7
 8008380:	f7f8 fb7e 	bl	8000a80 <__aeabi_dcmpeq>
 8008384:	b918      	cbnz	r0, 800838e <__cvt+0x86>
 8008386:	f1c5 0501 	rsb	r5, r5, #1
 800838a:	f8ca 5000 	str.w	r5, [sl]
 800838e:	f8da 3000 	ldr.w	r3, [sl]
 8008392:	4499      	add	r9, r3
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	4620      	mov	r0, r4
 800839a:	4639      	mov	r1, r7
 800839c:	f7f8 fb70 	bl	8000a80 <__aeabi_dcmpeq>
 80083a0:	b108      	cbz	r0, 80083a6 <__cvt+0x9e>
 80083a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80083a6:	2230      	movs	r2, #48	; 0x30
 80083a8:	9b07      	ldr	r3, [sp, #28]
 80083aa:	454b      	cmp	r3, r9
 80083ac:	d307      	bcc.n	80083be <__cvt+0xb6>
 80083ae:	4630      	mov	r0, r6
 80083b0:	9b07      	ldr	r3, [sp, #28]
 80083b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083b4:	1b9b      	subs	r3, r3, r6
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	b008      	add	sp, #32
 80083ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083be:	1c59      	adds	r1, r3, #1
 80083c0:	9107      	str	r1, [sp, #28]
 80083c2:	701a      	strb	r2, [r3, #0]
 80083c4:	e7f0      	b.n	80083a8 <__cvt+0xa0>

080083c6 <__exponent>:
 80083c6:	4603      	mov	r3, r0
 80083c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ca:	2900      	cmp	r1, #0
 80083cc:	f803 2b02 	strb.w	r2, [r3], #2
 80083d0:	bfb6      	itet	lt
 80083d2:	222d      	movlt	r2, #45	; 0x2d
 80083d4:	222b      	movge	r2, #43	; 0x2b
 80083d6:	4249      	neglt	r1, r1
 80083d8:	2909      	cmp	r1, #9
 80083da:	7042      	strb	r2, [r0, #1]
 80083dc:	dd2a      	ble.n	8008434 <__exponent+0x6e>
 80083de:	f10d 0207 	add.w	r2, sp, #7
 80083e2:	4617      	mov	r7, r2
 80083e4:	260a      	movs	r6, #10
 80083e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80083ea:	4694      	mov	ip, r2
 80083ec:	fb06 1415 	mls	r4, r6, r5, r1
 80083f0:	3430      	adds	r4, #48	; 0x30
 80083f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80083f6:	460c      	mov	r4, r1
 80083f8:	2c63      	cmp	r4, #99	; 0x63
 80083fa:	4629      	mov	r1, r5
 80083fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8008400:	dcf1      	bgt.n	80083e6 <__exponent+0x20>
 8008402:	3130      	adds	r1, #48	; 0x30
 8008404:	f1ac 0402 	sub.w	r4, ip, #2
 8008408:	f802 1c01 	strb.w	r1, [r2, #-1]
 800840c:	4622      	mov	r2, r4
 800840e:	1c41      	adds	r1, r0, #1
 8008410:	42ba      	cmp	r2, r7
 8008412:	d30a      	bcc.n	800842a <__exponent+0x64>
 8008414:	f10d 0209 	add.w	r2, sp, #9
 8008418:	eba2 020c 	sub.w	r2, r2, ip
 800841c:	42bc      	cmp	r4, r7
 800841e:	bf88      	it	hi
 8008420:	2200      	movhi	r2, #0
 8008422:	4413      	add	r3, r2
 8008424:	1a18      	subs	r0, r3, r0
 8008426:	b003      	add	sp, #12
 8008428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800842a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800842e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008432:	e7ed      	b.n	8008410 <__exponent+0x4a>
 8008434:	2330      	movs	r3, #48	; 0x30
 8008436:	3130      	adds	r1, #48	; 0x30
 8008438:	7083      	strb	r3, [r0, #2]
 800843a:	70c1      	strb	r1, [r0, #3]
 800843c:	1d03      	adds	r3, r0, #4
 800843e:	e7f1      	b.n	8008424 <__exponent+0x5e>

08008440 <_printf_float>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	b091      	sub	sp, #68	; 0x44
 8008446:	460c      	mov	r4, r1
 8008448:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800844c:	4616      	mov	r6, r2
 800844e:	461f      	mov	r7, r3
 8008450:	4605      	mov	r5, r0
 8008452:	f000 ffeb 	bl	800942c <_localeconv_r>
 8008456:	6803      	ldr	r3, [r0, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	9309      	str	r3, [sp, #36]	; 0x24
 800845c:	f7f7 fee4 	bl	8000228 <strlen>
 8008460:	2300      	movs	r3, #0
 8008462:	930e      	str	r3, [sp, #56]	; 0x38
 8008464:	f8d8 3000 	ldr.w	r3, [r8]
 8008468:	900a      	str	r0, [sp, #40]	; 0x28
 800846a:	3307      	adds	r3, #7
 800846c:	f023 0307 	bic.w	r3, r3, #7
 8008470:	f103 0208 	add.w	r2, r3, #8
 8008474:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008478:	f8d4 b000 	ldr.w	fp, [r4]
 800847c:	f8c8 2000 	str.w	r2, [r8]
 8008480:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008484:	4652      	mov	r2, sl
 8008486:	4643      	mov	r3, r8
 8008488:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800848c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008490:	930b      	str	r3, [sp, #44]	; 0x2c
 8008492:	f04f 32ff 	mov.w	r2, #4294967295
 8008496:	4650      	mov	r0, sl
 8008498:	4b9c      	ldr	r3, [pc, #624]	; (800870c <_printf_float+0x2cc>)
 800849a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800849c:	f7f8 fb22 	bl	8000ae4 <__aeabi_dcmpun>
 80084a0:	bb70      	cbnz	r0, 8008500 <_printf_float+0xc0>
 80084a2:	f04f 32ff 	mov.w	r2, #4294967295
 80084a6:	4650      	mov	r0, sl
 80084a8:	4b98      	ldr	r3, [pc, #608]	; (800870c <_printf_float+0x2cc>)
 80084aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084ac:	f7f8 fafc 	bl	8000aa8 <__aeabi_dcmple>
 80084b0:	bb30      	cbnz	r0, 8008500 <_printf_float+0xc0>
 80084b2:	2200      	movs	r2, #0
 80084b4:	2300      	movs	r3, #0
 80084b6:	4650      	mov	r0, sl
 80084b8:	4641      	mov	r1, r8
 80084ba:	f7f8 faeb 	bl	8000a94 <__aeabi_dcmplt>
 80084be:	b110      	cbz	r0, 80084c6 <_printf_float+0x86>
 80084c0:	232d      	movs	r3, #45	; 0x2d
 80084c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c6:	4a92      	ldr	r2, [pc, #584]	; (8008710 <_printf_float+0x2d0>)
 80084c8:	4b92      	ldr	r3, [pc, #584]	; (8008714 <_printf_float+0x2d4>)
 80084ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80084ce:	bf94      	ite	ls
 80084d0:	4690      	movls	r8, r2
 80084d2:	4698      	movhi	r8, r3
 80084d4:	2303      	movs	r3, #3
 80084d6:	f04f 0a00 	mov.w	sl, #0
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	f02b 0304 	bic.w	r3, fp, #4
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	4633      	mov	r3, r6
 80084e4:	4621      	mov	r1, r4
 80084e6:	4628      	mov	r0, r5
 80084e8:	9700      	str	r7, [sp, #0]
 80084ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80084ec:	f000 f9d6 	bl	800889c <_printf_common>
 80084f0:	3001      	adds	r0, #1
 80084f2:	f040 8090 	bne.w	8008616 <_printf_float+0x1d6>
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	b011      	add	sp, #68	; 0x44
 80084fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008500:	4652      	mov	r2, sl
 8008502:	4643      	mov	r3, r8
 8008504:	4650      	mov	r0, sl
 8008506:	4641      	mov	r1, r8
 8008508:	f7f8 faec 	bl	8000ae4 <__aeabi_dcmpun>
 800850c:	b148      	cbz	r0, 8008522 <_printf_float+0xe2>
 800850e:	f1b8 0f00 	cmp.w	r8, #0
 8008512:	bfb8      	it	lt
 8008514:	232d      	movlt	r3, #45	; 0x2d
 8008516:	4a80      	ldr	r2, [pc, #512]	; (8008718 <_printf_float+0x2d8>)
 8008518:	bfb8      	it	lt
 800851a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800851e:	4b7f      	ldr	r3, [pc, #508]	; (800871c <_printf_float+0x2dc>)
 8008520:	e7d3      	b.n	80084ca <_printf_float+0x8a>
 8008522:	6863      	ldr	r3, [r4, #4]
 8008524:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	d142      	bne.n	80085b2 <_printf_float+0x172>
 800852c:	2306      	movs	r3, #6
 800852e:	6063      	str	r3, [r4, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	9206      	str	r2, [sp, #24]
 8008534:	aa0e      	add	r2, sp, #56	; 0x38
 8008536:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800853a:	aa0d      	add	r2, sp, #52	; 0x34
 800853c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008540:	9203      	str	r2, [sp, #12]
 8008542:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008546:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	6863      	ldr	r3, [r4, #4]
 800854e:	4652      	mov	r2, sl
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	4628      	mov	r0, r5
 8008554:	4643      	mov	r3, r8
 8008556:	910b      	str	r1, [sp, #44]	; 0x2c
 8008558:	f7ff fed6 	bl	8008308 <__cvt>
 800855c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800855e:	4680      	mov	r8, r0
 8008560:	2947      	cmp	r1, #71	; 0x47
 8008562:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008564:	d108      	bne.n	8008578 <_printf_float+0x138>
 8008566:	1cc8      	adds	r0, r1, #3
 8008568:	db02      	blt.n	8008570 <_printf_float+0x130>
 800856a:	6863      	ldr	r3, [r4, #4]
 800856c:	4299      	cmp	r1, r3
 800856e:	dd40      	ble.n	80085f2 <_printf_float+0x1b2>
 8008570:	f1a9 0902 	sub.w	r9, r9, #2
 8008574:	fa5f f989 	uxtb.w	r9, r9
 8008578:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800857c:	d81f      	bhi.n	80085be <_printf_float+0x17e>
 800857e:	464a      	mov	r2, r9
 8008580:	3901      	subs	r1, #1
 8008582:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008586:	910d      	str	r1, [sp, #52]	; 0x34
 8008588:	f7ff ff1d 	bl	80083c6 <__exponent>
 800858c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800858e:	4682      	mov	sl, r0
 8008590:	1813      	adds	r3, r2, r0
 8008592:	2a01      	cmp	r2, #1
 8008594:	6123      	str	r3, [r4, #16]
 8008596:	dc02      	bgt.n	800859e <_printf_float+0x15e>
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	07d2      	lsls	r2, r2, #31
 800859c:	d501      	bpl.n	80085a2 <_printf_float+0x162>
 800859e:	3301      	adds	r3, #1
 80085a0:	6123      	str	r3, [r4, #16]
 80085a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d09b      	beq.n	80084e2 <_printf_float+0xa2>
 80085aa:	232d      	movs	r3, #45	; 0x2d
 80085ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085b0:	e797      	b.n	80084e2 <_printf_float+0xa2>
 80085b2:	2947      	cmp	r1, #71	; 0x47
 80085b4:	d1bc      	bne.n	8008530 <_printf_float+0xf0>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1ba      	bne.n	8008530 <_printf_float+0xf0>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e7b7      	b.n	800852e <_printf_float+0xee>
 80085be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80085c2:	d118      	bne.n	80085f6 <_printf_float+0x1b6>
 80085c4:	2900      	cmp	r1, #0
 80085c6:	6863      	ldr	r3, [r4, #4]
 80085c8:	dd0b      	ble.n	80085e2 <_printf_float+0x1a2>
 80085ca:	6121      	str	r1, [r4, #16]
 80085cc:	b913      	cbnz	r3, 80085d4 <_printf_float+0x194>
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	07d0      	lsls	r0, r2, #31
 80085d2:	d502      	bpl.n	80085da <_printf_float+0x19a>
 80085d4:	3301      	adds	r3, #1
 80085d6:	440b      	add	r3, r1
 80085d8:	6123      	str	r3, [r4, #16]
 80085da:	f04f 0a00 	mov.w	sl, #0
 80085de:	65a1      	str	r1, [r4, #88]	; 0x58
 80085e0:	e7df      	b.n	80085a2 <_printf_float+0x162>
 80085e2:	b913      	cbnz	r3, 80085ea <_printf_float+0x1aa>
 80085e4:	6822      	ldr	r2, [r4, #0]
 80085e6:	07d2      	lsls	r2, r2, #31
 80085e8:	d501      	bpl.n	80085ee <_printf_float+0x1ae>
 80085ea:	3302      	adds	r3, #2
 80085ec:	e7f4      	b.n	80085d8 <_printf_float+0x198>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e7f2      	b.n	80085d8 <_printf_float+0x198>
 80085f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80085f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f8:	4299      	cmp	r1, r3
 80085fa:	db05      	blt.n	8008608 <_printf_float+0x1c8>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	6121      	str	r1, [r4, #16]
 8008600:	07d8      	lsls	r0, r3, #31
 8008602:	d5ea      	bpl.n	80085da <_printf_float+0x19a>
 8008604:	1c4b      	adds	r3, r1, #1
 8008606:	e7e7      	b.n	80085d8 <_printf_float+0x198>
 8008608:	2900      	cmp	r1, #0
 800860a:	bfcc      	ite	gt
 800860c:	2201      	movgt	r2, #1
 800860e:	f1c1 0202 	rsble	r2, r1, #2
 8008612:	4413      	add	r3, r2
 8008614:	e7e0      	b.n	80085d8 <_printf_float+0x198>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	055a      	lsls	r2, r3, #21
 800861a:	d407      	bmi.n	800862c <_printf_float+0x1ec>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	4642      	mov	r2, r8
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	d12b      	bne.n	8008682 <_printf_float+0x242>
 800862a:	e764      	b.n	80084f6 <_printf_float+0xb6>
 800862c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008630:	f240 80dd 	bls.w	80087ee <_printf_float+0x3ae>
 8008634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008638:	2200      	movs	r2, #0
 800863a:	2300      	movs	r3, #0
 800863c:	f7f8 fa20 	bl	8000a80 <__aeabi_dcmpeq>
 8008640:	2800      	cmp	r0, #0
 8008642:	d033      	beq.n	80086ac <_printf_float+0x26c>
 8008644:	2301      	movs	r3, #1
 8008646:	4631      	mov	r1, r6
 8008648:	4628      	mov	r0, r5
 800864a:	4a35      	ldr	r2, [pc, #212]	; (8008720 <_printf_float+0x2e0>)
 800864c:	47b8      	blx	r7
 800864e:	3001      	adds	r0, #1
 8008650:	f43f af51 	beq.w	80084f6 <_printf_float+0xb6>
 8008654:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008658:	429a      	cmp	r2, r3
 800865a:	db02      	blt.n	8008662 <_printf_float+0x222>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	07d8      	lsls	r0, r3, #31
 8008660:	d50f      	bpl.n	8008682 <_printf_float+0x242>
 8008662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008666:	4631      	mov	r1, r6
 8008668:	4628      	mov	r0, r5
 800866a:	47b8      	blx	r7
 800866c:	3001      	adds	r0, #1
 800866e:	f43f af42 	beq.w	80084f6 <_printf_float+0xb6>
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	f104 091a 	add.w	r9, r4, #26
 800867a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800867c:	3b01      	subs	r3, #1
 800867e:	4543      	cmp	r3, r8
 8008680:	dc09      	bgt.n	8008696 <_printf_float+0x256>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	079b      	lsls	r3, r3, #30
 8008686:	f100 8104 	bmi.w	8008892 <_printf_float+0x452>
 800868a:	68e0      	ldr	r0, [r4, #12]
 800868c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800868e:	4298      	cmp	r0, r3
 8008690:	bfb8      	it	lt
 8008692:	4618      	movlt	r0, r3
 8008694:	e731      	b.n	80084fa <_printf_float+0xba>
 8008696:	2301      	movs	r3, #1
 8008698:	464a      	mov	r2, r9
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	f43f af28 	beq.w	80084f6 <_printf_float+0xb6>
 80086a6:	f108 0801 	add.w	r8, r8, #1
 80086aa:	e7e6      	b.n	800867a <_printf_float+0x23a>
 80086ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dc38      	bgt.n	8008724 <_printf_float+0x2e4>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4631      	mov	r1, r6
 80086b6:	4628      	mov	r0, r5
 80086b8:	4a19      	ldr	r2, [pc, #100]	; (8008720 <_printf_float+0x2e0>)
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f af1a 	beq.w	80084f6 <_printf_float+0xb6>
 80086c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d102      	bne.n	80086d0 <_printf_float+0x290>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	07d9      	lsls	r1, r3, #31
 80086ce:	d5d8      	bpl.n	8008682 <_printf_float+0x242>
 80086d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	f43f af0b 	beq.w	80084f6 <_printf_float+0xb6>
 80086e0:	f04f 0900 	mov.w	r9, #0
 80086e4:	f104 0a1a 	add.w	sl, r4, #26
 80086e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ea:	425b      	negs	r3, r3
 80086ec:	454b      	cmp	r3, r9
 80086ee:	dc01      	bgt.n	80086f4 <_printf_float+0x2b4>
 80086f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f2:	e794      	b.n	800861e <_printf_float+0x1de>
 80086f4:	2301      	movs	r3, #1
 80086f6:	4652      	mov	r2, sl
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	f43f aef9 	beq.w	80084f6 <_printf_float+0xb6>
 8008704:	f109 0901 	add.w	r9, r9, #1
 8008708:	e7ee      	b.n	80086e8 <_printf_float+0x2a8>
 800870a:	bf00      	nop
 800870c:	7fefffff 	.word	0x7fefffff
 8008710:	0800cc86 	.word	0x0800cc86
 8008714:	0800cc8a 	.word	0x0800cc8a
 8008718:	0800cc8e 	.word	0x0800cc8e
 800871c:	0800cc92 	.word	0x0800cc92
 8008720:	0800cc96 	.word	0x0800cc96
 8008724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008728:	429a      	cmp	r2, r3
 800872a:	bfa8      	it	ge
 800872c:	461a      	movge	r2, r3
 800872e:	2a00      	cmp	r2, #0
 8008730:	4691      	mov	r9, r2
 8008732:	dc37      	bgt.n	80087a4 <_printf_float+0x364>
 8008734:	f04f 0b00 	mov.w	fp, #0
 8008738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800873c:	f104 021a 	add.w	r2, r4, #26
 8008740:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008744:	ebaa 0309 	sub.w	r3, sl, r9
 8008748:	455b      	cmp	r3, fp
 800874a:	dc33      	bgt.n	80087b4 <_printf_float+0x374>
 800874c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008750:	429a      	cmp	r2, r3
 8008752:	db3b      	blt.n	80087cc <_printf_float+0x38c>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07da      	lsls	r2, r3, #31
 8008758:	d438      	bmi.n	80087cc <_printf_float+0x38c>
 800875a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800875e:	eba2 0903 	sub.w	r9, r2, r3
 8008762:	eba2 020a 	sub.w	r2, r2, sl
 8008766:	4591      	cmp	r9, r2
 8008768:	bfa8      	it	ge
 800876a:	4691      	movge	r9, r2
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	dc34      	bgt.n	80087dc <_printf_float+0x39c>
 8008772:	f04f 0800 	mov.w	r8, #0
 8008776:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800877a:	f104 0a1a 	add.w	sl, r4, #26
 800877e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	eba3 0309 	sub.w	r3, r3, r9
 8008788:	4543      	cmp	r3, r8
 800878a:	f77f af7a 	ble.w	8008682 <_printf_float+0x242>
 800878e:	2301      	movs	r3, #1
 8008790:	4652      	mov	r2, sl
 8008792:	4631      	mov	r1, r6
 8008794:	4628      	mov	r0, r5
 8008796:	47b8      	blx	r7
 8008798:	3001      	adds	r0, #1
 800879a:	f43f aeac 	beq.w	80084f6 <_printf_float+0xb6>
 800879e:	f108 0801 	add.w	r8, r8, #1
 80087a2:	e7ec      	b.n	800877e <_printf_float+0x33e>
 80087a4:	4613      	mov	r3, r2
 80087a6:	4631      	mov	r1, r6
 80087a8:	4642      	mov	r2, r8
 80087aa:	4628      	mov	r0, r5
 80087ac:	47b8      	blx	r7
 80087ae:	3001      	adds	r0, #1
 80087b0:	d1c0      	bne.n	8008734 <_printf_float+0x2f4>
 80087b2:	e6a0      	b.n	80084f6 <_printf_float+0xb6>
 80087b4:	2301      	movs	r3, #1
 80087b6:	4631      	mov	r1, r6
 80087b8:	4628      	mov	r0, r5
 80087ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80087bc:	47b8      	blx	r7
 80087be:	3001      	adds	r0, #1
 80087c0:	f43f ae99 	beq.w	80084f6 <_printf_float+0xb6>
 80087c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087c6:	f10b 0b01 	add.w	fp, fp, #1
 80087ca:	e7b9      	b.n	8008740 <_printf_float+0x300>
 80087cc:	4631      	mov	r1, r6
 80087ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	d1bf      	bne.n	800875a <_printf_float+0x31a>
 80087da:	e68c      	b.n	80084f6 <_printf_float+0xb6>
 80087dc:	464b      	mov	r3, r9
 80087de:	4631      	mov	r1, r6
 80087e0:	4628      	mov	r0, r5
 80087e2:	eb08 020a 	add.w	r2, r8, sl
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	d1c2      	bne.n	8008772 <_printf_float+0x332>
 80087ec:	e683      	b.n	80084f6 <_printf_float+0xb6>
 80087ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087f0:	2a01      	cmp	r2, #1
 80087f2:	dc01      	bgt.n	80087f8 <_printf_float+0x3b8>
 80087f4:	07db      	lsls	r3, r3, #31
 80087f6:	d539      	bpl.n	800886c <_printf_float+0x42c>
 80087f8:	2301      	movs	r3, #1
 80087fa:	4642      	mov	r2, r8
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	f43f ae77 	beq.w	80084f6 <_printf_float+0xb6>
 8008808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800880c:	4631      	mov	r1, r6
 800880e:	4628      	mov	r0, r5
 8008810:	47b8      	blx	r7
 8008812:	3001      	adds	r0, #1
 8008814:	f43f ae6f 	beq.w	80084f6 <_printf_float+0xb6>
 8008818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008824:	f7f8 f92c 	bl	8000a80 <__aeabi_dcmpeq>
 8008828:	b9d8      	cbnz	r0, 8008862 <_printf_float+0x422>
 800882a:	f109 33ff 	add.w	r3, r9, #4294967295
 800882e:	f108 0201 	add.w	r2, r8, #1
 8008832:	4631      	mov	r1, r6
 8008834:	4628      	mov	r0, r5
 8008836:	47b8      	blx	r7
 8008838:	3001      	adds	r0, #1
 800883a:	d10e      	bne.n	800885a <_printf_float+0x41a>
 800883c:	e65b      	b.n	80084f6 <_printf_float+0xb6>
 800883e:	2301      	movs	r3, #1
 8008840:	464a      	mov	r2, r9
 8008842:	4631      	mov	r1, r6
 8008844:	4628      	mov	r0, r5
 8008846:	47b8      	blx	r7
 8008848:	3001      	adds	r0, #1
 800884a:	f43f ae54 	beq.w	80084f6 <_printf_float+0xb6>
 800884e:	f108 0801 	add.w	r8, r8, #1
 8008852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008854:	3b01      	subs	r3, #1
 8008856:	4543      	cmp	r3, r8
 8008858:	dcf1      	bgt.n	800883e <_printf_float+0x3fe>
 800885a:	4653      	mov	r3, sl
 800885c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008860:	e6de      	b.n	8008620 <_printf_float+0x1e0>
 8008862:	f04f 0800 	mov.w	r8, #0
 8008866:	f104 091a 	add.w	r9, r4, #26
 800886a:	e7f2      	b.n	8008852 <_printf_float+0x412>
 800886c:	2301      	movs	r3, #1
 800886e:	4642      	mov	r2, r8
 8008870:	e7df      	b.n	8008832 <_printf_float+0x3f2>
 8008872:	2301      	movs	r3, #1
 8008874:	464a      	mov	r2, r9
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	f43f ae3a 	beq.w	80084f6 <_printf_float+0xb6>
 8008882:	f108 0801 	add.w	r8, r8, #1
 8008886:	68e3      	ldr	r3, [r4, #12]
 8008888:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800888a:	1a5b      	subs	r3, r3, r1
 800888c:	4543      	cmp	r3, r8
 800888e:	dcf0      	bgt.n	8008872 <_printf_float+0x432>
 8008890:	e6fb      	b.n	800868a <_printf_float+0x24a>
 8008892:	f04f 0800 	mov.w	r8, #0
 8008896:	f104 0919 	add.w	r9, r4, #25
 800889a:	e7f4      	b.n	8008886 <_printf_float+0x446>

0800889c <_printf_common>:
 800889c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a0:	4616      	mov	r6, r2
 80088a2:	4699      	mov	r9, r3
 80088a4:	688a      	ldr	r2, [r1, #8]
 80088a6:	690b      	ldr	r3, [r1, #16]
 80088a8:	4607      	mov	r7, r0
 80088aa:	4293      	cmp	r3, r2
 80088ac:	bfb8      	it	lt
 80088ae:	4613      	movlt	r3, r2
 80088b0:	6033      	str	r3, [r6, #0]
 80088b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088b6:	460c      	mov	r4, r1
 80088b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088bc:	b10a      	cbz	r2, 80088c2 <_printf_common+0x26>
 80088be:	3301      	adds	r3, #1
 80088c0:	6033      	str	r3, [r6, #0]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	0699      	lsls	r1, r3, #26
 80088c6:	bf42      	ittt	mi
 80088c8:	6833      	ldrmi	r3, [r6, #0]
 80088ca:	3302      	addmi	r3, #2
 80088cc:	6033      	strmi	r3, [r6, #0]
 80088ce:	6825      	ldr	r5, [r4, #0]
 80088d0:	f015 0506 	ands.w	r5, r5, #6
 80088d4:	d106      	bne.n	80088e4 <_printf_common+0x48>
 80088d6:	f104 0a19 	add.w	sl, r4, #25
 80088da:	68e3      	ldr	r3, [r4, #12]
 80088dc:	6832      	ldr	r2, [r6, #0]
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	42ab      	cmp	r3, r5
 80088e2:	dc2b      	bgt.n	800893c <_printf_common+0xa0>
 80088e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088e8:	1e13      	subs	r3, r2, #0
 80088ea:	6822      	ldr	r2, [r4, #0]
 80088ec:	bf18      	it	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	0692      	lsls	r2, r2, #26
 80088f2:	d430      	bmi.n	8008956 <_printf_common+0xba>
 80088f4:	4649      	mov	r1, r9
 80088f6:	4638      	mov	r0, r7
 80088f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088fc:	47c0      	blx	r8
 80088fe:	3001      	adds	r0, #1
 8008900:	d023      	beq.n	800894a <_printf_common+0xae>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	6922      	ldr	r2, [r4, #16]
 8008906:	f003 0306 	and.w	r3, r3, #6
 800890a:	2b04      	cmp	r3, #4
 800890c:	bf14      	ite	ne
 800890e:	2500      	movne	r5, #0
 8008910:	6833      	ldreq	r3, [r6, #0]
 8008912:	f04f 0600 	mov.w	r6, #0
 8008916:	bf08      	it	eq
 8008918:	68e5      	ldreq	r5, [r4, #12]
 800891a:	f104 041a 	add.w	r4, r4, #26
 800891e:	bf08      	it	eq
 8008920:	1aed      	subeq	r5, r5, r3
 8008922:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008926:	bf08      	it	eq
 8008928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800892c:	4293      	cmp	r3, r2
 800892e:	bfc4      	itt	gt
 8008930:	1a9b      	subgt	r3, r3, r2
 8008932:	18ed      	addgt	r5, r5, r3
 8008934:	42b5      	cmp	r5, r6
 8008936:	d11a      	bne.n	800896e <_printf_common+0xd2>
 8008938:	2000      	movs	r0, #0
 800893a:	e008      	b.n	800894e <_printf_common+0xb2>
 800893c:	2301      	movs	r3, #1
 800893e:	4652      	mov	r2, sl
 8008940:	4649      	mov	r1, r9
 8008942:	4638      	mov	r0, r7
 8008944:	47c0      	blx	r8
 8008946:	3001      	adds	r0, #1
 8008948:	d103      	bne.n	8008952 <_printf_common+0xb6>
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008952:	3501      	adds	r5, #1
 8008954:	e7c1      	b.n	80088da <_printf_common+0x3e>
 8008956:	2030      	movs	r0, #48	; 0x30
 8008958:	18e1      	adds	r1, r4, r3
 800895a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008964:	4422      	add	r2, r4
 8008966:	3302      	adds	r3, #2
 8008968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800896c:	e7c2      	b.n	80088f4 <_printf_common+0x58>
 800896e:	2301      	movs	r3, #1
 8008970:	4622      	mov	r2, r4
 8008972:	4649      	mov	r1, r9
 8008974:	4638      	mov	r0, r7
 8008976:	47c0      	blx	r8
 8008978:	3001      	adds	r0, #1
 800897a:	d0e6      	beq.n	800894a <_printf_common+0xae>
 800897c:	3601      	adds	r6, #1
 800897e:	e7d9      	b.n	8008934 <_printf_common+0x98>

08008980 <_printf_i>:
 8008980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	7e0f      	ldrb	r7, [r1, #24]
 8008986:	4691      	mov	r9, r2
 8008988:	2f78      	cmp	r7, #120	; 0x78
 800898a:	4680      	mov	r8, r0
 800898c:	460c      	mov	r4, r1
 800898e:	469a      	mov	sl, r3
 8008990:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008996:	d807      	bhi.n	80089a8 <_printf_i+0x28>
 8008998:	2f62      	cmp	r7, #98	; 0x62
 800899a:	d80a      	bhi.n	80089b2 <_printf_i+0x32>
 800899c:	2f00      	cmp	r7, #0
 800899e:	f000 80d5 	beq.w	8008b4c <_printf_i+0x1cc>
 80089a2:	2f58      	cmp	r7, #88	; 0x58
 80089a4:	f000 80c1 	beq.w	8008b2a <_printf_i+0x1aa>
 80089a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089b0:	e03a      	b.n	8008a28 <_printf_i+0xa8>
 80089b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089b6:	2b15      	cmp	r3, #21
 80089b8:	d8f6      	bhi.n	80089a8 <_printf_i+0x28>
 80089ba:	a101      	add	r1, pc, #4	; (adr r1, 80089c0 <_printf_i+0x40>)
 80089bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c0:	08008a19 	.word	0x08008a19
 80089c4:	08008a2d 	.word	0x08008a2d
 80089c8:	080089a9 	.word	0x080089a9
 80089cc:	080089a9 	.word	0x080089a9
 80089d0:	080089a9 	.word	0x080089a9
 80089d4:	080089a9 	.word	0x080089a9
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	080089a9 	.word	0x080089a9
 80089e0:	080089a9 	.word	0x080089a9
 80089e4:	080089a9 	.word	0x080089a9
 80089e8:	080089a9 	.word	0x080089a9
 80089ec:	08008b33 	.word	0x08008b33
 80089f0:	08008a59 	.word	0x08008a59
 80089f4:	08008aed 	.word	0x08008aed
 80089f8:	080089a9 	.word	0x080089a9
 80089fc:	080089a9 	.word	0x080089a9
 8008a00:	08008b55 	.word	0x08008b55
 8008a04:	080089a9 	.word	0x080089a9
 8008a08:	08008a59 	.word	0x08008a59
 8008a0c:	080089a9 	.word	0x080089a9
 8008a10:	080089a9 	.word	0x080089a9
 8008a14:	08008af5 	.word	0x08008af5
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	1d1a      	adds	r2, r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	602a      	str	r2, [r5, #0]
 8008a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0a0      	b.n	8008b6e <_printf_i+0x1ee>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	0607      	lsls	r7, r0, #24
 8008a32:	f103 0104 	add.w	r1, r3, #4
 8008a36:	6029      	str	r1, [r5, #0]
 8008a38:	d501      	bpl.n	8008a3e <_printf_i+0xbe>
 8008a3a:	681e      	ldr	r6, [r3, #0]
 8008a3c:	e003      	b.n	8008a46 <_printf_i+0xc6>
 8008a3e:	0646      	lsls	r6, r0, #25
 8008a40:	d5fb      	bpl.n	8008a3a <_printf_i+0xba>
 8008a42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a46:	2e00      	cmp	r6, #0
 8008a48:	da03      	bge.n	8008a52 <_printf_i+0xd2>
 8008a4a:	232d      	movs	r3, #45	; 0x2d
 8008a4c:	4276      	negs	r6, r6
 8008a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a52:	230a      	movs	r3, #10
 8008a54:	4859      	ldr	r0, [pc, #356]	; (8008bbc <_printf_i+0x23c>)
 8008a56:	e012      	b.n	8008a7e <_printf_i+0xfe>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	1d19      	adds	r1, r3, #4
 8008a5e:	6029      	str	r1, [r5, #0]
 8008a60:	0605      	lsls	r5, r0, #24
 8008a62:	d501      	bpl.n	8008a68 <_printf_i+0xe8>
 8008a64:	681e      	ldr	r6, [r3, #0]
 8008a66:	e002      	b.n	8008a6e <_printf_i+0xee>
 8008a68:	0641      	lsls	r1, r0, #25
 8008a6a:	d5fb      	bpl.n	8008a64 <_printf_i+0xe4>
 8008a6c:	881e      	ldrh	r6, [r3, #0]
 8008a6e:	2f6f      	cmp	r7, #111	; 0x6f
 8008a70:	bf0c      	ite	eq
 8008a72:	2308      	moveq	r3, #8
 8008a74:	230a      	movne	r3, #10
 8008a76:	4851      	ldr	r0, [pc, #324]	; (8008bbc <_printf_i+0x23c>)
 8008a78:	2100      	movs	r1, #0
 8008a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a7e:	6865      	ldr	r5, [r4, #4]
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	bfa8      	it	ge
 8008a84:	6821      	ldrge	r1, [r4, #0]
 8008a86:	60a5      	str	r5, [r4, #8]
 8008a88:	bfa4      	itt	ge
 8008a8a:	f021 0104 	bicge.w	r1, r1, #4
 8008a8e:	6021      	strge	r1, [r4, #0]
 8008a90:	b90e      	cbnz	r6, 8008a96 <_printf_i+0x116>
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	d04b      	beq.n	8008b2e <_printf_i+0x1ae>
 8008a96:	4615      	mov	r5, r2
 8008a98:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a9c:	fb03 6711 	mls	r7, r3, r1, r6
 8008aa0:	5dc7      	ldrb	r7, [r0, r7]
 8008aa2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aa6:	4637      	mov	r7, r6
 8008aa8:	42bb      	cmp	r3, r7
 8008aaa:	460e      	mov	r6, r1
 8008aac:	d9f4      	bls.n	8008a98 <_printf_i+0x118>
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	d10b      	bne.n	8008aca <_printf_i+0x14a>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	07de      	lsls	r6, r3, #31
 8008ab6:	d508      	bpl.n	8008aca <_printf_i+0x14a>
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	6861      	ldr	r1, [r4, #4]
 8008abc:	4299      	cmp	r1, r3
 8008abe:	bfde      	ittt	le
 8008ac0:	2330      	movle	r3, #48	; 0x30
 8008ac2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ac6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008aca:	1b52      	subs	r2, r2, r5
 8008acc:	6122      	str	r2, [r4, #16]
 8008ace:	464b      	mov	r3, r9
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f8cd a000 	str.w	sl, [sp]
 8008ad8:	aa03      	add	r2, sp, #12
 8008ada:	f7ff fedf 	bl	800889c <_printf_common>
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d14a      	bne.n	8008b78 <_printf_i+0x1f8>
 8008ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae6:	b004      	add	sp, #16
 8008ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	f043 0320 	orr.w	r3, r3, #32
 8008af2:	6023      	str	r3, [r4, #0]
 8008af4:	2778      	movs	r7, #120	; 0x78
 8008af6:	4832      	ldr	r0, [pc, #200]	; (8008bc0 <_printf_i+0x240>)
 8008af8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	6829      	ldr	r1, [r5, #0]
 8008b00:	061f      	lsls	r7, r3, #24
 8008b02:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b06:	d402      	bmi.n	8008b0e <_printf_i+0x18e>
 8008b08:	065f      	lsls	r7, r3, #25
 8008b0a:	bf48      	it	mi
 8008b0c:	b2b6      	uxthmi	r6, r6
 8008b0e:	07df      	lsls	r7, r3, #31
 8008b10:	bf48      	it	mi
 8008b12:	f043 0320 	orrmi.w	r3, r3, #32
 8008b16:	6029      	str	r1, [r5, #0]
 8008b18:	bf48      	it	mi
 8008b1a:	6023      	strmi	r3, [r4, #0]
 8008b1c:	b91e      	cbnz	r6, 8008b26 <_printf_i+0x1a6>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	f023 0320 	bic.w	r3, r3, #32
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	2310      	movs	r3, #16
 8008b28:	e7a6      	b.n	8008a78 <_printf_i+0xf8>
 8008b2a:	4824      	ldr	r0, [pc, #144]	; (8008bbc <_printf_i+0x23c>)
 8008b2c:	e7e4      	b.n	8008af8 <_printf_i+0x178>
 8008b2e:	4615      	mov	r5, r2
 8008b30:	e7bd      	b.n	8008aae <_printf_i+0x12e>
 8008b32:	682b      	ldr	r3, [r5, #0]
 8008b34:	6826      	ldr	r6, [r4, #0]
 8008b36:	1d18      	adds	r0, r3, #4
 8008b38:	6961      	ldr	r1, [r4, #20]
 8008b3a:	6028      	str	r0, [r5, #0]
 8008b3c:	0635      	lsls	r5, r6, #24
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	d501      	bpl.n	8008b46 <_printf_i+0x1c6>
 8008b42:	6019      	str	r1, [r3, #0]
 8008b44:	e002      	b.n	8008b4c <_printf_i+0x1cc>
 8008b46:	0670      	lsls	r0, r6, #25
 8008b48:	d5fb      	bpl.n	8008b42 <_printf_i+0x1c2>
 8008b4a:	8019      	strh	r1, [r3, #0]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4615      	mov	r5, r2
 8008b50:	6123      	str	r3, [r4, #16]
 8008b52:	e7bc      	b.n	8008ace <_printf_i+0x14e>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	2100      	movs	r1, #0
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	602a      	str	r2, [r5, #0]
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	6862      	ldr	r2, [r4, #4]
 8008b60:	4628      	mov	r0, r5
 8008b62:	f000 fcd9 	bl	8009518 <memchr>
 8008b66:	b108      	cbz	r0, 8008b6c <_printf_i+0x1ec>
 8008b68:	1b40      	subs	r0, r0, r5
 8008b6a:	6060      	str	r0, [r4, #4]
 8008b6c:	6863      	ldr	r3, [r4, #4]
 8008b6e:	6123      	str	r3, [r4, #16]
 8008b70:	2300      	movs	r3, #0
 8008b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b76:	e7aa      	b.n	8008ace <_printf_i+0x14e>
 8008b78:	462a      	mov	r2, r5
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	47d0      	blx	sl
 8008b82:	3001      	adds	r0, #1
 8008b84:	d0ad      	beq.n	8008ae2 <_printf_i+0x162>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	079b      	lsls	r3, r3, #30
 8008b8a:	d413      	bmi.n	8008bb4 <_printf_i+0x234>
 8008b8c:	68e0      	ldr	r0, [r4, #12]
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	4298      	cmp	r0, r3
 8008b92:	bfb8      	it	lt
 8008b94:	4618      	movlt	r0, r3
 8008b96:	e7a6      	b.n	8008ae6 <_printf_i+0x166>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	47d0      	blx	sl
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d09d      	beq.n	8008ae2 <_printf_i+0x162>
 8008ba6:	3501      	adds	r5, #1
 8008ba8:	68e3      	ldr	r3, [r4, #12]
 8008baa:	9903      	ldr	r1, [sp, #12]
 8008bac:	1a5b      	subs	r3, r3, r1
 8008bae:	42ab      	cmp	r3, r5
 8008bb0:	dcf2      	bgt.n	8008b98 <_printf_i+0x218>
 8008bb2:	e7eb      	b.n	8008b8c <_printf_i+0x20c>
 8008bb4:	2500      	movs	r5, #0
 8008bb6:	f104 0619 	add.w	r6, r4, #25
 8008bba:	e7f5      	b.n	8008ba8 <_printf_i+0x228>
 8008bbc:	0800cc98 	.word	0x0800cc98
 8008bc0:	0800cca9 	.word	0x0800cca9

08008bc4 <_scanf_float>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	b087      	sub	sp, #28
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	688b      	ldr	r3, [r1, #8]
 8008bce:	4617      	mov	r7, r2
 8008bd0:	1e5a      	subs	r2, r3, #1
 8008bd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008bd6:	bf85      	ittet	hi
 8008bd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008bdc:	195b      	addhi	r3, r3, r5
 8008bde:	2300      	movls	r3, #0
 8008be0:	9302      	strhi	r3, [sp, #8]
 8008be2:	bf88      	it	hi
 8008be4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008be8:	468b      	mov	fp, r1
 8008bea:	f04f 0500 	mov.w	r5, #0
 8008bee:	bf8c      	ite	hi
 8008bf0:	608b      	strhi	r3, [r1, #8]
 8008bf2:	9302      	strls	r3, [sp, #8]
 8008bf4:	680b      	ldr	r3, [r1, #0]
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008bfc:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c00:	460c      	mov	r4, r1
 8008c02:	465e      	mov	r6, fp
 8008c04:	46aa      	mov	sl, r5
 8008c06:	46a9      	mov	r9, r5
 8008c08:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c0c:	9501      	str	r5, [sp, #4]
 8008c0e:	68a2      	ldr	r2, [r4, #8]
 8008c10:	b152      	cbz	r2, 8008c28 <_scanf_float+0x64>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b4e      	cmp	r3, #78	; 0x4e
 8008c18:	d864      	bhi.n	8008ce4 <_scanf_float+0x120>
 8008c1a:	2b40      	cmp	r3, #64	; 0x40
 8008c1c:	d83c      	bhi.n	8008c98 <_scanf_float+0xd4>
 8008c1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c22:	b2c8      	uxtb	r0, r1
 8008c24:	280e      	cmp	r0, #14
 8008c26:	d93a      	bls.n	8008c9e <_scanf_float+0xda>
 8008c28:	f1b9 0f00 	cmp.w	r9, #0
 8008c2c:	d003      	beq.n	8008c36 <_scanf_float+0x72>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c3a:	f1ba 0f01 	cmp.w	sl, #1
 8008c3e:	f200 8113 	bhi.w	8008e68 <_scanf_float+0x2a4>
 8008c42:	455e      	cmp	r6, fp
 8008c44:	f200 8105 	bhi.w	8008e52 <_scanf_float+0x28e>
 8008c48:	2501      	movs	r5, #1
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	b007      	add	sp, #28
 8008c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c56:	2a0d      	cmp	r2, #13
 8008c58:	d8e6      	bhi.n	8008c28 <_scanf_float+0x64>
 8008c5a:	a101      	add	r1, pc, #4	; (adr r1, 8008c60 <_scanf_float+0x9c>)
 8008c5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c60:	08008d9f 	.word	0x08008d9f
 8008c64:	08008c29 	.word	0x08008c29
 8008c68:	08008c29 	.word	0x08008c29
 8008c6c:	08008c29 	.word	0x08008c29
 8008c70:	08008dff 	.word	0x08008dff
 8008c74:	08008dd7 	.word	0x08008dd7
 8008c78:	08008c29 	.word	0x08008c29
 8008c7c:	08008c29 	.word	0x08008c29
 8008c80:	08008dad 	.word	0x08008dad
 8008c84:	08008c29 	.word	0x08008c29
 8008c88:	08008c29 	.word	0x08008c29
 8008c8c:	08008c29 	.word	0x08008c29
 8008c90:	08008c29 	.word	0x08008c29
 8008c94:	08008d65 	.word	0x08008d65
 8008c98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008c9c:	e7db      	b.n	8008c56 <_scanf_float+0x92>
 8008c9e:	290e      	cmp	r1, #14
 8008ca0:	d8c2      	bhi.n	8008c28 <_scanf_float+0x64>
 8008ca2:	a001      	add	r0, pc, #4	; (adr r0, 8008ca8 <_scanf_float+0xe4>)
 8008ca4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ca8:	08008d57 	.word	0x08008d57
 8008cac:	08008c29 	.word	0x08008c29
 8008cb0:	08008d57 	.word	0x08008d57
 8008cb4:	08008deb 	.word	0x08008deb
 8008cb8:	08008c29 	.word	0x08008c29
 8008cbc:	08008d05 	.word	0x08008d05
 8008cc0:	08008d41 	.word	0x08008d41
 8008cc4:	08008d41 	.word	0x08008d41
 8008cc8:	08008d41 	.word	0x08008d41
 8008ccc:	08008d41 	.word	0x08008d41
 8008cd0:	08008d41 	.word	0x08008d41
 8008cd4:	08008d41 	.word	0x08008d41
 8008cd8:	08008d41 	.word	0x08008d41
 8008cdc:	08008d41 	.word	0x08008d41
 8008ce0:	08008d41 	.word	0x08008d41
 8008ce4:	2b6e      	cmp	r3, #110	; 0x6e
 8008ce6:	d809      	bhi.n	8008cfc <_scanf_float+0x138>
 8008ce8:	2b60      	cmp	r3, #96	; 0x60
 8008cea:	d8b2      	bhi.n	8008c52 <_scanf_float+0x8e>
 8008cec:	2b54      	cmp	r3, #84	; 0x54
 8008cee:	d077      	beq.n	8008de0 <_scanf_float+0x21c>
 8008cf0:	2b59      	cmp	r3, #89	; 0x59
 8008cf2:	d199      	bne.n	8008c28 <_scanf_float+0x64>
 8008cf4:	2d07      	cmp	r5, #7
 8008cf6:	d197      	bne.n	8008c28 <_scanf_float+0x64>
 8008cf8:	2508      	movs	r5, #8
 8008cfa:	e029      	b.n	8008d50 <_scanf_float+0x18c>
 8008cfc:	2b74      	cmp	r3, #116	; 0x74
 8008cfe:	d06f      	beq.n	8008de0 <_scanf_float+0x21c>
 8008d00:	2b79      	cmp	r3, #121	; 0x79
 8008d02:	e7f6      	b.n	8008cf2 <_scanf_float+0x12e>
 8008d04:	6821      	ldr	r1, [r4, #0]
 8008d06:	05c8      	lsls	r0, r1, #23
 8008d08:	d51a      	bpl.n	8008d40 <_scanf_float+0x17c>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d10:	6021      	str	r1, [r4, #0]
 8008d12:	f109 0901 	add.w	r9, r9, #1
 8008d16:	b11b      	cbz	r3, 8008d20 <_scanf_float+0x15c>
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	60a2      	str	r2, [r4, #8]
 8008d20:	68a3      	ldr	r3, [r4, #8]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	60a3      	str	r3, [r4, #8]
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	607b      	str	r3, [r7, #4]
 8008d34:	f340 8084 	ble.w	8008e40 <_scanf_float+0x27c>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	e766      	b.n	8008c0e <_scanf_float+0x4a>
 8008d40:	eb1a 0f05 	cmn.w	sl, r5
 8008d44:	f47f af70 	bne.w	8008c28 <_scanf_float+0x64>
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008d4e:	6022      	str	r2, [r4, #0]
 8008d50:	f806 3b01 	strb.w	r3, [r6], #1
 8008d54:	e7e4      	b.n	8008d20 <_scanf_float+0x15c>
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	0610      	lsls	r0, r2, #24
 8008d5a:	f57f af65 	bpl.w	8008c28 <_scanf_float+0x64>
 8008d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d62:	e7f4      	b.n	8008d4e <_scanf_float+0x18a>
 8008d64:	f1ba 0f00 	cmp.w	sl, #0
 8008d68:	d10e      	bne.n	8008d88 <_scanf_float+0x1c4>
 8008d6a:	f1b9 0f00 	cmp.w	r9, #0
 8008d6e:	d10e      	bne.n	8008d8e <_scanf_float+0x1ca>
 8008d70:	6822      	ldr	r2, [r4, #0]
 8008d72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d7a:	d108      	bne.n	8008d8e <_scanf_float+0x1ca>
 8008d7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d80:	f04f 0a01 	mov.w	sl, #1
 8008d84:	6022      	str	r2, [r4, #0]
 8008d86:	e7e3      	b.n	8008d50 <_scanf_float+0x18c>
 8008d88:	f1ba 0f02 	cmp.w	sl, #2
 8008d8c:	d055      	beq.n	8008e3a <_scanf_float+0x276>
 8008d8e:	2d01      	cmp	r5, #1
 8008d90:	d002      	beq.n	8008d98 <_scanf_float+0x1d4>
 8008d92:	2d04      	cmp	r5, #4
 8008d94:	f47f af48 	bne.w	8008c28 <_scanf_float+0x64>
 8008d98:	3501      	adds	r5, #1
 8008d9a:	b2ed      	uxtb	r5, r5
 8008d9c:	e7d8      	b.n	8008d50 <_scanf_float+0x18c>
 8008d9e:	f1ba 0f01 	cmp.w	sl, #1
 8008da2:	f47f af41 	bne.w	8008c28 <_scanf_float+0x64>
 8008da6:	f04f 0a02 	mov.w	sl, #2
 8008daa:	e7d1      	b.n	8008d50 <_scanf_float+0x18c>
 8008dac:	b97d      	cbnz	r5, 8008dce <_scanf_float+0x20a>
 8008dae:	f1b9 0f00 	cmp.w	r9, #0
 8008db2:	f47f af3c 	bne.w	8008c2e <_scanf_float+0x6a>
 8008db6:	6822      	ldr	r2, [r4, #0]
 8008db8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008dbc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008dc0:	f47f af39 	bne.w	8008c36 <_scanf_float+0x72>
 8008dc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dc8:	2501      	movs	r5, #1
 8008dca:	6022      	str	r2, [r4, #0]
 8008dcc:	e7c0      	b.n	8008d50 <_scanf_float+0x18c>
 8008dce:	2d03      	cmp	r5, #3
 8008dd0:	d0e2      	beq.n	8008d98 <_scanf_float+0x1d4>
 8008dd2:	2d05      	cmp	r5, #5
 8008dd4:	e7de      	b.n	8008d94 <_scanf_float+0x1d0>
 8008dd6:	2d02      	cmp	r5, #2
 8008dd8:	f47f af26 	bne.w	8008c28 <_scanf_float+0x64>
 8008ddc:	2503      	movs	r5, #3
 8008dde:	e7b7      	b.n	8008d50 <_scanf_float+0x18c>
 8008de0:	2d06      	cmp	r5, #6
 8008de2:	f47f af21 	bne.w	8008c28 <_scanf_float+0x64>
 8008de6:	2507      	movs	r5, #7
 8008de8:	e7b2      	b.n	8008d50 <_scanf_float+0x18c>
 8008dea:	6822      	ldr	r2, [r4, #0]
 8008dec:	0591      	lsls	r1, r2, #22
 8008dee:	f57f af1b 	bpl.w	8008c28 <_scanf_float+0x64>
 8008df2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008df6:	6022      	str	r2, [r4, #0]
 8008df8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008dfc:	e7a8      	b.n	8008d50 <_scanf_float+0x18c>
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e08:	d006      	beq.n	8008e18 <_scanf_float+0x254>
 8008e0a:	0550      	lsls	r0, r2, #21
 8008e0c:	f57f af0c 	bpl.w	8008c28 <_scanf_float+0x64>
 8008e10:	f1b9 0f00 	cmp.w	r9, #0
 8008e14:	f43f af0f 	beq.w	8008c36 <_scanf_float+0x72>
 8008e18:	0591      	lsls	r1, r2, #22
 8008e1a:	bf58      	it	pl
 8008e1c:	9901      	ldrpl	r1, [sp, #4]
 8008e1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e22:	bf58      	it	pl
 8008e24:	eba9 0101 	subpl.w	r1, r9, r1
 8008e28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e2c:	f04f 0900 	mov.w	r9, #0
 8008e30:	bf58      	it	pl
 8008e32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e36:	6022      	str	r2, [r4, #0]
 8008e38:	e78a      	b.n	8008d50 <_scanf_float+0x18c>
 8008e3a:	f04f 0a03 	mov.w	sl, #3
 8008e3e:	e787      	b.n	8008d50 <_scanf_float+0x18c>
 8008e40:	4639      	mov	r1, r7
 8008e42:	4640      	mov	r0, r8
 8008e44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e48:	4798      	blx	r3
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	f43f aedf 	beq.w	8008c0e <_scanf_float+0x4a>
 8008e50:	e6ea      	b.n	8008c28 <_scanf_float+0x64>
 8008e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e56:	463a      	mov	r2, r7
 8008e58:	4640      	mov	r0, r8
 8008e5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e5e:	4798      	blx	r3
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	e6ec      	b.n	8008c42 <_scanf_float+0x7e>
 8008e68:	1e6b      	subs	r3, r5, #1
 8008e6a:	2b06      	cmp	r3, #6
 8008e6c:	d825      	bhi.n	8008eba <_scanf_float+0x2f6>
 8008e6e:	2d02      	cmp	r5, #2
 8008e70:	d836      	bhi.n	8008ee0 <_scanf_float+0x31c>
 8008e72:	455e      	cmp	r6, fp
 8008e74:	f67f aee8 	bls.w	8008c48 <_scanf_float+0x84>
 8008e78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e7c:	463a      	mov	r2, r7
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e84:	4798      	blx	r3
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	e7f1      	b.n	8008e72 <_scanf_float+0x2ae>
 8008e8e:	9802      	ldr	r0, [sp, #8]
 8008e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008e98:	463a      	mov	r2, r7
 8008e9a:	9002      	str	r0, [sp, #8]
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4798      	blx	r3
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	6123      	str	r3, [r4, #16]
 8008ea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eaa:	fa5f fa8a 	uxtb.w	sl, sl
 8008eae:	f1ba 0f02 	cmp.w	sl, #2
 8008eb2:	d1ec      	bne.n	8008e8e <_scanf_float+0x2ca>
 8008eb4:	3d03      	subs	r5, #3
 8008eb6:	b2ed      	uxtb	r5, r5
 8008eb8:	1b76      	subs	r6, r6, r5
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	05da      	lsls	r2, r3, #23
 8008ebe:	d52f      	bpl.n	8008f20 <_scanf_float+0x35c>
 8008ec0:	055b      	lsls	r3, r3, #21
 8008ec2:	d510      	bpl.n	8008ee6 <_scanf_float+0x322>
 8008ec4:	455e      	cmp	r6, fp
 8008ec6:	f67f aebf 	bls.w	8008c48 <_scanf_float+0x84>
 8008eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ece:	463a      	mov	r2, r7
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ed6:	4798      	blx	r3
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	e7f1      	b.n	8008ec4 <_scanf_float+0x300>
 8008ee0:	46aa      	mov	sl, r5
 8008ee2:	9602      	str	r6, [sp, #8]
 8008ee4:	e7df      	b.n	8008ea6 <_scanf_float+0x2e2>
 8008ee6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	2965      	cmp	r1, #101	; 0x65
 8008eee:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ef2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	d00c      	beq.n	8008f14 <_scanf_float+0x350>
 8008efa:	2945      	cmp	r1, #69	; 0x45
 8008efc:	d00a      	beq.n	8008f14 <_scanf_float+0x350>
 8008efe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f02:	463a      	mov	r2, r7
 8008f04:	4640      	mov	r0, r8
 8008f06:	4798      	blx	r3
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	1eb5      	subs	r5, r6, #2
 8008f12:	6123      	str	r3, [r4, #16]
 8008f14:	463a      	mov	r2, r7
 8008f16:	4640      	mov	r0, r8
 8008f18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f1c:	4798      	blx	r3
 8008f1e:	462e      	mov	r6, r5
 8008f20:	6825      	ldr	r5, [r4, #0]
 8008f22:	f015 0510 	ands.w	r5, r5, #16
 8008f26:	d155      	bne.n	8008fd4 <_scanf_float+0x410>
 8008f28:	7035      	strb	r5, [r6, #0]
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f34:	d11d      	bne.n	8008f72 <_scanf_float+0x3ae>
 8008f36:	9b01      	ldr	r3, [sp, #4]
 8008f38:	454b      	cmp	r3, r9
 8008f3a:	eba3 0209 	sub.w	r2, r3, r9
 8008f3e:	d125      	bne.n	8008f8c <_scanf_float+0x3c8>
 8008f40:	2200      	movs	r2, #0
 8008f42:	4659      	mov	r1, fp
 8008f44:	4640      	mov	r0, r8
 8008f46:	f002 fd17 	bl	800b978 <_strtod_r>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	f8d4 c000 	ldr.w	ip, [r4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f01c 0f02 	tst.w	ip, #2
 8008f56:	4606      	mov	r6, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	f103 0204 	add.w	r2, r3, #4
 8008f5e:	d020      	beq.n	8008fa2 <_scanf_float+0x3de>
 8008f60:	9903      	ldr	r1, [sp, #12]
 8008f62:	600a      	str	r2, [r1, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	e9c3 6700 	strd	r6, r7, [r3]
 8008f6a:	68e3      	ldr	r3, [r4, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60e3      	str	r3, [r4, #12]
 8008f70:	e66b      	b.n	8008c4a <_scanf_float+0x86>
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0e3      	beq.n	8008f40 <_scanf_float+0x37c>
 8008f78:	9905      	ldr	r1, [sp, #20]
 8008f7a:	230a      	movs	r3, #10
 8008f7c:	462a      	mov	r2, r5
 8008f7e:	4640      	mov	r0, r8
 8008f80:	3101      	adds	r1, #1
 8008f82:	f002 fd7d 	bl	800ba80 <_strtol_r>
 8008f86:	9b04      	ldr	r3, [sp, #16]
 8008f88:	9e05      	ldr	r6, [sp, #20]
 8008f8a:	1ac2      	subs	r2, r0, r3
 8008f8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008f90:	429e      	cmp	r6, r3
 8008f92:	bf28      	it	cs
 8008f94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008f98:	4630      	mov	r0, r6
 8008f9a:	490f      	ldr	r1, [pc, #60]	; (8008fd8 <_scanf_float+0x414>)
 8008f9c:	f000 f946 	bl	800922c <siprintf>
 8008fa0:	e7ce      	b.n	8008f40 <_scanf_float+0x37c>
 8008fa2:	f01c 0f04 	tst.w	ip, #4
 8008fa6:	d1db      	bne.n	8008f60 <_scanf_float+0x39c>
 8008fa8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008fac:	f8cc 2000 	str.w	r2, [ip]
 8008fb0:	f8d3 8000 	ldr.w	r8, [r3]
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	f7f7 fd94 	bl	8000ae4 <__aeabi_dcmpun>
 8008fbc:	b128      	cbz	r0, 8008fca <_scanf_float+0x406>
 8008fbe:	4807      	ldr	r0, [pc, #28]	; (8008fdc <_scanf_float+0x418>)
 8008fc0:	f000 fab8 	bl	8009534 <nanf>
 8008fc4:	f8c8 0000 	str.w	r0, [r8]
 8008fc8:	e7cf      	b.n	8008f6a <_scanf_float+0x3a6>
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4639      	mov	r1, r7
 8008fce:	f7f7 fde7 	bl	8000ba0 <__aeabi_d2f>
 8008fd2:	e7f7      	b.n	8008fc4 <_scanf_float+0x400>
 8008fd4:	2500      	movs	r5, #0
 8008fd6:	e638      	b.n	8008c4a <_scanf_float+0x86>
 8008fd8:	0800ccba 	.word	0x0800ccba
 8008fdc:	0800d04d 	.word	0x0800d04d

08008fe0 <std>:
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8008fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fee:	6083      	str	r3, [r0, #8]
 8008ff0:	8181      	strh	r1, [r0, #12]
 8008ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ff4:	81c2      	strh	r2, [r0, #14]
 8008ff6:	6183      	str	r3, [r0, #24]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	305c      	adds	r0, #92	; 0x5c
 8008ffe:	f000 fa0d 	bl	800941c <memset>
 8009002:	4b05      	ldr	r3, [pc, #20]	; (8009018 <std+0x38>)
 8009004:	6224      	str	r4, [r4, #32]
 8009006:	6263      	str	r3, [r4, #36]	; 0x24
 8009008:	4b04      	ldr	r3, [pc, #16]	; (800901c <std+0x3c>)
 800900a:	62a3      	str	r3, [r4, #40]	; 0x28
 800900c:	4b04      	ldr	r3, [pc, #16]	; (8009020 <std+0x40>)
 800900e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <std+0x44>)
 8009012:	6323      	str	r3, [r4, #48]	; 0x30
 8009014:	bd10      	pop	{r4, pc}
 8009016:	bf00      	nop
 8009018:	0800926d 	.word	0x0800926d
 800901c:	0800928f 	.word	0x0800928f
 8009020:	080092c7 	.word	0x080092c7
 8009024:	080092eb 	.word	0x080092eb

08009028 <stdio_exit_handler>:
 8009028:	4a02      	ldr	r2, [pc, #8]	; (8009034 <stdio_exit_handler+0xc>)
 800902a:	4903      	ldr	r1, [pc, #12]	; (8009038 <stdio_exit_handler+0x10>)
 800902c:	4803      	ldr	r0, [pc, #12]	; (800903c <stdio_exit_handler+0x14>)
 800902e:	f000 b869 	b.w	8009104 <_fwalk_sglue>
 8009032:	bf00      	nop
 8009034:	2000001c 	.word	0x2000001c
 8009038:	0800c0bd 	.word	0x0800c0bd
 800903c:	20000028 	.word	0x20000028

08009040 <cleanup_stdio>:
 8009040:	6841      	ldr	r1, [r0, #4]
 8009042:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <cleanup_stdio+0x34>)
 8009044:	b510      	push	{r4, lr}
 8009046:	4299      	cmp	r1, r3
 8009048:	4604      	mov	r4, r0
 800904a:	d001      	beq.n	8009050 <cleanup_stdio+0x10>
 800904c:	f003 f836 	bl	800c0bc <_fflush_r>
 8009050:	68a1      	ldr	r1, [r4, #8]
 8009052:	4b09      	ldr	r3, [pc, #36]	; (8009078 <cleanup_stdio+0x38>)
 8009054:	4299      	cmp	r1, r3
 8009056:	d002      	beq.n	800905e <cleanup_stdio+0x1e>
 8009058:	4620      	mov	r0, r4
 800905a:	f003 f82f 	bl	800c0bc <_fflush_r>
 800905e:	68e1      	ldr	r1, [r4, #12]
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <cleanup_stdio+0x3c>)
 8009062:	4299      	cmp	r1, r3
 8009064:	d004      	beq.n	8009070 <cleanup_stdio+0x30>
 8009066:	4620      	mov	r0, r4
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906c:	f003 b826 	b.w	800c0bc <_fflush_r>
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop
 8009074:	2000440c 	.word	0x2000440c
 8009078:	20004474 	.word	0x20004474
 800907c:	200044dc 	.word	0x200044dc

08009080 <global_stdio_init.part.0>:
 8009080:	b510      	push	{r4, lr}
 8009082:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <global_stdio_init.part.0+0x30>)
 8009084:	4c0b      	ldr	r4, [pc, #44]	; (80090b4 <global_stdio_init.part.0+0x34>)
 8009086:	4a0c      	ldr	r2, [pc, #48]	; (80090b8 <global_stdio_init.part.0+0x38>)
 8009088:	4620      	mov	r0, r4
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	2104      	movs	r1, #4
 800908e:	2200      	movs	r2, #0
 8009090:	f7ff ffa6 	bl	8008fe0 <std>
 8009094:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009098:	2201      	movs	r2, #1
 800909a:	2109      	movs	r1, #9
 800909c:	f7ff ffa0 	bl	8008fe0 <std>
 80090a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090a4:	2202      	movs	r2, #2
 80090a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090aa:	2112      	movs	r1, #18
 80090ac:	f7ff bf98 	b.w	8008fe0 <std>
 80090b0:	20004544 	.word	0x20004544
 80090b4:	2000440c 	.word	0x2000440c
 80090b8:	08009029 	.word	0x08009029

080090bc <__sfp_lock_acquire>:
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <__sfp_lock_acquire+0x8>)
 80090be:	f000 ba29 	b.w	8009514 <__retarget_lock_acquire_recursive>
 80090c2:	bf00      	nop
 80090c4:	2000454d 	.word	0x2000454d

080090c8 <__sfp_lock_release>:
 80090c8:	4801      	ldr	r0, [pc, #4]	; (80090d0 <__sfp_lock_release+0x8>)
 80090ca:	f000 ba24 	b.w	8009516 <__retarget_lock_release_recursive>
 80090ce:	bf00      	nop
 80090d0:	2000454d 	.word	0x2000454d

080090d4 <__sinit>:
 80090d4:	b510      	push	{r4, lr}
 80090d6:	4604      	mov	r4, r0
 80090d8:	f7ff fff0 	bl	80090bc <__sfp_lock_acquire>
 80090dc:	6a23      	ldr	r3, [r4, #32]
 80090de:	b11b      	cbz	r3, 80090e8 <__sinit+0x14>
 80090e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e4:	f7ff bff0 	b.w	80090c8 <__sfp_lock_release>
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <__sinit+0x28>)
 80090ea:	6223      	str	r3, [r4, #32]
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <__sinit+0x2c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1f5      	bne.n	80090e0 <__sinit+0xc>
 80090f4:	f7ff ffc4 	bl	8009080 <global_stdio_init.part.0>
 80090f8:	e7f2      	b.n	80090e0 <__sinit+0xc>
 80090fa:	bf00      	nop
 80090fc:	08009041 	.word	0x08009041
 8009100:	20004544 	.word	0x20004544

08009104 <_fwalk_sglue>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	4607      	mov	r7, r0
 800910a:	4688      	mov	r8, r1
 800910c:	4614      	mov	r4, r2
 800910e:	2600      	movs	r6, #0
 8009110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009114:	f1b9 0901 	subs.w	r9, r9, #1
 8009118:	d505      	bpl.n	8009126 <_fwalk_sglue+0x22>
 800911a:	6824      	ldr	r4, [r4, #0]
 800911c:	2c00      	cmp	r4, #0
 800911e:	d1f7      	bne.n	8009110 <_fwalk_sglue+0xc>
 8009120:	4630      	mov	r0, r6
 8009122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d907      	bls.n	800913c <_fwalk_sglue+0x38>
 800912c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009130:	3301      	adds	r3, #1
 8009132:	d003      	beq.n	800913c <_fwalk_sglue+0x38>
 8009134:	4629      	mov	r1, r5
 8009136:	4638      	mov	r0, r7
 8009138:	47c0      	blx	r8
 800913a:	4306      	orrs	r6, r0
 800913c:	3568      	adds	r5, #104	; 0x68
 800913e:	e7e9      	b.n	8009114 <_fwalk_sglue+0x10>

08009140 <iprintf>:
 8009140:	b40f      	push	{r0, r1, r2, r3}
 8009142:	b507      	push	{r0, r1, r2, lr}
 8009144:	4906      	ldr	r1, [pc, #24]	; (8009160 <iprintf+0x20>)
 8009146:	ab04      	add	r3, sp, #16
 8009148:	6808      	ldr	r0, [r1, #0]
 800914a:	f853 2b04 	ldr.w	r2, [r3], #4
 800914e:	6881      	ldr	r1, [r0, #8]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	f002 fe17 	bl	800bd84 <_vfiprintf_r>
 8009156:	b003      	add	sp, #12
 8009158:	f85d eb04 	ldr.w	lr, [sp], #4
 800915c:	b004      	add	sp, #16
 800915e:	4770      	bx	lr
 8009160:	20000074 	.word	0x20000074

08009164 <putchar>:
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <putchar+0xc>)
 8009166:	4601      	mov	r1, r0
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	6882      	ldr	r2, [r0, #8]
 800916c:	f003 b82f 	b.w	800c1ce <_putc_r>
 8009170:	20000074 	.word	0x20000074

08009174 <_puts_r>:
 8009174:	6a03      	ldr	r3, [r0, #32]
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	4605      	mov	r5, r0
 800917a:	460e      	mov	r6, r1
 800917c:	6884      	ldr	r4, [r0, #8]
 800917e:	b90b      	cbnz	r3, 8009184 <_puts_r+0x10>
 8009180:	f7ff ffa8 	bl	80090d4 <__sinit>
 8009184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009186:	07db      	lsls	r3, r3, #31
 8009188:	d405      	bmi.n	8009196 <_puts_r+0x22>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	0598      	lsls	r0, r3, #22
 800918e:	d402      	bmi.n	8009196 <_puts_r+0x22>
 8009190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009192:	f000 f9bf 	bl	8009514 <__retarget_lock_acquire_recursive>
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	0719      	lsls	r1, r3, #28
 800919a:	d513      	bpl.n	80091c4 <_puts_r+0x50>
 800919c:	6923      	ldr	r3, [r4, #16]
 800919e:	b18b      	cbz	r3, 80091c4 <_puts_r+0x50>
 80091a0:	3e01      	subs	r6, #1
 80091a2:	68a3      	ldr	r3, [r4, #8]
 80091a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091a8:	3b01      	subs	r3, #1
 80091aa:	60a3      	str	r3, [r4, #8]
 80091ac:	b9e9      	cbnz	r1, 80091ea <_puts_r+0x76>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da2e      	bge.n	8009210 <_puts_r+0x9c>
 80091b2:	4622      	mov	r2, r4
 80091b4:	210a      	movs	r1, #10
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 f89b 	bl	80092f2 <__swbuf_r>
 80091bc:	3001      	adds	r0, #1
 80091be:	d007      	beq.n	80091d0 <_puts_r+0x5c>
 80091c0:	250a      	movs	r5, #10
 80091c2:	e007      	b.n	80091d4 <_puts_r+0x60>
 80091c4:	4621      	mov	r1, r4
 80091c6:	4628      	mov	r0, r5
 80091c8:	f000 f8d0 	bl	800936c <__swsetup_r>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d0e7      	beq.n	80091a0 <_puts_r+0x2c>
 80091d0:	f04f 35ff 	mov.w	r5, #4294967295
 80091d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091d6:	07da      	lsls	r2, r3, #31
 80091d8:	d405      	bmi.n	80091e6 <_puts_r+0x72>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	059b      	lsls	r3, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_puts_r+0x72>
 80091e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091e2:	f000 f998 	bl	8009516 <__retarget_lock_release_recursive>
 80091e6:	4628      	mov	r0, r5
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da04      	bge.n	80091f8 <_puts_r+0x84>
 80091ee:	69a2      	ldr	r2, [r4, #24]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	dc06      	bgt.n	8009202 <_puts_r+0x8e>
 80091f4:	290a      	cmp	r1, #10
 80091f6:	d004      	beq.n	8009202 <_puts_r+0x8e>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	6022      	str	r2, [r4, #0]
 80091fe:	7019      	strb	r1, [r3, #0]
 8009200:	e7cf      	b.n	80091a2 <_puts_r+0x2e>
 8009202:	4622      	mov	r2, r4
 8009204:	4628      	mov	r0, r5
 8009206:	f000 f874 	bl	80092f2 <__swbuf_r>
 800920a:	3001      	adds	r0, #1
 800920c:	d1c9      	bne.n	80091a2 <_puts_r+0x2e>
 800920e:	e7df      	b.n	80091d0 <_puts_r+0x5c>
 8009210:	250a      	movs	r5, #10
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	6022      	str	r2, [r4, #0]
 8009218:	701d      	strb	r5, [r3, #0]
 800921a:	e7db      	b.n	80091d4 <_puts_r+0x60>

0800921c <puts>:
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <puts+0xc>)
 800921e:	4601      	mov	r1, r0
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f7ff bfa7 	b.w	8009174 <_puts_r>
 8009226:	bf00      	nop
 8009228:	20000074 	.word	0x20000074

0800922c <siprintf>:
 800922c:	b40e      	push	{r1, r2, r3}
 800922e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009232:	b500      	push	{lr}
 8009234:	b09c      	sub	sp, #112	; 0x70
 8009236:	ab1d      	add	r3, sp, #116	; 0x74
 8009238:	9002      	str	r0, [sp, #8]
 800923a:	9006      	str	r0, [sp, #24]
 800923c:	9107      	str	r1, [sp, #28]
 800923e:	9104      	str	r1, [sp, #16]
 8009240:	4808      	ldr	r0, [pc, #32]	; (8009264 <siprintf+0x38>)
 8009242:	4909      	ldr	r1, [pc, #36]	; (8009268 <siprintf+0x3c>)
 8009244:	f853 2b04 	ldr.w	r2, [r3], #4
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	a902      	add	r1, sp, #8
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	f002 fc72 	bl	800bb38 <_svfiprintf_r>
 8009254:	2200      	movs	r2, #0
 8009256:	9b02      	ldr	r3, [sp, #8]
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	b01c      	add	sp, #112	; 0x70
 800925c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009260:	b003      	add	sp, #12
 8009262:	4770      	bx	lr
 8009264:	20000074 	.word	0x20000074
 8009268:	ffff0208 	.word	0xffff0208

0800926c <__sread>:
 800926c:	b510      	push	{r4, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	f000 f900 	bl	8009478 <_read_r>
 8009278:	2800      	cmp	r0, #0
 800927a:	bfab      	itete	ge
 800927c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800927e:	89a3      	ldrhlt	r3, [r4, #12]
 8009280:	181b      	addge	r3, r3, r0
 8009282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009286:	bfac      	ite	ge
 8009288:	6563      	strge	r3, [r4, #84]	; 0x54
 800928a:	81a3      	strhlt	r3, [r4, #12]
 800928c:	bd10      	pop	{r4, pc}

0800928e <__swrite>:
 800928e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009292:	461f      	mov	r7, r3
 8009294:	898b      	ldrh	r3, [r1, #12]
 8009296:	4605      	mov	r5, r0
 8009298:	05db      	lsls	r3, r3, #23
 800929a:	460c      	mov	r4, r1
 800929c:	4616      	mov	r6, r2
 800929e:	d505      	bpl.n	80092ac <__swrite+0x1e>
 80092a0:	2302      	movs	r3, #2
 80092a2:	2200      	movs	r2, #0
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	f000 f8d4 	bl	8009454 <_lseek_r>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	4632      	mov	r2, r6
 80092b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	4628      	mov	r0, r5
 80092b8:	463b      	mov	r3, r7
 80092ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c2:	f000 b8eb 	b.w	800949c <_write_r>

080092c6 <__sseek>:
 80092c6:	b510      	push	{r4, lr}
 80092c8:	460c      	mov	r4, r1
 80092ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ce:	f000 f8c1 	bl	8009454 <_lseek_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	bf15      	itete	ne
 80092d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80092da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e2:	81a3      	strheq	r3, [r4, #12]
 80092e4:	bf18      	it	ne
 80092e6:	81a3      	strhne	r3, [r4, #12]
 80092e8:	bd10      	pop	{r4, pc}

080092ea <__sclose>:
 80092ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ee:	f000 b8a1 	b.w	8009434 <_close_r>

080092f2 <__swbuf_r>:
 80092f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f4:	460e      	mov	r6, r1
 80092f6:	4614      	mov	r4, r2
 80092f8:	4605      	mov	r5, r0
 80092fa:	b118      	cbz	r0, 8009304 <__swbuf_r+0x12>
 80092fc:	6a03      	ldr	r3, [r0, #32]
 80092fe:	b90b      	cbnz	r3, 8009304 <__swbuf_r+0x12>
 8009300:	f7ff fee8 	bl	80090d4 <__sinit>
 8009304:	69a3      	ldr	r3, [r4, #24]
 8009306:	60a3      	str	r3, [r4, #8]
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	071a      	lsls	r2, r3, #28
 800930c:	d525      	bpl.n	800935a <__swbuf_r+0x68>
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	b31b      	cbz	r3, 800935a <__swbuf_r+0x68>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	6922      	ldr	r2, [r4, #16]
 8009316:	b2f6      	uxtb	r6, r6
 8009318:	1a98      	subs	r0, r3, r2
 800931a:	6963      	ldr	r3, [r4, #20]
 800931c:	4637      	mov	r7, r6
 800931e:	4283      	cmp	r3, r0
 8009320:	dc04      	bgt.n	800932c <__swbuf_r+0x3a>
 8009322:	4621      	mov	r1, r4
 8009324:	4628      	mov	r0, r5
 8009326:	f002 fec9 	bl	800c0bc <_fflush_r>
 800932a:	b9e0      	cbnz	r0, 8009366 <__swbuf_r+0x74>
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	60a3      	str	r3, [r4, #8]
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	6022      	str	r2, [r4, #0]
 8009338:	701e      	strb	r6, [r3, #0]
 800933a:	6962      	ldr	r2, [r4, #20]
 800933c:	1c43      	adds	r3, r0, #1
 800933e:	429a      	cmp	r2, r3
 8009340:	d004      	beq.n	800934c <__swbuf_r+0x5a>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	07db      	lsls	r3, r3, #31
 8009346:	d506      	bpl.n	8009356 <__swbuf_r+0x64>
 8009348:	2e0a      	cmp	r6, #10
 800934a:	d104      	bne.n	8009356 <__swbuf_r+0x64>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f002 feb4 	bl	800c0bc <_fflush_r>
 8009354:	b938      	cbnz	r0, 8009366 <__swbuf_r+0x74>
 8009356:	4638      	mov	r0, r7
 8009358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f805 	bl	800936c <__swsetup_r>
 8009362:	2800      	cmp	r0, #0
 8009364:	d0d5      	beq.n	8009312 <__swbuf_r+0x20>
 8009366:	f04f 37ff 	mov.w	r7, #4294967295
 800936a:	e7f4      	b.n	8009356 <__swbuf_r+0x64>

0800936c <__swsetup_r>:
 800936c:	b538      	push	{r3, r4, r5, lr}
 800936e:	4b2a      	ldr	r3, [pc, #168]	; (8009418 <__swsetup_r+0xac>)
 8009370:	4605      	mov	r5, r0
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	460c      	mov	r4, r1
 8009376:	b118      	cbz	r0, 8009380 <__swsetup_r+0x14>
 8009378:	6a03      	ldr	r3, [r0, #32]
 800937a:	b90b      	cbnz	r3, 8009380 <__swsetup_r+0x14>
 800937c:	f7ff feaa 	bl	80090d4 <__sinit>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009386:	0718      	lsls	r0, r3, #28
 8009388:	d422      	bmi.n	80093d0 <__swsetup_r+0x64>
 800938a:	06d9      	lsls	r1, r3, #27
 800938c:	d407      	bmi.n	800939e <__swsetup_r+0x32>
 800938e:	2309      	movs	r3, #9
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	e034      	b.n	8009408 <__swsetup_r+0x9c>
 800939e:	0758      	lsls	r0, r3, #29
 80093a0:	d512      	bpl.n	80093c8 <__swsetup_r+0x5c>
 80093a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a4:	b141      	cbz	r1, 80093b8 <__swsetup_r+0x4c>
 80093a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093aa:	4299      	cmp	r1, r3
 80093ac:	d002      	beq.n	80093b4 <__swsetup_r+0x48>
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 ff32 	bl	800a218 <_free_r>
 80093b4:	2300      	movs	r3, #0
 80093b6:	6363      	str	r3, [r4, #52]	; 0x34
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093be:	81a3      	strh	r3, [r4, #12]
 80093c0:	2300      	movs	r3, #0
 80093c2:	6063      	str	r3, [r4, #4]
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f043 0308 	orr.w	r3, r3, #8
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	b94b      	cbnz	r3, 80093e8 <__swsetup_r+0x7c>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093de:	d003      	beq.n	80093e8 <__swsetup_r+0x7c>
 80093e0:	4621      	mov	r1, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	f002 feb7 	bl	800c156 <__smakebuf_r>
 80093e8:	89a0      	ldrh	r0, [r4, #12]
 80093ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ee:	f010 0301 	ands.w	r3, r0, #1
 80093f2:	d00a      	beq.n	800940a <__swsetup_r+0x9e>
 80093f4:	2300      	movs	r3, #0
 80093f6:	60a3      	str	r3, [r4, #8]
 80093f8:	6963      	ldr	r3, [r4, #20]
 80093fa:	425b      	negs	r3, r3
 80093fc:	61a3      	str	r3, [r4, #24]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	b943      	cbnz	r3, 8009414 <__swsetup_r+0xa8>
 8009402:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009406:	d1c4      	bne.n	8009392 <__swsetup_r+0x26>
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	0781      	lsls	r1, r0, #30
 800940c:	bf58      	it	pl
 800940e:	6963      	ldrpl	r3, [r4, #20]
 8009410:	60a3      	str	r3, [r4, #8]
 8009412:	e7f4      	b.n	80093fe <__swsetup_r+0x92>
 8009414:	2000      	movs	r0, #0
 8009416:	e7f7      	b.n	8009408 <__swsetup_r+0x9c>
 8009418:	20000074 	.word	0x20000074

0800941c <memset>:
 800941c:	4603      	mov	r3, r0
 800941e:	4402      	add	r2, r0
 8009420:	4293      	cmp	r3, r2
 8009422:	d100      	bne.n	8009426 <memset+0xa>
 8009424:	4770      	bx	lr
 8009426:	f803 1b01 	strb.w	r1, [r3], #1
 800942a:	e7f9      	b.n	8009420 <memset+0x4>

0800942c <_localeconv_r>:
 800942c:	4800      	ldr	r0, [pc, #0]	; (8009430 <_localeconv_r+0x4>)
 800942e:	4770      	bx	lr
 8009430:	20000168 	.word	0x20000168

08009434 <_close_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	2300      	movs	r3, #0
 8009438:	4d05      	ldr	r5, [pc, #20]	; (8009450 <_close_r+0x1c>)
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7fa fdc2 	bl	8003fc8 <_close>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_close_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_close_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	20004548 	.word	0x20004548

08009454 <_lseek_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	4611      	mov	r1, r2
 800945c:	2200      	movs	r2, #0
 800945e:	4d05      	ldr	r5, [pc, #20]	; (8009474 <_lseek_r+0x20>)
 8009460:	602a      	str	r2, [r5, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	f7fa fdd4 	bl	8004010 <_lseek>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d102      	bne.n	8009472 <_lseek_r+0x1e>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b103      	cbz	r3, 8009472 <_lseek_r+0x1e>
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	20004548 	.word	0x20004548

08009478 <_read_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	2200      	movs	r2, #0
 8009482:	4d05      	ldr	r5, [pc, #20]	; (8009498 <_read_r+0x20>)
 8009484:	602a      	str	r2, [r5, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	f7fa fd81 	bl	8003f8e <_read>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_read_r+0x1e>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_read_r+0x1e>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20004548 	.word	0x20004548

0800949c <_write_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	4611      	mov	r1, r2
 80094a4:	2200      	movs	r2, #0
 80094a6:	4d05      	ldr	r5, [pc, #20]	; (80094bc <_write_r+0x20>)
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f7f7 fff4 	bl	8001498 <_write>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_write_r+0x1e>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_write_r+0x1e>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20004548 	.word	0x20004548

080094c0 <__errno>:
 80094c0:	4b01      	ldr	r3, [pc, #4]	; (80094c8 <__errno+0x8>)
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20000074 	.word	0x20000074

080094cc <__libc_init_array>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	2600      	movs	r6, #0
 80094d0:	4d0c      	ldr	r5, [pc, #48]	; (8009504 <__libc_init_array+0x38>)
 80094d2:	4c0d      	ldr	r4, [pc, #52]	; (8009508 <__libc_init_array+0x3c>)
 80094d4:	1b64      	subs	r4, r4, r5
 80094d6:	10a4      	asrs	r4, r4, #2
 80094d8:	42a6      	cmp	r6, r4
 80094da:	d109      	bne.n	80094f0 <__libc_init_array+0x24>
 80094dc:	f003 fb5e 	bl	800cb9c <_init>
 80094e0:	2600      	movs	r6, #0
 80094e2:	4d0a      	ldr	r5, [pc, #40]	; (800950c <__libc_init_array+0x40>)
 80094e4:	4c0a      	ldr	r4, [pc, #40]	; (8009510 <__libc_init_array+0x44>)
 80094e6:	1b64      	subs	r4, r4, r5
 80094e8:	10a4      	asrs	r4, r4, #2
 80094ea:	42a6      	cmp	r6, r4
 80094ec:	d105      	bne.n	80094fa <__libc_init_array+0x2e>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f4:	4798      	blx	r3
 80094f6:	3601      	adds	r6, #1
 80094f8:	e7ee      	b.n	80094d8 <__libc_init_array+0xc>
 80094fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fe:	4798      	blx	r3
 8009500:	3601      	adds	r6, #1
 8009502:	e7f2      	b.n	80094ea <__libc_init_array+0x1e>
 8009504:	0800d0b0 	.word	0x0800d0b0
 8009508:	0800d0b0 	.word	0x0800d0b0
 800950c:	0800d0b0 	.word	0x0800d0b0
 8009510:	0800d0b4 	.word	0x0800d0b4

08009514 <__retarget_lock_acquire_recursive>:
 8009514:	4770      	bx	lr

08009516 <__retarget_lock_release_recursive>:
 8009516:	4770      	bx	lr

08009518 <memchr>:
 8009518:	4603      	mov	r3, r0
 800951a:	b510      	push	{r4, lr}
 800951c:	b2c9      	uxtb	r1, r1
 800951e:	4402      	add	r2, r0
 8009520:	4293      	cmp	r3, r2
 8009522:	4618      	mov	r0, r3
 8009524:	d101      	bne.n	800952a <memchr+0x12>
 8009526:	2000      	movs	r0, #0
 8009528:	e003      	b.n	8009532 <memchr+0x1a>
 800952a:	7804      	ldrb	r4, [r0, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	428c      	cmp	r4, r1
 8009530:	d1f6      	bne.n	8009520 <memchr+0x8>
 8009532:	bd10      	pop	{r4, pc}

08009534 <nanf>:
 8009534:	4800      	ldr	r0, [pc, #0]	; (8009538 <nanf+0x4>)
 8009536:	4770      	bx	lr
 8009538:	7fc00000 	.word	0x7fc00000

0800953c <quorem>:
 800953c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	6903      	ldr	r3, [r0, #16]
 8009542:	690c      	ldr	r4, [r1, #16]
 8009544:	4607      	mov	r7, r0
 8009546:	42a3      	cmp	r3, r4
 8009548:	db7f      	blt.n	800964a <quorem+0x10e>
 800954a:	3c01      	subs	r4, #1
 800954c:	f100 0514 	add.w	r5, r0, #20
 8009550:	f101 0814 	add.w	r8, r1, #20
 8009554:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800955e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009562:	3301      	adds	r3, #1
 8009564:	429a      	cmp	r2, r3
 8009566:	fbb2 f6f3 	udiv	r6, r2, r3
 800956a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800956e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009572:	d331      	bcc.n	80095d8 <quorem+0x9c>
 8009574:	f04f 0e00 	mov.w	lr, #0
 8009578:	4640      	mov	r0, r8
 800957a:	46ac      	mov	ip, r5
 800957c:	46f2      	mov	sl, lr
 800957e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009582:	b293      	uxth	r3, r2
 8009584:	fb06 e303 	mla	r3, r6, r3, lr
 8009588:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800958c:	0c1a      	lsrs	r2, r3, #16
 800958e:	b29b      	uxth	r3, r3
 8009590:	fb06 220e 	mla	r2, r6, lr, r2
 8009594:	ebaa 0303 	sub.w	r3, sl, r3
 8009598:	f8dc a000 	ldr.w	sl, [ip]
 800959c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095a0:	fa1f fa8a 	uxth.w	sl, sl
 80095a4:	4453      	add	r3, sl
 80095a6:	f8dc a000 	ldr.w	sl, [ip]
 80095aa:	b292      	uxth	r2, r2
 80095ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ba:	4581      	cmp	r9, r0
 80095bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095c0:	f84c 3b04 	str.w	r3, [ip], #4
 80095c4:	d2db      	bcs.n	800957e <quorem+0x42>
 80095c6:	f855 300b 	ldr.w	r3, [r5, fp]
 80095ca:	b92b      	cbnz	r3, 80095d8 <quorem+0x9c>
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	3b04      	subs	r3, #4
 80095d0:	429d      	cmp	r5, r3
 80095d2:	461a      	mov	r2, r3
 80095d4:	d32d      	bcc.n	8009632 <quorem+0xf6>
 80095d6:	613c      	str	r4, [r7, #16]
 80095d8:	4638      	mov	r0, r7
 80095da:	f001 f9dd 	bl	800a998 <__mcmp>
 80095de:	2800      	cmp	r0, #0
 80095e0:	db23      	blt.n	800962a <quorem+0xee>
 80095e2:	4629      	mov	r1, r5
 80095e4:	2000      	movs	r0, #0
 80095e6:	3601      	adds	r6, #1
 80095e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80095ec:	f8d1 c000 	ldr.w	ip, [r1]
 80095f0:	b293      	uxth	r3, r2
 80095f2:	1ac3      	subs	r3, r0, r3
 80095f4:	0c12      	lsrs	r2, r2, #16
 80095f6:	fa1f f08c 	uxth.w	r0, ip
 80095fa:	4403      	add	r3, r0
 80095fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009604:	b29b      	uxth	r3, r3
 8009606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800960a:	45c1      	cmp	r9, r8
 800960c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009610:	f841 3b04 	str.w	r3, [r1], #4
 8009614:	d2e8      	bcs.n	80095e8 <quorem+0xac>
 8009616:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800961a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800961e:	b922      	cbnz	r2, 800962a <quorem+0xee>
 8009620:	3b04      	subs	r3, #4
 8009622:	429d      	cmp	r5, r3
 8009624:	461a      	mov	r2, r3
 8009626:	d30a      	bcc.n	800963e <quorem+0x102>
 8009628:	613c      	str	r4, [r7, #16]
 800962a:	4630      	mov	r0, r6
 800962c:	b003      	add	sp, #12
 800962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	3b04      	subs	r3, #4
 8009636:	2a00      	cmp	r2, #0
 8009638:	d1cd      	bne.n	80095d6 <quorem+0x9a>
 800963a:	3c01      	subs	r4, #1
 800963c:	e7c8      	b.n	80095d0 <quorem+0x94>
 800963e:	6812      	ldr	r2, [r2, #0]
 8009640:	3b04      	subs	r3, #4
 8009642:	2a00      	cmp	r2, #0
 8009644:	d1f0      	bne.n	8009628 <quorem+0xec>
 8009646:	3c01      	subs	r4, #1
 8009648:	e7eb      	b.n	8009622 <quorem+0xe6>
 800964a:	2000      	movs	r0, #0
 800964c:	e7ee      	b.n	800962c <quorem+0xf0>
	...

08009650 <_dtoa_r>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	4616      	mov	r6, r2
 8009656:	461f      	mov	r7, r3
 8009658:	69c4      	ldr	r4, [r0, #28]
 800965a:	b099      	sub	sp, #100	; 0x64
 800965c:	4605      	mov	r5, r0
 800965e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009662:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009666:	b974      	cbnz	r4, 8009686 <_dtoa_r+0x36>
 8009668:	2010      	movs	r0, #16
 800966a:	f000 fe1d 	bl	800a2a8 <malloc>
 800966e:	4602      	mov	r2, r0
 8009670:	61e8      	str	r0, [r5, #28]
 8009672:	b920      	cbnz	r0, 800967e <_dtoa_r+0x2e>
 8009674:	21ef      	movs	r1, #239	; 0xef
 8009676:	4bac      	ldr	r3, [pc, #688]	; (8009928 <_dtoa_r+0x2d8>)
 8009678:	48ac      	ldr	r0, [pc, #688]	; (800992c <_dtoa_r+0x2dc>)
 800967a:	f002 fe4f 	bl	800c31c <__assert_func>
 800967e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009682:	6004      	str	r4, [r0, #0]
 8009684:	60c4      	str	r4, [r0, #12]
 8009686:	69eb      	ldr	r3, [r5, #28]
 8009688:	6819      	ldr	r1, [r3, #0]
 800968a:	b151      	cbz	r1, 80096a2 <_dtoa_r+0x52>
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	2301      	movs	r3, #1
 8009690:	4093      	lsls	r3, r2
 8009692:	604a      	str	r2, [r1, #4]
 8009694:	608b      	str	r3, [r1, #8]
 8009696:	4628      	mov	r0, r5
 8009698:	f000 fefa 	bl	800a490 <_Bfree>
 800969c:	2200      	movs	r2, #0
 800969e:	69eb      	ldr	r3, [r5, #28]
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	1e3b      	subs	r3, r7, #0
 80096a4:	bfaf      	iteee	ge
 80096a6:	2300      	movge	r3, #0
 80096a8:	2201      	movlt	r2, #1
 80096aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80096ae:	9305      	strlt	r3, [sp, #20]
 80096b0:	bfa8      	it	ge
 80096b2:	f8c8 3000 	strge.w	r3, [r8]
 80096b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80096ba:	4b9d      	ldr	r3, [pc, #628]	; (8009930 <_dtoa_r+0x2e0>)
 80096bc:	bfb8      	it	lt
 80096be:	f8c8 2000 	strlt.w	r2, [r8]
 80096c2:	ea33 0309 	bics.w	r3, r3, r9
 80096c6:	d119      	bne.n	80096fc <_dtoa_r+0xac>
 80096c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80096cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096d4:	4333      	orrs	r3, r6
 80096d6:	f000 8589 	beq.w	800a1ec <_dtoa_r+0xb9c>
 80096da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096dc:	b953      	cbnz	r3, 80096f4 <_dtoa_r+0xa4>
 80096de:	4b95      	ldr	r3, [pc, #596]	; (8009934 <_dtoa_r+0x2e4>)
 80096e0:	e023      	b.n	800972a <_dtoa_r+0xda>
 80096e2:	4b95      	ldr	r3, [pc, #596]	; (8009938 <_dtoa_r+0x2e8>)
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	3308      	adds	r3, #8
 80096e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	9803      	ldr	r0, [sp, #12]
 80096ee:	b019      	add	sp, #100	; 0x64
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	4b8f      	ldr	r3, [pc, #572]	; (8009934 <_dtoa_r+0x2e4>)
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	3303      	adds	r3, #3
 80096fa:	e7f5      	b.n	80096e8 <_dtoa_r+0x98>
 80096fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009700:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009708:	2200      	movs	r2, #0
 800970a:	2300      	movs	r3, #0
 800970c:	f7f7 f9b8 	bl	8000a80 <__aeabi_dcmpeq>
 8009710:	4680      	mov	r8, r0
 8009712:	b160      	cbz	r0, 800972e <_dtoa_r+0xde>
 8009714:	2301      	movs	r3, #1
 8009716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 8562 	beq.w	800a1e6 <_dtoa_r+0xb96>
 8009722:	4b86      	ldr	r3, [pc, #536]	; (800993c <_dtoa_r+0x2ec>)
 8009724:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	3b01      	subs	r3, #1
 800972a:	9303      	str	r3, [sp, #12]
 800972c:	e7de      	b.n	80096ec <_dtoa_r+0x9c>
 800972e:	ab16      	add	r3, sp, #88	; 0x58
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	ab17      	add	r3, sp, #92	; 0x5c
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	4628      	mov	r0, r5
 8009738:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800973c:	f001 fa3c 	bl	800abb8 <__d2b>
 8009740:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009744:	4682      	mov	sl, r0
 8009746:	2c00      	cmp	r4, #0
 8009748:	d07e      	beq.n	8009848 <_dtoa_r+0x1f8>
 800974a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800974e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009750:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009758:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800975c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009760:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009764:	4619      	mov	r1, r3
 8009766:	2200      	movs	r2, #0
 8009768:	4b75      	ldr	r3, [pc, #468]	; (8009940 <_dtoa_r+0x2f0>)
 800976a:	f7f6 fd69 	bl	8000240 <__aeabi_dsub>
 800976e:	a368      	add	r3, pc, #416	; (adr r3, 8009910 <_dtoa_r+0x2c0>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f6 ff1c 	bl	80005b0 <__aeabi_dmul>
 8009778:	a367      	add	r3, pc, #412	; (adr r3, 8009918 <_dtoa_r+0x2c8>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f6 fd61 	bl	8000244 <__adddf3>
 8009782:	4606      	mov	r6, r0
 8009784:	4620      	mov	r0, r4
 8009786:	460f      	mov	r7, r1
 8009788:	f7f6 fea8 	bl	80004dc <__aeabi_i2d>
 800978c:	a364      	add	r3, pc, #400	; (adr r3, 8009920 <_dtoa_r+0x2d0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f6 ff0d 	bl	80005b0 <__aeabi_dmul>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4630      	mov	r0, r6
 800979c:	4639      	mov	r1, r7
 800979e:	f7f6 fd51 	bl	8000244 <__adddf3>
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	f7f7 f9b3 	bl	8000b10 <__aeabi_d2iz>
 80097aa:	2200      	movs	r2, #0
 80097ac:	4683      	mov	fp, r0
 80097ae:	2300      	movs	r3, #0
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f7 f96e 	bl	8000a94 <__aeabi_dcmplt>
 80097b8:	b148      	cbz	r0, 80097ce <_dtoa_r+0x17e>
 80097ba:	4658      	mov	r0, fp
 80097bc:	f7f6 fe8e 	bl	80004dc <__aeabi_i2d>
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	f7f7 f95c 	bl	8000a80 <__aeabi_dcmpeq>
 80097c8:	b908      	cbnz	r0, 80097ce <_dtoa_r+0x17e>
 80097ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097ce:	f1bb 0f16 	cmp.w	fp, #22
 80097d2:	d857      	bhi.n	8009884 <_dtoa_r+0x234>
 80097d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097d8:	4b5a      	ldr	r3, [pc, #360]	; (8009944 <_dtoa_r+0x2f4>)
 80097da:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f7 f957 	bl	8000a94 <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d04e      	beq.n	8009888 <_dtoa_r+0x238>
 80097ea:	2300      	movs	r3, #0
 80097ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80097f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097f4:	1b1b      	subs	r3, r3, r4
 80097f6:	1e5a      	subs	r2, r3, #1
 80097f8:	bf46      	itte	mi
 80097fa:	f1c3 0901 	rsbmi	r9, r3, #1
 80097fe:	2300      	movmi	r3, #0
 8009800:	f04f 0900 	movpl.w	r9, #0
 8009804:	9209      	str	r2, [sp, #36]	; 0x24
 8009806:	bf48      	it	mi
 8009808:	9309      	strmi	r3, [sp, #36]	; 0x24
 800980a:	f1bb 0f00 	cmp.w	fp, #0
 800980e:	db3d      	blt.n	800988c <_dtoa_r+0x23c>
 8009810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009812:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009816:	445b      	add	r3, fp
 8009818:	9309      	str	r3, [sp, #36]	; 0x24
 800981a:	2300      	movs	r3, #0
 800981c:	930a      	str	r3, [sp, #40]	; 0x28
 800981e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009820:	2b09      	cmp	r3, #9
 8009822:	d867      	bhi.n	80098f4 <_dtoa_r+0x2a4>
 8009824:	2b05      	cmp	r3, #5
 8009826:	bfc4      	itt	gt
 8009828:	3b04      	subgt	r3, #4
 800982a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800982c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800982e:	bfc8      	it	gt
 8009830:	2400      	movgt	r4, #0
 8009832:	f1a3 0302 	sub.w	r3, r3, #2
 8009836:	bfd8      	it	le
 8009838:	2401      	movle	r4, #1
 800983a:	2b03      	cmp	r3, #3
 800983c:	f200 8086 	bhi.w	800994c <_dtoa_r+0x2fc>
 8009840:	e8df f003 	tbb	[pc, r3]
 8009844:	5637392c 	.word	0x5637392c
 8009848:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800984c:	441c      	add	r4, r3
 800984e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009852:	2b20      	cmp	r3, #32
 8009854:	bfc1      	itttt	gt
 8009856:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800985a:	fa09 f903 	lslgt.w	r9, r9, r3
 800985e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009862:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009866:	bfd6      	itet	le
 8009868:	f1c3 0320 	rsble	r3, r3, #32
 800986c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009870:	fa06 f003 	lslle.w	r0, r6, r3
 8009874:	f7f6 fe22 	bl	80004bc <__aeabi_ui2d>
 8009878:	2201      	movs	r2, #1
 800987a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800987e:	3c01      	subs	r4, #1
 8009880:	9213      	str	r2, [sp, #76]	; 0x4c
 8009882:	e76f      	b.n	8009764 <_dtoa_r+0x114>
 8009884:	2301      	movs	r3, #1
 8009886:	e7b3      	b.n	80097f0 <_dtoa_r+0x1a0>
 8009888:	900f      	str	r0, [sp, #60]	; 0x3c
 800988a:	e7b2      	b.n	80097f2 <_dtoa_r+0x1a2>
 800988c:	f1cb 0300 	rsb	r3, fp, #0
 8009890:	930a      	str	r3, [sp, #40]	; 0x28
 8009892:	2300      	movs	r3, #0
 8009894:	eba9 090b 	sub.w	r9, r9, fp
 8009898:	930e      	str	r3, [sp, #56]	; 0x38
 800989a:	e7c0      	b.n	800981e <_dtoa_r+0x1ce>
 800989c:	2300      	movs	r3, #0
 800989e:	930b      	str	r3, [sp, #44]	; 0x2c
 80098a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dc55      	bgt.n	8009952 <_dtoa_r+0x302>
 80098a6:	2301      	movs	r3, #1
 80098a8:	461a      	mov	r2, r3
 80098aa:	9306      	str	r3, [sp, #24]
 80098ac:	9308      	str	r3, [sp, #32]
 80098ae:	9223      	str	r2, [sp, #140]	; 0x8c
 80098b0:	e00b      	b.n	80098ca <_dtoa_r+0x27a>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e7f3      	b.n	800989e <_dtoa_r+0x24e>
 80098b6:	2300      	movs	r3, #0
 80098b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098bc:	445b      	add	r3, fp
 80098be:	9306      	str	r3, [sp, #24]
 80098c0:	3301      	adds	r3, #1
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	9308      	str	r3, [sp, #32]
 80098c6:	bfb8      	it	lt
 80098c8:	2301      	movlt	r3, #1
 80098ca:	2100      	movs	r1, #0
 80098cc:	2204      	movs	r2, #4
 80098ce:	69e8      	ldr	r0, [r5, #28]
 80098d0:	f102 0614 	add.w	r6, r2, #20
 80098d4:	429e      	cmp	r6, r3
 80098d6:	d940      	bls.n	800995a <_dtoa_r+0x30a>
 80098d8:	6041      	str	r1, [r0, #4]
 80098da:	4628      	mov	r0, r5
 80098dc:	f000 fd98 	bl	800a410 <_Balloc>
 80098e0:	9003      	str	r0, [sp, #12]
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d13c      	bne.n	8009960 <_dtoa_r+0x310>
 80098e6:	4602      	mov	r2, r0
 80098e8:	f240 11af 	movw	r1, #431	; 0x1af
 80098ec:	4b16      	ldr	r3, [pc, #88]	; (8009948 <_dtoa_r+0x2f8>)
 80098ee:	e6c3      	b.n	8009678 <_dtoa_r+0x28>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e7e1      	b.n	80098b8 <_dtoa_r+0x268>
 80098f4:	2401      	movs	r4, #1
 80098f6:	2300      	movs	r3, #0
 80098f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80098fa:	9322      	str	r3, [sp, #136]	; 0x88
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009900:	2200      	movs	r2, #0
 8009902:	9306      	str	r3, [sp, #24]
 8009904:	9308      	str	r3, [sp, #32]
 8009906:	2312      	movs	r3, #18
 8009908:	e7d1      	b.n	80098ae <_dtoa_r+0x25e>
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w
 8009910:	636f4361 	.word	0x636f4361
 8009914:	3fd287a7 	.word	0x3fd287a7
 8009918:	8b60c8b3 	.word	0x8b60c8b3
 800991c:	3fc68a28 	.word	0x3fc68a28
 8009920:	509f79fb 	.word	0x509f79fb
 8009924:	3fd34413 	.word	0x3fd34413
 8009928:	0800cccc 	.word	0x0800cccc
 800992c:	0800cce3 	.word	0x0800cce3
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	0800ccc8 	.word	0x0800ccc8
 8009938:	0800ccbf 	.word	0x0800ccbf
 800993c:	0800cc97 	.word	0x0800cc97
 8009940:	3ff80000 	.word	0x3ff80000
 8009944:	0800cdd0 	.word	0x0800cdd0
 8009948:	0800cd3b 	.word	0x0800cd3b
 800994c:	2301      	movs	r3, #1
 800994e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009950:	e7d4      	b.n	80098fc <_dtoa_r+0x2ac>
 8009952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009954:	9306      	str	r3, [sp, #24]
 8009956:	9308      	str	r3, [sp, #32]
 8009958:	e7b7      	b.n	80098ca <_dtoa_r+0x27a>
 800995a:	3101      	adds	r1, #1
 800995c:	0052      	lsls	r2, r2, #1
 800995e:	e7b7      	b.n	80098d0 <_dtoa_r+0x280>
 8009960:	69eb      	ldr	r3, [r5, #28]
 8009962:	9a03      	ldr	r2, [sp, #12]
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	9b08      	ldr	r3, [sp, #32]
 8009968:	2b0e      	cmp	r3, #14
 800996a:	f200 80a8 	bhi.w	8009abe <_dtoa_r+0x46e>
 800996e:	2c00      	cmp	r4, #0
 8009970:	f000 80a5 	beq.w	8009abe <_dtoa_r+0x46e>
 8009974:	f1bb 0f00 	cmp.w	fp, #0
 8009978:	dd34      	ble.n	80099e4 <_dtoa_r+0x394>
 800997a:	4b9a      	ldr	r3, [pc, #616]	; (8009be4 <_dtoa_r+0x594>)
 800997c:	f00b 020f 	and.w	r2, fp, #15
 8009980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009988:	e9d3 3400 	ldrd	r3, r4, [r3]
 800998c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009990:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009994:	d016      	beq.n	80099c4 <_dtoa_r+0x374>
 8009996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800999a:	4b93      	ldr	r3, [pc, #588]	; (8009be8 <_dtoa_r+0x598>)
 800999c:	2703      	movs	r7, #3
 800999e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099a2:	f7f6 ff2f 	bl	8000804 <__aeabi_ddiv>
 80099a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099aa:	f004 040f 	and.w	r4, r4, #15
 80099ae:	4e8e      	ldr	r6, [pc, #568]	; (8009be8 <_dtoa_r+0x598>)
 80099b0:	b954      	cbnz	r4, 80099c8 <_dtoa_r+0x378>
 80099b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099ba:	f7f6 ff23 	bl	8000804 <__aeabi_ddiv>
 80099be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099c2:	e029      	b.n	8009a18 <_dtoa_r+0x3c8>
 80099c4:	2702      	movs	r7, #2
 80099c6:	e7f2      	b.n	80099ae <_dtoa_r+0x35e>
 80099c8:	07e1      	lsls	r1, r4, #31
 80099ca:	d508      	bpl.n	80099de <_dtoa_r+0x38e>
 80099cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099d4:	f7f6 fdec 	bl	80005b0 <__aeabi_dmul>
 80099d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80099dc:	3701      	adds	r7, #1
 80099de:	1064      	asrs	r4, r4, #1
 80099e0:	3608      	adds	r6, #8
 80099e2:	e7e5      	b.n	80099b0 <_dtoa_r+0x360>
 80099e4:	f000 80a5 	beq.w	8009b32 <_dtoa_r+0x4e2>
 80099e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099ec:	f1cb 0400 	rsb	r4, fp, #0
 80099f0:	4b7c      	ldr	r3, [pc, #496]	; (8009be4 <_dtoa_r+0x594>)
 80099f2:	f004 020f 	and.w	r2, r4, #15
 80099f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f7f6 fdd7 	bl	80005b0 <__aeabi_dmul>
 8009a02:	2702      	movs	r7, #2
 8009a04:	2300      	movs	r3, #0
 8009a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a0a:	4e77      	ldr	r6, [pc, #476]	; (8009be8 <_dtoa_r+0x598>)
 8009a0c:	1124      	asrs	r4, r4, #4
 8009a0e:	2c00      	cmp	r4, #0
 8009a10:	f040 8084 	bne.w	8009b1c <_dtoa_r+0x4cc>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1d2      	bne.n	80099be <_dtoa_r+0x36e>
 8009a18:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 8087 	beq.w	8009b36 <_dtoa_r+0x4e6>
 8009a28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	4b6f      	ldr	r3, [pc, #444]	; (8009bec <_dtoa_r+0x59c>)
 8009a30:	f7f7 f830 	bl	8000a94 <__aeabi_dcmplt>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d07e      	beq.n	8009b36 <_dtoa_r+0x4e6>
 8009a38:	9b08      	ldr	r3, [sp, #32]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d07b      	beq.n	8009b36 <_dtoa_r+0x4e6>
 8009a3e:	9b06      	ldr	r3, [sp, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	dd38      	ble.n	8009ab6 <_dtoa_r+0x466>
 8009a44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4b69      	ldr	r3, [pc, #420]	; (8009bf0 <_dtoa_r+0x5a0>)
 8009a4c:	f7f6 fdb0 	bl	80005b0 <__aeabi_dmul>
 8009a50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a54:	9c06      	ldr	r4, [sp, #24]
 8009a56:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009a5a:	3701      	adds	r7, #1
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7f6 fd3d 	bl	80004dc <__aeabi_i2d>
 8009a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a66:	f7f6 fda3 	bl	80005b0 <__aeabi_dmul>
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	4b61      	ldr	r3, [pc, #388]	; (8009bf4 <_dtoa_r+0x5a4>)
 8009a6e:	f7f6 fbe9 	bl	8000244 <__adddf3>
 8009a72:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009a76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a7a:	9611      	str	r6, [sp, #68]	; 0x44
 8009a7c:	2c00      	cmp	r4, #0
 8009a7e:	d15d      	bne.n	8009b3c <_dtoa_r+0x4ec>
 8009a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a84:	2200      	movs	r2, #0
 8009a86:	4b5c      	ldr	r3, [pc, #368]	; (8009bf8 <_dtoa_r+0x5a8>)
 8009a88:	f7f6 fbda 	bl	8000240 <__aeabi_dsub>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a94:	4633      	mov	r3, r6
 8009a96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a98:	f7f7 f81a 	bl	8000ad0 <__aeabi_dcmpgt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f040 8295 	bne.w	8009fcc <_dtoa_r+0x97c>
 8009aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009aa8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009aac:	f7f6 fff2 	bl	8000a94 <__aeabi_dcmplt>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	f040 8289 	bne.w	8009fc8 <_dtoa_r+0x978>
 8009ab6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009aba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009abe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f2c0 8151 	blt.w	8009d68 <_dtoa_r+0x718>
 8009ac6:	f1bb 0f0e 	cmp.w	fp, #14
 8009aca:	f300 814d 	bgt.w	8009d68 <_dtoa_r+0x718>
 8009ace:	4b45      	ldr	r3, [pc, #276]	; (8009be4 <_dtoa_r+0x594>)
 8009ad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ad4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ad8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009adc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f280 80da 	bge.w	8009c98 <_dtoa_r+0x648>
 8009ae4:	9b08      	ldr	r3, [sp, #32]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f300 80d6 	bgt.w	8009c98 <_dtoa_r+0x648>
 8009aec:	f040 826b 	bne.w	8009fc6 <_dtoa_r+0x976>
 8009af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009af4:	2200      	movs	r2, #0
 8009af6:	4b40      	ldr	r3, [pc, #256]	; (8009bf8 <_dtoa_r+0x5a8>)
 8009af8:	f7f6 fd5a 	bl	80005b0 <__aeabi_dmul>
 8009afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b00:	f7f6 ffdc 	bl	8000abc <__aeabi_dcmpge>
 8009b04:	9c08      	ldr	r4, [sp, #32]
 8009b06:	4626      	mov	r6, r4
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f040 8241 	bne.w	8009f90 <_dtoa_r+0x940>
 8009b0e:	2331      	movs	r3, #49	; 0x31
 8009b10:	9f03      	ldr	r7, [sp, #12]
 8009b12:	f10b 0b01 	add.w	fp, fp, #1
 8009b16:	f807 3b01 	strb.w	r3, [r7], #1
 8009b1a:	e23d      	b.n	8009f98 <_dtoa_r+0x948>
 8009b1c:	07e2      	lsls	r2, r4, #31
 8009b1e:	d505      	bpl.n	8009b2c <_dtoa_r+0x4dc>
 8009b20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b24:	f7f6 fd44 	bl	80005b0 <__aeabi_dmul>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	3701      	adds	r7, #1
 8009b2c:	1064      	asrs	r4, r4, #1
 8009b2e:	3608      	adds	r6, #8
 8009b30:	e76d      	b.n	8009a0e <_dtoa_r+0x3be>
 8009b32:	2702      	movs	r7, #2
 8009b34:	e770      	b.n	8009a18 <_dtoa_r+0x3c8>
 8009b36:	46d8      	mov	r8, fp
 8009b38:	9c08      	ldr	r4, [sp, #32]
 8009b3a:	e78f      	b.n	8009a5c <_dtoa_r+0x40c>
 8009b3c:	9903      	ldr	r1, [sp, #12]
 8009b3e:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <_dtoa_r+0x594>)
 8009b40:	4421      	add	r1, r4
 8009b42:	9112      	str	r1, [sp, #72]	; 0x48
 8009b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b4a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009b4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b52:	2900      	cmp	r1, #0
 8009b54:	d054      	beq.n	8009c00 <_dtoa_r+0x5b0>
 8009b56:	2000      	movs	r0, #0
 8009b58:	4928      	ldr	r1, [pc, #160]	; (8009bfc <_dtoa_r+0x5ac>)
 8009b5a:	f7f6 fe53 	bl	8000804 <__aeabi_ddiv>
 8009b5e:	463b      	mov	r3, r7
 8009b60:	4632      	mov	r2, r6
 8009b62:	f7f6 fb6d 	bl	8000240 <__aeabi_dsub>
 8009b66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b6a:	9f03      	ldr	r7, [sp, #12]
 8009b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b70:	f7f6 ffce 	bl	8000b10 <__aeabi_d2iz>
 8009b74:	4604      	mov	r4, r0
 8009b76:	f7f6 fcb1 	bl	80004dc <__aeabi_i2d>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b82:	f7f6 fb5d 	bl	8000240 <__aeabi_dsub>
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	3430      	adds	r4, #48	; 0x30
 8009b8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b94:	f807 4b01 	strb.w	r4, [r7], #1
 8009b98:	f7f6 ff7c 	bl	8000a94 <__aeabi_dcmplt>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d173      	bne.n	8009c88 <_dtoa_r+0x638>
 8009ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	4911      	ldr	r1, [pc, #68]	; (8009bec <_dtoa_r+0x59c>)
 8009ba8:	f7f6 fb4a 	bl	8000240 <__aeabi_dsub>
 8009bac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bb0:	f7f6 ff70 	bl	8000a94 <__aeabi_dcmplt>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f040 80b6 	bne.w	8009d26 <_dtoa_r+0x6d6>
 8009bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bbc:	429f      	cmp	r7, r3
 8009bbe:	f43f af7a 	beq.w	8009ab6 <_dtoa_r+0x466>
 8009bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <_dtoa_r+0x5a0>)
 8009bca:	f7f6 fcf1 	bl	80005b0 <__aeabi_dmul>
 8009bce:	2200      	movs	r2, #0
 8009bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd8:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <_dtoa_r+0x5a0>)
 8009bda:	f7f6 fce9 	bl	80005b0 <__aeabi_dmul>
 8009bde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009be2:	e7c3      	b.n	8009b6c <_dtoa_r+0x51c>
 8009be4:	0800cdd0 	.word	0x0800cdd0
 8009be8:	0800cda8 	.word	0x0800cda8
 8009bec:	3ff00000 	.word	0x3ff00000
 8009bf0:	40240000 	.word	0x40240000
 8009bf4:	401c0000 	.word	0x401c0000
 8009bf8:	40140000 	.word	0x40140000
 8009bfc:	3fe00000 	.word	0x3fe00000
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 fcd4 	bl	80005b0 <__aeabi_dmul>
 8009c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c0e:	9c03      	ldr	r4, [sp, #12]
 8009c10:	9314      	str	r3, [sp, #80]	; 0x50
 8009c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c16:	f7f6 ff7b 	bl	8000b10 <__aeabi_d2iz>
 8009c1a:	9015      	str	r0, [sp, #84]	; 0x54
 8009c1c:	f7f6 fc5e 	bl	80004dc <__aeabi_i2d>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c28:	f7f6 fb0a 	bl	8000240 <__aeabi_dsub>
 8009c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2e:	4606      	mov	r6, r0
 8009c30:	3330      	adds	r3, #48	; 0x30
 8009c32:	f804 3b01 	strb.w	r3, [r4], #1
 8009c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c38:	460f      	mov	r7, r1
 8009c3a:	429c      	cmp	r4, r3
 8009c3c:	f04f 0200 	mov.w	r2, #0
 8009c40:	d124      	bne.n	8009c8c <_dtoa_r+0x63c>
 8009c42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c46:	4baf      	ldr	r3, [pc, #700]	; (8009f04 <_dtoa_r+0x8b4>)
 8009c48:	f7f6 fafc 	bl	8000244 <__adddf3>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 ff3c 	bl	8000ad0 <__aeabi_dcmpgt>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d163      	bne.n	8009d24 <_dtoa_r+0x6d4>
 8009c5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c60:	2000      	movs	r0, #0
 8009c62:	49a8      	ldr	r1, [pc, #672]	; (8009f04 <_dtoa_r+0x8b4>)
 8009c64:	f7f6 faec 	bl	8000240 <__aeabi_dsub>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 ff10 	bl	8000a94 <__aeabi_dcmplt>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f43f af1e 	beq.w	8009ab6 <_dtoa_r+0x466>
 8009c7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009c7c:	1e7b      	subs	r3, r7, #1
 8009c7e:	9314      	str	r3, [sp, #80]	; 0x50
 8009c80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009c84:	2b30      	cmp	r3, #48	; 0x30
 8009c86:	d0f8      	beq.n	8009c7a <_dtoa_r+0x62a>
 8009c88:	46c3      	mov	fp, r8
 8009c8a:	e03b      	b.n	8009d04 <_dtoa_r+0x6b4>
 8009c8c:	4b9e      	ldr	r3, [pc, #632]	; (8009f08 <_dtoa_r+0x8b8>)
 8009c8e:	f7f6 fc8f 	bl	80005b0 <__aeabi_dmul>
 8009c92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c96:	e7bc      	b.n	8009c12 <_dtoa_r+0x5c2>
 8009c98:	9f03      	ldr	r7, [sp, #12]
 8009c9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009c9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	f7f6 fdad 	bl	8000804 <__aeabi_ddiv>
 8009caa:	f7f6 ff31 	bl	8000b10 <__aeabi_d2iz>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	f7f6 fc14 	bl	80004dc <__aeabi_i2d>
 8009cb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cb8:	f7f6 fc7a 	bl	80005b0 <__aeabi_dmul>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 fabc 	bl	8000240 <__aeabi_dsub>
 8009cc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009ccc:	f807 6b01 	strb.w	r6, [r7], #1
 8009cd0:	9e03      	ldr	r6, [sp, #12]
 8009cd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009cd6:	1bbe      	subs	r6, r7, r6
 8009cd8:	45b4      	cmp	ip, r6
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	d136      	bne.n	8009d4e <_dtoa_r+0x6fe>
 8009ce0:	f7f6 fab0 	bl	8000244 <__adddf3>
 8009ce4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ce8:	4680      	mov	r8, r0
 8009cea:	4689      	mov	r9, r1
 8009cec:	f7f6 fef0 	bl	8000ad0 <__aeabi_dcmpgt>
 8009cf0:	bb58      	cbnz	r0, 8009d4a <_dtoa_r+0x6fa>
 8009cf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	f7f6 fec1 	bl	8000a80 <__aeabi_dcmpeq>
 8009cfe:	b108      	cbz	r0, 8009d04 <_dtoa_r+0x6b4>
 8009d00:	07e3      	lsls	r3, r4, #31
 8009d02:	d422      	bmi.n	8009d4a <_dtoa_r+0x6fa>
 8009d04:	4651      	mov	r1, sl
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 fbc2 	bl	800a490 <_Bfree>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d10:	703b      	strb	r3, [r7, #0]
 8009d12:	f10b 0301 	add.w	r3, fp, #1
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f43f ace6 	beq.w	80096ec <_dtoa_r+0x9c>
 8009d20:	601f      	str	r7, [r3, #0]
 8009d22:	e4e3      	b.n	80096ec <_dtoa_r+0x9c>
 8009d24:	4627      	mov	r7, r4
 8009d26:	463b      	mov	r3, r7
 8009d28:	461f      	mov	r7, r3
 8009d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d2e:	2a39      	cmp	r2, #57	; 0x39
 8009d30:	d107      	bne.n	8009d42 <_dtoa_r+0x6f2>
 8009d32:	9a03      	ldr	r2, [sp, #12]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d1f7      	bne.n	8009d28 <_dtoa_r+0x6d8>
 8009d38:	2230      	movs	r2, #48	; 0x30
 8009d3a:	9903      	ldr	r1, [sp, #12]
 8009d3c:	f108 0801 	add.w	r8, r8, #1
 8009d40:	700a      	strb	r2, [r1, #0]
 8009d42:	781a      	ldrb	r2, [r3, #0]
 8009d44:	3201      	adds	r2, #1
 8009d46:	701a      	strb	r2, [r3, #0]
 8009d48:	e79e      	b.n	8009c88 <_dtoa_r+0x638>
 8009d4a:	46d8      	mov	r8, fp
 8009d4c:	e7eb      	b.n	8009d26 <_dtoa_r+0x6d6>
 8009d4e:	2200      	movs	r2, #0
 8009d50:	4b6d      	ldr	r3, [pc, #436]	; (8009f08 <_dtoa_r+0x8b8>)
 8009d52:	f7f6 fc2d 	bl	80005b0 <__aeabi_dmul>
 8009d56:	2200      	movs	r2, #0
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	4689      	mov	r9, r1
 8009d5e:	f7f6 fe8f 	bl	8000a80 <__aeabi_dcmpeq>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d09b      	beq.n	8009c9e <_dtoa_r+0x64e>
 8009d66:	e7cd      	b.n	8009d04 <_dtoa_r+0x6b4>
 8009d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	f000 80c4 	beq.w	8009ef8 <_dtoa_r+0x8a8>
 8009d70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d72:	2a01      	cmp	r2, #1
 8009d74:	f300 80a8 	bgt.w	8009ec8 <_dtoa_r+0x878>
 8009d78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	f000 80a0 	beq.w	8009ec0 <_dtoa_r+0x870>
 8009d80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d84:	464f      	mov	r7, r9
 8009d86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	441a      	add	r2, r3
 8009d8e:	4628      	mov	r0, r5
 8009d90:	4499      	add	r9, r3
 8009d92:	9209      	str	r2, [sp, #36]	; 0x24
 8009d94:	f000 fc7c 	bl	800a690 <__i2b>
 8009d98:	4606      	mov	r6, r0
 8009d9a:	b15f      	cbz	r7, 8009db4 <_dtoa_r+0x764>
 8009d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	dd08      	ble.n	8009db4 <_dtoa_r+0x764>
 8009da2:	42bb      	cmp	r3, r7
 8009da4:	bfa8      	it	ge
 8009da6:	463b      	movge	r3, r7
 8009da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009daa:	eba9 0903 	sub.w	r9, r9, r3
 8009dae:	1aff      	subs	r7, r7, r3
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	9309      	str	r3, [sp, #36]	; 0x24
 8009db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db6:	b1f3      	cbz	r3, 8009df6 <_dtoa_r+0x7a6>
 8009db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80a0 	beq.w	8009f00 <_dtoa_r+0x8b0>
 8009dc0:	2c00      	cmp	r4, #0
 8009dc2:	dd10      	ble.n	8009de6 <_dtoa_r+0x796>
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f000 fd1f 	bl	800a80c <__pow5mult>
 8009dce:	4652      	mov	r2, sl
 8009dd0:	4601      	mov	r1, r0
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 fc71 	bl	800a6bc <__multiply>
 8009dda:	4680      	mov	r8, r0
 8009ddc:	4651      	mov	r1, sl
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 fb56 	bl	800a490 <_Bfree>
 8009de4:	46c2      	mov	sl, r8
 8009de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009de8:	1b1a      	subs	r2, r3, r4
 8009dea:	d004      	beq.n	8009df6 <_dtoa_r+0x7a6>
 8009dec:	4651      	mov	r1, sl
 8009dee:	4628      	mov	r0, r5
 8009df0:	f000 fd0c 	bl	800a80c <__pow5mult>
 8009df4:	4682      	mov	sl, r0
 8009df6:	2101      	movs	r1, #1
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 fc49 	bl	800a690 <__i2b>
 8009dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e00:	4604      	mov	r4, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f340 8082 	ble.w	8009f0c <_dtoa_r+0x8bc>
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f000 fcfd 	bl	800a80c <__pow5mult>
 8009e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e14:	4604      	mov	r4, r0
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	dd7b      	ble.n	8009f12 <_dtoa_r+0x8c2>
 8009e1a:	f04f 0800 	mov.w	r8, #0
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e24:	6918      	ldr	r0, [r3, #16]
 8009e26:	f000 fbe5 	bl	800a5f4 <__hi0bits>
 8009e2a:	f1c0 0020 	rsb	r0, r0, #32
 8009e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e30:	4418      	add	r0, r3
 8009e32:	f010 001f 	ands.w	r0, r0, #31
 8009e36:	f000 8092 	beq.w	8009f5e <_dtoa_r+0x90e>
 8009e3a:	f1c0 0320 	rsb	r3, r0, #32
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	f340 8085 	ble.w	8009f4e <_dtoa_r+0x8fe>
 8009e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e46:	f1c0 001c 	rsb	r0, r0, #28
 8009e4a:	4403      	add	r3, r0
 8009e4c:	4481      	add	r9, r0
 8009e4e:	4407      	add	r7, r0
 8009e50:	9309      	str	r3, [sp, #36]	; 0x24
 8009e52:	f1b9 0f00 	cmp.w	r9, #0
 8009e56:	dd05      	ble.n	8009e64 <_dtoa_r+0x814>
 8009e58:	4651      	mov	r1, sl
 8009e5a:	464a      	mov	r2, r9
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f000 fd2f 	bl	800a8c0 <__lshift>
 8009e62:	4682      	mov	sl, r0
 8009e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd05      	ble.n	8009e76 <_dtoa_r+0x826>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 fd26 	bl	800a8c0 <__lshift>
 8009e74:	4604      	mov	r4, r0
 8009e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d072      	beq.n	8009f62 <_dtoa_r+0x912>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4650      	mov	r0, sl
 8009e80:	f000 fd8a 	bl	800a998 <__mcmp>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	da6c      	bge.n	8009f62 <_dtoa_r+0x912>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4651      	mov	r1, sl
 8009e8c:	220a      	movs	r2, #10
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 fb20 	bl	800a4d4 <__multadd>
 8009e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e96:	4682      	mov	sl, r0
 8009e98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 81ac 	beq.w	800a1fa <_dtoa_r+0xbaa>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	220a      	movs	r2, #10
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	f000 fb13 	bl	800a4d4 <__multadd>
 8009eae:	9b06      	ldr	r3, [sp, #24]
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f300 8093 	bgt.w	8009fde <_dtoa_r+0x98e>
 8009eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	dc59      	bgt.n	8009f72 <_dtoa_r+0x922>
 8009ebe:	e08e      	b.n	8009fde <_dtoa_r+0x98e>
 8009ec0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ec2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ec6:	e75d      	b.n	8009d84 <_dtoa_r+0x734>
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	1e5c      	subs	r4, r3, #1
 8009ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	bfbf      	itttt	lt
 8009ed2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ed4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009ed6:	1ae3      	sublt	r3, r4, r3
 8009ed8:	18d2      	addlt	r2, r2, r3
 8009eda:	bfa8      	it	ge
 8009edc:	1b1c      	subge	r4, r3, r4
 8009ede:	9b08      	ldr	r3, [sp, #32]
 8009ee0:	bfbe      	ittt	lt
 8009ee2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009ee4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009ee6:	2400      	movlt	r4, #0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bfb5      	itete	lt
 8009eec:	eba9 0703 	sublt.w	r7, r9, r3
 8009ef0:	464f      	movge	r7, r9
 8009ef2:	2300      	movlt	r3, #0
 8009ef4:	9b08      	ldrge	r3, [sp, #32]
 8009ef6:	e747      	b.n	8009d88 <_dtoa_r+0x738>
 8009ef8:	464f      	mov	r7, r9
 8009efa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009efc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009efe:	e74c      	b.n	8009d9a <_dtoa_r+0x74a>
 8009f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f02:	e773      	b.n	8009dec <_dtoa_r+0x79c>
 8009f04:	3fe00000 	.word	0x3fe00000
 8009f08:	40240000 	.word	0x40240000
 8009f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	dc18      	bgt.n	8009f44 <_dtoa_r+0x8f4>
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	b9b3      	cbnz	r3, 8009f44 <_dtoa_r+0x8f4>
 8009f16:	9b05      	ldr	r3, [sp, #20]
 8009f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f1c:	b993      	cbnz	r3, 8009f44 <_dtoa_r+0x8f4>
 8009f1e:	9b05      	ldr	r3, [sp, #20]
 8009f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f24:	0d1b      	lsrs	r3, r3, #20
 8009f26:	051b      	lsls	r3, r3, #20
 8009f28:	b17b      	cbz	r3, 8009f4a <_dtoa_r+0x8fa>
 8009f2a:	f04f 0801 	mov.w	r8, #1
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	f109 0901 	add.w	r9, r9, #1
 8009f34:	3301      	adds	r3, #1
 8009f36:	9309      	str	r3, [sp, #36]	; 0x24
 8009f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f47f af6f 	bne.w	8009e1e <_dtoa_r+0x7ce>
 8009f40:	2001      	movs	r0, #1
 8009f42:	e774      	b.n	8009e2e <_dtoa_r+0x7de>
 8009f44:	f04f 0800 	mov.w	r8, #0
 8009f48:	e7f6      	b.n	8009f38 <_dtoa_r+0x8e8>
 8009f4a:	4698      	mov	r8, r3
 8009f4c:	e7f4      	b.n	8009f38 <_dtoa_r+0x8e8>
 8009f4e:	d080      	beq.n	8009e52 <_dtoa_r+0x802>
 8009f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f52:	331c      	adds	r3, #28
 8009f54:	441a      	add	r2, r3
 8009f56:	4499      	add	r9, r3
 8009f58:	441f      	add	r7, r3
 8009f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f5c:	e779      	b.n	8009e52 <_dtoa_r+0x802>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	e7f6      	b.n	8009f50 <_dtoa_r+0x900>
 8009f62:	9b08      	ldr	r3, [sp, #32]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	dc34      	bgt.n	8009fd2 <_dtoa_r+0x982>
 8009f68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	dd31      	ble.n	8009fd2 <_dtoa_r+0x982>
 8009f6e:	9b08      	ldr	r3, [sp, #32]
 8009f70:	9306      	str	r3, [sp, #24]
 8009f72:	9b06      	ldr	r3, [sp, #24]
 8009f74:	b963      	cbnz	r3, 8009f90 <_dtoa_r+0x940>
 8009f76:	4621      	mov	r1, r4
 8009f78:	2205      	movs	r2, #5
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 faaa 	bl	800a4d4 <__multadd>
 8009f80:	4601      	mov	r1, r0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4650      	mov	r0, sl
 8009f86:	f000 fd07 	bl	800a998 <__mcmp>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	f73f adbf 	bgt.w	8009b0e <_dtoa_r+0x4be>
 8009f90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f92:	9f03      	ldr	r7, [sp, #12]
 8009f94:	ea6f 0b03 	mvn.w	fp, r3
 8009f98:	f04f 0800 	mov.w	r8, #0
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 fa76 	bl	800a490 <_Bfree>
 8009fa4:	2e00      	cmp	r6, #0
 8009fa6:	f43f aead 	beq.w	8009d04 <_dtoa_r+0x6b4>
 8009faa:	f1b8 0f00 	cmp.w	r8, #0
 8009fae:	d005      	beq.n	8009fbc <_dtoa_r+0x96c>
 8009fb0:	45b0      	cmp	r8, r6
 8009fb2:	d003      	beq.n	8009fbc <_dtoa_r+0x96c>
 8009fb4:	4641      	mov	r1, r8
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 fa6a 	bl	800a490 <_Bfree>
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 fa66 	bl	800a490 <_Bfree>
 8009fc4:	e69e      	b.n	8009d04 <_dtoa_r+0x6b4>
 8009fc6:	2400      	movs	r4, #0
 8009fc8:	4626      	mov	r6, r4
 8009fca:	e7e1      	b.n	8009f90 <_dtoa_r+0x940>
 8009fcc:	46c3      	mov	fp, r8
 8009fce:	4626      	mov	r6, r4
 8009fd0:	e59d      	b.n	8009b0e <_dtoa_r+0x4be>
 8009fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80c8 	beq.w	800a16a <_dtoa_r+0xb1a>
 8009fda:	9b08      	ldr	r3, [sp, #32]
 8009fdc:	9306      	str	r3, [sp, #24]
 8009fde:	2f00      	cmp	r7, #0
 8009fe0:	dd05      	ble.n	8009fee <_dtoa_r+0x99e>
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	463a      	mov	r2, r7
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 fc6a 	bl	800a8c0 <__lshift>
 8009fec:	4606      	mov	r6, r0
 8009fee:	f1b8 0f00 	cmp.w	r8, #0
 8009ff2:	d05b      	beq.n	800a0ac <_dtoa_r+0xa5c>
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	6871      	ldr	r1, [r6, #4]
 8009ff8:	f000 fa0a 	bl	800a410 <_Balloc>
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	b928      	cbnz	r0, 800a00c <_dtoa_r+0x9bc>
 800a000:	4602      	mov	r2, r0
 800a002:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a006:	4b81      	ldr	r3, [pc, #516]	; (800a20c <_dtoa_r+0xbbc>)
 800a008:	f7ff bb36 	b.w	8009678 <_dtoa_r+0x28>
 800a00c:	6932      	ldr	r2, [r6, #16]
 800a00e:	f106 010c 	add.w	r1, r6, #12
 800a012:	3202      	adds	r2, #2
 800a014:	0092      	lsls	r2, r2, #2
 800a016:	300c      	adds	r0, #12
 800a018:	f002 f96c 	bl	800c2f4 <memcpy>
 800a01c:	2201      	movs	r2, #1
 800a01e:	4639      	mov	r1, r7
 800a020:	4628      	mov	r0, r5
 800a022:	f000 fc4d 	bl	800a8c0 <__lshift>
 800a026:	46b0      	mov	r8, r6
 800a028:	4606      	mov	r6, r0
 800a02a:	9b03      	ldr	r3, [sp, #12]
 800a02c:	9a03      	ldr	r2, [sp, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	9308      	str	r3, [sp, #32]
 800a032:	9b06      	ldr	r3, [sp, #24]
 800a034:	4413      	add	r3, r2
 800a036:	930b      	str	r3, [sp, #44]	; 0x2c
 800a038:	9b04      	ldr	r3, [sp, #16]
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	930a      	str	r3, [sp, #40]	; 0x28
 800a040:	9b08      	ldr	r3, [sp, #32]
 800a042:	4621      	mov	r1, r4
 800a044:	3b01      	subs	r3, #1
 800a046:	4650      	mov	r0, sl
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	f7ff fa77 	bl	800953c <quorem>
 800a04e:	4641      	mov	r1, r8
 800a050:	9006      	str	r0, [sp, #24]
 800a052:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a056:	4650      	mov	r0, sl
 800a058:	f000 fc9e 	bl	800a998 <__mcmp>
 800a05c:	4632      	mov	r2, r6
 800a05e:	9009      	str	r0, [sp, #36]	; 0x24
 800a060:	4621      	mov	r1, r4
 800a062:	4628      	mov	r0, r5
 800a064:	f000 fcb4 	bl	800a9d0 <__mdiff>
 800a068:	68c2      	ldr	r2, [r0, #12]
 800a06a:	4607      	mov	r7, r0
 800a06c:	bb02      	cbnz	r2, 800a0b0 <_dtoa_r+0xa60>
 800a06e:	4601      	mov	r1, r0
 800a070:	4650      	mov	r0, sl
 800a072:	f000 fc91 	bl	800a998 <__mcmp>
 800a076:	4602      	mov	r2, r0
 800a078:	4639      	mov	r1, r7
 800a07a:	4628      	mov	r0, r5
 800a07c:	920c      	str	r2, [sp, #48]	; 0x30
 800a07e:	f000 fa07 	bl	800a490 <_Bfree>
 800a082:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a086:	9f08      	ldr	r7, [sp, #32]
 800a088:	ea43 0102 	orr.w	r1, r3, r2
 800a08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08e:	4319      	orrs	r1, r3
 800a090:	d110      	bne.n	800a0b4 <_dtoa_r+0xa64>
 800a092:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a096:	d029      	beq.n	800a0ec <_dtoa_r+0xa9c>
 800a098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dd02      	ble.n	800a0a4 <_dtoa_r+0xa54>
 800a09e:	9b06      	ldr	r3, [sp, #24]
 800a0a0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a0a4:	9b04      	ldr	r3, [sp, #16]
 800a0a6:	f883 9000 	strb.w	r9, [r3]
 800a0aa:	e777      	b.n	8009f9c <_dtoa_r+0x94c>
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	e7ba      	b.n	800a026 <_dtoa_r+0x9d6>
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	e7e1      	b.n	800a078 <_dtoa_r+0xa28>
 800a0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	db04      	blt.n	800a0c4 <_dtoa_r+0xa74>
 800a0ba:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a0bc:	430b      	orrs	r3, r1
 800a0be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	d120      	bne.n	800a106 <_dtoa_r+0xab6>
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	dded      	ble.n	800a0a4 <_dtoa_r+0xa54>
 800a0c8:	4651      	mov	r1, sl
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 fbf7 	bl	800a8c0 <__lshift>
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	f000 fc5f 	bl	800a998 <__mcmp>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	dc03      	bgt.n	800a0e6 <_dtoa_r+0xa96>
 800a0de:	d1e1      	bne.n	800a0a4 <_dtoa_r+0xa54>
 800a0e0:	f019 0f01 	tst.w	r9, #1
 800a0e4:	d0de      	beq.n	800a0a4 <_dtoa_r+0xa54>
 800a0e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a0ea:	d1d8      	bne.n	800a09e <_dtoa_r+0xa4e>
 800a0ec:	2339      	movs	r3, #57	; 0x39
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	7013      	strb	r3, [r2, #0]
 800a0f2:	463b      	mov	r3, r7
 800a0f4:	461f      	mov	r7, r3
 800a0f6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	2a39      	cmp	r2, #57	; 0x39
 800a0fe:	d06b      	beq.n	800a1d8 <_dtoa_r+0xb88>
 800a100:	3201      	adds	r2, #1
 800a102:	701a      	strb	r2, [r3, #0]
 800a104:	e74a      	b.n	8009f9c <_dtoa_r+0x94c>
 800a106:	2a00      	cmp	r2, #0
 800a108:	dd07      	ble.n	800a11a <_dtoa_r+0xaca>
 800a10a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a10e:	d0ed      	beq.n	800a0ec <_dtoa_r+0xa9c>
 800a110:	9a04      	ldr	r2, [sp, #16]
 800a112:	f109 0301 	add.w	r3, r9, #1
 800a116:	7013      	strb	r3, [r2, #0]
 800a118:	e740      	b.n	8009f9c <_dtoa_r+0x94c>
 800a11a:	9b08      	ldr	r3, [sp, #32]
 800a11c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a11e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a122:	4293      	cmp	r3, r2
 800a124:	d042      	beq.n	800a1ac <_dtoa_r+0xb5c>
 800a126:	4651      	mov	r1, sl
 800a128:	2300      	movs	r3, #0
 800a12a:	220a      	movs	r2, #10
 800a12c:	4628      	mov	r0, r5
 800a12e:	f000 f9d1 	bl	800a4d4 <__multadd>
 800a132:	45b0      	cmp	r8, r6
 800a134:	4682      	mov	sl, r0
 800a136:	f04f 0300 	mov.w	r3, #0
 800a13a:	f04f 020a 	mov.w	r2, #10
 800a13e:	4641      	mov	r1, r8
 800a140:	4628      	mov	r0, r5
 800a142:	d107      	bne.n	800a154 <_dtoa_r+0xb04>
 800a144:	f000 f9c6 	bl	800a4d4 <__multadd>
 800a148:	4680      	mov	r8, r0
 800a14a:	4606      	mov	r6, r0
 800a14c:	9b08      	ldr	r3, [sp, #32]
 800a14e:	3301      	adds	r3, #1
 800a150:	9308      	str	r3, [sp, #32]
 800a152:	e775      	b.n	800a040 <_dtoa_r+0x9f0>
 800a154:	f000 f9be 	bl	800a4d4 <__multadd>
 800a158:	4631      	mov	r1, r6
 800a15a:	4680      	mov	r8, r0
 800a15c:	2300      	movs	r3, #0
 800a15e:	220a      	movs	r2, #10
 800a160:	4628      	mov	r0, r5
 800a162:	f000 f9b7 	bl	800a4d4 <__multadd>
 800a166:	4606      	mov	r6, r0
 800a168:	e7f0      	b.n	800a14c <_dtoa_r+0xafc>
 800a16a:	9b08      	ldr	r3, [sp, #32]
 800a16c:	9306      	str	r3, [sp, #24]
 800a16e:	9f03      	ldr	r7, [sp, #12]
 800a170:	4621      	mov	r1, r4
 800a172:	4650      	mov	r0, sl
 800a174:	f7ff f9e2 	bl	800953c <quorem>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a17e:	f807 9b01 	strb.w	r9, [r7], #1
 800a182:	1afa      	subs	r2, r7, r3
 800a184:	9b06      	ldr	r3, [sp, #24]
 800a186:	4293      	cmp	r3, r2
 800a188:	dd07      	ble.n	800a19a <_dtoa_r+0xb4a>
 800a18a:	4651      	mov	r1, sl
 800a18c:	2300      	movs	r3, #0
 800a18e:	220a      	movs	r2, #10
 800a190:	4628      	mov	r0, r5
 800a192:	f000 f99f 	bl	800a4d4 <__multadd>
 800a196:	4682      	mov	sl, r0
 800a198:	e7ea      	b.n	800a170 <_dtoa_r+0xb20>
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bfcc      	ite	gt
 800a1a4:	461f      	movgt	r7, r3
 800a1a6:	2701      	movle	r7, #1
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	441f      	add	r7, r3
 800a1ac:	4651      	mov	r1, sl
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f000 fb85 	bl	800a8c0 <__lshift>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4682      	mov	sl, r0
 800a1ba:	f000 fbed 	bl	800a998 <__mcmp>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	dc97      	bgt.n	800a0f2 <_dtoa_r+0xaa2>
 800a1c2:	d102      	bne.n	800a1ca <_dtoa_r+0xb7a>
 800a1c4:	f019 0f01 	tst.w	r9, #1
 800a1c8:	d193      	bne.n	800a0f2 <_dtoa_r+0xaa2>
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	461f      	mov	r7, r3
 800a1ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1d2:	2a30      	cmp	r2, #48	; 0x30
 800a1d4:	d0fa      	beq.n	800a1cc <_dtoa_r+0xb7c>
 800a1d6:	e6e1      	b.n	8009f9c <_dtoa_r+0x94c>
 800a1d8:	9a03      	ldr	r2, [sp, #12]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d18a      	bne.n	800a0f4 <_dtoa_r+0xaa4>
 800a1de:	2331      	movs	r3, #49	; 0x31
 800a1e0:	f10b 0b01 	add.w	fp, fp, #1
 800a1e4:	e797      	b.n	800a116 <_dtoa_r+0xac6>
 800a1e6:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <_dtoa_r+0xbc0>)
 800a1e8:	f7ff ba9f 	b.w	800972a <_dtoa_r+0xda>
 800a1ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f47f aa77 	bne.w	80096e2 <_dtoa_r+0x92>
 800a1f4:	4b07      	ldr	r3, [pc, #28]	; (800a214 <_dtoa_r+0xbc4>)
 800a1f6:	f7ff ba98 	b.w	800972a <_dtoa_r+0xda>
 800a1fa:	9b06      	ldr	r3, [sp, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dcb6      	bgt.n	800a16e <_dtoa_r+0xb1e>
 800a200:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a202:	2b02      	cmp	r3, #2
 800a204:	f73f aeb5 	bgt.w	8009f72 <_dtoa_r+0x922>
 800a208:	e7b1      	b.n	800a16e <_dtoa_r+0xb1e>
 800a20a:	bf00      	nop
 800a20c:	0800cd3b 	.word	0x0800cd3b
 800a210:	0800cc96 	.word	0x0800cc96
 800a214:	0800ccbf 	.word	0x0800ccbf

0800a218 <_free_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4605      	mov	r5, r0
 800a21c:	2900      	cmp	r1, #0
 800a21e:	d040      	beq.n	800a2a2 <_free_r+0x8a>
 800a220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a224:	1f0c      	subs	r4, r1, #4
 800a226:	2b00      	cmp	r3, #0
 800a228:	bfb8      	it	lt
 800a22a:	18e4      	addlt	r4, r4, r3
 800a22c:	f000 f8e4 	bl	800a3f8 <__malloc_lock>
 800a230:	4a1c      	ldr	r2, [pc, #112]	; (800a2a4 <_free_r+0x8c>)
 800a232:	6813      	ldr	r3, [r2, #0]
 800a234:	b933      	cbnz	r3, 800a244 <_free_r+0x2c>
 800a236:	6063      	str	r3, [r4, #4]
 800a238:	6014      	str	r4, [r2, #0]
 800a23a:	4628      	mov	r0, r5
 800a23c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a240:	f000 b8e0 	b.w	800a404 <__malloc_unlock>
 800a244:	42a3      	cmp	r3, r4
 800a246:	d908      	bls.n	800a25a <_free_r+0x42>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	1821      	adds	r1, r4, r0
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf01      	itttt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	1809      	addeq	r1, r1, r0
 800a256:	6021      	streq	r1, [r4, #0]
 800a258:	e7ed      	b.n	800a236 <_free_r+0x1e>
 800a25a:	461a      	mov	r2, r3
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	b10b      	cbz	r3, 800a264 <_free_r+0x4c>
 800a260:	42a3      	cmp	r3, r4
 800a262:	d9fa      	bls.n	800a25a <_free_r+0x42>
 800a264:	6811      	ldr	r1, [r2, #0]
 800a266:	1850      	adds	r0, r2, r1
 800a268:	42a0      	cmp	r0, r4
 800a26a:	d10b      	bne.n	800a284 <_free_r+0x6c>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	4401      	add	r1, r0
 800a270:	1850      	adds	r0, r2, r1
 800a272:	4283      	cmp	r3, r0
 800a274:	6011      	str	r1, [r2, #0]
 800a276:	d1e0      	bne.n	800a23a <_free_r+0x22>
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	4408      	add	r0, r1
 800a27e:	6010      	str	r0, [r2, #0]
 800a280:	6053      	str	r3, [r2, #4]
 800a282:	e7da      	b.n	800a23a <_free_r+0x22>
 800a284:	d902      	bls.n	800a28c <_free_r+0x74>
 800a286:	230c      	movs	r3, #12
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	e7d6      	b.n	800a23a <_free_r+0x22>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	1821      	adds	r1, r4, r0
 800a290:	428b      	cmp	r3, r1
 800a292:	bf01      	itttt	eq
 800a294:	6819      	ldreq	r1, [r3, #0]
 800a296:	685b      	ldreq	r3, [r3, #4]
 800a298:	1809      	addeq	r1, r1, r0
 800a29a:	6021      	streq	r1, [r4, #0]
 800a29c:	6063      	str	r3, [r4, #4]
 800a29e:	6054      	str	r4, [r2, #4]
 800a2a0:	e7cb      	b.n	800a23a <_free_r+0x22>
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20004550 	.word	0x20004550

0800a2a8 <malloc>:
 800a2a8:	4b02      	ldr	r3, [pc, #8]	; (800a2b4 <malloc+0xc>)
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	6818      	ldr	r0, [r3, #0]
 800a2ae:	f000 b823 	b.w	800a2f8 <_malloc_r>
 800a2b2:	bf00      	nop
 800a2b4:	20000074 	.word	0x20000074

0800a2b8 <sbrk_aligned>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	4e0e      	ldr	r6, [pc, #56]	; (800a2f4 <sbrk_aligned+0x3c>)
 800a2bc:	460c      	mov	r4, r1
 800a2be:	6831      	ldr	r1, [r6, #0]
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	b911      	cbnz	r1, 800a2ca <sbrk_aligned+0x12>
 800a2c4:	f002 f806 	bl	800c2d4 <_sbrk_r>
 800a2c8:	6030      	str	r0, [r6, #0]
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	f002 f801 	bl	800c2d4 <_sbrk_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d00a      	beq.n	800a2ec <sbrk_aligned+0x34>
 800a2d6:	1cc4      	adds	r4, r0, #3
 800a2d8:	f024 0403 	bic.w	r4, r4, #3
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d007      	beq.n	800a2f0 <sbrk_aligned+0x38>
 800a2e0:	1a21      	subs	r1, r4, r0
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f001 fff6 	bl	800c2d4 <_sbrk_r>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d101      	bne.n	800a2f0 <sbrk_aligned+0x38>
 800a2ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	20004554 	.word	0x20004554

0800a2f8 <_malloc_r>:
 800a2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2fc:	1ccd      	adds	r5, r1, #3
 800a2fe:	f025 0503 	bic.w	r5, r5, #3
 800a302:	3508      	adds	r5, #8
 800a304:	2d0c      	cmp	r5, #12
 800a306:	bf38      	it	cc
 800a308:	250c      	movcc	r5, #12
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	4607      	mov	r7, r0
 800a30e:	db01      	blt.n	800a314 <_malloc_r+0x1c>
 800a310:	42a9      	cmp	r1, r5
 800a312:	d905      	bls.n	800a320 <_malloc_r+0x28>
 800a314:	230c      	movs	r3, #12
 800a316:	2600      	movs	r6, #0
 800a318:	603b      	str	r3, [r7, #0]
 800a31a:	4630      	mov	r0, r6
 800a31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a320:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a3f4 <_malloc_r+0xfc>
 800a324:	f000 f868 	bl	800a3f8 <__malloc_lock>
 800a328:	f8d8 3000 	ldr.w	r3, [r8]
 800a32c:	461c      	mov	r4, r3
 800a32e:	bb5c      	cbnz	r4, 800a388 <_malloc_r+0x90>
 800a330:	4629      	mov	r1, r5
 800a332:	4638      	mov	r0, r7
 800a334:	f7ff ffc0 	bl	800a2b8 <sbrk_aligned>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	4604      	mov	r4, r0
 800a33c:	d155      	bne.n	800a3ea <_malloc_r+0xf2>
 800a33e:	f8d8 4000 	ldr.w	r4, [r8]
 800a342:	4626      	mov	r6, r4
 800a344:	2e00      	cmp	r6, #0
 800a346:	d145      	bne.n	800a3d4 <_malloc_r+0xdc>
 800a348:	2c00      	cmp	r4, #0
 800a34a:	d048      	beq.n	800a3de <_malloc_r+0xe6>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	4631      	mov	r1, r6
 800a350:	4638      	mov	r0, r7
 800a352:	eb04 0903 	add.w	r9, r4, r3
 800a356:	f001 ffbd 	bl	800c2d4 <_sbrk_r>
 800a35a:	4581      	cmp	r9, r0
 800a35c:	d13f      	bne.n	800a3de <_malloc_r+0xe6>
 800a35e:	6821      	ldr	r1, [r4, #0]
 800a360:	4638      	mov	r0, r7
 800a362:	1a6d      	subs	r5, r5, r1
 800a364:	4629      	mov	r1, r5
 800a366:	f7ff ffa7 	bl	800a2b8 <sbrk_aligned>
 800a36a:	3001      	adds	r0, #1
 800a36c:	d037      	beq.n	800a3de <_malloc_r+0xe6>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	442b      	add	r3, r5
 800a372:	6023      	str	r3, [r4, #0]
 800a374:	f8d8 3000 	ldr.w	r3, [r8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d038      	beq.n	800a3ee <_malloc_r+0xf6>
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	42a2      	cmp	r2, r4
 800a380:	d12b      	bne.n	800a3da <_malloc_r+0xe2>
 800a382:	2200      	movs	r2, #0
 800a384:	605a      	str	r2, [r3, #4]
 800a386:	e00f      	b.n	800a3a8 <_malloc_r+0xb0>
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	1b52      	subs	r2, r2, r5
 800a38c:	d41f      	bmi.n	800a3ce <_malloc_r+0xd6>
 800a38e:	2a0b      	cmp	r2, #11
 800a390:	d917      	bls.n	800a3c2 <_malloc_r+0xca>
 800a392:	1961      	adds	r1, r4, r5
 800a394:	42a3      	cmp	r3, r4
 800a396:	6025      	str	r5, [r4, #0]
 800a398:	bf18      	it	ne
 800a39a:	6059      	strne	r1, [r3, #4]
 800a39c:	6863      	ldr	r3, [r4, #4]
 800a39e:	bf08      	it	eq
 800a3a0:	f8c8 1000 	streq.w	r1, [r8]
 800a3a4:	5162      	str	r2, [r4, r5]
 800a3a6:	604b      	str	r3, [r1, #4]
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f104 060b 	add.w	r6, r4, #11
 800a3ae:	f000 f829 	bl	800a404 <__malloc_unlock>
 800a3b2:	f026 0607 	bic.w	r6, r6, #7
 800a3b6:	1d23      	adds	r3, r4, #4
 800a3b8:	1af2      	subs	r2, r6, r3
 800a3ba:	d0ae      	beq.n	800a31a <_malloc_r+0x22>
 800a3bc:	1b9b      	subs	r3, r3, r6
 800a3be:	50a3      	str	r3, [r4, r2]
 800a3c0:	e7ab      	b.n	800a31a <_malloc_r+0x22>
 800a3c2:	42a3      	cmp	r3, r4
 800a3c4:	6862      	ldr	r2, [r4, #4]
 800a3c6:	d1dd      	bne.n	800a384 <_malloc_r+0x8c>
 800a3c8:	f8c8 2000 	str.w	r2, [r8]
 800a3cc:	e7ec      	b.n	800a3a8 <_malloc_r+0xb0>
 800a3ce:	4623      	mov	r3, r4
 800a3d0:	6864      	ldr	r4, [r4, #4]
 800a3d2:	e7ac      	b.n	800a32e <_malloc_r+0x36>
 800a3d4:	4634      	mov	r4, r6
 800a3d6:	6876      	ldr	r6, [r6, #4]
 800a3d8:	e7b4      	b.n	800a344 <_malloc_r+0x4c>
 800a3da:	4613      	mov	r3, r2
 800a3dc:	e7cc      	b.n	800a378 <_malloc_r+0x80>
 800a3de:	230c      	movs	r3, #12
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	f000 f80e 	bl	800a404 <__malloc_unlock>
 800a3e8:	e797      	b.n	800a31a <_malloc_r+0x22>
 800a3ea:	6025      	str	r5, [r4, #0]
 800a3ec:	e7dc      	b.n	800a3a8 <_malloc_r+0xb0>
 800a3ee:	605b      	str	r3, [r3, #4]
 800a3f0:	deff      	udf	#255	; 0xff
 800a3f2:	bf00      	nop
 800a3f4:	20004550 	.word	0x20004550

0800a3f8 <__malloc_lock>:
 800a3f8:	4801      	ldr	r0, [pc, #4]	; (800a400 <__malloc_lock+0x8>)
 800a3fa:	f7ff b88b 	b.w	8009514 <__retarget_lock_acquire_recursive>
 800a3fe:	bf00      	nop
 800a400:	2000454c 	.word	0x2000454c

0800a404 <__malloc_unlock>:
 800a404:	4801      	ldr	r0, [pc, #4]	; (800a40c <__malloc_unlock+0x8>)
 800a406:	f7ff b886 	b.w	8009516 <__retarget_lock_release_recursive>
 800a40a:	bf00      	nop
 800a40c:	2000454c 	.word	0x2000454c

0800a410 <_Balloc>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	69c6      	ldr	r6, [r0, #28]
 800a414:	4604      	mov	r4, r0
 800a416:	460d      	mov	r5, r1
 800a418:	b976      	cbnz	r6, 800a438 <_Balloc+0x28>
 800a41a:	2010      	movs	r0, #16
 800a41c:	f7ff ff44 	bl	800a2a8 <malloc>
 800a420:	4602      	mov	r2, r0
 800a422:	61e0      	str	r0, [r4, #28]
 800a424:	b920      	cbnz	r0, 800a430 <_Balloc+0x20>
 800a426:	216b      	movs	r1, #107	; 0x6b
 800a428:	4b17      	ldr	r3, [pc, #92]	; (800a488 <_Balloc+0x78>)
 800a42a:	4818      	ldr	r0, [pc, #96]	; (800a48c <_Balloc+0x7c>)
 800a42c:	f001 ff76 	bl	800c31c <__assert_func>
 800a430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a434:	6006      	str	r6, [r0, #0]
 800a436:	60c6      	str	r6, [r0, #12]
 800a438:	69e6      	ldr	r6, [r4, #28]
 800a43a:	68f3      	ldr	r3, [r6, #12]
 800a43c:	b183      	cbz	r3, 800a460 <_Balloc+0x50>
 800a43e:	69e3      	ldr	r3, [r4, #28]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a446:	b9b8      	cbnz	r0, 800a478 <_Balloc+0x68>
 800a448:	2101      	movs	r1, #1
 800a44a:	fa01 f605 	lsl.w	r6, r1, r5
 800a44e:	1d72      	adds	r2, r6, #5
 800a450:	4620      	mov	r0, r4
 800a452:	0092      	lsls	r2, r2, #2
 800a454:	f001 ff80 	bl	800c358 <_calloc_r>
 800a458:	b160      	cbz	r0, 800a474 <_Balloc+0x64>
 800a45a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a45e:	e00e      	b.n	800a47e <_Balloc+0x6e>
 800a460:	2221      	movs	r2, #33	; 0x21
 800a462:	2104      	movs	r1, #4
 800a464:	4620      	mov	r0, r4
 800a466:	f001 ff77 	bl	800c358 <_calloc_r>
 800a46a:	69e3      	ldr	r3, [r4, #28]
 800a46c:	60f0      	str	r0, [r6, #12]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e4      	bne.n	800a43e <_Balloc+0x2e>
 800a474:	2000      	movs	r0, #0
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	6802      	ldr	r2, [r0, #0]
 800a47a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a47e:	2300      	movs	r3, #0
 800a480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a484:	e7f7      	b.n	800a476 <_Balloc+0x66>
 800a486:	bf00      	nop
 800a488:	0800cccc 	.word	0x0800cccc
 800a48c:	0800cd4c 	.word	0x0800cd4c

0800a490 <_Bfree>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	69c6      	ldr	r6, [r0, #28]
 800a494:	4605      	mov	r5, r0
 800a496:	460c      	mov	r4, r1
 800a498:	b976      	cbnz	r6, 800a4b8 <_Bfree+0x28>
 800a49a:	2010      	movs	r0, #16
 800a49c:	f7ff ff04 	bl	800a2a8 <malloc>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	61e8      	str	r0, [r5, #28]
 800a4a4:	b920      	cbnz	r0, 800a4b0 <_Bfree+0x20>
 800a4a6:	218f      	movs	r1, #143	; 0x8f
 800a4a8:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <_Bfree+0x3c>)
 800a4aa:	4809      	ldr	r0, [pc, #36]	; (800a4d0 <_Bfree+0x40>)
 800a4ac:	f001 ff36 	bl	800c31c <__assert_func>
 800a4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b4:	6006      	str	r6, [r0, #0]
 800a4b6:	60c6      	str	r6, [r0, #12]
 800a4b8:	b13c      	cbz	r4, 800a4ca <_Bfree+0x3a>
 800a4ba:	69eb      	ldr	r3, [r5, #28]
 800a4bc:	6862      	ldr	r2, [r4, #4]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4c4:	6021      	str	r1, [r4, #0]
 800a4c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	0800cccc 	.word	0x0800cccc
 800a4d0:	0800cd4c 	.word	0x0800cd4c

0800a4d4 <__multadd>:
 800a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d8:	4607      	mov	r7, r0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	461e      	mov	r6, r3
 800a4de:	2000      	movs	r0, #0
 800a4e0:	690d      	ldr	r5, [r1, #16]
 800a4e2:	f101 0c14 	add.w	ip, r1, #20
 800a4e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	b299      	uxth	r1, r3
 800a4ee:	fb02 6101 	mla	r1, r2, r1, r6
 800a4f2:	0c1e      	lsrs	r6, r3, #16
 800a4f4:	0c0b      	lsrs	r3, r1, #16
 800a4f6:	fb02 3306 	mla	r3, r2, r6, r3
 800a4fa:	b289      	uxth	r1, r1
 800a4fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a500:	4285      	cmp	r5, r0
 800a502:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a506:	f84c 1b04 	str.w	r1, [ip], #4
 800a50a:	dcec      	bgt.n	800a4e6 <__multadd+0x12>
 800a50c:	b30e      	cbz	r6, 800a552 <__multadd+0x7e>
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	42ab      	cmp	r3, r5
 800a512:	dc19      	bgt.n	800a548 <__multadd+0x74>
 800a514:	6861      	ldr	r1, [r4, #4]
 800a516:	4638      	mov	r0, r7
 800a518:	3101      	adds	r1, #1
 800a51a:	f7ff ff79 	bl	800a410 <_Balloc>
 800a51e:	4680      	mov	r8, r0
 800a520:	b928      	cbnz	r0, 800a52e <__multadd+0x5a>
 800a522:	4602      	mov	r2, r0
 800a524:	21ba      	movs	r1, #186	; 0xba
 800a526:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <__multadd+0x84>)
 800a528:	480c      	ldr	r0, [pc, #48]	; (800a55c <__multadd+0x88>)
 800a52a:	f001 fef7 	bl	800c31c <__assert_func>
 800a52e:	6922      	ldr	r2, [r4, #16]
 800a530:	f104 010c 	add.w	r1, r4, #12
 800a534:	3202      	adds	r2, #2
 800a536:	0092      	lsls	r2, r2, #2
 800a538:	300c      	adds	r0, #12
 800a53a:	f001 fedb 	bl	800c2f4 <memcpy>
 800a53e:	4621      	mov	r1, r4
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff ffa5 	bl	800a490 <_Bfree>
 800a546:	4644      	mov	r4, r8
 800a548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a54c:	3501      	adds	r5, #1
 800a54e:	615e      	str	r6, [r3, #20]
 800a550:	6125      	str	r5, [r4, #16]
 800a552:	4620      	mov	r0, r4
 800a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a558:	0800cd3b 	.word	0x0800cd3b
 800a55c:	0800cd4c 	.word	0x0800cd4c

0800a560 <__s2b>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	4615      	mov	r5, r2
 800a566:	2209      	movs	r2, #9
 800a568:	461f      	mov	r7, r3
 800a56a:	3308      	adds	r3, #8
 800a56c:	460c      	mov	r4, r1
 800a56e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a572:	4606      	mov	r6, r0
 800a574:	2201      	movs	r2, #1
 800a576:	2100      	movs	r1, #0
 800a578:	429a      	cmp	r2, r3
 800a57a:	db09      	blt.n	800a590 <__s2b+0x30>
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7ff ff47 	bl	800a410 <_Balloc>
 800a582:	b940      	cbnz	r0, 800a596 <__s2b+0x36>
 800a584:	4602      	mov	r2, r0
 800a586:	21d3      	movs	r1, #211	; 0xd3
 800a588:	4b18      	ldr	r3, [pc, #96]	; (800a5ec <__s2b+0x8c>)
 800a58a:	4819      	ldr	r0, [pc, #100]	; (800a5f0 <__s2b+0x90>)
 800a58c:	f001 fec6 	bl	800c31c <__assert_func>
 800a590:	0052      	lsls	r2, r2, #1
 800a592:	3101      	adds	r1, #1
 800a594:	e7f0      	b.n	800a578 <__s2b+0x18>
 800a596:	9b08      	ldr	r3, [sp, #32]
 800a598:	2d09      	cmp	r5, #9
 800a59a:	6143      	str	r3, [r0, #20]
 800a59c:	f04f 0301 	mov.w	r3, #1
 800a5a0:	6103      	str	r3, [r0, #16]
 800a5a2:	dd16      	ble.n	800a5d2 <__s2b+0x72>
 800a5a4:	f104 0909 	add.w	r9, r4, #9
 800a5a8:	46c8      	mov	r8, r9
 800a5aa:	442c      	add	r4, r5
 800a5ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	220a      	movs	r2, #10
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	3b30      	subs	r3, #48	; 0x30
 800a5b8:	f7ff ff8c 	bl	800a4d4 <__multadd>
 800a5bc:	45a0      	cmp	r8, r4
 800a5be:	d1f5      	bne.n	800a5ac <__s2b+0x4c>
 800a5c0:	f1a5 0408 	sub.w	r4, r5, #8
 800a5c4:	444c      	add	r4, r9
 800a5c6:	1b2d      	subs	r5, r5, r4
 800a5c8:	1963      	adds	r3, r4, r5
 800a5ca:	42bb      	cmp	r3, r7
 800a5cc:	db04      	blt.n	800a5d8 <__s2b+0x78>
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	2509      	movs	r5, #9
 800a5d4:	340a      	adds	r4, #10
 800a5d6:	e7f6      	b.n	800a5c6 <__s2b+0x66>
 800a5d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5dc:	4601      	mov	r1, r0
 800a5de:	220a      	movs	r2, #10
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	3b30      	subs	r3, #48	; 0x30
 800a5e4:	f7ff ff76 	bl	800a4d4 <__multadd>
 800a5e8:	e7ee      	b.n	800a5c8 <__s2b+0x68>
 800a5ea:	bf00      	nop
 800a5ec:	0800cd3b 	.word	0x0800cd3b
 800a5f0:	0800cd4c 	.word	0x0800cd4c

0800a5f4 <__hi0bits>:
 800a5f4:	0c02      	lsrs	r2, r0, #16
 800a5f6:	0412      	lsls	r2, r2, #16
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b9ca      	cbnz	r2, 800a630 <__hi0bits+0x3c>
 800a5fc:	0403      	lsls	r3, r0, #16
 800a5fe:	2010      	movs	r0, #16
 800a600:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a604:	bf04      	itt	eq
 800a606:	021b      	lsleq	r3, r3, #8
 800a608:	3008      	addeq	r0, #8
 800a60a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a60e:	bf04      	itt	eq
 800a610:	011b      	lsleq	r3, r3, #4
 800a612:	3004      	addeq	r0, #4
 800a614:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a618:	bf04      	itt	eq
 800a61a:	009b      	lsleq	r3, r3, #2
 800a61c:	3002      	addeq	r0, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	db05      	blt.n	800a62e <__hi0bits+0x3a>
 800a622:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a626:	f100 0001 	add.w	r0, r0, #1
 800a62a:	bf08      	it	eq
 800a62c:	2020      	moveq	r0, #32
 800a62e:	4770      	bx	lr
 800a630:	2000      	movs	r0, #0
 800a632:	e7e5      	b.n	800a600 <__hi0bits+0xc>

0800a634 <__lo0bits>:
 800a634:	6803      	ldr	r3, [r0, #0]
 800a636:	4602      	mov	r2, r0
 800a638:	f013 0007 	ands.w	r0, r3, #7
 800a63c:	d00b      	beq.n	800a656 <__lo0bits+0x22>
 800a63e:	07d9      	lsls	r1, r3, #31
 800a640:	d421      	bmi.n	800a686 <__lo0bits+0x52>
 800a642:	0798      	lsls	r0, r3, #30
 800a644:	bf49      	itett	mi
 800a646:	085b      	lsrmi	r3, r3, #1
 800a648:	089b      	lsrpl	r3, r3, #2
 800a64a:	2001      	movmi	r0, #1
 800a64c:	6013      	strmi	r3, [r2, #0]
 800a64e:	bf5c      	itt	pl
 800a650:	2002      	movpl	r0, #2
 800a652:	6013      	strpl	r3, [r2, #0]
 800a654:	4770      	bx	lr
 800a656:	b299      	uxth	r1, r3
 800a658:	b909      	cbnz	r1, 800a65e <__lo0bits+0x2a>
 800a65a:	2010      	movs	r0, #16
 800a65c:	0c1b      	lsrs	r3, r3, #16
 800a65e:	b2d9      	uxtb	r1, r3
 800a660:	b909      	cbnz	r1, 800a666 <__lo0bits+0x32>
 800a662:	3008      	adds	r0, #8
 800a664:	0a1b      	lsrs	r3, r3, #8
 800a666:	0719      	lsls	r1, r3, #28
 800a668:	bf04      	itt	eq
 800a66a:	091b      	lsreq	r3, r3, #4
 800a66c:	3004      	addeq	r0, #4
 800a66e:	0799      	lsls	r1, r3, #30
 800a670:	bf04      	itt	eq
 800a672:	089b      	lsreq	r3, r3, #2
 800a674:	3002      	addeq	r0, #2
 800a676:	07d9      	lsls	r1, r3, #31
 800a678:	d403      	bmi.n	800a682 <__lo0bits+0x4e>
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	f100 0001 	add.w	r0, r0, #1
 800a680:	d003      	beq.n	800a68a <__lo0bits+0x56>
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	4770      	bx	lr
 800a686:	2000      	movs	r0, #0
 800a688:	4770      	bx	lr
 800a68a:	2020      	movs	r0, #32
 800a68c:	4770      	bx	lr
	...

0800a690 <__i2b>:
 800a690:	b510      	push	{r4, lr}
 800a692:	460c      	mov	r4, r1
 800a694:	2101      	movs	r1, #1
 800a696:	f7ff febb 	bl	800a410 <_Balloc>
 800a69a:	4602      	mov	r2, r0
 800a69c:	b928      	cbnz	r0, 800a6aa <__i2b+0x1a>
 800a69e:	f240 1145 	movw	r1, #325	; 0x145
 800a6a2:	4b04      	ldr	r3, [pc, #16]	; (800a6b4 <__i2b+0x24>)
 800a6a4:	4804      	ldr	r0, [pc, #16]	; (800a6b8 <__i2b+0x28>)
 800a6a6:	f001 fe39 	bl	800c31c <__assert_func>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	6144      	str	r4, [r0, #20]
 800a6ae:	6103      	str	r3, [r0, #16]
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800cd3b 	.word	0x0800cd3b
 800a6b8:	0800cd4c 	.word	0x0800cd4c

0800a6bc <__multiply>:
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	4691      	mov	r9, r2
 800a6c2:	690a      	ldr	r2, [r1, #16]
 800a6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	bfbe      	ittt	lt
 800a6ce:	460b      	movlt	r3, r1
 800a6d0:	464c      	movlt	r4, r9
 800a6d2:	4699      	movlt	r9, r3
 800a6d4:	6927      	ldr	r7, [r4, #16]
 800a6d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6da:	68a3      	ldr	r3, [r4, #8]
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	eb07 060a 	add.w	r6, r7, sl
 800a6e2:	42b3      	cmp	r3, r6
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	bfb8      	it	lt
 800a6e8:	3101      	addlt	r1, #1
 800a6ea:	f7ff fe91 	bl	800a410 <_Balloc>
 800a6ee:	b930      	cbnz	r0, 800a6fe <__multiply+0x42>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a6f6:	4b43      	ldr	r3, [pc, #268]	; (800a804 <__multiply+0x148>)
 800a6f8:	4843      	ldr	r0, [pc, #268]	; (800a808 <__multiply+0x14c>)
 800a6fa:	f001 fe0f 	bl	800c31c <__assert_func>
 800a6fe:	f100 0514 	add.w	r5, r0, #20
 800a702:	462b      	mov	r3, r5
 800a704:	2200      	movs	r2, #0
 800a706:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a70a:	4543      	cmp	r3, r8
 800a70c:	d321      	bcc.n	800a752 <__multiply+0x96>
 800a70e:	f104 0314 	add.w	r3, r4, #20
 800a712:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a716:	f109 0314 	add.w	r3, r9, #20
 800a71a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a71e:	9202      	str	r2, [sp, #8]
 800a720:	1b3a      	subs	r2, r7, r4
 800a722:	3a15      	subs	r2, #21
 800a724:	f022 0203 	bic.w	r2, r2, #3
 800a728:	3204      	adds	r2, #4
 800a72a:	f104 0115 	add.w	r1, r4, #21
 800a72e:	428f      	cmp	r7, r1
 800a730:	bf38      	it	cc
 800a732:	2204      	movcc	r2, #4
 800a734:	9201      	str	r2, [sp, #4]
 800a736:	9a02      	ldr	r2, [sp, #8]
 800a738:	9303      	str	r3, [sp, #12]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d80c      	bhi.n	800a758 <__multiply+0x9c>
 800a73e:	2e00      	cmp	r6, #0
 800a740:	dd03      	ble.n	800a74a <__multiply+0x8e>
 800a742:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a746:	2b00      	cmp	r3, #0
 800a748:	d05a      	beq.n	800a800 <__multiply+0x144>
 800a74a:	6106      	str	r6, [r0, #16]
 800a74c:	b005      	add	sp, #20
 800a74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a752:	f843 2b04 	str.w	r2, [r3], #4
 800a756:	e7d8      	b.n	800a70a <__multiply+0x4e>
 800a758:	f8b3 a000 	ldrh.w	sl, [r3]
 800a75c:	f1ba 0f00 	cmp.w	sl, #0
 800a760:	d023      	beq.n	800a7aa <__multiply+0xee>
 800a762:	46a9      	mov	r9, r5
 800a764:	f04f 0c00 	mov.w	ip, #0
 800a768:	f104 0e14 	add.w	lr, r4, #20
 800a76c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a770:	f8d9 1000 	ldr.w	r1, [r9]
 800a774:	fa1f fb82 	uxth.w	fp, r2
 800a778:	b289      	uxth	r1, r1
 800a77a:	fb0a 110b 	mla	r1, sl, fp, r1
 800a77e:	4461      	add	r1, ip
 800a780:	f8d9 c000 	ldr.w	ip, [r9]
 800a784:	0c12      	lsrs	r2, r2, #16
 800a786:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a78a:	fb0a c202 	mla	r2, sl, r2, ip
 800a78e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a792:	b289      	uxth	r1, r1
 800a794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a798:	4577      	cmp	r7, lr
 800a79a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a79e:	f849 1b04 	str.w	r1, [r9], #4
 800a7a2:	d8e3      	bhi.n	800a76c <__multiply+0xb0>
 800a7a4:	9a01      	ldr	r2, [sp, #4]
 800a7a6:	f845 c002 	str.w	ip, [r5, r2]
 800a7aa:	9a03      	ldr	r2, [sp, #12]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7b2:	f1b9 0f00 	cmp.w	r9, #0
 800a7b6:	d021      	beq.n	800a7fc <__multiply+0x140>
 800a7b8:	46ae      	mov	lr, r5
 800a7ba:	f04f 0a00 	mov.w	sl, #0
 800a7be:	6829      	ldr	r1, [r5, #0]
 800a7c0:	f104 0c14 	add.w	ip, r4, #20
 800a7c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a7c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7cc:	b289      	uxth	r1, r1
 800a7ce:	fb09 220b 	mla	r2, r9, fp, r2
 800a7d2:	4452      	add	r2, sl
 800a7d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7d8:	f84e 1b04 	str.w	r1, [lr], #4
 800a7dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a7e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7e4:	f8be 1000 	ldrh.w	r1, [lr]
 800a7e8:	4567      	cmp	r7, ip
 800a7ea:	fb09 110a 	mla	r1, r9, sl, r1
 800a7ee:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a7f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7f6:	d8e5      	bhi.n	800a7c4 <__multiply+0x108>
 800a7f8:	9a01      	ldr	r2, [sp, #4]
 800a7fa:	50a9      	str	r1, [r5, r2]
 800a7fc:	3504      	adds	r5, #4
 800a7fe:	e79a      	b.n	800a736 <__multiply+0x7a>
 800a800:	3e01      	subs	r6, #1
 800a802:	e79c      	b.n	800a73e <__multiply+0x82>
 800a804:	0800cd3b 	.word	0x0800cd3b
 800a808:	0800cd4c 	.word	0x0800cd4c

0800a80c <__pow5mult>:
 800a80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a810:	4615      	mov	r5, r2
 800a812:	f012 0203 	ands.w	r2, r2, #3
 800a816:	4606      	mov	r6, r0
 800a818:	460f      	mov	r7, r1
 800a81a:	d007      	beq.n	800a82c <__pow5mult+0x20>
 800a81c:	4c25      	ldr	r4, [pc, #148]	; (800a8b4 <__pow5mult+0xa8>)
 800a81e:	3a01      	subs	r2, #1
 800a820:	2300      	movs	r3, #0
 800a822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a826:	f7ff fe55 	bl	800a4d4 <__multadd>
 800a82a:	4607      	mov	r7, r0
 800a82c:	10ad      	asrs	r5, r5, #2
 800a82e:	d03d      	beq.n	800a8ac <__pow5mult+0xa0>
 800a830:	69f4      	ldr	r4, [r6, #28]
 800a832:	b97c      	cbnz	r4, 800a854 <__pow5mult+0x48>
 800a834:	2010      	movs	r0, #16
 800a836:	f7ff fd37 	bl	800a2a8 <malloc>
 800a83a:	4602      	mov	r2, r0
 800a83c:	61f0      	str	r0, [r6, #28]
 800a83e:	b928      	cbnz	r0, 800a84c <__pow5mult+0x40>
 800a840:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a844:	4b1c      	ldr	r3, [pc, #112]	; (800a8b8 <__pow5mult+0xac>)
 800a846:	481d      	ldr	r0, [pc, #116]	; (800a8bc <__pow5mult+0xb0>)
 800a848:	f001 fd68 	bl	800c31c <__assert_func>
 800a84c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a850:	6004      	str	r4, [r0, #0]
 800a852:	60c4      	str	r4, [r0, #12]
 800a854:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a85c:	b94c      	cbnz	r4, 800a872 <__pow5mult+0x66>
 800a85e:	f240 2171 	movw	r1, #625	; 0x271
 800a862:	4630      	mov	r0, r6
 800a864:	f7ff ff14 	bl	800a690 <__i2b>
 800a868:	2300      	movs	r3, #0
 800a86a:	4604      	mov	r4, r0
 800a86c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	f04f 0900 	mov.w	r9, #0
 800a876:	07eb      	lsls	r3, r5, #31
 800a878:	d50a      	bpl.n	800a890 <__pow5mult+0x84>
 800a87a:	4639      	mov	r1, r7
 800a87c:	4622      	mov	r2, r4
 800a87e:	4630      	mov	r0, r6
 800a880:	f7ff ff1c 	bl	800a6bc <__multiply>
 800a884:	4680      	mov	r8, r0
 800a886:	4639      	mov	r1, r7
 800a888:	4630      	mov	r0, r6
 800a88a:	f7ff fe01 	bl	800a490 <_Bfree>
 800a88e:	4647      	mov	r7, r8
 800a890:	106d      	asrs	r5, r5, #1
 800a892:	d00b      	beq.n	800a8ac <__pow5mult+0xa0>
 800a894:	6820      	ldr	r0, [r4, #0]
 800a896:	b938      	cbnz	r0, 800a8a8 <__pow5mult+0x9c>
 800a898:	4622      	mov	r2, r4
 800a89a:	4621      	mov	r1, r4
 800a89c:	4630      	mov	r0, r6
 800a89e:	f7ff ff0d 	bl	800a6bc <__multiply>
 800a8a2:	6020      	str	r0, [r4, #0]
 800a8a4:	f8c0 9000 	str.w	r9, [r0]
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	e7e4      	b.n	800a876 <__pow5mult+0x6a>
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0800ce98 	.word	0x0800ce98
 800a8b8:	0800cccc 	.word	0x0800cccc
 800a8bc:	0800cd4c 	.word	0x0800cd4c

0800a8c0 <__lshift>:
 800a8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	4691      	mov	r9, r2
 800a8ca:	6923      	ldr	r3, [r4, #16]
 800a8cc:	6849      	ldr	r1, [r1, #4]
 800a8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8d8:	f108 0601 	add.w	r6, r8, #1
 800a8dc:	42b3      	cmp	r3, r6
 800a8de:	db0b      	blt.n	800a8f8 <__lshift+0x38>
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff fd95 	bl	800a410 <_Balloc>
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	b948      	cbnz	r0, 800a8fe <__lshift+0x3e>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a8f0:	4b27      	ldr	r3, [pc, #156]	; (800a990 <__lshift+0xd0>)
 800a8f2:	4828      	ldr	r0, [pc, #160]	; (800a994 <__lshift+0xd4>)
 800a8f4:	f001 fd12 	bl	800c31c <__assert_func>
 800a8f8:	3101      	adds	r1, #1
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	e7ee      	b.n	800a8dc <__lshift+0x1c>
 800a8fe:	2300      	movs	r3, #0
 800a900:	f100 0114 	add.w	r1, r0, #20
 800a904:	f100 0210 	add.w	r2, r0, #16
 800a908:	4618      	mov	r0, r3
 800a90a:	4553      	cmp	r3, sl
 800a90c:	db33      	blt.n	800a976 <__lshift+0xb6>
 800a90e:	6920      	ldr	r0, [r4, #16]
 800a910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a914:	f104 0314 	add.w	r3, r4, #20
 800a918:	f019 091f 	ands.w	r9, r9, #31
 800a91c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a920:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a924:	d02b      	beq.n	800a97e <__lshift+0xbe>
 800a926:	468a      	mov	sl, r1
 800a928:	2200      	movs	r2, #0
 800a92a:	f1c9 0e20 	rsb	lr, r9, #32
 800a92e:	6818      	ldr	r0, [r3, #0]
 800a930:	fa00 f009 	lsl.w	r0, r0, r9
 800a934:	4310      	orrs	r0, r2
 800a936:	f84a 0b04 	str.w	r0, [sl], #4
 800a93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93e:	459c      	cmp	ip, r3
 800a940:	fa22 f20e 	lsr.w	r2, r2, lr
 800a944:	d8f3      	bhi.n	800a92e <__lshift+0x6e>
 800a946:	ebac 0304 	sub.w	r3, ip, r4
 800a94a:	3b15      	subs	r3, #21
 800a94c:	f023 0303 	bic.w	r3, r3, #3
 800a950:	3304      	adds	r3, #4
 800a952:	f104 0015 	add.w	r0, r4, #21
 800a956:	4584      	cmp	ip, r0
 800a958:	bf38      	it	cc
 800a95a:	2304      	movcc	r3, #4
 800a95c:	50ca      	str	r2, [r1, r3]
 800a95e:	b10a      	cbz	r2, 800a964 <__lshift+0xa4>
 800a960:	f108 0602 	add.w	r6, r8, #2
 800a964:	3e01      	subs	r6, #1
 800a966:	4638      	mov	r0, r7
 800a968:	4621      	mov	r1, r4
 800a96a:	612e      	str	r6, [r5, #16]
 800a96c:	f7ff fd90 	bl	800a490 <_Bfree>
 800a970:	4628      	mov	r0, r5
 800a972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a976:	f842 0f04 	str.w	r0, [r2, #4]!
 800a97a:	3301      	adds	r3, #1
 800a97c:	e7c5      	b.n	800a90a <__lshift+0x4a>
 800a97e:	3904      	subs	r1, #4
 800a980:	f853 2b04 	ldr.w	r2, [r3], #4
 800a984:	459c      	cmp	ip, r3
 800a986:	f841 2f04 	str.w	r2, [r1, #4]!
 800a98a:	d8f9      	bhi.n	800a980 <__lshift+0xc0>
 800a98c:	e7ea      	b.n	800a964 <__lshift+0xa4>
 800a98e:	bf00      	nop
 800a990:	0800cd3b 	.word	0x0800cd3b
 800a994:	0800cd4c 	.word	0x0800cd4c

0800a998 <__mcmp>:
 800a998:	4603      	mov	r3, r0
 800a99a:	690a      	ldr	r2, [r1, #16]
 800a99c:	6900      	ldr	r0, [r0, #16]
 800a99e:	b530      	push	{r4, r5, lr}
 800a9a0:	1a80      	subs	r0, r0, r2
 800a9a2:	d10d      	bne.n	800a9c0 <__mcmp+0x28>
 800a9a4:	3314      	adds	r3, #20
 800a9a6:	3114      	adds	r1, #20
 800a9a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a9ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a9b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9b8:	4295      	cmp	r5, r2
 800a9ba:	d002      	beq.n	800a9c2 <__mcmp+0x2a>
 800a9bc:	d304      	bcc.n	800a9c8 <__mcmp+0x30>
 800a9be:	2001      	movs	r0, #1
 800a9c0:	bd30      	pop	{r4, r5, pc}
 800a9c2:	42a3      	cmp	r3, r4
 800a9c4:	d3f4      	bcc.n	800a9b0 <__mcmp+0x18>
 800a9c6:	e7fb      	b.n	800a9c0 <__mcmp+0x28>
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	e7f8      	b.n	800a9c0 <__mcmp+0x28>
	...

0800a9d0 <__mdiff>:
 800a9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	4611      	mov	r1, r2
 800a9da:	4628      	mov	r0, r5
 800a9dc:	4614      	mov	r4, r2
 800a9de:	f7ff ffdb 	bl	800a998 <__mcmp>
 800a9e2:	1e06      	subs	r6, r0, #0
 800a9e4:	d111      	bne.n	800aa0a <__mdiff+0x3a>
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f7ff fd11 	bl	800a410 <_Balloc>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	b928      	cbnz	r0, 800a9fe <__mdiff+0x2e>
 800a9f2:	f240 2137 	movw	r1, #567	; 0x237
 800a9f6:	4b3a      	ldr	r3, [pc, #232]	; (800aae0 <__mdiff+0x110>)
 800a9f8:	483a      	ldr	r0, [pc, #232]	; (800aae4 <__mdiff+0x114>)
 800a9fa:	f001 fc8f 	bl	800c31c <__assert_func>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aa04:	4610      	mov	r0, r2
 800aa06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0a:	bfa4      	itt	ge
 800aa0c:	4623      	movge	r3, r4
 800aa0e:	462c      	movge	r4, r5
 800aa10:	4638      	mov	r0, r7
 800aa12:	6861      	ldr	r1, [r4, #4]
 800aa14:	bfa6      	itte	ge
 800aa16:	461d      	movge	r5, r3
 800aa18:	2600      	movge	r6, #0
 800aa1a:	2601      	movlt	r6, #1
 800aa1c:	f7ff fcf8 	bl	800a410 <_Balloc>
 800aa20:	4602      	mov	r2, r0
 800aa22:	b918      	cbnz	r0, 800aa2c <__mdiff+0x5c>
 800aa24:	f240 2145 	movw	r1, #581	; 0x245
 800aa28:	4b2d      	ldr	r3, [pc, #180]	; (800aae0 <__mdiff+0x110>)
 800aa2a:	e7e5      	b.n	800a9f8 <__mdiff+0x28>
 800aa2c:	f102 0814 	add.w	r8, r2, #20
 800aa30:	46c2      	mov	sl, r8
 800aa32:	f04f 0c00 	mov.w	ip, #0
 800aa36:	6927      	ldr	r7, [r4, #16]
 800aa38:	60c6      	str	r6, [r0, #12]
 800aa3a:	692e      	ldr	r6, [r5, #16]
 800aa3c:	f104 0014 	add.w	r0, r4, #20
 800aa40:	f105 0914 	add.w	r9, r5, #20
 800aa44:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800aa48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa4c:	3410      	adds	r4, #16
 800aa4e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800aa52:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa56:	fa1f f18b 	uxth.w	r1, fp
 800aa5a:	4461      	add	r1, ip
 800aa5c:	fa1f fc83 	uxth.w	ip, r3
 800aa60:	0c1b      	lsrs	r3, r3, #16
 800aa62:	eba1 010c 	sub.w	r1, r1, ip
 800aa66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aa6e:	b289      	uxth	r1, r1
 800aa70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800aa74:	454e      	cmp	r6, r9
 800aa76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aa7a:	f84a 1b04 	str.w	r1, [sl], #4
 800aa7e:	d8e6      	bhi.n	800aa4e <__mdiff+0x7e>
 800aa80:	1b73      	subs	r3, r6, r5
 800aa82:	3b15      	subs	r3, #21
 800aa84:	f023 0303 	bic.w	r3, r3, #3
 800aa88:	3515      	adds	r5, #21
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	42ae      	cmp	r6, r5
 800aa8e:	bf38      	it	cc
 800aa90:	2304      	movcc	r3, #4
 800aa92:	4418      	add	r0, r3
 800aa94:	4443      	add	r3, r8
 800aa96:	461e      	mov	r6, r3
 800aa98:	4605      	mov	r5, r0
 800aa9a:	4575      	cmp	r5, lr
 800aa9c:	d30e      	bcc.n	800aabc <__mdiff+0xec>
 800aa9e:	f10e 0103 	add.w	r1, lr, #3
 800aaa2:	1a09      	subs	r1, r1, r0
 800aaa4:	f021 0103 	bic.w	r1, r1, #3
 800aaa8:	3803      	subs	r0, #3
 800aaaa:	4586      	cmp	lr, r0
 800aaac:	bf38      	it	cc
 800aaae:	2100      	movcc	r1, #0
 800aab0:	440b      	add	r3, r1
 800aab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aab6:	b189      	cbz	r1, 800aadc <__mdiff+0x10c>
 800aab8:	6117      	str	r7, [r2, #16]
 800aaba:	e7a3      	b.n	800aa04 <__mdiff+0x34>
 800aabc:	f855 8b04 	ldr.w	r8, [r5], #4
 800aac0:	fa1f f188 	uxth.w	r1, r8
 800aac4:	4461      	add	r1, ip
 800aac6:	140c      	asrs	r4, r1, #16
 800aac8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aacc:	b289      	uxth	r1, r1
 800aace:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aad2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800aad6:	f846 1b04 	str.w	r1, [r6], #4
 800aada:	e7de      	b.n	800aa9a <__mdiff+0xca>
 800aadc:	3f01      	subs	r7, #1
 800aade:	e7e8      	b.n	800aab2 <__mdiff+0xe2>
 800aae0:	0800cd3b 	.word	0x0800cd3b
 800aae4:	0800cd4c 	.word	0x0800cd4c

0800aae8 <__ulp>:
 800aae8:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <__ulp+0x3c>)
 800aaea:	400b      	ands	r3, r1
 800aaec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dc08      	bgt.n	800ab06 <__ulp+0x1e>
 800aaf4:	425b      	negs	r3, r3
 800aaf6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aafa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aafe:	da04      	bge.n	800ab0a <__ulp+0x22>
 800ab00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab04:	4113      	asrs	r3, r2
 800ab06:	2200      	movs	r2, #0
 800ab08:	e008      	b.n	800ab1c <__ulp+0x34>
 800ab0a:	f1a2 0314 	sub.w	r3, r2, #20
 800ab0e:	2b1e      	cmp	r3, #30
 800ab10:	bfd6      	itet	le
 800ab12:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ab16:	2201      	movgt	r2, #1
 800ab18:	40da      	lsrle	r2, r3
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	7ff00000 	.word	0x7ff00000

0800ab28 <__b2d>:
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	6905      	ldr	r5, [r0, #16]
 800ab2c:	f100 0714 	add.w	r7, r0, #20
 800ab30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ab34:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ab38:	1f2e      	subs	r6, r5, #4
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff fd5a 	bl	800a5f4 <__hi0bits>
 800ab40:	f1c0 0220 	rsb	r2, r0, #32
 800ab44:	280a      	cmp	r0, #10
 800ab46:	4603      	mov	r3, r0
 800ab48:	f8df c068 	ldr.w	ip, [pc, #104]	; 800abb4 <__b2d+0x8c>
 800ab4c:	600a      	str	r2, [r1, #0]
 800ab4e:	dc12      	bgt.n	800ab76 <__b2d+0x4e>
 800ab50:	f1c0 0e0b 	rsb	lr, r0, #11
 800ab54:	fa24 f20e 	lsr.w	r2, r4, lr
 800ab58:	42b7      	cmp	r7, r6
 800ab5a:	ea42 010c 	orr.w	r1, r2, ip
 800ab5e:	bf2c      	ite	cs
 800ab60:	2200      	movcs	r2, #0
 800ab62:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800ab66:	3315      	adds	r3, #21
 800ab68:	fa04 f303 	lsl.w	r3, r4, r3
 800ab6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab70:	431a      	orrs	r2, r3
 800ab72:	4610      	mov	r0, r2
 800ab74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab76:	42b7      	cmp	r7, r6
 800ab78:	bf2e      	itee	cs
 800ab7a:	2200      	movcs	r2, #0
 800ab7c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800ab80:	f1a5 0608 	subcc.w	r6, r5, #8
 800ab84:	3b0b      	subs	r3, #11
 800ab86:	d012      	beq.n	800abae <__b2d+0x86>
 800ab88:	f1c3 0520 	rsb	r5, r3, #32
 800ab8c:	fa22 f105 	lsr.w	r1, r2, r5
 800ab90:	409c      	lsls	r4, r3
 800ab92:	430c      	orrs	r4, r1
 800ab94:	42be      	cmp	r6, r7
 800ab96:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800ab9a:	bf94      	ite	ls
 800ab9c:	2400      	movls	r4, #0
 800ab9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aba2:	409a      	lsls	r2, r3
 800aba4:	40ec      	lsrs	r4, r5
 800aba6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800abaa:	4322      	orrs	r2, r4
 800abac:	e7e1      	b.n	800ab72 <__b2d+0x4a>
 800abae:	ea44 010c 	orr.w	r1, r4, ip
 800abb2:	e7de      	b.n	800ab72 <__b2d+0x4a>
 800abb4:	3ff00000 	.word	0x3ff00000

0800abb8 <__d2b>:
 800abb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abba:	2101      	movs	r1, #1
 800abbc:	4617      	mov	r7, r2
 800abbe:	461c      	mov	r4, r3
 800abc0:	9e08      	ldr	r6, [sp, #32]
 800abc2:	f7ff fc25 	bl	800a410 <_Balloc>
 800abc6:	4605      	mov	r5, r0
 800abc8:	b930      	cbnz	r0, 800abd8 <__d2b+0x20>
 800abca:	4602      	mov	r2, r0
 800abcc:	f240 310f 	movw	r1, #783	; 0x30f
 800abd0:	4b22      	ldr	r3, [pc, #136]	; (800ac5c <__d2b+0xa4>)
 800abd2:	4823      	ldr	r0, [pc, #140]	; (800ac60 <__d2b+0xa8>)
 800abd4:	f001 fba2 	bl	800c31c <__assert_func>
 800abd8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800abdc:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800abe0:	bb24      	cbnz	r4, 800ac2c <__d2b+0x74>
 800abe2:	2f00      	cmp	r7, #0
 800abe4:	9301      	str	r3, [sp, #4]
 800abe6:	d026      	beq.n	800ac36 <__d2b+0x7e>
 800abe8:	4668      	mov	r0, sp
 800abea:	9700      	str	r7, [sp, #0]
 800abec:	f7ff fd22 	bl	800a634 <__lo0bits>
 800abf0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abf4:	b1e8      	cbz	r0, 800ac32 <__d2b+0x7a>
 800abf6:	f1c0 0320 	rsb	r3, r0, #32
 800abfa:	fa02 f303 	lsl.w	r3, r2, r3
 800abfe:	430b      	orrs	r3, r1
 800ac00:	40c2      	lsrs	r2, r0
 800ac02:	616b      	str	r3, [r5, #20]
 800ac04:	9201      	str	r2, [sp, #4]
 800ac06:	9b01      	ldr	r3, [sp, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	bf14      	ite	ne
 800ac0c:	2102      	movne	r1, #2
 800ac0e:	2101      	moveq	r1, #1
 800ac10:	61ab      	str	r3, [r5, #24]
 800ac12:	6129      	str	r1, [r5, #16]
 800ac14:	b1bc      	cbz	r4, 800ac46 <__d2b+0x8e>
 800ac16:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac1a:	4404      	add	r4, r0
 800ac1c:	6034      	str	r4, [r6, #0]
 800ac1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac24:	6018      	str	r0, [r3, #0]
 800ac26:	4628      	mov	r0, r5
 800ac28:	b003      	add	sp, #12
 800ac2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac30:	e7d7      	b.n	800abe2 <__d2b+0x2a>
 800ac32:	6169      	str	r1, [r5, #20]
 800ac34:	e7e7      	b.n	800ac06 <__d2b+0x4e>
 800ac36:	a801      	add	r0, sp, #4
 800ac38:	f7ff fcfc 	bl	800a634 <__lo0bits>
 800ac3c:	9b01      	ldr	r3, [sp, #4]
 800ac3e:	2101      	movs	r1, #1
 800ac40:	616b      	str	r3, [r5, #20]
 800ac42:	3020      	adds	r0, #32
 800ac44:	e7e5      	b.n	800ac12 <__d2b+0x5a>
 800ac46:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac4a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ac4e:	6030      	str	r0, [r6, #0]
 800ac50:	6918      	ldr	r0, [r3, #16]
 800ac52:	f7ff fccf 	bl	800a5f4 <__hi0bits>
 800ac56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ac5a:	e7e2      	b.n	800ac22 <__d2b+0x6a>
 800ac5c:	0800cd3b 	.word	0x0800cd3b
 800ac60:	0800cd4c 	.word	0x0800cd4c

0800ac64 <__ratio>:
 800ac64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac68:	4688      	mov	r8, r1
 800ac6a:	4669      	mov	r1, sp
 800ac6c:	4681      	mov	r9, r0
 800ac6e:	f7ff ff5b 	bl	800ab28 <__b2d>
 800ac72:	460f      	mov	r7, r1
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	4640      	mov	r0, r8
 800ac7a:	a901      	add	r1, sp, #4
 800ac7c:	f7ff ff54 	bl	800ab28 <__b2d>
 800ac80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac84:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac88:	468b      	mov	fp, r1
 800ac8a:	eba3 0c02 	sub.w	ip, r3, r2
 800ac8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	bfd5      	itete	le
 800ac9c:	460a      	movle	r2, r1
 800ac9e:	462a      	movgt	r2, r5
 800aca0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aca4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aca8:	bfd8      	it	le
 800acaa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800acae:	465b      	mov	r3, fp
 800acb0:	4602      	mov	r2, r0
 800acb2:	4639      	mov	r1, r7
 800acb4:	4620      	mov	r0, r4
 800acb6:	f7f5 fda5 	bl	8000804 <__aeabi_ddiv>
 800acba:	b003      	add	sp, #12
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acc0 <__copybits>:
 800acc0:	3901      	subs	r1, #1
 800acc2:	b570      	push	{r4, r5, r6, lr}
 800acc4:	1149      	asrs	r1, r1, #5
 800acc6:	6914      	ldr	r4, [r2, #16]
 800acc8:	3101      	adds	r1, #1
 800acca:	f102 0314 	add.w	r3, r2, #20
 800acce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acd6:	1f05      	subs	r5, r0, #4
 800acd8:	42a3      	cmp	r3, r4
 800acda:	d30c      	bcc.n	800acf6 <__copybits+0x36>
 800acdc:	1aa3      	subs	r3, r4, r2
 800acde:	3b11      	subs	r3, #17
 800ace0:	f023 0303 	bic.w	r3, r3, #3
 800ace4:	3211      	adds	r2, #17
 800ace6:	42a2      	cmp	r2, r4
 800ace8:	bf88      	it	hi
 800acea:	2300      	movhi	r3, #0
 800acec:	4418      	add	r0, r3
 800acee:	2300      	movs	r3, #0
 800acf0:	4288      	cmp	r0, r1
 800acf2:	d305      	bcc.n	800ad00 <__copybits+0x40>
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
 800acf6:	f853 6b04 	ldr.w	r6, [r3], #4
 800acfa:	f845 6f04 	str.w	r6, [r5, #4]!
 800acfe:	e7eb      	b.n	800acd8 <__copybits+0x18>
 800ad00:	f840 3b04 	str.w	r3, [r0], #4
 800ad04:	e7f4      	b.n	800acf0 <__copybits+0x30>

0800ad06 <__any_on>:
 800ad06:	f100 0214 	add.w	r2, r0, #20
 800ad0a:	6900      	ldr	r0, [r0, #16]
 800ad0c:	114b      	asrs	r3, r1, #5
 800ad0e:	4298      	cmp	r0, r3
 800ad10:	b510      	push	{r4, lr}
 800ad12:	db11      	blt.n	800ad38 <__any_on+0x32>
 800ad14:	dd0a      	ble.n	800ad2c <__any_on+0x26>
 800ad16:	f011 011f 	ands.w	r1, r1, #31
 800ad1a:	d007      	beq.n	800ad2c <__any_on+0x26>
 800ad1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad20:	fa24 f001 	lsr.w	r0, r4, r1
 800ad24:	fa00 f101 	lsl.w	r1, r0, r1
 800ad28:	428c      	cmp	r4, r1
 800ad2a:	d10b      	bne.n	800ad44 <__any_on+0x3e>
 800ad2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d803      	bhi.n	800ad3c <__any_on+0x36>
 800ad34:	2000      	movs	r0, #0
 800ad36:	bd10      	pop	{r4, pc}
 800ad38:	4603      	mov	r3, r0
 800ad3a:	e7f7      	b.n	800ad2c <__any_on+0x26>
 800ad3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad40:	2900      	cmp	r1, #0
 800ad42:	d0f5      	beq.n	800ad30 <__any_on+0x2a>
 800ad44:	2001      	movs	r0, #1
 800ad46:	e7f6      	b.n	800ad36 <__any_on+0x30>

0800ad48 <sulp>:
 800ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	4690      	mov	r8, r2
 800ad50:	f7ff feca 	bl	800aae8 <__ulp>
 800ad54:	4604      	mov	r4, r0
 800ad56:	460d      	mov	r5, r1
 800ad58:	f1b8 0f00 	cmp.w	r8, #0
 800ad5c:	d011      	beq.n	800ad82 <sulp+0x3a>
 800ad5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ad62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dd0b      	ble.n	800ad82 <sulp+0x3a>
 800ad6a:	2400      	movs	r4, #0
 800ad6c:	051b      	lsls	r3, r3, #20
 800ad6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad76:	4622      	mov	r2, r4
 800ad78:	462b      	mov	r3, r5
 800ad7a:	f7f5 fc19 	bl	80005b0 <__aeabi_dmul>
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	4620      	mov	r0, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8a:	0000      	movs	r0, r0
 800ad8c:	0000      	movs	r0, r0
	...

0800ad90 <_strtod_l>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	b09f      	sub	sp, #124	; 0x7c
 800ad96:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad98:	2200      	movs	r2, #0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	921a      	str	r2, [sp, #104]	; 0x68
 800ad9e:	460d      	mov	r5, r1
 800ada0:	f04f 0800 	mov.w	r8, #0
 800ada4:	f04f 0900 	mov.w	r9, #0
 800ada8:	460a      	mov	r2, r1
 800adaa:	9219      	str	r2, [sp, #100]	; 0x64
 800adac:	7811      	ldrb	r1, [r2, #0]
 800adae:	292b      	cmp	r1, #43	; 0x2b
 800adb0:	d04a      	beq.n	800ae48 <_strtod_l+0xb8>
 800adb2:	d838      	bhi.n	800ae26 <_strtod_l+0x96>
 800adb4:	290d      	cmp	r1, #13
 800adb6:	d832      	bhi.n	800ae1e <_strtod_l+0x8e>
 800adb8:	2908      	cmp	r1, #8
 800adba:	d832      	bhi.n	800ae22 <_strtod_l+0x92>
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d03b      	beq.n	800ae38 <_strtod_l+0xa8>
 800adc0:	2200      	movs	r2, #0
 800adc2:	920e      	str	r2, [sp, #56]	; 0x38
 800adc4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800adc6:	7832      	ldrb	r2, [r6, #0]
 800adc8:	2a30      	cmp	r2, #48	; 0x30
 800adca:	f040 80b2 	bne.w	800af32 <_strtod_l+0x1a2>
 800adce:	7872      	ldrb	r2, [r6, #1]
 800add0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800add4:	2a58      	cmp	r2, #88	; 0x58
 800add6:	d16e      	bne.n	800aeb6 <_strtod_l+0x126>
 800add8:	9302      	str	r3, [sp, #8]
 800adda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800addc:	4620      	mov	r0, r4
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	ab1a      	add	r3, sp, #104	; 0x68
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	4a8c      	ldr	r2, [pc, #560]	; (800b018 <_strtod_l+0x288>)
 800ade6:	ab1b      	add	r3, sp, #108	; 0x6c
 800ade8:	a919      	add	r1, sp, #100	; 0x64
 800adea:	f001 fb31 	bl	800c450 <__gethex>
 800adee:	f010 070f 	ands.w	r7, r0, #15
 800adf2:	4605      	mov	r5, r0
 800adf4:	d005      	beq.n	800ae02 <_strtod_l+0x72>
 800adf6:	2f06      	cmp	r7, #6
 800adf8:	d128      	bne.n	800ae4c <_strtod_l+0xbc>
 800adfa:	2300      	movs	r3, #0
 800adfc:	3601      	adds	r6, #1
 800adfe:	9619      	str	r6, [sp, #100]	; 0x64
 800ae00:	930e      	str	r3, [sp, #56]	; 0x38
 800ae02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f040 85a0 	bne.w	800b94a <_strtod_l+0xbba>
 800ae0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae0c:	b1cb      	cbz	r3, 800ae42 <_strtod_l+0xb2>
 800ae0e:	4642      	mov	r2, r8
 800ae10:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae14:	4610      	mov	r0, r2
 800ae16:	4619      	mov	r1, r3
 800ae18:	b01f      	add	sp, #124	; 0x7c
 800ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1e:	2920      	cmp	r1, #32
 800ae20:	d1ce      	bne.n	800adc0 <_strtod_l+0x30>
 800ae22:	3201      	adds	r2, #1
 800ae24:	e7c1      	b.n	800adaa <_strtod_l+0x1a>
 800ae26:	292d      	cmp	r1, #45	; 0x2d
 800ae28:	d1ca      	bne.n	800adc0 <_strtod_l+0x30>
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	910e      	str	r1, [sp, #56]	; 0x38
 800ae2e:	1c51      	adds	r1, r2, #1
 800ae30:	9119      	str	r1, [sp, #100]	; 0x64
 800ae32:	7852      	ldrb	r2, [r2, #1]
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	d1c5      	bne.n	800adc4 <_strtod_l+0x34>
 800ae38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae3a:	9519      	str	r5, [sp, #100]	; 0x64
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 8582 	bne.w	800b946 <_strtod_l+0xbb6>
 800ae42:	4642      	mov	r2, r8
 800ae44:	464b      	mov	r3, r9
 800ae46:	e7e5      	b.n	800ae14 <_strtod_l+0x84>
 800ae48:	2100      	movs	r1, #0
 800ae4a:	e7ef      	b.n	800ae2c <_strtod_l+0x9c>
 800ae4c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae4e:	b13a      	cbz	r2, 800ae60 <_strtod_l+0xd0>
 800ae50:	2135      	movs	r1, #53	; 0x35
 800ae52:	a81c      	add	r0, sp, #112	; 0x70
 800ae54:	f7ff ff34 	bl	800acc0 <__copybits>
 800ae58:	4620      	mov	r0, r4
 800ae5a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ae5c:	f7ff fb18 	bl	800a490 <_Bfree>
 800ae60:	3f01      	subs	r7, #1
 800ae62:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ae64:	2f04      	cmp	r7, #4
 800ae66:	d806      	bhi.n	800ae76 <_strtod_l+0xe6>
 800ae68:	e8df f007 	tbb	[pc, r7]
 800ae6c:	201d0314 	.word	0x201d0314
 800ae70:	14          	.byte	0x14
 800ae71:	00          	.byte	0x00
 800ae72:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ae76:	05e9      	lsls	r1, r5, #23
 800ae78:	bf48      	it	mi
 800ae7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ae7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae82:	0d1b      	lsrs	r3, r3, #20
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1bb      	bne.n	800ae02 <_strtod_l+0x72>
 800ae8a:	f7fe fb19 	bl	80094c0 <__errno>
 800ae8e:	2322      	movs	r3, #34	; 0x22
 800ae90:	6003      	str	r3, [r0, #0]
 800ae92:	e7b6      	b.n	800ae02 <_strtod_l+0x72>
 800ae94:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae98:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ae9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aea0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800aea4:	e7e7      	b.n	800ae76 <_strtod_l+0xe6>
 800aea6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b01c <_strtod_l+0x28c>
 800aeaa:	e7e4      	b.n	800ae76 <_strtod_l+0xe6>
 800aeac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aeb0:	f04f 38ff 	mov.w	r8, #4294967295
 800aeb4:	e7df      	b.n	800ae76 <_strtod_l+0xe6>
 800aeb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	9219      	str	r2, [sp, #100]	; 0x64
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	2b30      	cmp	r3, #48	; 0x30
 800aec0:	d0f9      	beq.n	800aeb6 <_strtod_l+0x126>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d09d      	beq.n	800ae02 <_strtod_l+0x72>
 800aec6:	2301      	movs	r3, #1
 800aec8:	f04f 0a00 	mov.w	sl, #0
 800aecc:	220a      	movs	r2, #10
 800aece:	46d3      	mov	fp, sl
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aed4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800aed8:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeda:	9819      	ldr	r0, [sp, #100]	; 0x64
 800aedc:	7806      	ldrb	r6, [r0, #0]
 800aede:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aee2:	b2d9      	uxtb	r1, r3
 800aee4:	2909      	cmp	r1, #9
 800aee6:	d926      	bls.n	800af36 <_strtod_l+0x1a6>
 800aee8:	2201      	movs	r2, #1
 800aeea:	494d      	ldr	r1, [pc, #308]	; (800b020 <_strtod_l+0x290>)
 800aeec:	f001 f9bd 	bl	800c26a <strncmp>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d030      	beq.n	800af56 <_strtod_l+0x1c6>
 800aef4:	2000      	movs	r0, #0
 800aef6:	4632      	mov	r2, r6
 800aef8:	4603      	mov	r3, r0
 800aefa:	465e      	mov	r6, fp
 800aefc:	9008      	str	r0, [sp, #32]
 800aefe:	2a65      	cmp	r2, #101	; 0x65
 800af00:	d001      	beq.n	800af06 <_strtod_l+0x176>
 800af02:	2a45      	cmp	r2, #69	; 0x45
 800af04:	d113      	bne.n	800af2e <_strtod_l+0x19e>
 800af06:	b91e      	cbnz	r6, 800af10 <_strtod_l+0x180>
 800af08:	9a05      	ldr	r2, [sp, #20]
 800af0a:	4302      	orrs	r2, r0
 800af0c:	d094      	beq.n	800ae38 <_strtod_l+0xa8>
 800af0e:	2600      	movs	r6, #0
 800af10:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800af12:	1c6a      	adds	r2, r5, #1
 800af14:	9219      	str	r2, [sp, #100]	; 0x64
 800af16:	786a      	ldrb	r2, [r5, #1]
 800af18:	2a2b      	cmp	r2, #43	; 0x2b
 800af1a:	d074      	beq.n	800b006 <_strtod_l+0x276>
 800af1c:	2a2d      	cmp	r2, #45	; 0x2d
 800af1e:	d078      	beq.n	800b012 <_strtod_l+0x282>
 800af20:	f04f 0c00 	mov.w	ip, #0
 800af24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800af28:	2909      	cmp	r1, #9
 800af2a:	d97f      	bls.n	800b02c <_strtod_l+0x29c>
 800af2c:	9519      	str	r5, [sp, #100]	; 0x64
 800af2e:	2700      	movs	r7, #0
 800af30:	e09e      	b.n	800b070 <_strtod_l+0x2e0>
 800af32:	2300      	movs	r3, #0
 800af34:	e7c8      	b.n	800aec8 <_strtod_l+0x138>
 800af36:	f1bb 0f08 	cmp.w	fp, #8
 800af3a:	bfd8      	it	le
 800af3c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800af3e:	f100 0001 	add.w	r0, r0, #1
 800af42:	bfd6      	itet	le
 800af44:	fb02 3301 	mlale	r3, r2, r1, r3
 800af48:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800af4c:	930a      	strle	r3, [sp, #40]	; 0x28
 800af4e:	f10b 0b01 	add.w	fp, fp, #1
 800af52:	9019      	str	r0, [sp, #100]	; 0x64
 800af54:	e7c1      	b.n	800aeda <_strtod_l+0x14a>
 800af56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	9219      	str	r2, [sp, #100]	; 0x64
 800af5c:	785a      	ldrb	r2, [r3, #1]
 800af5e:	f1bb 0f00 	cmp.w	fp, #0
 800af62:	d037      	beq.n	800afd4 <_strtod_l+0x244>
 800af64:	465e      	mov	r6, fp
 800af66:	9008      	str	r0, [sp, #32]
 800af68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800af6c:	2b09      	cmp	r3, #9
 800af6e:	d912      	bls.n	800af96 <_strtod_l+0x206>
 800af70:	2301      	movs	r3, #1
 800af72:	e7c4      	b.n	800aefe <_strtod_l+0x16e>
 800af74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af76:	3001      	adds	r0, #1
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	9219      	str	r2, [sp, #100]	; 0x64
 800af7c:	785a      	ldrb	r2, [r3, #1]
 800af7e:	2a30      	cmp	r2, #48	; 0x30
 800af80:	d0f8      	beq.n	800af74 <_strtod_l+0x1e4>
 800af82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af86:	2b08      	cmp	r3, #8
 800af88:	f200 84e4 	bhi.w	800b954 <_strtod_l+0xbc4>
 800af8c:	9008      	str	r0, [sp, #32]
 800af8e:	2000      	movs	r0, #0
 800af90:	4606      	mov	r6, r0
 800af92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af94:	930b      	str	r3, [sp, #44]	; 0x2c
 800af96:	3a30      	subs	r2, #48	; 0x30
 800af98:	f100 0301 	add.w	r3, r0, #1
 800af9c:	d014      	beq.n	800afc8 <_strtod_l+0x238>
 800af9e:	9908      	ldr	r1, [sp, #32]
 800afa0:	eb00 0c06 	add.w	ip, r0, r6
 800afa4:	4419      	add	r1, r3
 800afa6:	9108      	str	r1, [sp, #32]
 800afa8:	4633      	mov	r3, r6
 800afaa:	210a      	movs	r1, #10
 800afac:	4563      	cmp	r3, ip
 800afae:	d113      	bne.n	800afd8 <_strtod_l+0x248>
 800afb0:	1833      	adds	r3, r6, r0
 800afb2:	2b08      	cmp	r3, #8
 800afb4:	f106 0601 	add.w	r6, r6, #1
 800afb8:	4406      	add	r6, r0
 800afba:	dc1a      	bgt.n	800aff2 <_strtod_l+0x262>
 800afbc:	230a      	movs	r3, #10
 800afbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800afc0:	fb03 2301 	mla	r3, r3, r1, r2
 800afc4:	930a      	str	r3, [sp, #40]	; 0x28
 800afc6:	2300      	movs	r3, #0
 800afc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800afca:	4618      	mov	r0, r3
 800afcc:	1c51      	adds	r1, r2, #1
 800afce:	9119      	str	r1, [sp, #100]	; 0x64
 800afd0:	7852      	ldrb	r2, [r2, #1]
 800afd2:	e7c9      	b.n	800af68 <_strtod_l+0x1d8>
 800afd4:	4658      	mov	r0, fp
 800afd6:	e7d2      	b.n	800af7e <_strtod_l+0x1ee>
 800afd8:	2b08      	cmp	r3, #8
 800afda:	f103 0301 	add.w	r3, r3, #1
 800afde:	dc03      	bgt.n	800afe8 <_strtod_l+0x258>
 800afe0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800afe2:	434f      	muls	r7, r1
 800afe4:	970a      	str	r7, [sp, #40]	; 0x28
 800afe6:	e7e1      	b.n	800afac <_strtod_l+0x21c>
 800afe8:	2b10      	cmp	r3, #16
 800afea:	bfd8      	it	le
 800afec:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aff0:	e7dc      	b.n	800afac <_strtod_l+0x21c>
 800aff2:	2e10      	cmp	r6, #16
 800aff4:	bfdc      	itt	le
 800aff6:	230a      	movle	r3, #10
 800aff8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800affc:	e7e3      	b.n	800afc6 <_strtod_l+0x236>
 800affe:	2300      	movs	r3, #0
 800b000:	9308      	str	r3, [sp, #32]
 800b002:	2301      	movs	r3, #1
 800b004:	e780      	b.n	800af08 <_strtod_l+0x178>
 800b006:	f04f 0c00 	mov.w	ip, #0
 800b00a:	1caa      	adds	r2, r5, #2
 800b00c:	9219      	str	r2, [sp, #100]	; 0x64
 800b00e:	78aa      	ldrb	r2, [r5, #2]
 800b010:	e788      	b.n	800af24 <_strtod_l+0x194>
 800b012:	f04f 0c01 	mov.w	ip, #1
 800b016:	e7f8      	b.n	800b00a <_strtod_l+0x27a>
 800b018:	0800cea8 	.word	0x0800cea8
 800b01c:	7ff00000 	.word	0x7ff00000
 800b020:	0800cea4 	.word	0x0800cea4
 800b024:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b026:	1c51      	adds	r1, r2, #1
 800b028:	9119      	str	r1, [sp, #100]	; 0x64
 800b02a:	7852      	ldrb	r2, [r2, #1]
 800b02c:	2a30      	cmp	r2, #48	; 0x30
 800b02e:	d0f9      	beq.n	800b024 <_strtod_l+0x294>
 800b030:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b034:	2908      	cmp	r1, #8
 800b036:	f63f af7a 	bhi.w	800af2e <_strtod_l+0x19e>
 800b03a:	3a30      	subs	r2, #48	; 0x30
 800b03c:	9209      	str	r2, [sp, #36]	; 0x24
 800b03e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b040:	920c      	str	r2, [sp, #48]	; 0x30
 800b042:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b044:	1c57      	adds	r7, r2, #1
 800b046:	9719      	str	r7, [sp, #100]	; 0x64
 800b048:	7852      	ldrb	r2, [r2, #1]
 800b04a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b04e:	f1be 0f09 	cmp.w	lr, #9
 800b052:	d938      	bls.n	800b0c6 <_strtod_l+0x336>
 800b054:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b056:	1a7f      	subs	r7, r7, r1
 800b058:	2f08      	cmp	r7, #8
 800b05a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b05e:	dc03      	bgt.n	800b068 <_strtod_l+0x2d8>
 800b060:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b062:	428f      	cmp	r7, r1
 800b064:	bfa8      	it	ge
 800b066:	460f      	movge	r7, r1
 800b068:	f1bc 0f00 	cmp.w	ip, #0
 800b06c:	d000      	beq.n	800b070 <_strtod_l+0x2e0>
 800b06e:	427f      	negs	r7, r7
 800b070:	2e00      	cmp	r6, #0
 800b072:	d14f      	bne.n	800b114 <_strtod_l+0x384>
 800b074:	9905      	ldr	r1, [sp, #20]
 800b076:	4301      	orrs	r1, r0
 800b078:	f47f aec3 	bne.w	800ae02 <_strtod_l+0x72>
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f47f aedb 	bne.w	800ae38 <_strtod_l+0xa8>
 800b082:	2a69      	cmp	r2, #105	; 0x69
 800b084:	d029      	beq.n	800b0da <_strtod_l+0x34a>
 800b086:	dc26      	bgt.n	800b0d6 <_strtod_l+0x346>
 800b088:	2a49      	cmp	r2, #73	; 0x49
 800b08a:	d026      	beq.n	800b0da <_strtod_l+0x34a>
 800b08c:	2a4e      	cmp	r2, #78	; 0x4e
 800b08e:	f47f aed3 	bne.w	800ae38 <_strtod_l+0xa8>
 800b092:	499a      	ldr	r1, [pc, #616]	; (800b2fc <_strtod_l+0x56c>)
 800b094:	a819      	add	r0, sp, #100	; 0x64
 800b096:	f001 fc1d 	bl	800c8d4 <__match>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f aecc 	beq.w	800ae38 <_strtod_l+0xa8>
 800b0a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	2b28      	cmp	r3, #40	; 0x28
 800b0a6:	d12f      	bne.n	800b108 <_strtod_l+0x378>
 800b0a8:	4995      	ldr	r1, [pc, #596]	; (800b300 <_strtod_l+0x570>)
 800b0aa:	aa1c      	add	r2, sp, #112	; 0x70
 800b0ac:	a819      	add	r0, sp, #100	; 0x64
 800b0ae:	f001 fc25 	bl	800c8fc <__hexnan>
 800b0b2:	2805      	cmp	r0, #5
 800b0b4:	d128      	bne.n	800b108 <_strtod_l+0x378>
 800b0b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0b8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800b0bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b0c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b0c4:	e69d      	b.n	800ae02 <_strtod_l+0x72>
 800b0c6:	210a      	movs	r1, #10
 800b0c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0ca:	fb01 2107 	mla	r1, r1, r7, r2
 800b0ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b0d2:	9209      	str	r2, [sp, #36]	; 0x24
 800b0d4:	e7b5      	b.n	800b042 <_strtod_l+0x2b2>
 800b0d6:	2a6e      	cmp	r2, #110	; 0x6e
 800b0d8:	e7d9      	b.n	800b08e <_strtod_l+0x2fe>
 800b0da:	498a      	ldr	r1, [pc, #552]	; (800b304 <_strtod_l+0x574>)
 800b0dc:	a819      	add	r0, sp, #100	; 0x64
 800b0de:	f001 fbf9 	bl	800c8d4 <__match>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	f43f aea8 	beq.w	800ae38 <_strtod_l+0xa8>
 800b0e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0ea:	4987      	ldr	r1, [pc, #540]	; (800b308 <_strtod_l+0x578>)
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	a819      	add	r0, sp, #100	; 0x64
 800b0f0:	9319      	str	r3, [sp, #100]	; 0x64
 800b0f2:	f001 fbef 	bl	800c8d4 <__match>
 800b0f6:	b910      	cbnz	r0, 800b0fe <_strtod_l+0x36e>
 800b0f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	9319      	str	r3, [sp, #100]	; 0x64
 800b0fe:	f04f 0800 	mov.w	r8, #0
 800b102:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b30c <_strtod_l+0x57c>
 800b106:	e67c      	b.n	800ae02 <_strtod_l+0x72>
 800b108:	4881      	ldr	r0, [pc, #516]	; (800b310 <_strtod_l+0x580>)
 800b10a:	f001 f901 	bl	800c310 <nan>
 800b10e:	4680      	mov	r8, r0
 800b110:	4689      	mov	r9, r1
 800b112:	e676      	b.n	800ae02 <_strtod_l+0x72>
 800b114:	9b08      	ldr	r3, [sp, #32]
 800b116:	f1bb 0f00 	cmp.w	fp, #0
 800b11a:	bf08      	it	eq
 800b11c:	46b3      	moveq	fp, r6
 800b11e:	1afb      	subs	r3, r7, r3
 800b120:	2e10      	cmp	r6, #16
 800b122:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b124:	4635      	mov	r5, r6
 800b126:	9309      	str	r3, [sp, #36]	; 0x24
 800b128:	bfa8      	it	ge
 800b12a:	2510      	movge	r5, #16
 800b12c:	f7f5 f9c6 	bl	80004bc <__aeabi_ui2d>
 800b130:	2e09      	cmp	r6, #9
 800b132:	4680      	mov	r8, r0
 800b134:	4689      	mov	r9, r1
 800b136:	dd13      	ble.n	800b160 <_strtod_l+0x3d0>
 800b138:	4b76      	ldr	r3, [pc, #472]	; (800b314 <_strtod_l+0x584>)
 800b13a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b13e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b142:	f7f5 fa35 	bl	80005b0 <__aeabi_dmul>
 800b146:	4680      	mov	r8, r0
 800b148:	4650      	mov	r0, sl
 800b14a:	4689      	mov	r9, r1
 800b14c:	f7f5 f9b6 	bl	80004bc <__aeabi_ui2d>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4640      	mov	r0, r8
 800b156:	4649      	mov	r1, r9
 800b158:	f7f5 f874 	bl	8000244 <__adddf3>
 800b15c:	4680      	mov	r8, r0
 800b15e:	4689      	mov	r9, r1
 800b160:	2e0f      	cmp	r6, #15
 800b162:	dc36      	bgt.n	800b1d2 <_strtod_l+0x442>
 800b164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b166:	2b00      	cmp	r3, #0
 800b168:	f43f ae4b 	beq.w	800ae02 <_strtod_l+0x72>
 800b16c:	dd22      	ble.n	800b1b4 <_strtod_l+0x424>
 800b16e:	2b16      	cmp	r3, #22
 800b170:	dc09      	bgt.n	800b186 <_strtod_l+0x3f6>
 800b172:	4968      	ldr	r1, [pc, #416]	; (800b314 <_strtod_l+0x584>)
 800b174:	4642      	mov	r2, r8
 800b176:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b17a:	464b      	mov	r3, r9
 800b17c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b180:	f7f5 fa16 	bl	80005b0 <__aeabi_dmul>
 800b184:	e7c3      	b.n	800b10e <_strtod_l+0x37e>
 800b186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b188:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b18c:	4293      	cmp	r3, r2
 800b18e:	db20      	blt.n	800b1d2 <_strtod_l+0x442>
 800b190:	4c60      	ldr	r4, [pc, #384]	; (800b314 <_strtod_l+0x584>)
 800b192:	f1c6 060f 	rsb	r6, r6, #15
 800b196:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b19a:	4642      	mov	r2, r8
 800b19c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1a0:	464b      	mov	r3, r9
 800b1a2:	f7f5 fa05 	bl	80005b0 <__aeabi_dmul>
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	1b9e      	subs	r6, r3, r6
 800b1aa:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b1ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1b2:	e7e5      	b.n	800b180 <_strtod_l+0x3f0>
 800b1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b6:	3316      	adds	r3, #22
 800b1b8:	db0b      	blt.n	800b1d2 <_strtod_l+0x442>
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	4640      	mov	r0, r8
 800b1be:	1bdf      	subs	r7, r3, r7
 800b1c0:	4b54      	ldr	r3, [pc, #336]	; (800b314 <_strtod_l+0x584>)
 800b1c2:	4649      	mov	r1, r9
 800b1c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1cc:	f7f5 fb1a 	bl	8000804 <__aeabi_ddiv>
 800b1d0:	e79d      	b.n	800b10e <_strtod_l+0x37e>
 800b1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d4:	1b75      	subs	r5, r6, r5
 800b1d6:	441d      	add	r5, r3
 800b1d8:	2d00      	cmp	r5, #0
 800b1da:	dd70      	ble.n	800b2be <_strtod_l+0x52e>
 800b1dc:	f015 030f 	ands.w	r3, r5, #15
 800b1e0:	d00a      	beq.n	800b1f8 <_strtod_l+0x468>
 800b1e2:	494c      	ldr	r1, [pc, #304]	; (800b314 <_strtod_l+0x584>)
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ee:	464b      	mov	r3, r9
 800b1f0:	f7f5 f9de 	bl	80005b0 <__aeabi_dmul>
 800b1f4:	4680      	mov	r8, r0
 800b1f6:	4689      	mov	r9, r1
 800b1f8:	f035 050f 	bics.w	r5, r5, #15
 800b1fc:	d04d      	beq.n	800b29a <_strtod_l+0x50a>
 800b1fe:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b202:	dd22      	ble.n	800b24a <_strtod_l+0x4ba>
 800b204:	2600      	movs	r6, #0
 800b206:	46b3      	mov	fp, r6
 800b208:	960b      	str	r6, [sp, #44]	; 0x2c
 800b20a:	9608      	str	r6, [sp, #32]
 800b20c:	2322      	movs	r3, #34	; 0x22
 800b20e:	f04f 0800 	mov.w	r8, #0
 800b212:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b30c <_strtod_l+0x57c>
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f43f adf1 	beq.w	800ae02 <_strtod_l+0x72>
 800b220:	4620      	mov	r0, r4
 800b222:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b224:	f7ff f934 	bl	800a490 <_Bfree>
 800b228:	4620      	mov	r0, r4
 800b22a:	9908      	ldr	r1, [sp, #32]
 800b22c:	f7ff f930 	bl	800a490 <_Bfree>
 800b230:	4659      	mov	r1, fp
 800b232:	4620      	mov	r0, r4
 800b234:	f7ff f92c 	bl	800a490 <_Bfree>
 800b238:	4620      	mov	r0, r4
 800b23a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b23c:	f7ff f928 	bl	800a490 <_Bfree>
 800b240:	4631      	mov	r1, r6
 800b242:	4620      	mov	r0, r4
 800b244:	f7ff f924 	bl	800a490 <_Bfree>
 800b248:	e5db      	b.n	800ae02 <_strtod_l+0x72>
 800b24a:	4b33      	ldr	r3, [pc, #204]	; (800b318 <_strtod_l+0x588>)
 800b24c:	4640      	mov	r0, r8
 800b24e:	9305      	str	r3, [sp, #20]
 800b250:	2300      	movs	r3, #0
 800b252:	4649      	mov	r1, r9
 800b254:	469a      	mov	sl, r3
 800b256:	112d      	asrs	r5, r5, #4
 800b258:	2d01      	cmp	r5, #1
 800b25a:	dc21      	bgt.n	800b2a0 <_strtod_l+0x510>
 800b25c:	b10b      	cbz	r3, 800b262 <_strtod_l+0x4d2>
 800b25e:	4680      	mov	r8, r0
 800b260:	4689      	mov	r9, r1
 800b262:	492d      	ldr	r1, [pc, #180]	; (800b318 <_strtod_l+0x588>)
 800b264:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b268:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b26c:	4642      	mov	r2, r8
 800b26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b272:	464b      	mov	r3, r9
 800b274:	f7f5 f99c 	bl	80005b0 <__aeabi_dmul>
 800b278:	4b24      	ldr	r3, [pc, #144]	; (800b30c <_strtod_l+0x57c>)
 800b27a:	460a      	mov	r2, r1
 800b27c:	400b      	ands	r3, r1
 800b27e:	4927      	ldr	r1, [pc, #156]	; (800b31c <_strtod_l+0x58c>)
 800b280:	4680      	mov	r8, r0
 800b282:	428b      	cmp	r3, r1
 800b284:	d8be      	bhi.n	800b204 <_strtod_l+0x474>
 800b286:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b28a:	428b      	cmp	r3, r1
 800b28c:	bf86      	itte	hi
 800b28e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b292:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b320 <_strtod_l+0x590>
 800b296:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b29a:	2300      	movs	r3, #0
 800b29c:	9305      	str	r3, [sp, #20]
 800b29e:	e07b      	b.n	800b398 <_strtod_l+0x608>
 800b2a0:	07ea      	lsls	r2, r5, #31
 800b2a2:	d505      	bpl.n	800b2b0 <_strtod_l+0x520>
 800b2a4:	9b05      	ldr	r3, [sp, #20]
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f7f5 f981 	bl	80005b0 <__aeabi_dmul>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	9a05      	ldr	r2, [sp, #20]
 800b2b2:	f10a 0a01 	add.w	sl, sl, #1
 800b2b6:	3208      	adds	r2, #8
 800b2b8:	106d      	asrs	r5, r5, #1
 800b2ba:	9205      	str	r2, [sp, #20]
 800b2bc:	e7cc      	b.n	800b258 <_strtod_l+0x4c8>
 800b2be:	d0ec      	beq.n	800b29a <_strtod_l+0x50a>
 800b2c0:	426d      	negs	r5, r5
 800b2c2:	f015 020f 	ands.w	r2, r5, #15
 800b2c6:	d00a      	beq.n	800b2de <_strtod_l+0x54e>
 800b2c8:	4b12      	ldr	r3, [pc, #72]	; (800b314 <_strtod_l+0x584>)
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f7f5 fa95 	bl	8000804 <__aeabi_ddiv>
 800b2da:	4680      	mov	r8, r0
 800b2dc:	4689      	mov	r9, r1
 800b2de:	112d      	asrs	r5, r5, #4
 800b2e0:	d0db      	beq.n	800b29a <_strtod_l+0x50a>
 800b2e2:	2d1f      	cmp	r5, #31
 800b2e4:	dd1e      	ble.n	800b324 <_strtod_l+0x594>
 800b2e6:	2600      	movs	r6, #0
 800b2e8:	46b3      	mov	fp, r6
 800b2ea:	960b      	str	r6, [sp, #44]	; 0x2c
 800b2ec:	9608      	str	r6, [sp, #32]
 800b2ee:	2322      	movs	r3, #34	; 0x22
 800b2f0:	f04f 0800 	mov.w	r8, #0
 800b2f4:	f04f 0900 	mov.w	r9, #0
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	e78d      	b.n	800b218 <_strtod_l+0x488>
 800b2fc:	0800cc93 	.word	0x0800cc93
 800b300:	0800cebc 	.word	0x0800cebc
 800b304:	0800cc8b 	.word	0x0800cc8b
 800b308:	0800ccc2 	.word	0x0800ccc2
 800b30c:	7ff00000 	.word	0x7ff00000
 800b310:	0800d04d 	.word	0x0800d04d
 800b314:	0800cdd0 	.word	0x0800cdd0
 800b318:	0800cda8 	.word	0x0800cda8
 800b31c:	7ca00000 	.word	0x7ca00000
 800b320:	7fefffff 	.word	0x7fefffff
 800b324:	f015 0310 	ands.w	r3, r5, #16
 800b328:	bf18      	it	ne
 800b32a:	236a      	movne	r3, #106	; 0x6a
 800b32c:	4640      	mov	r0, r8
 800b32e:	9305      	str	r3, [sp, #20]
 800b330:	4649      	mov	r1, r9
 800b332:	2300      	movs	r3, #0
 800b334:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b600 <_strtod_l+0x870>
 800b338:	07ea      	lsls	r2, r5, #31
 800b33a:	d504      	bpl.n	800b346 <_strtod_l+0x5b6>
 800b33c:	e9da 2300 	ldrd	r2, r3, [sl]
 800b340:	f7f5 f936 	bl	80005b0 <__aeabi_dmul>
 800b344:	2301      	movs	r3, #1
 800b346:	106d      	asrs	r5, r5, #1
 800b348:	f10a 0a08 	add.w	sl, sl, #8
 800b34c:	d1f4      	bne.n	800b338 <_strtod_l+0x5a8>
 800b34e:	b10b      	cbz	r3, 800b354 <_strtod_l+0x5c4>
 800b350:	4680      	mov	r8, r0
 800b352:	4689      	mov	r9, r1
 800b354:	9b05      	ldr	r3, [sp, #20]
 800b356:	b1bb      	cbz	r3, 800b388 <_strtod_l+0x5f8>
 800b358:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b35c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b360:	2b00      	cmp	r3, #0
 800b362:	4649      	mov	r1, r9
 800b364:	dd10      	ble.n	800b388 <_strtod_l+0x5f8>
 800b366:	2b1f      	cmp	r3, #31
 800b368:	f340 8128 	ble.w	800b5bc <_strtod_l+0x82c>
 800b36c:	2b34      	cmp	r3, #52	; 0x34
 800b36e:	bfd8      	it	le
 800b370:	f04f 33ff 	movle.w	r3, #4294967295
 800b374:	f04f 0800 	mov.w	r8, #0
 800b378:	bfcf      	iteee	gt
 800b37a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b37e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b382:	4093      	lslle	r3, r2
 800b384:	ea03 0901 	andle.w	r9, r3, r1
 800b388:	2200      	movs	r2, #0
 800b38a:	2300      	movs	r3, #0
 800b38c:	4640      	mov	r0, r8
 800b38e:	4649      	mov	r1, r9
 800b390:	f7f5 fb76 	bl	8000a80 <__aeabi_dcmpeq>
 800b394:	2800      	cmp	r0, #0
 800b396:	d1a6      	bne.n	800b2e6 <_strtod_l+0x556>
 800b398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39a:	465a      	mov	r2, fp
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4633      	mov	r3, r6
 800b3a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3a4:	f7ff f8dc 	bl	800a560 <__s2b>
 800b3a8:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f43f af2a 	beq.w	800b204 <_strtod_l+0x474>
 800b3b0:	2600      	movs	r6, #0
 800b3b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	2a00      	cmp	r2, #0
 800b3b8:	eba3 0307 	sub.w	r3, r3, r7
 800b3bc:	bfa8      	it	ge
 800b3be:	2300      	movge	r3, #0
 800b3c0:	46b3      	mov	fp, r6
 800b3c2:	9312      	str	r3, [sp, #72]	; 0x48
 800b3c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3c8:	9316      	str	r3, [sp, #88]	; 0x58
 800b3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	6859      	ldr	r1, [r3, #4]
 800b3d0:	f7ff f81e 	bl	800a410 <_Balloc>
 800b3d4:	9008      	str	r0, [sp, #32]
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f43f af18 	beq.w	800b20c <_strtod_l+0x47c>
 800b3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3de:	300c      	adds	r0, #12
 800b3e0:	691a      	ldr	r2, [r3, #16]
 800b3e2:	f103 010c 	add.w	r1, r3, #12
 800b3e6:	3202      	adds	r2, #2
 800b3e8:	0092      	lsls	r2, r2, #2
 800b3ea:	f000 ff83 	bl	800c2f4 <memcpy>
 800b3ee:	ab1c      	add	r3, sp, #112	; 0x70
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	ab1b      	add	r3, sp, #108	; 0x6c
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	4642      	mov	r2, r8
 800b3f8:	464b      	mov	r3, r9
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b400:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b404:	f7ff fbd8 	bl	800abb8 <__d2b>
 800b408:	901a      	str	r0, [sp, #104]	; 0x68
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f43f aefe 	beq.w	800b20c <_strtod_l+0x47c>
 800b410:	2101      	movs	r1, #1
 800b412:	4620      	mov	r0, r4
 800b414:	f7ff f93c 	bl	800a690 <__i2b>
 800b418:	4683      	mov	fp, r0
 800b41a:	2800      	cmp	r0, #0
 800b41c:	f43f aef6 	beq.w	800b20c <_strtod_l+0x47c>
 800b420:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b422:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b424:	2f00      	cmp	r7, #0
 800b426:	bfab      	itete	ge
 800b428:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800b42a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b42c:	eb07 0a03 	addge.w	sl, r7, r3
 800b430:	1bdd      	sublt	r5, r3, r7
 800b432:	9b05      	ldr	r3, [sp, #20]
 800b434:	bfa8      	it	ge
 800b436:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b438:	eba7 0703 	sub.w	r7, r7, r3
 800b43c:	4417      	add	r7, r2
 800b43e:	4b71      	ldr	r3, [pc, #452]	; (800b604 <_strtod_l+0x874>)
 800b440:	f107 37ff 	add.w	r7, r7, #4294967295
 800b444:	bfb8      	it	lt
 800b446:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b44a:	429f      	cmp	r7, r3
 800b44c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b450:	f280 80c7 	bge.w	800b5e2 <_strtod_l+0x852>
 800b454:	1bdb      	subs	r3, r3, r7
 800b456:	2b1f      	cmp	r3, #31
 800b458:	f04f 0101 	mov.w	r1, #1
 800b45c:	eba2 0203 	sub.w	r2, r2, r3
 800b460:	f300 80b3 	bgt.w	800b5ca <_strtod_l+0x83a>
 800b464:	fa01 f303 	lsl.w	r3, r1, r3
 800b468:	9313      	str	r3, [sp, #76]	; 0x4c
 800b46a:	2300      	movs	r3, #0
 800b46c:	9310      	str	r3, [sp, #64]	; 0x40
 800b46e:	eb0a 0702 	add.w	r7, sl, r2
 800b472:	9b05      	ldr	r3, [sp, #20]
 800b474:	45ba      	cmp	sl, r7
 800b476:	4415      	add	r5, r2
 800b478:	441d      	add	r5, r3
 800b47a:	4653      	mov	r3, sl
 800b47c:	bfa8      	it	ge
 800b47e:	463b      	movge	r3, r7
 800b480:	42ab      	cmp	r3, r5
 800b482:	bfa8      	it	ge
 800b484:	462b      	movge	r3, r5
 800b486:	2b00      	cmp	r3, #0
 800b488:	bfc2      	ittt	gt
 800b48a:	1aff      	subgt	r7, r7, r3
 800b48c:	1aed      	subgt	r5, r5, r3
 800b48e:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd17      	ble.n	800b4c8 <_strtod_l+0x738>
 800b498:	4659      	mov	r1, fp
 800b49a:	461a      	mov	r2, r3
 800b49c:	4620      	mov	r0, r4
 800b49e:	f7ff f9b5 	bl	800a80c <__pow5mult>
 800b4a2:	4683      	mov	fp, r0
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f43f aeb1 	beq.w	800b20c <_strtod_l+0x47c>
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff f904 	bl	800a6bc <__multiply>
 800b4b4:	900a      	str	r0, [sp, #40]	; 0x28
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f43f aea8 	beq.w	800b20c <_strtod_l+0x47c>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b4c0:	f7fe ffe6 	bl	800a490 <_Bfree>
 800b4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c8:	2f00      	cmp	r7, #0
 800b4ca:	f300 808f 	bgt.w	800b5ec <_strtod_l+0x85c>
 800b4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	dd08      	ble.n	800b4e6 <_strtod_l+0x756>
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b4d8:	9908      	ldr	r1, [sp, #32]
 800b4da:	f7ff f997 	bl	800a80c <__pow5mult>
 800b4de:	9008      	str	r0, [sp, #32]
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	f43f ae93 	beq.w	800b20c <_strtod_l+0x47c>
 800b4e6:	2d00      	cmp	r5, #0
 800b4e8:	dd08      	ble.n	800b4fc <_strtod_l+0x76c>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	9908      	ldr	r1, [sp, #32]
 800b4f0:	f7ff f9e6 	bl	800a8c0 <__lshift>
 800b4f4:	9008      	str	r0, [sp, #32]
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f43f ae88 	beq.w	800b20c <_strtod_l+0x47c>
 800b4fc:	f1ba 0f00 	cmp.w	sl, #0
 800b500:	dd08      	ble.n	800b514 <_strtod_l+0x784>
 800b502:	4659      	mov	r1, fp
 800b504:	4652      	mov	r2, sl
 800b506:	4620      	mov	r0, r4
 800b508:	f7ff f9da 	bl	800a8c0 <__lshift>
 800b50c:	4683      	mov	fp, r0
 800b50e:	2800      	cmp	r0, #0
 800b510:	f43f ae7c 	beq.w	800b20c <_strtod_l+0x47c>
 800b514:	4620      	mov	r0, r4
 800b516:	9a08      	ldr	r2, [sp, #32]
 800b518:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b51a:	f7ff fa59 	bl	800a9d0 <__mdiff>
 800b51e:	4606      	mov	r6, r0
 800b520:	2800      	cmp	r0, #0
 800b522:	f43f ae73 	beq.w	800b20c <_strtod_l+0x47c>
 800b526:	2500      	movs	r5, #0
 800b528:	68c3      	ldr	r3, [r0, #12]
 800b52a:	4659      	mov	r1, fp
 800b52c:	60c5      	str	r5, [r0, #12]
 800b52e:	930a      	str	r3, [sp, #40]	; 0x28
 800b530:	f7ff fa32 	bl	800a998 <__mcmp>
 800b534:	42a8      	cmp	r0, r5
 800b536:	da6b      	bge.n	800b610 <_strtod_l+0x880>
 800b538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b53a:	ea53 0308 	orrs.w	r3, r3, r8
 800b53e:	f040 808f 	bne.w	800b660 <_strtod_l+0x8d0>
 800b542:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b546:	2b00      	cmp	r3, #0
 800b548:	f040 808a 	bne.w	800b660 <_strtod_l+0x8d0>
 800b54c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b550:	0d1b      	lsrs	r3, r3, #20
 800b552:	051b      	lsls	r3, r3, #20
 800b554:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b558:	f240 8082 	bls.w	800b660 <_strtod_l+0x8d0>
 800b55c:	6973      	ldr	r3, [r6, #20]
 800b55e:	b913      	cbnz	r3, 800b566 <_strtod_l+0x7d6>
 800b560:	6933      	ldr	r3, [r6, #16]
 800b562:	2b01      	cmp	r3, #1
 800b564:	dd7c      	ble.n	800b660 <_strtod_l+0x8d0>
 800b566:	4631      	mov	r1, r6
 800b568:	2201      	movs	r2, #1
 800b56a:	4620      	mov	r0, r4
 800b56c:	f7ff f9a8 	bl	800a8c0 <__lshift>
 800b570:	4659      	mov	r1, fp
 800b572:	4606      	mov	r6, r0
 800b574:	f7ff fa10 	bl	800a998 <__mcmp>
 800b578:	2800      	cmp	r0, #0
 800b57a:	dd71      	ble.n	800b660 <_strtod_l+0x8d0>
 800b57c:	9905      	ldr	r1, [sp, #20]
 800b57e:	464b      	mov	r3, r9
 800b580:	4a21      	ldr	r2, [pc, #132]	; (800b608 <_strtod_l+0x878>)
 800b582:	2900      	cmp	r1, #0
 800b584:	f000 808d 	beq.w	800b6a2 <_strtod_l+0x912>
 800b588:	ea02 0109 	and.w	r1, r2, r9
 800b58c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b590:	f300 8087 	bgt.w	800b6a2 <_strtod_l+0x912>
 800b594:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b598:	f77f aea9 	ble.w	800b2ee <_strtod_l+0x55e>
 800b59c:	4640      	mov	r0, r8
 800b59e:	4649      	mov	r1, r9
 800b5a0:	4b1a      	ldr	r3, [pc, #104]	; (800b60c <_strtod_l+0x87c>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f7f5 f804 	bl	80005b0 <__aeabi_dmul>
 800b5a8:	4b17      	ldr	r3, [pc, #92]	; (800b608 <_strtod_l+0x878>)
 800b5aa:	4680      	mov	r8, r0
 800b5ac:	400b      	ands	r3, r1
 800b5ae:	4689      	mov	r9, r1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f47f ae35 	bne.w	800b220 <_strtod_l+0x490>
 800b5b6:	2322      	movs	r3, #34	; 0x22
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	e631      	b.n	800b220 <_strtod_l+0x490>
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c4:	ea03 0808 	and.w	r8, r3, r8
 800b5c8:	e6de      	b.n	800b388 <_strtod_l+0x5f8>
 800b5ca:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b5ce:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b5d2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b5d6:	37e2      	adds	r7, #226	; 0xe2
 800b5d8:	fa01 f307 	lsl.w	r3, r1, r7
 800b5dc:	9310      	str	r3, [sp, #64]	; 0x40
 800b5de:	9113      	str	r1, [sp, #76]	; 0x4c
 800b5e0:	e745      	b.n	800b46e <_strtod_l+0x6de>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9310      	str	r3, [sp, #64]	; 0x40
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b5ea:	e740      	b.n	800b46e <_strtod_l+0x6de>
 800b5ec:	463a      	mov	r2, r7
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b5f2:	f7ff f965 	bl	800a8c0 <__lshift>
 800b5f6:	901a      	str	r0, [sp, #104]	; 0x68
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	f47f af68 	bne.w	800b4ce <_strtod_l+0x73e>
 800b5fe:	e605      	b.n	800b20c <_strtod_l+0x47c>
 800b600:	0800ced0 	.word	0x0800ced0
 800b604:	fffffc02 	.word	0xfffffc02
 800b608:	7ff00000 	.word	0x7ff00000
 800b60c:	39500000 	.word	0x39500000
 800b610:	46ca      	mov	sl, r9
 800b612:	d165      	bne.n	800b6e0 <_strtod_l+0x950>
 800b614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b616:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b61a:	b352      	cbz	r2, 800b672 <_strtod_l+0x8e2>
 800b61c:	4a9e      	ldr	r2, [pc, #632]	; (800b898 <_strtod_l+0xb08>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d12a      	bne.n	800b678 <_strtod_l+0x8e8>
 800b622:	9b05      	ldr	r3, [sp, #20]
 800b624:	4641      	mov	r1, r8
 800b626:	b1fb      	cbz	r3, 800b668 <_strtod_l+0x8d8>
 800b628:	4b9c      	ldr	r3, [pc, #624]	; (800b89c <_strtod_l+0xb0c>)
 800b62a:	f04f 32ff 	mov.w	r2, #4294967295
 800b62e:	ea09 0303 	and.w	r3, r9, r3
 800b632:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b636:	d81a      	bhi.n	800b66e <_strtod_l+0x8de>
 800b638:	0d1b      	lsrs	r3, r3, #20
 800b63a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b63e:	fa02 f303 	lsl.w	r3, r2, r3
 800b642:	4299      	cmp	r1, r3
 800b644:	d118      	bne.n	800b678 <_strtod_l+0x8e8>
 800b646:	4b96      	ldr	r3, [pc, #600]	; (800b8a0 <_strtod_l+0xb10>)
 800b648:	459a      	cmp	sl, r3
 800b64a:	d102      	bne.n	800b652 <_strtod_l+0x8c2>
 800b64c:	3101      	adds	r1, #1
 800b64e:	f43f addd 	beq.w	800b20c <_strtod_l+0x47c>
 800b652:	f04f 0800 	mov.w	r8, #0
 800b656:	4b91      	ldr	r3, [pc, #580]	; (800b89c <_strtod_l+0xb0c>)
 800b658:	ea0a 0303 	and.w	r3, sl, r3
 800b65c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b660:	9b05      	ldr	r3, [sp, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d19a      	bne.n	800b59c <_strtod_l+0x80c>
 800b666:	e5db      	b.n	800b220 <_strtod_l+0x490>
 800b668:	f04f 33ff 	mov.w	r3, #4294967295
 800b66c:	e7e9      	b.n	800b642 <_strtod_l+0x8b2>
 800b66e:	4613      	mov	r3, r2
 800b670:	e7e7      	b.n	800b642 <_strtod_l+0x8b2>
 800b672:	ea53 0308 	orrs.w	r3, r3, r8
 800b676:	d081      	beq.n	800b57c <_strtod_l+0x7ec>
 800b678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b67a:	b1e3      	cbz	r3, 800b6b6 <_strtod_l+0x926>
 800b67c:	ea13 0f0a 	tst.w	r3, sl
 800b680:	d0ee      	beq.n	800b660 <_strtod_l+0x8d0>
 800b682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	9a05      	ldr	r2, [sp, #20]
 800b68a:	b1c3      	cbz	r3, 800b6be <_strtod_l+0x92e>
 800b68c:	f7ff fb5c 	bl	800ad48 <sulp>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b696:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b698:	f7f4 fdd4 	bl	8000244 <__adddf3>
 800b69c:	4680      	mov	r8, r0
 800b69e:	4689      	mov	r9, r1
 800b6a0:	e7de      	b.n	800b660 <_strtod_l+0x8d0>
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b6a8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b6ac:	f04f 38ff 	mov.w	r8, #4294967295
 800b6b0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b6b4:	e7d4      	b.n	800b660 <_strtod_l+0x8d0>
 800b6b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6b8:	ea13 0f08 	tst.w	r3, r8
 800b6bc:	e7e0      	b.n	800b680 <_strtod_l+0x8f0>
 800b6be:	f7ff fb43 	bl	800ad48 <sulp>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b6c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6ca:	f7f4 fdb9 	bl	8000240 <__aeabi_dsub>
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4680      	mov	r8, r0
 800b6d4:	4689      	mov	r9, r1
 800b6d6:	f7f5 f9d3 	bl	8000a80 <__aeabi_dcmpeq>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d0c0      	beq.n	800b660 <_strtod_l+0x8d0>
 800b6de:	e606      	b.n	800b2ee <_strtod_l+0x55e>
 800b6e0:	4659      	mov	r1, fp
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f7ff fabe 	bl	800ac64 <__ratio>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6f6:	f7f5 f9d7 	bl	8000aa8 <__aeabi_dcmple>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d06f      	beq.n	800b7de <_strtod_l+0xa4e>
 800b6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b700:	2b00      	cmp	r3, #0
 800b702:	d17c      	bne.n	800b7fe <_strtod_l+0xa6e>
 800b704:	f1b8 0f00 	cmp.w	r8, #0
 800b708:	d159      	bne.n	800b7be <_strtod_l+0xa2e>
 800b70a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d17b      	bne.n	800b80a <_strtod_l+0xa7a>
 800b712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b716:	2200      	movs	r2, #0
 800b718:	4b62      	ldr	r3, [pc, #392]	; (800b8a4 <_strtod_l+0xb14>)
 800b71a:	f7f5 f9bb 	bl	8000a94 <__aeabi_dcmplt>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d15a      	bne.n	800b7d8 <_strtod_l+0xa48>
 800b722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b726:	2200      	movs	r2, #0
 800b728:	4b5f      	ldr	r3, [pc, #380]	; (800b8a8 <_strtod_l+0xb18>)
 800b72a:	f7f4 ff41 	bl	80005b0 <__aeabi_dmul>
 800b72e:	4605      	mov	r5, r0
 800b730:	460f      	mov	r7, r1
 800b732:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b736:	9506      	str	r5, [sp, #24]
 800b738:	9307      	str	r3, [sp, #28]
 800b73a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b73e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b742:	4b56      	ldr	r3, [pc, #344]	; (800b89c <_strtod_l+0xb0c>)
 800b744:	4a55      	ldr	r2, [pc, #340]	; (800b89c <_strtod_l+0xb0c>)
 800b746:	ea0a 0303 	and.w	r3, sl, r3
 800b74a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b74c:	4b57      	ldr	r3, [pc, #348]	; (800b8ac <_strtod_l+0xb1c>)
 800b74e:	ea0a 0202 	and.w	r2, sl, r2
 800b752:	429a      	cmp	r2, r3
 800b754:	f040 80b0 	bne.w	800b8b8 <_strtod_l+0xb28>
 800b758:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b75c:	4640      	mov	r0, r8
 800b75e:	4649      	mov	r1, r9
 800b760:	f7ff f9c2 	bl	800aae8 <__ulp>
 800b764:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b768:	f7f4 ff22 	bl	80005b0 <__aeabi_dmul>
 800b76c:	4642      	mov	r2, r8
 800b76e:	464b      	mov	r3, r9
 800b770:	f7f4 fd68 	bl	8000244 <__adddf3>
 800b774:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b89c <_strtod_l+0xb0c>
 800b778:	4a4d      	ldr	r2, [pc, #308]	; (800b8b0 <_strtod_l+0xb20>)
 800b77a:	ea01 0a0a 	and.w	sl, r1, sl
 800b77e:	4592      	cmp	sl, r2
 800b780:	4680      	mov	r8, r0
 800b782:	d948      	bls.n	800b816 <_strtod_l+0xa86>
 800b784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b786:	4b46      	ldr	r3, [pc, #280]	; (800b8a0 <_strtod_l+0xb10>)
 800b788:	429a      	cmp	r2, r3
 800b78a:	d103      	bne.n	800b794 <_strtod_l+0xa04>
 800b78c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b78e:	3301      	adds	r3, #1
 800b790:	f43f ad3c 	beq.w	800b20c <_strtod_l+0x47c>
 800b794:	f04f 38ff 	mov.w	r8, #4294967295
 800b798:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b8a0 <_strtod_l+0xb10>
 800b79c:	4620      	mov	r0, r4
 800b79e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b7a0:	f7fe fe76 	bl	800a490 <_Bfree>
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	9908      	ldr	r1, [sp, #32]
 800b7a8:	f7fe fe72 	bl	800a490 <_Bfree>
 800b7ac:	4659      	mov	r1, fp
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7fe fe6e 	bl	800a490 <_Bfree>
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7fe fe6a 	bl	800a490 <_Bfree>
 800b7bc:	e605      	b.n	800b3ca <_strtod_l+0x63a>
 800b7be:	f1b8 0f01 	cmp.w	r8, #1
 800b7c2:	d103      	bne.n	800b7cc <_strtod_l+0xa3c>
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	f43f ad91 	beq.w	800b2ee <_strtod_l+0x55e>
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	4b39      	ldr	r3, [pc, #228]	; (800b8b4 <_strtod_l+0xb24>)
 800b7d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b7d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7d6:	e016      	b.n	800b806 <_strtod_l+0xa76>
 800b7d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b7da:	4f33      	ldr	r7, [pc, #204]	; (800b8a8 <_strtod_l+0xb18>)
 800b7dc:	e7a9      	b.n	800b732 <_strtod_l+0x9a2>
 800b7de:	4b32      	ldr	r3, [pc, #200]	; (800b8a8 <_strtod_l+0xb18>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b7e6:	f7f4 fee3 	bl	80005b0 <__aeabi_dmul>
 800b7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d09e      	beq.n	800b732 <_strtod_l+0x9a2>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7fc:	e79d      	b.n	800b73a <_strtod_l+0x9aa>
 800b7fe:	2200      	movs	r2, #0
 800b800:	4b28      	ldr	r3, [pc, #160]	; (800b8a4 <_strtod_l+0xb14>)
 800b802:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b806:	4f27      	ldr	r7, [pc, #156]	; (800b8a4 <_strtod_l+0xb14>)
 800b808:	e797      	b.n	800b73a <_strtod_l+0x9aa>
 800b80a:	2200      	movs	r2, #0
 800b80c:	4b29      	ldr	r3, [pc, #164]	; (800b8b4 <_strtod_l+0xb24>)
 800b80e:	4645      	mov	r5, r8
 800b810:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b814:	e7f7      	b.n	800b806 <_strtod_l+0xa76>
 800b816:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b81a:	9b05      	ldr	r3, [sp, #20]
 800b81c:	46ca      	mov	sl, r9
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1bc      	bne.n	800b79c <_strtod_l+0xa0c>
 800b822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b826:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b828:	0d1b      	lsrs	r3, r3, #20
 800b82a:	051b      	lsls	r3, r3, #20
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d1b5      	bne.n	800b79c <_strtod_l+0xa0c>
 800b830:	4628      	mov	r0, r5
 800b832:	4639      	mov	r1, r7
 800b834:	f7f5 fa04 	bl	8000c40 <__aeabi_d2lz>
 800b838:	f7f4 fe8c 	bl	8000554 <__aeabi_l2d>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4628      	mov	r0, r5
 800b842:	4639      	mov	r1, r7
 800b844:	f7f4 fcfc 	bl	8000240 <__aeabi_dsub>
 800b848:	460b      	mov	r3, r1
 800b84a:	4602      	mov	r2, r0
 800b84c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b850:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b856:	ea4a 0a08 	orr.w	sl, sl, r8
 800b85a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b85e:	d06c      	beq.n	800b93a <_strtod_l+0xbaa>
 800b860:	a309      	add	r3, pc, #36	; (adr r3, 800b888 <_strtod_l+0xaf8>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f7f5 f915 	bl	8000a94 <__aeabi_dcmplt>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f47f acd8 	bne.w	800b220 <_strtod_l+0x490>
 800b870:	a307      	add	r3, pc, #28	; (adr r3, 800b890 <_strtod_l+0xb00>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b87a:	f7f5 f929 	bl	8000ad0 <__aeabi_dcmpgt>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d08c      	beq.n	800b79c <_strtod_l+0xa0c>
 800b882:	e4cd      	b.n	800b220 <_strtod_l+0x490>
 800b884:	f3af 8000 	nop.w
 800b888:	94a03595 	.word	0x94a03595
 800b88c:	3fdfffff 	.word	0x3fdfffff
 800b890:	35afe535 	.word	0x35afe535
 800b894:	3fe00000 	.word	0x3fe00000
 800b898:	000fffff 	.word	0x000fffff
 800b89c:	7ff00000 	.word	0x7ff00000
 800b8a0:	7fefffff 	.word	0x7fefffff
 800b8a4:	3ff00000 	.word	0x3ff00000
 800b8a8:	3fe00000 	.word	0x3fe00000
 800b8ac:	7fe00000 	.word	0x7fe00000
 800b8b0:	7c9fffff 	.word	0x7c9fffff
 800b8b4:	bff00000 	.word	0xbff00000
 800b8b8:	9b05      	ldr	r3, [sp, #20]
 800b8ba:	b333      	cbz	r3, 800b90a <_strtod_l+0xb7a>
 800b8bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8c2:	d822      	bhi.n	800b90a <_strtod_l+0xb7a>
 800b8c4:	a328      	add	r3, pc, #160	; (adr r3, 800b968 <_strtod_l+0xbd8>)
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	f7f5 f8eb 	bl	8000aa8 <__aeabi_dcmple>
 800b8d2:	b1a0      	cbz	r0, 800b8fe <_strtod_l+0xb6e>
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f7f5 f942 	bl	8000b60 <__aeabi_d2uiz>
 800b8dc:	2801      	cmp	r0, #1
 800b8de:	bf38      	it	cc
 800b8e0:	2001      	movcc	r0, #1
 800b8e2:	f7f4 fdeb 	bl	80004bc <__aeabi_ui2d>
 800b8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e8:	4605      	mov	r5, r0
 800b8ea:	460f      	mov	r7, r1
 800b8ec:	bb03      	cbnz	r3, 800b930 <_strtod_l+0xba0>
 800b8ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8f2:	9014      	str	r0, [sp, #80]	; 0x50
 800b8f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b8f6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b8fa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b8fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b902:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b906:	1a9b      	subs	r3, r3, r2
 800b908:	9311      	str	r3, [sp, #68]	; 0x44
 800b90a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b90c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b90e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b912:	f7ff f8e9 	bl	800aae8 <__ulp>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4640      	mov	r0, r8
 800b91c:	4649      	mov	r1, r9
 800b91e:	f7f4 fe47 	bl	80005b0 <__aeabi_dmul>
 800b922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b926:	f7f4 fc8d 	bl	8000244 <__adddf3>
 800b92a:	4680      	mov	r8, r0
 800b92c:	4689      	mov	r9, r1
 800b92e:	e774      	b.n	800b81a <_strtod_l+0xa8a>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b938:	e7dd      	b.n	800b8f6 <_strtod_l+0xb66>
 800b93a:	a30d      	add	r3, pc, #52	; (adr r3, 800b970 <_strtod_l+0xbe0>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f5 f8a8 	bl	8000a94 <__aeabi_dcmplt>
 800b944:	e79b      	b.n	800b87e <_strtod_l+0xaee>
 800b946:	2300      	movs	r3, #0
 800b948:	930e      	str	r3, [sp, #56]	; 0x38
 800b94a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b94c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b94e:	6013      	str	r3, [r2, #0]
 800b950:	f7ff ba5b 	b.w	800ae0a <_strtod_l+0x7a>
 800b954:	2a65      	cmp	r2, #101	; 0x65
 800b956:	f43f ab52 	beq.w	800affe <_strtod_l+0x26e>
 800b95a:	2a45      	cmp	r2, #69	; 0x45
 800b95c:	f43f ab4f 	beq.w	800affe <_strtod_l+0x26e>
 800b960:	2301      	movs	r3, #1
 800b962:	f7ff bb87 	b.w	800b074 <_strtod_l+0x2e4>
 800b966:	bf00      	nop
 800b968:	ffc00000 	.word	0xffc00000
 800b96c:	41dfffff 	.word	0x41dfffff
 800b970:	94a03595 	.word	0x94a03595
 800b974:	3fcfffff 	.word	0x3fcfffff

0800b978 <_strtod_r>:
 800b978:	4b01      	ldr	r3, [pc, #4]	; (800b980 <_strtod_r+0x8>)
 800b97a:	f7ff ba09 	b.w	800ad90 <_strtod_l>
 800b97e:	bf00      	nop
 800b980:	20000078 	.word	0x20000078

0800b984 <_strtol_l.constprop.0>:
 800b984:	2b01      	cmp	r3, #1
 800b986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b98a:	4686      	mov	lr, r0
 800b98c:	4690      	mov	r8, r2
 800b98e:	d001      	beq.n	800b994 <_strtol_l.constprop.0+0x10>
 800b990:	2b24      	cmp	r3, #36	; 0x24
 800b992:	d906      	bls.n	800b9a2 <_strtol_l.constprop.0+0x1e>
 800b994:	f7fd fd94 	bl	80094c0 <__errno>
 800b998:	2316      	movs	r3, #22
 800b99a:	6003      	str	r3, [r0, #0]
 800b99c:	2000      	movs	r0, #0
 800b99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	4835      	ldr	r0, [pc, #212]	; (800ba7c <_strtol_l.constprop.0+0xf8>)
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9ac:	5d06      	ldrb	r6, [r0, r4]
 800b9ae:	f016 0608 	ands.w	r6, r6, #8
 800b9b2:	d1f8      	bne.n	800b9a6 <_strtol_l.constprop.0+0x22>
 800b9b4:	2c2d      	cmp	r4, #45	; 0x2d
 800b9b6:	d12e      	bne.n	800ba16 <_strtol_l.constprop.0+0x92>
 800b9b8:	2601      	movs	r6, #1
 800b9ba:	782c      	ldrb	r4, [r5, #0]
 800b9bc:	1c95      	adds	r5, r2, #2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d057      	beq.n	800ba72 <_strtol_l.constprop.0+0xee>
 800b9c2:	2b10      	cmp	r3, #16
 800b9c4:	d109      	bne.n	800b9da <_strtol_l.constprop.0+0x56>
 800b9c6:	2c30      	cmp	r4, #48	; 0x30
 800b9c8:	d107      	bne.n	800b9da <_strtol_l.constprop.0+0x56>
 800b9ca:	782a      	ldrb	r2, [r5, #0]
 800b9cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b9d0:	2a58      	cmp	r2, #88	; 0x58
 800b9d2:	d149      	bne.n	800ba68 <_strtol_l.constprop.0+0xe4>
 800b9d4:	2310      	movs	r3, #16
 800b9d6:	786c      	ldrb	r4, [r5, #1]
 800b9d8:	3502      	adds	r5, #2
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b9e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b9e4:	fbbc f9f3 	udiv	r9, ip, r3
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	fb03 ca19 	mls	sl, r3, r9, ip
 800b9ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b9f2:	2f09      	cmp	r7, #9
 800b9f4:	d814      	bhi.n	800ba20 <_strtol_l.constprop.0+0x9c>
 800b9f6:	463c      	mov	r4, r7
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	dd20      	ble.n	800ba3e <_strtol_l.constprop.0+0xba>
 800b9fc:	1c57      	adds	r7, r2, #1
 800b9fe:	d007      	beq.n	800ba10 <_strtol_l.constprop.0+0x8c>
 800ba00:	4581      	cmp	r9, r0
 800ba02:	d319      	bcc.n	800ba38 <_strtol_l.constprop.0+0xb4>
 800ba04:	d101      	bne.n	800ba0a <_strtol_l.constprop.0+0x86>
 800ba06:	45a2      	cmp	sl, r4
 800ba08:	db16      	blt.n	800ba38 <_strtol_l.constprop.0+0xb4>
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	fb00 4003 	mla	r0, r0, r3, r4
 800ba10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba14:	e7eb      	b.n	800b9ee <_strtol_l.constprop.0+0x6a>
 800ba16:	2c2b      	cmp	r4, #43	; 0x2b
 800ba18:	bf04      	itt	eq
 800ba1a:	782c      	ldrbeq	r4, [r5, #0]
 800ba1c:	1c95      	addeq	r5, r2, #2
 800ba1e:	e7ce      	b.n	800b9be <_strtol_l.constprop.0+0x3a>
 800ba20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ba24:	2f19      	cmp	r7, #25
 800ba26:	d801      	bhi.n	800ba2c <_strtol_l.constprop.0+0xa8>
 800ba28:	3c37      	subs	r4, #55	; 0x37
 800ba2a:	e7e5      	b.n	800b9f8 <_strtol_l.constprop.0+0x74>
 800ba2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ba30:	2f19      	cmp	r7, #25
 800ba32:	d804      	bhi.n	800ba3e <_strtol_l.constprop.0+0xba>
 800ba34:	3c57      	subs	r4, #87	; 0x57
 800ba36:	e7df      	b.n	800b9f8 <_strtol_l.constprop.0+0x74>
 800ba38:	f04f 32ff 	mov.w	r2, #4294967295
 800ba3c:	e7e8      	b.n	800ba10 <_strtol_l.constprop.0+0x8c>
 800ba3e:	1c53      	adds	r3, r2, #1
 800ba40:	d108      	bne.n	800ba54 <_strtol_l.constprop.0+0xd0>
 800ba42:	2322      	movs	r3, #34	; 0x22
 800ba44:	4660      	mov	r0, ip
 800ba46:	f8ce 3000 	str.w	r3, [lr]
 800ba4a:	f1b8 0f00 	cmp.w	r8, #0
 800ba4e:	d0a6      	beq.n	800b99e <_strtol_l.constprop.0+0x1a>
 800ba50:	1e69      	subs	r1, r5, #1
 800ba52:	e006      	b.n	800ba62 <_strtol_l.constprop.0+0xde>
 800ba54:	b106      	cbz	r6, 800ba58 <_strtol_l.constprop.0+0xd4>
 800ba56:	4240      	negs	r0, r0
 800ba58:	f1b8 0f00 	cmp.w	r8, #0
 800ba5c:	d09f      	beq.n	800b99e <_strtol_l.constprop.0+0x1a>
 800ba5e:	2a00      	cmp	r2, #0
 800ba60:	d1f6      	bne.n	800ba50 <_strtol_l.constprop.0+0xcc>
 800ba62:	f8c8 1000 	str.w	r1, [r8]
 800ba66:	e79a      	b.n	800b99e <_strtol_l.constprop.0+0x1a>
 800ba68:	2430      	movs	r4, #48	; 0x30
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1b5      	bne.n	800b9da <_strtol_l.constprop.0+0x56>
 800ba6e:	2308      	movs	r3, #8
 800ba70:	e7b3      	b.n	800b9da <_strtol_l.constprop.0+0x56>
 800ba72:	2c30      	cmp	r4, #48	; 0x30
 800ba74:	d0a9      	beq.n	800b9ca <_strtol_l.constprop.0+0x46>
 800ba76:	230a      	movs	r3, #10
 800ba78:	e7af      	b.n	800b9da <_strtol_l.constprop.0+0x56>
 800ba7a:	bf00      	nop
 800ba7c:	0800cef9 	.word	0x0800cef9

0800ba80 <_strtol_r>:
 800ba80:	f7ff bf80 	b.w	800b984 <_strtol_l.constprop.0>

0800ba84 <__ssputs_r>:
 800ba84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba88:	461f      	mov	r7, r3
 800ba8a:	688e      	ldr	r6, [r1, #8]
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	42be      	cmp	r6, r7
 800ba90:	460c      	mov	r4, r1
 800ba92:	4690      	mov	r8, r2
 800ba94:	680b      	ldr	r3, [r1, #0]
 800ba96:	d82c      	bhi.n	800baf2 <__ssputs_r+0x6e>
 800ba98:	898a      	ldrh	r2, [r1, #12]
 800ba9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba9e:	d026      	beq.n	800baee <__ssputs_r+0x6a>
 800baa0:	6965      	ldr	r5, [r4, #20]
 800baa2:	6909      	ldr	r1, [r1, #16]
 800baa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baa8:	eba3 0901 	sub.w	r9, r3, r1
 800baac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bab0:	1c7b      	adds	r3, r7, #1
 800bab2:	444b      	add	r3, r9
 800bab4:	106d      	asrs	r5, r5, #1
 800bab6:	429d      	cmp	r5, r3
 800bab8:	bf38      	it	cc
 800baba:	461d      	movcc	r5, r3
 800babc:	0553      	lsls	r3, r2, #21
 800babe:	d527      	bpl.n	800bb10 <__ssputs_r+0x8c>
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7fe fc19 	bl	800a2f8 <_malloc_r>
 800bac6:	4606      	mov	r6, r0
 800bac8:	b360      	cbz	r0, 800bb24 <__ssputs_r+0xa0>
 800baca:	464a      	mov	r2, r9
 800bacc:	6921      	ldr	r1, [r4, #16]
 800bace:	f000 fc11 	bl	800c2f4 <memcpy>
 800bad2:	89a3      	ldrh	r3, [r4, #12]
 800bad4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800badc:	81a3      	strh	r3, [r4, #12]
 800bade:	6126      	str	r6, [r4, #16]
 800bae0:	444e      	add	r6, r9
 800bae2:	6026      	str	r6, [r4, #0]
 800bae4:	463e      	mov	r6, r7
 800bae6:	6165      	str	r5, [r4, #20]
 800bae8:	eba5 0509 	sub.w	r5, r5, r9
 800baec:	60a5      	str	r5, [r4, #8]
 800baee:	42be      	cmp	r6, r7
 800baf0:	d900      	bls.n	800baf4 <__ssputs_r+0x70>
 800baf2:	463e      	mov	r6, r7
 800baf4:	4632      	mov	r2, r6
 800baf6:	4641      	mov	r1, r8
 800baf8:	6820      	ldr	r0, [r4, #0]
 800bafa:	f000 fb9c 	bl	800c236 <memmove>
 800bafe:	2000      	movs	r0, #0
 800bb00:	68a3      	ldr	r3, [r4, #8]
 800bb02:	1b9b      	subs	r3, r3, r6
 800bb04:	60a3      	str	r3, [r4, #8]
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	4433      	add	r3, r6
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb10:	462a      	mov	r2, r5
 800bb12:	f000 ffa0 	bl	800ca56 <_realloc_r>
 800bb16:	4606      	mov	r6, r0
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d1e0      	bne.n	800bade <__ssputs_r+0x5a>
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	6921      	ldr	r1, [r4, #16]
 800bb20:	f7fe fb7a 	bl	800a218 <_free_r>
 800bb24:	230c      	movs	r3, #12
 800bb26:	f8ca 3000 	str.w	r3, [sl]
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	e7e9      	b.n	800bb0c <__ssputs_r+0x88>

0800bb38 <_svfiprintf_r>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	4698      	mov	r8, r3
 800bb3e:	898b      	ldrh	r3, [r1, #12]
 800bb40:	4607      	mov	r7, r0
 800bb42:	061b      	lsls	r3, r3, #24
 800bb44:	460d      	mov	r5, r1
 800bb46:	4614      	mov	r4, r2
 800bb48:	b09d      	sub	sp, #116	; 0x74
 800bb4a:	d50e      	bpl.n	800bb6a <_svfiprintf_r+0x32>
 800bb4c:	690b      	ldr	r3, [r1, #16]
 800bb4e:	b963      	cbnz	r3, 800bb6a <_svfiprintf_r+0x32>
 800bb50:	2140      	movs	r1, #64	; 0x40
 800bb52:	f7fe fbd1 	bl	800a2f8 <_malloc_r>
 800bb56:	6028      	str	r0, [r5, #0]
 800bb58:	6128      	str	r0, [r5, #16]
 800bb5a:	b920      	cbnz	r0, 800bb66 <_svfiprintf_r+0x2e>
 800bb5c:	230c      	movs	r3, #12
 800bb5e:	603b      	str	r3, [r7, #0]
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295
 800bb64:	e0d0      	b.n	800bd08 <_svfiprintf_r+0x1d0>
 800bb66:	2340      	movs	r3, #64	; 0x40
 800bb68:	616b      	str	r3, [r5, #20]
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6e:	2320      	movs	r3, #32
 800bb70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb74:	2330      	movs	r3, #48	; 0x30
 800bb76:	f04f 0901 	mov.w	r9, #1
 800bb7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb7e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bd20 <_svfiprintf_r+0x1e8>
 800bb82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb86:	4623      	mov	r3, r4
 800bb88:	469a      	mov	sl, r3
 800bb8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb8e:	b10a      	cbz	r2, 800bb94 <_svfiprintf_r+0x5c>
 800bb90:	2a25      	cmp	r2, #37	; 0x25
 800bb92:	d1f9      	bne.n	800bb88 <_svfiprintf_r+0x50>
 800bb94:	ebba 0b04 	subs.w	fp, sl, r4
 800bb98:	d00b      	beq.n	800bbb2 <_svfiprintf_r+0x7a>
 800bb9a:	465b      	mov	r3, fp
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	4638      	mov	r0, r7
 800bba2:	f7ff ff6f 	bl	800ba84 <__ssputs_r>
 800bba6:	3001      	adds	r0, #1
 800bba8:	f000 80a9 	beq.w	800bcfe <_svfiprintf_r+0x1c6>
 800bbac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbae:	445a      	add	r2, fp
 800bbb0:	9209      	str	r2, [sp, #36]	; 0x24
 800bbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 80a1 	beq.w	800bcfe <_svfiprintf_r+0x1c6>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc6:	f10a 0a01 	add.w	sl, sl, #1
 800bbca:	9304      	str	r3, [sp, #16]
 800bbcc:	9307      	str	r3, [sp, #28]
 800bbce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbd2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd4:	4654      	mov	r4, sl
 800bbd6:	2205      	movs	r2, #5
 800bbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbdc:	4850      	ldr	r0, [pc, #320]	; (800bd20 <_svfiprintf_r+0x1e8>)
 800bbde:	f7fd fc9b 	bl	8009518 <memchr>
 800bbe2:	9a04      	ldr	r2, [sp, #16]
 800bbe4:	b9d8      	cbnz	r0, 800bc1e <_svfiprintf_r+0xe6>
 800bbe6:	06d0      	lsls	r0, r2, #27
 800bbe8:	bf44      	itt	mi
 800bbea:	2320      	movmi	r3, #32
 800bbec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbf0:	0711      	lsls	r1, r2, #28
 800bbf2:	bf44      	itt	mi
 800bbf4:	232b      	movmi	r3, #43	; 0x2b
 800bbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800bc00:	d015      	beq.n	800bc2e <_svfiprintf_r+0xf6>
 800bc02:	4654      	mov	r4, sl
 800bc04:	2000      	movs	r0, #0
 800bc06:	f04f 0c0a 	mov.w	ip, #10
 800bc0a:	9a07      	ldr	r2, [sp, #28]
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc12:	3b30      	subs	r3, #48	; 0x30
 800bc14:	2b09      	cmp	r3, #9
 800bc16:	d94d      	bls.n	800bcb4 <_svfiprintf_r+0x17c>
 800bc18:	b1b0      	cbz	r0, 800bc48 <_svfiprintf_r+0x110>
 800bc1a:	9207      	str	r2, [sp, #28]
 800bc1c:	e014      	b.n	800bc48 <_svfiprintf_r+0x110>
 800bc1e:	eba0 0308 	sub.w	r3, r0, r8
 800bc22:	fa09 f303 	lsl.w	r3, r9, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	46a2      	mov	sl, r4
 800bc2a:	9304      	str	r3, [sp, #16]
 800bc2c:	e7d2      	b.n	800bbd4 <_svfiprintf_r+0x9c>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	1d19      	adds	r1, r3, #4
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	9103      	str	r1, [sp, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bfbb      	ittet	lt
 800bc3a:	425b      	neglt	r3, r3
 800bc3c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc40:	9307      	strge	r3, [sp, #28]
 800bc42:	9307      	strlt	r3, [sp, #28]
 800bc44:	bfb8      	it	lt
 800bc46:	9204      	strlt	r2, [sp, #16]
 800bc48:	7823      	ldrb	r3, [r4, #0]
 800bc4a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc4c:	d10c      	bne.n	800bc68 <_svfiprintf_r+0x130>
 800bc4e:	7863      	ldrb	r3, [r4, #1]
 800bc50:	2b2a      	cmp	r3, #42	; 0x2a
 800bc52:	d134      	bne.n	800bcbe <_svfiprintf_r+0x186>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	3402      	adds	r4, #2
 800bc58:	1d1a      	adds	r2, r3, #4
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	9203      	str	r2, [sp, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	bfb8      	it	lt
 800bc62:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc66:	9305      	str	r3, [sp, #20]
 800bc68:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bd24 <_svfiprintf_r+0x1ec>
 800bc6c:	2203      	movs	r2, #3
 800bc6e:	4650      	mov	r0, sl
 800bc70:	7821      	ldrb	r1, [r4, #0]
 800bc72:	f7fd fc51 	bl	8009518 <memchr>
 800bc76:	b138      	cbz	r0, 800bc88 <_svfiprintf_r+0x150>
 800bc78:	2240      	movs	r2, #64	; 0x40
 800bc7a:	9b04      	ldr	r3, [sp, #16]
 800bc7c:	eba0 000a 	sub.w	r0, r0, sl
 800bc80:	4082      	lsls	r2, r0
 800bc82:	4313      	orrs	r3, r2
 800bc84:	3401      	adds	r4, #1
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8c:	2206      	movs	r2, #6
 800bc8e:	4826      	ldr	r0, [pc, #152]	; (800bd28 <_svfiprintf_r+0x1f0>)
 800bc90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc94:	f7fd fc40 	bl	8009518 <memchr>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d038      	beq.n	800bd0e <_svfiprintf_r+0x1d6>
 800bc9c:	4b23      	ldr	r3, [pc, #140]	; (800bd2c <_svfiprintf_r+0x1f4>)
 800bc9e:	bb1b      	cbnz	r3, 800bce8 <_svfiprintf_r+0x1b0>
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	3307      	adds	r3, #7
 800bca4:	f023 0307 	bic.w	r3, r3, #7
 800bca8:	3308      	adds	r3, #8
 800bcaa:	9303      	str	r3, [sp, #12]
 800bcac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcae:	4433      	add	r3, r6
 800bcb0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb2:	e768      	b.n	800bb86 <_svfiprintf_r+0x4e>
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcbc:	e7a6      	b.n	800bc0c <_svfiprintf_r+0xd4>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f04f 0c0a 	mov.w	ip, #10
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	3401      	adds	r4, #1
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	4620      	mov	r0, r4
 800bccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd0:	3a30      	subs	r2, #48	; 0x30
 800bcd2:	2a09      	cmp	r2, #9
 800bcd4:	d903      	bls.n	800bcde <_svfiprintf_r+0x1a6>
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0c6      	beq.n	800bc68 <_svfiprintf_r+0x130>
 800bcda:	9105      	str	r1, [sp, #20]
 800bcdc:	e7c4      	b.n	800bc68 <_svfiprintf_r+0x130>
 800bcde:	4604      	mov	r4, r0
 800bce0:	2301      	movs	r3, #1
 800bce2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce6:	e7f0      	b.n	800bcca <_svfiprintf_r+0x192>
 800bce8:	ab03      	add	r3, sp, #12
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	462a      	mov	r2, r5
 800bcee:	4638      	mov	r0, r7
 800bcf0:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <_svfiprintf_r+0x1f8>)
 800bcf2:	a904      	add	r1, sp, #16
 800bcf4:	f7fc fba4 	bl	8008440 <_printf_float>
 800bcf8:	1c42      	adds	r2, r0, #1
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	d1d6      	bne.n	800bcac <_svfiprintf_r+0x174>
 800bcfe:	89ab      	ldrh	r3, [r5, #12]
 800bd00:	065b      	lsls	r3, r3, #25
 800bd02:	f53f af2d 	bmi.w	800bb60 <_svfiprintf_r+0x28>
 800bd06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd08:	b01d      	add	sp, #116	; 0x74
 800bd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0e:	ab03      	add	r3, sp, #12
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	462a      	mov	r2, r5
 800bd14:	4638      	mov	r0, r7
 800bd16:	4b06      	ldr	r3, [pc, #24]	; (800bd30 <_svfiprintf_r+0x1f8>)
 800bd18:	a904      	add	r1, sp, #16
 800bd1a:	f7fc fe31 	bl	8008980 <_printf_i>
 800bd1e:	e7eb      	b.n	800bcf8 <_svfiprintf_r+0x1c0>
 800bd20:	0800cff9 	.word	0x0800cff9
 800bd24:	0800cfff 	.word	0x0800cfff
 800bd28:	0800d003 	.word	0x0800d003
 800bd2c:	08008441 	.word	0x08008441
 800bd30:	0800ba85 	.word	0x0800ba85

0800bd34 <__sfputc_r>:
 800bd34:	6893      	ldr	r3, [r2, #8]
 800bd36:	b410      	push	{r4}
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	6093      	str	r3, [r2, #8]
 800bd3e:	da07      	bge.n	800bd50 <__sfputc_r+0x1c>
 800bd40:	6994      	ldr	r4, [r2, #24]
 800bd42:	42a3      	cmp	r3, r4
 800bd44:	db01      	blt.n	800bd4a <__sfputc_r+0x16>
 800bd46:	290a      	cmp	r1, #10
 800bd48:	d102      	bne.n	800bd50 <__sfputc_r+0x1c>
 800bd4a:	bc10      	pop	{r4}
 800bd4c:	f7fd bad1 	b.w	80092f2 <__swbuf_r>
 800bd50:	6813      	ldr	r3, [r2, #0]
 800bd52:	1c58      	adds	r0, r3, #1
 800bd54:	6010      	str	r0, [r2, #0]
 800bd56:	7019      	strb	r1, [r3, #0]
 800bd58:	4608      	mov	r0, r1
 800bd5a:	bc10      	pop	{r4}
 800bd5c:	4770      	bx	lr

0800bd5e <__sfputs_r>:
 800bd5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd60:	4606      	mov	r6, r0
 800bd62:	460f      	mov	r7, r1
 800bd64:	4614      	mov	r4, r2
 800bd66:	18d5      	adds	r5, r2, r3
 800bd68:	42ac      	cmp	r4, r5
 800bd6a:	d101      	bne.n	800bd70 <__sfputs_r+0x12>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e007      	b.n	800bd80 <__sfputs_r+0x22>
 800bd70:	463a      	mov	r2, r7
 800bd72:	4630      	mov	r0, r6
 800bd74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd78:	f7ff ffdc 	bl	800bd34 <__sfputc_r>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d1f3      	bne.n	800bd68 <__sfputs_r+0xa>
 800bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd84 <_vfiprintf_r>:
 800bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd88:	460d      	mov	r5, r1
 800bd8a:	4614      	mov	r4, r2
 800bd8c:	4698      	mov	r8, r3
 800bd8e:	4606      	mov	r6, r0
 800bd90:	b09d      	sub	sp, #116	; 0x74
 800bd92:	b118      	cbz	r0, 800bd9c <_vfiprintf_r+0x18>
 800bd94:	6a03      	ldr	r3, [r0, #32]
 800bd96:	b90b      	cbnz	r3, 800bd9c <_vfiprintf_r+0x18>
 800bd98:	f7fd f99c 	bl	80090d4 <__sinit>
 800bd9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9e:	07d9      	lsls	r1, r3, #31
 800bda0:	d405      	bmi.n	800bdae <_vfiprintf_r+0x2a>
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	059a      	lsls	r2, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_vfiprintf_r+0x2a>
 800bda8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdaa:	f7fd fbb3 	bl	8009514 <__retarget_lock_acquire_recursive>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	071b      	lsls	r3, r3, #28
 800bdb2:	d501      	bpl.n	800bdb8 <_vfiprintf_r+0x34>
 800bdb4:	692b      	ldr	r3, [r5, #16]
 800bdb6:	b99b      	cbnz	r3, 800bde0 <_vfiprintf_r+0x5c>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7fd fad6 	bl	800936c <__swsetup_r>
 800bdc0:	b170      	cbz	r0, 800bde0 <_vfiprintf_r+0x5c>
 800bdc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdc4:	07dc      	lsls	r4, r3, #31
 800bdc6:	d504      	bpl.n	800bdd2 <_vfiprintf_r+0x4e>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	b01d      	add	sp, #116	; 0x74
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd2:	89ab      	ldrh	r3, [r5, #12]
 800bdd4:	0598      	lsls	r0, r3, #22
 800bdd6:	d4f7      	bmi.n	800bdc8 <_vfiprintf_r+0x44>
 800bdd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdda:	f7fd fb9c 	bl	8009516 <__retarget_lock_release_recursive>
 800bdde:	e7f3      	b.n	800bdc8 <_vfiprintf_r+0x44>
 800bde0:	2300      	movs	r3, #0
 800bde2:	9309      	str	r3, [sp, #36]	; 0x24
 800bde4:	2320      	movs	r3, #32
 800bde6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdea:	2330      	movs	r3, #48	; 0x30
 800bdec:	f04f 0901 	mov.w	r9, #1
 800bdf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800bfa4 <_vfiprintf_r+0x220>
 800bdf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	469a      	mov	sl, r3
 800be00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be04:	b10a      	cbz	r2, 800be0a <_vfiprintf_r+0x86>
 800be06:	2a25      	cmp	r2, #37	; 0x25
 800be08:	d1f9      	bne.n	800bdfe <_vfiprintf_r+0x7a>
 800be0a:	ebba 0b04 	subs.w	fp, sl, r4
 800be0e:	d00b      	beq.n	800be28 <_vfiprintf_r+0xa4>
 800be10:	465b      	mov	r3, fp
 800be12:	4622      	mov	r2, r4
 800be14:	4629      	mov	r1, r5
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff ffa1 	bl	800bd5e <__sfputs_r>
 800be1c:	3001      	adds	r0, #1
 800be1e:	f000 80a9 	beq.w	800bf74 <_vfiprintf_r+0x1f0>
 800be22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be24:	445a      	add	r2, fp
 800be26:	9209      	str	r2, [sp, #36]	; 0x24
 800be28:	f89a 3000 	ldrb.w	r3, [sl]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 80a1 	beq.w	800bf74 <_vfiprintf_r+0x1f0>
 800be32:	2300      	movs	r3, #0
 800be34:	f04f 32ff 	mov.w	r2, #4294967295
 800be38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be3c:	f10a 0a01 	add.w	sl, sl, #1
 800be40:	9304      	str	r3, [sp, #16]
 800be42:	9307      	str	r3, [sp, #28]
 800be44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be48:	931a      	str	r3, [sp, #104]	; 0x68
 800be4a:	4654      	mov	r4, sl
 800be4c:	2205      	movs	r2, #5
 800be4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be52:	4854      	ldr	r0, [pc, #336]	; (800bfa4 <_vfiprintf_r+0x220>)
 800be54:	f7fd fb60 	bl	8009518 <memchr>
 800be58:	9a04      	ldr	r2, [sp, #16]
 800be5a:	b9d8      	cbnz	r0, 800be94 <_vfiprintf_r+0x110>
 800be5c:	06d1      	lsls	r1, r2, #27
 800be5e:	bf44      	itt	mi
 800be60:	2320      	movmi	r3, #32
 800be62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be66:	0713      	lsls	r3, r2, #28
 800be68:	bf44      	itt	mi
 800be6a:	232b      	movmi	r3, #43	; 0x2b
 800be6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be70:	f89a 3000 	ldrb.w	r3, [sl]
 800be74:	2b2a      	cmp	r3, #42	; 0x2a
 800be76:	d015      	beq.n	800bea4 <_vfiprintf_r+0x120>
 800be78:	4654      	mov	r4, sl
 800be7a:	2000      	movs	r0, #0
 800be7c:	f04f 0c0a 	mov.w	ip, #10
 800be80:	9a07      	ldr	r2, [sp, #28]
 800be82:	4621      	mov	r1, r4
 800be84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be88:	3b30      	subs	r3, #48	; 0x30
 800be8a:	2b09      	cmp	r3, #9
 800be8c:	d94d      	bls.n	800bf2a <_vfiprintf_r+0x1a6>
 800be8e:	b1b0      	cbz	r0, 800bebe <_vfiprintf_r+0x13a>
 800be90:	9207      	str	r2, [sp, #28]
 800be92:	e014      	b.n	800bebe <_vfiprintf_r+0x13a>
 800be94:	eba0 0308 	sub.w	r3, r0, r8
 800be98:	fa09 f303 	lsl.w	r3, r9, r3
 800be9c:	4313      	orrs	r3, r2
 800be9e:	46a2      	mov	sl, r4
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	e7d2      	b.n	800be4a <_vfiprintf_r+0xc6>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	1d19      	adds	r1, r3, #4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	9103      	str	r1, [sp, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	bfbb      	ittet	lt
 800beb0:	425b      	neglt	r3, r3
 800beb2:	f042 0202 	orrlt.w	r2, r2, #2
 800beb6:	9307      	strge	r3, [sp, #28]
 800beb8:	9307      	strlt	r3, [sp, #28]
 800beba:	bfb8      	it	lt
 800bebc:	9204      	strlt	r2, [sp, #16]
 800bebe:	7823      	ldrb	r3, [r4, #0]
 800bec0:	2b2e      	cmp	r3, #46	; 0x2e
 800bec2:	d10c      	bne.n	800bede <_vfiprintf_r+0x15a>
 800bec4:	7863      	ldrb	r3, [r4, #1]
 800bec6:	2b2a      	cmp	r3, #42	; 0x2a
 800bec8:	d134      	bne.n	800bf34 <_vfiprintf_r+0x1b0>
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	3402      	adds	r4, #2
 800bece:	1d1a      	adds	r2, r3, #4
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	9203      	str	r2, [sp, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	bfb8      	it	lt
 800bed8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bedc:	9305      	str	r3, [sp, #20]
 800bede:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfa8 <_vfiprintf_r+0x224>
 800bee2:	2203      	movs	r2, #3
 800bee4:	4650      	mov	r0, sl
 800bee6:	7821      	ldrb	r1, [r4, #0]
 800bee8:	f7fd fb16 	bl	8009518 <memchr>
 800beec:	b138      	cbz	r0, 800befe <_vfiprintf_r+0x17a>
 800beee:	2240      	movs	r2, #64	; 0x40
 800bef0:	9b04      	ldr	r3, [sp, #16]
 800bef2:	eba0 000a 	sub.w	r0, r0, sl
 800bef6:	4082      	lsls	r2, r0
 800bef8:	4313      	orrs	r3, r2
 800befa:	3401      	adds	r4, #1
 800befc:	9304      	str	r3, [sp, #16]
 800befe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf02:	2206      	movs	r2, #6
 800bf04:	4829      	ldr	r0, [pc, #164]	; (800bfac <_vfiprintf_r+0x228>)
 800bf06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf0a:	f7fd fb05 	bl	8009518 <memchr>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d03f      	beq.n	800bf92 <_vfiprintf_r+0x20e>
 800bf12:	4b27      	ldr	r3, [pc, #156]	; (800bfb0 <_vfiprintf_r+0x22c>)
 800bf14:	bb1b      	cbnz	r3, 800bf5e <_vfiprintf_r+0x1da>
 800bf16:	9b03      	ldr	r3, [sp, #12]
 800bf18:	3307      	adds	r3, #7
 800bf1a:	f023 0307 	bic.w	r3, r3, #7
 800bf1e:	3308      	adds	r3, #8
 800bf20:	9303      	str	r3, [sp, #12]
 800bf22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf24:	443b      	add	r3, r7
 800bf26:	9309      	str	r3, [sp, #36]	; 0x24
 800bf28:	e768      	b.n	800bdfc <_vfiprintf_r+0x78>
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf32:	e7a6      	b.n	800be82 <_vfiprintf_r+0xfe>
 800bf34:	2300      	movs	r3, #0
 800bf36:	f04f 0c0a 	mov.w	ip, #10
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	3401      	adds	r4, #1
 800bf3e:	9305      	str	r3, [sp, #20]
 800bf40:	4620      	mov	r0, r4
 800bf42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf46:	3a30      	subs	r2, #48	; 0x30
 800bf48:	2a09      	cmp	r2, #9
 800bf4a:	d903      	bls.n	800bf54 <_vfiprintf_r+0x1d0>
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d0c6      	beq.n	800bede <_vfiprintf_r+0x15a>
 800bf50:	9105      	str	r1, [sp, #20]
 800bf52:	e7c4      	b.n	800bede <_vfiprintf_r+0x15a>
 800bf54:	4604      	mov	r4, r0
 800bf56:	2301      	movs	r3, #1
 800bf58:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf5c:	e7f0      	b.n	800bf40 <_vfiprintf_r+0x1bc>
 800bf5e:	ab03      	add	r3, sp, #12
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	462a      	mov	r2, r5
 800bf64:	4630      	mov	r0, r6
 800bf66:	4b13      	ldr	r3, [pc, #76]	; (800bfb4 <_vfiprintf_r+0x230>)
 800bf68:	a904      	add	r1, sp, #16
 800bf6a:	f7fc fa69 	bl	8008440 <_printf_float>
 800bf6e:	4607      	mov	r7, r0
 800bf70:	1c78      	adds	r0, r7, #1
 800bf72:	d1d6      	bne.n	800bf22 <_vfiprintf_r+0x19e>
 800bf74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf76:	07d9      	lsls	r1, r3, #31
 800bf78:	d405      	bmi.n	800bf86 <_vfiprintf_r+0x202>
 800bf7a:	89ab      	ldrh	r3, [r5, #12]
 800bf7c:	059a      	lsls	r2, r3, #22
 800bf7e:	d402      	bmi.n	800bf86 <_vfiprintf_r+0x202>
 800bf80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf82:	f7fd fac8 	bl	8009516 <__retarget_lock_release_recursive>
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	065b      	lsls	r3, r3, #25
 800bf8a:	f53f af1d 	bmi.w	800bdc8 <_vfiprintf_r+0x44>
 800bf8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf90:	e71c      	b.n	800bdcc <_vfiprintf_r+0x48>
 800bf92:	ab03      	add	r3, sp, #12
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	462a      	mov	r2, r5
 800bf98:	4630      	mov	r0, r6
 800bf9a:	4b06      	ldr	r3, [pc, #24]	; (800bfb4 <_vfiprintf_r+0x230>)
 800bf9c:	a904      	add	r1, sp, #16
 800bf9e:	f7fc fcef 	bl	8008980 <_printf_i>
 800bfa2:	e7e4      	b.n	800bf6e <_vfiprintf_r+0x1ea>
 800bfa4:	0800cff9 	.word	0x0800cff9
 800bfa8:	0800cfff 	.word	0x0800cfff
 800bfac:	0800d003 	.word	0x0800d003
 800bfb0:	08008441 	.word	0x08008441
 800bfb4:	0800bd5f 	.word	0x0800bd5f

0800bfb8 <__sflush_r>:
 800bfb8:	898a      	ldrh	r2, [r1, #12]
 800bfba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	0710      	lsls	r0, r2, #28
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	d457      	bmi.n	800c074 <__sflush_r+0xbc>
 800bfc4:	684b      	ldr	r3, [r1, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dc04      	bgt.n	800bfd4 <__sflush_r+0x1c>
 800bfca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	dc01      	bgt.n	800bfd4 <__sflush_r+0x1c>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfd6:	2e00      	cmp	r6, #0
 800bfd8:	d0fa      	beq.n	800bfd0 <__sflush_r+0x18>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfe0:	682f      	ldr	r7, [r5, #0]
 800bfe2:	6a21      	ldr	r1, [r4, #32]
 800bfe4:	602b      	str	r3, [r5, #0]
 800bfe6:	d032      	beq.n	800c04e <__sflush_r+0x96>
 800bfe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	075a      	lsls	r2, r3, #29
 800bfee:	d505      	bpl.n	800bffc <__sflush_r+0x44>
 800bff0:	6863      	ldr	r3, [r4, #4]
 800bff2:	1ac0      	subs	r0, r0, r3
 800bff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bff6:	b10b      	cbz	r3, 800bffc <__sflush_r+0x44>
 800bff8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bffa:	1ac0      	subs	r0, r0, r3
 800bffc:	2300      	movs	r3, #0
 800bffe:	4602      	mov	r2, r0
 800c000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c002:	4628      	mov	r0, r5
 800c004:	6a21      	ldr	r1, [r4, #32]
 800c006:	47b0      	blx	r6
 800c008:	1c43      	adds	r3, r0, #1
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	d106      	bne.n	800c01c <__sflush_r+0x64>
 800c00e:	6829      	ldr	r1, [r5, #0]
 800c010:	291d      	cmp	r1, #29
 800c012:	d82b      	bhi.n	800c06c <__sflush_r+0xb4>
 800c014:	4a28      	ldr	r2, [pc, #160]	; (800c0b8 <__sflush_r+0x100>)
 800c016:	410a      	asrs	r2, r1
 800c018:	07d6      	lsls	r6, r2, #31
 800c01a:	d427      	bmi.n	800c06c <__sflush_r+0xb4>
 800c01c:	2200      	movs	r2, #0
 800c01e:	6062      	str	r2, [r4, #4]
 800c020:	6922      	ldr	r2, [r4, #16]
 800c022:	04d9      	lsls	r1, r3, #19
 800c024:	6022      	str	r2, [r4, #0]
 800c026:	d504      	bpl.n	800c032 <__sflush_r+0x7a>
 800c028:	1c42      	adds	r2, r0, #1
 800c02a:	d101      	bne.n	800c030 <__sflush_r+0x78>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	b903      	cbnz	r3, 800c032 <__sflush_r+0x7a>
 800c030:	6560      	str	r0, [r4, #84]	; 0x54
 800c032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c034:	602f      	str	r7, [r5, #0]
 800c036:	2900      	cmp	r1, #0
 800c038:	d0ca      	beq.n	800bfd0 <__sflush_r+0x18>
 800c03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c03e:	4299      	cmp	r1, r3
 800c040:	d002      	beq.n	800c048 <__sflush_r+0x90>
 800c042:	4628      	mov	r0, r5
 800c044:	f7fe f8e8 	bl	800a218 <_free_r>
 800c048:	2000      	movs	r0, #0
 800c04a:	6360      	str	r0, [r4, #52]	; 0x34
 800c04c:	e7c1      	b.n	800bfd2 <__sflush_r+0x1a>
 800c04e:	2301      	movs	r3, #1
 800c050:	4628      	mov	r0, r5
 800c052:	47b0      	blx	r6
 800c054:	1c41      	adds	r1, r0, #1
 800c056:	d1c8      	bne.n	800bfea <__sflush_r+0x32>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0c5      	beq.n	800bfea <__sflush_r+0x32>
 800c05e:	2b1d      	cmp	r3, #29
 800c060:	d001      	beq.n	800c066 <__sflush_r+0xae>
 800c062:	2b16      	cmp	r3, #22
 800c064:	d101      	bne.n	800c06a <__sflush_r+0xb2>
 800c066:	602f      	str	r7, [r5, #0]
 800c068:	e7b2      	b.n	800bfd0 <__sflush_r+0x18>
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	e7ae      	b.n	800bfd2 <__sflush_r+0x1a>
 800c074:	690f      	ldr	r7, [r1, #16]
 800c076:	2f00      	cmp	r7, #0
 800c078:	d0aa      	beq.n	800bfd0 <__sflush_r+0x18>
 800c07a:	0793      	lsls	r3, r2, #30
 800c07c:	bf18      	it	ne
 800c07e:	2300      	movne	r3, #0
 800c080:	680e      	ldr	r6, [r1, #0]
 800c082:	bf08      	it	eq
 800c084:	694b      	ldreq	r3, [r1, #20]
 800c086:	1bf6      	subs	r6, r6, r7
 800c088:	600f      	str	r7, [r1, #0]
 800c08a:	608b      	str	r3, [r1, #8]
 800c08c:	2e00      	cmp	r6, #0
 800c08e:	dd9f      	ble.n	800bfd0 <__sflush_r+0x18>
 800c090:	4633      	mov	r3, r6
 800c092:	463a      	mov	r2, r7
 800c094:	4628      	mov	r0, r5
 800c096:	6a21      	ldr	r1, [r4, #32]
 800c098:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c09c:	47e0      	blx	ip
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	dc06      	bgt.n	800c0b0 <__sflush_r+0xf8>
 800c0a2:	89a3      	ldrh	r3, [r4, #12]
 800c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	e790      	b.n	800bfd2 <__sflush_r+0x1a>
 800c0b0:	4407      	add	r7, r0
 800c0b2:	1a36      	subs	r6, r6, r0
 800c0b4:	e7ea      	b.n	800c08c <__sflush_r+0xd4>
 800c0b6:	bf00      	nop
 800c0b8:	dfbffffe 	.word	0xdfbffffe

0800c0bc <_fflush_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	690b      	ldr	r3, [r1, #16]
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	b913      	cbnz	r3, 800c0cc <_fflush_r+0x10>
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	b118      	cbz	r0, 800c0d6 <_fflush_r+0x1a>
 800c0ce:	6a03      	ldr	r3, [r0, #32]
 800c0d0:	b90b      	cbnz	r3, 800c0d6 <_fflush_r+0x1a>
 800c0d2:	f7fc ffff 	bl	80090d4 <__sinit>
 800c0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d0f3      	beq.n	800c0c6 <_fflush_r+0xa>
 800c0de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0e0:	07d0      	lsls	r0, r2, #31
 800c0e2:	d404      	bmi.n	800c0ee <_fflush_r+0x32>
 800c0e4:	0599      	lsls	r1, r3, #22
 800c0e6:	d402      	bmi.n	800c0ee <_fflush_r+0x32>
 800c0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ea:	f7fd fa13 	bl	8009514 <__retarget_lock_acquire_recursive>
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	f7ff ff61 	bl	800bfb8 <__sflush_r>
 800c0f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	07da      	lsls	r2, r3, #31
 800c0fc:	d4e4      	bmi.n	800c0c8 <_fflush_r+0xc>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	059b      	lsls	r3, r3, #22
 800c102:	d4e1      	bmi.n	800c0c8 <_fflush_r+0xc>
 800c104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c106:	f7fd fa06 	bl	8009516 <__retarget_lock_release_recursive>
 800c10a:	e7dd      	b.n	800c0c8 <_fflush_r+0xc>

0800c10c <__swhatbuf_r>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	460c      	mov	r4, r1
 800c110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c114:	4615      	mov	r5, r2
 800c116:	2900      	cmp	r1, #0
 800c118:	461e      	mov	r6, r3
 800c11a:	b096      	sub	sp, #88	; 0x58
 800c11c:	da0c      	bge.n	800c138 <__swhatbuf_r+0x2c>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	2100      	movs	r1, #0
 800c122:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c126:	bf0c      	ite	eq
 800c128:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c12c:	2340      	movne	r3, #64	; 0x40
 800c12e:	2000      	movs	r0, #0
 800c130:	6031      	str	r1, [r6, #0]
 800c132:	602b      	str	r3, [r5, #0]
 800c134:	b016      	add	sp, #88	; 0x58
 800c136:	bd70      	pop	{r4, r5, r6, pc}
 800c138:	466a      	mov	r2, sp
 800c13a:	f000 f8a9 	bl	800c290 <_fstat_r>
 800c13e:	2800      	cmp	r0, #0
 800c140:	dbed      	blt.n	800c11e <__swhatbuf_r+0x12>
 800c142:	9901      	ldr	r1, [sp, #4]
 800c144:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c148:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c14c:	4259      	negs	r1, r3
 800c14e:	4159      	adcs	r1, r3
 800c150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c154:	e7eb      	b.n	800c12e <__swhatbuf_r+0x22>

0800c156 <__smakebuf_r>:
 800c156:	898b      	ldrh	r3, [r1, #12]
 800c158:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c15a:	079d      	lsls	r5, r3, #30
 800c15c:	4606      	mov	r6, r0
 800c15e:	460c      	mov	r4, r1
 800c160:	d507      	bpl.n	800c172 <__smakebuf_r+0x1c>
 800c162:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c166:	6023      	str	r3, [r4, #0]
 800c168:	6123      	str	r3, [r4, #16]
 800c16a:	2301      	movs	r3, #1
 800c16c:	6163      	str	r3, [r4, #20]
 800c16e:	b002      	add	sp, #8
 800c170:	bd70      	pop	{r4, r5, r6, pc}
 800c172:	466a      	mov	r2, sp
 800c174:	ab01      	add	r3, sp, #4
 800c176:	f7ff ffc9 	bl	800c10c <__swhatbuf_r>
 800c17a:	9900      	ldr	r1, [sp, #0]
 800c17c:	4605      	mov	r5, r0
 800c17e:	4630      	mov	r0, r6
 800c180:	f7fe f8ba 	bl	800a2f8 <_malloc_r>
 800c184:	b948      	cbnz	r0, 800c19a <__smakebuf_r+0x44>
 800c186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c18a:	059a      	lsls	r2, r3, #22
 800c18c:	d4ef      	bmi.n	800c16e <__smakebuf_r+0x18>
 800c18e:	f023 0303 	bic.w	r3, r3, #3
 800c192:	f043 0302 	orr.w	r3, r3, #2
 800c196:	81a3      	strh	r3, [r4, #12]
 800c198:	e7e3      	b.n	800c162 <__smakebuf_r+0xc>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	6020      	str	r0, [r4, #0]
 800c19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	6120      	str	r0, [r4, #16]
 800c1a8:	6163      	str	r3, [r4, #20]
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	b15b      	cbz	r3, 800c1c6 <__smakebuf_r+0x70>
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1b4:	f000 f87e 	bl	800c2b4 <_isatty_r>
 800c1b8:	b128      	cbz	r0, 800c1c6 <__smakebuf_r+0x70>
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	f023 0303 	bic.w	r3, r3, #3
 800c1c0:	f043 0301 	orr.w	r3, r3, #1
 800c1c4:	81a3      	strh	r3, [r4, #12]
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	431d      	orrs	r5, r3
 800c1ca:	81a5      	strh	r5, [r4, #12]
 800c1cc:	e7cf      	b.n	800c16e <__smakebuf_r+0x18>

0800c1ce <_putc_r>:
 800c1ce:	b570      	push	{r4, r5, r6, lr}
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	4614      	mov	r4, r2
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	b118      	cbz	r0, 800c1e0 <_putc_r+0x12>
 800c1d8:	6a03      	ldr	r3, [r0, #32]
 800c1da:	b90b      	cbnz	r3, 800c1e0 <_putc_r+0x12>
 800c1dc:	f7fc ff7a 	bl	80090d4 <__sinit>
 800c1e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1e2:	07d8      	lsls	r0, r3, #31
 800c1e4:	d405      	bmi.n	800c1f2 <_putc_r+0x24>
 800c1e6:	89a3      	ldrh	r3, [r4, #12]
 800c1e8:	0599      	lsls	r1, r3, #22
 800c1ea:	d402      	bmi.n	800c1f2 <_putc_r+0x24>
 800c1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ee:	f7fd f991 	bl	8009514 <__retarget_lock_acquire_recursive>
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	60a3      	str	r3, [r4, #8]
 800c1fa:	da05      	bge.n	800c208 <_putc_r+0x3a>
 800c1fc:	69a2      	ldr	r2, [r4, #24]
 800c1fe:	4293      	cmp	r3, r2
 800c200:	db12      	blt.n	800c228 <_putc_r+0x5a>
 800c202:	b2eb      	uxtb	r3, r5
 800c204:	2b0a      	cmp	r3, #10
 800c206:	d00f      	beq.n	800c228 <_putc_r+0x5a>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	1c5a      	adds	r2, r3, #1
 800c20c:	6022      	str	r2, [r4, #0]
 800c20e:	701d      	strb	r5, [r3, #0]
 800c210:	b2ed      	uxtb	r5, r5
 800c212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c214:	07da      	lsls	r2, r3, #31
 800c216:	d405      	bmi.n	800c224 <_putc_r+0x56>
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	059b      	lsls	r3, r3, #22
 800c21c:	d402      	bmi.n	800c224 <_putc_r+0x56>
 800c21e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c220:	f7fd f979 	bl	8009516 <__retarget_lock_release_recursive>
 800c224:	4628      	mov	r0, r5
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	4629      	mov	r1, r5
 800c22a:	4622      	mov	r2, r4
 800c22c:	4630      	mov	r0, r6
 800c22e:	f7fd f860 	bl	80092f2 <__swbuf_r>
 800c232:	4605      	mov	r5, r0
 800c234:	e7ed      	b.n	800c212 <_putc_r+0x44>

0800c236 <memmove>:
 800c236:	4288      	cmp	r0, r1
 800c238:	b510      	push	{r4, lr}
 800c23a:	eb01 0402 	add.w	r4, r1, r2
 800c23e:	d902      	bls.n	800c246 <memmove+0x10>
 800c240:	4284      	cmp	r4, r0
 800c242:	4623      	mov	r3, r4
 800c244:	d807      	bhi.n	800c256 <memmove+0x20>
 800c246:	1e43      	subs	r3, r0, #1
 800c248:	42a1      	cmp	r1, r4
 800c24a:	d008      	beq.n	800c25e <memmove+0x28>
 800c24c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c250:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c254:	e7f8      	b.n	800c248 <memmove+0x12>
 800c256:	4601      	mov	r1, r0
 800c258:	4402      	add	r2, r0
 800c25a:	428a      	cmp	r2, r1
 800c25c:	d100      	bne.n	800c260 <memmove+0x2a>
 800c25e:	bd10      	pop	{r4, pc}
 800c260:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c264:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c268:	e7f7      	b.n	800c25a <memmove+0x24>

0800c26a <strncmp>:
 800c26a:	b510      	push	{r4, lr}
 800c26c:	b16a      	cbz	r2, 800c28a <strncmp+0x20>
 800c26e:	3901      	subs	r1, #1
 800c270:	1884      	adds	r4, r0, r2
 800c272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c276:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d103      	bne.n	800c286 <strncmp+0x1c>
 800c27e:	42a0      	cmp	r0, r4
 800c280:	d001      	beq.n	800c286 <strncmp+0x1c>
 800c282:	2a00      	cmp	r2, #0
 800c284:	d1f5      	bne.n	800c272 <strncmp+0x8>
 800c286:	1ad0      	subs	r0, r2, r3
 800c288:	bd10      	pop	{r4, pc}
 800c28a:	4610      	mov	r0, r2
 800c28c:	e7fc      	b.n	800c288 <strncmp+0x1e>
	...

0800c290 <_fstat_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	2300      	movs	r3, #0
 800c294:	4d06      	ldr	r5, [pc, #24]	; (800c2b0 <_fstat_r+0x20>)
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	4611      	mov	r1, r2
 800c29c:	602b      	str	r3, [r5, #0]
 800c29e:	f7f7 fe9e 	bl	8003fde <_fstat>
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	d102      	bne.n	800c2ac <_fstat_r+0x1c>
 800c2a6:	682b      	ldr	r3, [r5, #0]
 800c2a8:	b103      	cbz	r3, 800c2ac <_fstat_r+0x1c>
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20004548 	.word	0x20004548

0800c2b4 <_isatty_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	4d05      	ldr	r5, [pc, #20]	; (800c2d0 <_isatty_r+0x1c>)
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	602b      	str	r3, [r5, #0]
 800c2c0:	f7f7 fe9c 	bl	8003ffc <_isatty>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	d102      	bne.n	800c2ce <_isatty_r+0x1a>
 800c2c8:	682b      	ldr	r3, [r5, #0]
 800c2ca:	b103      	cbz	r3, 800c2ce <_isatty_r+0x1a>
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	20004548 	.word	0x20004548

0800c2d4 <_sbrk_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	4d05      	ldr	r5, [pc, #20]	; (800c2f0 <_sbrk_r+0x1c>)
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	602b      	str	r3, [r5, #0]
 800c2e0:	f7f7 fea2 	bl	8004028 <_sbrk>
 800c2e4:	1c43      	adds	r3, r0, #1
 800c2e6:	d102      	bne.n	800c2ee <_sbrk_r+0x1a>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	b103      	cbz	r3, 800c2ee <_sbrk_r+0x1a>
 800c2ec:	6023      	str	r3, [r4, #0]
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
 800c2f0:	20004548 	.word	0x20004548

0800c2f4 <memcpy>:
 800c2f4:	440a      	add	r2, r1
 800c2f6:	4291      	cmp	r1, r2
 800c2f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2fc:	d100      	bne.n	800c300 <memcpy+0xc>
 800c2fe:	4770      	bx	lr
 800c300:	b510      	push	{r4, lr}
 800c302:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c306:	4291      	cmp	r1, r2
 800c308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c30c:	d1f9      	bne.n	800c302 <memcpy+0xe>
 800c30e:	bd10      	pop	{r4, pc}

0800c310 <nan>:
 800c310:	2000      	movs	r0, #0
 800c312:	4901      	ldr	r1, [pc, #4]	; (800c318 <nan+0x8>)
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	7ff80000 	.word	0x7ff80000

0800c31c <__assert_func>:
 800c31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c31e:	4614      	mov	r4, r2
 800c320:	461a      	mov	r2, r3
 800c322:	4b09      	ldr	r3, [pc, #36]	; (800c348 <__assert_func+0x2c>)
 800c324:	4605      	mov	r5, r0
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68d8      	ldr	r0, [r3, #12]
 800c32a:	b14c      	cbz	r4, 800c340 <__assert_func+0x24>
 800c32c:	4b07      	ldr	r3, [pc, #28]	; (800c34c <__assert_func+0x30>)
 800c32e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c332:	9100      	str	r1, [sp, #0]
 800c334:	462b      	mov	r3, r5
 800c336:	4906      	ldr	r1, [pc, #24]	; (800c350 <__assert_func+0x34>)
 800c338:	f000 fbca 	bl	800cad0 <fiprintf>
 800c33c:	f000 fbda 	bl	800caf4 <abort>
 800c340:	4b04      	ldr	r3, [pc, #16]	; (800c354 <__assert_func+0x38>)
 800c342:	461c      	mov	r4, r3
 800c344:	e7f3      	b.n	800c32e <__assert_func+0x12>
 800c346:	bf00      	nop
 800c348:	20000074 	.word	0x20000074
 800c34c:	0800d012 	.word	0x0800d012
 800c350:	0800d01f 	.word	0x0800d01f
 800c354:	0800d04d 	.word	0x0800d04d

0800c358 <_calloc_r>:
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	fba1 5402 	umull	r5, r4, r1, r2
 800c35e:	b934      	cbnz	r4, 800c36e <_calloc_r+0x16>
 800c360:	4629      	mov	r1, r5
 800c362:	f7fd ffc9 	bl	800a2f8 <_malloc_r>
 800c366:	4606      	mov	r6, r0
 800c368:	b928      	cbnz	r0, 800c376 <_calloc_r+0x1e>
 800c36a:	4630      	mov	r0, r6
 800c36c:	bd70      	pop	{r4, r5, r6, pc}
 800c36e:	220c      	movs	r2, #12
 800c370:	2600      	movs	r6, #0
 800c372:	6002      	str	r2, [r0, #0]
 800c374:	e7f9      	b.n	800c36a <_calloc_r+0x12>
 800c376:	462a      	mov	r2, r5
 800c378:	4621      	mov	r1, r4
 800c37a:	f7fd f84f 	bl	800941c <memset>
 800c37e:	e7f4      	b.n	800c36a <_calloc_r+0x12>

0800c380 <rshift>:
 800c380:	6903      	ldr	r3, [r0, #16]
 800c382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c386:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c38a:	f100 0414 	add.w	r4, r0, #20
 800c38e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c392:	dd46      	ble.n	800c422 <rshift+0xa2>
 800c394:	f011 011f 	ands.w	r1, r1, #31
 800c398:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c39c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3a0:	d10c      	bne.n	800c3bc <rshift+0x3c>
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	f100 0710 	add.w	r7, r0, #16
 800c3a8:	42b1      	cmp	r1, r6
 800c3aa:	d335      	bcc.n	800c418 <rshift+0x98>
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	1eea      	subs	r2, r5, #3
 800c3b2:	4296      	cmp	r6, r2
 800c3b4:	bf38      	it	cc
 800c3b6:	2300      	movcc	r3, #0
 800c3b8:	4423      	add	r3, r4
 800c3ba:	e015      	b.n	800c3e8 <rshift+0x68>
 800c3bc:	46a1      	mov	r9, r4
 800c3be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3c2:	f1c1 0820 	rsb	r8, r1, #32
 800c3c6:	40cf      	lsrs	r7, r1
 800c3c8:	f105 0e04 	add.w	lr, r5, #4
 800c3cc:	4576      	cmp	r6, lr
 800c3ce:	46f4      	mov	ip, lr
 800c3d0:	d816      	bhi.n	800c400 <rshift+0x80>
 800c3d2:	1a9a      	subs	r2, r3, r2
 800c3d4:	0092      	lsls	r2, r2, #2
 800c3d6:	3a04      	subs	r2, #4
 800c3d8:	3501      	adds	r5, #1
 800c3da:	42ae      	cmp	r6, r5
 800c3dc:	bf38      	it	cc
 800c3de:	2200      	movcc	r2, #0
 800c3e0:	18a3      	adds	r3, r4, r2
 800c3e2:	50a7      	str	r7, [r4, r2]
 800c3e4:	b107      	cbz	r7, 800c3e8 <rshift+0x68>
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	eba3 0204 	sub.w	r2, r3, r4
 800c3ee:	bf08      	it	eq
 800c3f0:	2300      	moveq	r3, #0
 800c3f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3f6:	6102      	str	r2, [r0, #16]
 800c3f8:	bf08      	it	eq
 800c3fa:	6143      	streq	r3, [r0, #20]
 800c3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c400:	f8dc c000 	ldr.w	ip, [ip]
 800c404:	fa0c fc08 	lsl.w	ip, ip, r8
 800c408:	ea4c 0707 	orr.w	r7, ip, r7
 800c40c:	f849 7b04 	str.w	r7, [r9], #4
 800c410:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c414:	40cf      	lsrs	r7, r1
 800c416:	e7d9      	b.n	800c3cc <rshift+0x4c>
 800c418:	f851 cb04 	ldr.w	ip, [r1], #4
 800c41c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c420:	e7c2      	b.n	800c3a8 <rshift+0x28>
 800c422:	4623      	mov	r3, r4
 800c424:	e7e0      	b.n	800c3e8 <rshift+0x68>

0800c426 <__hexdig_fun>:
 800c426:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c42a:	2b09      	cmp	r3, #9
 800c42c:	d802      	bhi.n	800c434 <__hexdig_fun+0xe>
 800c42e:	3820      	subs	r0, #32
 800c430:	b2c0      	uxtb	r0, r0
 800c432:	4770      	bx	lr
 800c434:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c438:	2b05      	cmp	r3, #5
 800c43a:	d801      	bhi.n	800c440 <__hexdig_fun+0x1a>
 800c43c:	3847      	subs	r0, #71	; 0x47
 800c43e:	e7f7      	b.n	800c430 <__hexdig_fun+0xa>
 800c440:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c444:	2b05      	cmp	r3, #5
 800c446:	d801      	bhi.n	800c44c <__hexdig_fun+0x26>
 800c448:	3827      	subs	r0, #39	; 0x27
 800c44a:	e7f1      	b.n	800c430 <__hexdig_fun+0xa>
 800c44c:	2000      	movs	r0, #0
 800c44e:	4770      	bx	lr

0800c450 <__gethex>:
 800c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c454:	4681      	mov	r9, r0
 800c456:	468a      	mov	sl, r1
 800c458:	4617      	mov	r7, r2
 800c45a:	680a      	ldr	r2, [r1, #0]
 800c45c:	b085      	sub	sp, #20
 800c45e:	f102 0b02 	add.w	fp, r2, #2
 800c462:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c466:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c46a:	9302      	str	r3, [sp, #8]
 800c46c:	32fe      	adds	r2, #254	; 0xfe
 800c46e:	eb02 030b 	add.w	r3, r2, fp
 800c472:	46d8      	mov	r8, fp
 800c474:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	2830      	cmp	r0, #48	; 0x30
 800c47c:	d0f7      	beq.n	800c46e <__gethex+0x1e>
 800c47e:	f7ff ffd2 	bl	800c426 <__hexdig_fun>
 800c482:	4604      	mov	r4, r0
 800c484:	2800      	cmp	r0, #0
 800c486:	d138      	bne.n	800c4fa <__gethex+0xaa>
 800c488:	2201      	movs	r2, #1
 800c48a:	4640      	mov	r0, r8
 800c48c:	49a7      	ldr	r1, [pc, #668]	; (800c72c <__gethex+0x2dc>)
 800c48e:	f7ff feec 	bl	800c26a <strncmp>
 800c492:	4606      	mov	r6, r0
 800c494:	2800      	cmp	r0, #0
 800c496:	d169      	bne.n	800c56c <__gethex+0x11c>
 800c498:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c49c:	465d      	mov	r5, fp
 800c49e:	f7ff ffc2 	bl	800c426 <__hexdig_fun>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d064      	beq.n	800c570 <__gethex+0x120>
 800c4a6:	465a      	mov	r2, fp
 800c4a8:	7810      	ldrb	r0, [r2, #0]
 800c4aa:	4690      	mov	r8, r2
 800c4ac:	2830      	cmp	r0, #48	; 0x30
 800c4ae:	f102 0201 	add.w	r2, r2, #1
 800c4b2:	d0f9      	beq.n	800c4a8 <__gethex+0x58>
 800c4b4:	f7ff ffb7 	bl	800c426 <__hexdig_fun>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	fab0 f480 	clz	r4, r0
 800c4be:	465e      	mov	r6, fp
 800c4c0:	0964      	lsrs	r4, r4, #5
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	4642      	mov	r2, r8
 800c4c6:	4615      	mov	r5, r2
 800c4c8:	7828      	ldrb	r0, [r5, #0]
 800c4ca:	3201      	adds	r2, #1
 800c4cc:	f7ff ffab 	bl	800c426 <__hexdig_fun>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d1f8      	bne.n	800c4c6 <__gethex+0x76>
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	4994      	ldr	r1, [pc, #592]	; (800c72c <__gethex+0x2dc>)
 800c4da:	f7ff fec6 	bl	800c26a <strncmp>
 800c4de:	b978      	cbnz	r0, 800c500 <__gethex+0xb0>
 800c4e0:	b946      	cbnz	r6, 800c4f4 <__gethex+0xa4>
 800c4e2:	1c6e      	adds	r6, r5, #1
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	4615      	mov	r5, r2
 800c4e8:	7828      	ldrb	r0, [r5, #0]
 800c4ea:	3201      	adds	r2, #1
 800c4ec:	f7ff ff9b 	bl	800c426 <__hexdig_fun>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d1f8      	bne.n	800c4e6 <__gethex+0x96>
 800c4f4:	1b73      	subs	r3, r6, r5
 800c4f6:	009e      	lsls	r6, r3, #2
 800c4f8:	e004      	b.n	800c504 <__gethex+0xb4>
 800c4fa:	2400      	movs	r4, #0
 800c4fc:	4626      	mov	r6, r4
 800c4fe:	e7e1      	b.n	800c4c4 <__gethex+0x74>
 800c500:	2e00      	cmp	r6, #0
 800c502:	d1f7      	bne.n	800c4f4 <__gethex+0xa4>
 800c504:	782b      	ldrb	r3, [r5, #0]
 800c506:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c50a:	2b50      	cmp	r3, #80	; 0x50
 800c50c:	d13d      	bne.n	800c58a <__gethex+0x13a>
 800c50e:	786b      	ldrb	r3, [r5, #1]
 800c510:	2b2b      	cmp	r3, #43	; 0x2b
 800c512:	d02f      	beq.n	800c574 <__gethex+0x124>
 800c514:	2b2d      	cmp	r3, #45	; 0x2d
 800c516:	d031      	beq.n	800c57c <__gethex+0x12c>
 800c518:	f04f 0b00 	mov.w	fp, #0
 800c51c:	1c69      	adds	r1, r5, #1
 800c51e:	7808      	ldrb	r0, [r1, #0]
 800c520:	f7ff ff81 	bl	800c426 <__hexdig_fun>
 800c524:	1e42      	subs	r2, r0, #1
 800c526:	b2d2      	uxtb	r2, r2
 800c528:	2a18      	cmp	r2, #24
 800c52a:	d82e      	bhi.n	800c58a <__gethex+0x13a>
 800c52c:	f1a0 0210 	sub.w	r2, r0, #16
 800c530:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c534:	f7ff ff77 	bl	800c426 <__hexdig_fun>
 800c538:	f100 3cff 	add.w	ip, r0, #4294967295
 800c53c:	fa5f fc8c 	uxtb.w	ip, ip
 800c540:	f1bc 0f18 	cmp.w	ip, #24
 800c544:	d91d      	bls.n	800c582 <__gethex+0x132>
 800c546:	f1bb 0f00 	cmp.w	fp, #0
 800c54a:	d000      	beq.n	800c54e <__gethex+0xfe>
 800c54c:	4252      	negs	r2, r2
 800c54e:	4416      	add	r6, r2
 800c550:	f8ca 1000 	str.w	r1, [sl]
 800c554:	b1dc      	cbz	r4, 800c58e <__gethex+0x13e>
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	bf14      	ite	ne
 800c55c:	f04f 0800 	movne.w	r8, #0
 800c560:	f04f 0806 	moveq.w	r8, #6
 800c564:	4640      	mov	r0, r8
 800c566:	b005      	add	sp, #20
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	4645      	mov	r5, r8
 800c56e:	4626      	mov	r6, r4
 800c570:	2401      	movs	r4, #1
 800c572:	e7c7      	b.n	800c504 <__gethex+0xb4>
 800c574:	f04f 0b00 	mov.w	fp, #0
 800c578:	1ca9      	adds	r1, r5, #2
 800c57a:	e7d0      	b.n	800c51e <__gethex+0xce>
 800c57c:	f04f 0b01 	mov.w	fp, #1
 800c580:	e7fa      	b.n	800c578 <__gethex+0x128>
 800c582:	230a      	movs	r3, #10
 800c584:	fb03 0002 	mla	r0, r3, r2, r0
 800c588:	e7d0      	b.n	800c52c <__gethex+0xdc>
 800c58a:	4629      	mov	r1, r5
 800c58c:	e7e0      	b.n	800c550 <__gethex+0x100>
 800c58e:	4621      	mov	r1, r4
 800c590:	eba5 0308 	sub.w	r3, r5, r8
 800c594:	3b01      	subs	r3, #1
 800c596:	2b07      	cmp	r3, #7
 800c598:	dc0a      	bgt.n	800c5b0 <__gethex+0x160>
 800c59a:	4648      	mov	r0, r9
 800c59c:	f7fd ff38 	bl	800a410 <_Balloc>
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	b940      	cbnz	r0, 800c5b6 <__gethex+0x166>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	21e4      	movs	r1, #228	; 0xe4
 800c5a8:	4b61      	ldr	r3, [pc, #388]	; (800c730 <__gethex+0x2e0>)
 800c5aa:	4862      	ldr	r0, [pc, #392]	; (800c734 <__gethex+0x2e4>)
 800c5ac:	f7ff feb6 	bl	800c31c <__assert_func>
 800c5b0:	3101      	adds	r1, #1
 800c5b2:	105b      	asrs	r3, r3, #1
 800c5b4:	e7ef      	b.n	800c596 <__gethex+0x146>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	469b      	mov	fp, r3
 800c5ba:	f100 0a14 	add.w	sl, r0, #20
 800c5be:	f8cd a004 	str.w	sl, [sp, #4]
 800c5c2:	45a8      	cmp	r8, r5
 800c5c4:	d344      	bcc.n	800c650 <__gethex+0x200>
 800c5c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c5ca:	4658      	mov	r0, fp
 800c5cc:	f848 bb04 	str.w	fp, [r8], #4
 800c5d0:	eba8 080a 	sub.w	r8, r8, sl
 800c5d4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800c5d8:	6122      	str	r2, [r4, #16]
 800c5da:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800c5de:	f7fe f809 	bl	800a5f4 <__hi0bits>
 800c5e2:	683d      	ldr	r5, [r7, #0]
 800c5e4:	eba8 0800 	sub.w	r8, r8, r0
 800c5e8:	45a8      	cmp	r8, r5
 800c5ea:	dd59      	ble.n	800c6a0 <__gethex+0x250>
 800c5ec:	eba8 0805 	sub.w	r8, r8, r5
 800c5f0:	4641      	mov	r1, r8
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f7fe fb87 	bl	800ad06 <__any_on>
 800c5f8:	4683      	mov	fp, r0
 800c5fa:	b1b8      	cbz	r0, 800c62c <__gethex+0x1dc>
 800c5fc:	f04f 0b01 	mov.w	fp, #1
 800c600:	f108 33ff 	add.w	r3, r8, #4294967295
 800c604:	1159      	asrs	r1, r3, #5
 800c606:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c60a:	f003 021f 	and.w	r2, r3, #31
 800c60e:	fa0b f202 	lsl.w	r2, fp, r2
 800c612:	420a      	tst	r2, r1
 800c614:	d00a      	beq.n	800c62c <__gethex+0x1dc>
 800c616:	455b      	cmp	r3, fp
 800c618:	dd06      	ble.n	800c628 <__gethex+0x1d8>
 800c61a:	4620      	mov	r0, r4
 800c61c:	f1a8 0102 	sub.w	r1, r8, #2
 800c620:	f7fe fb71 	bl	800ad06 <__any_on>
 800c624:	2800      	cmp	r0, #0
 800c626:	d138      	bne.n	800c69a <__gethex+0x24a>
 800c628:	f04f 0b02 	mov.w	fp, #2
 800c62c:	4641      	mov	r1, r8
 800c62e:	4620      	mov	r0, r4
 800c630:	f7ff fea6 	bl	800c380 <rshift>
 800c634:	4446      	add	r6, r8
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	42b3      	cmp	r3, r6
 800c63a:	da41      	bge.n	800c6c0 <__gethex+0x270>
 800c63c:	4621      	mov	r1, r4
 800c63e:	4648      	mov	r0, r9
 800c640:	f7fd ff26 	bl	800a490 <_Bfree>
 800c644:	2300      	movs	r3, #0
 800c646:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c648:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c64c:	6013      	str	r3, [r2, #0]
 800c64e:	e789      	b.n	800c564 <__gethex+0x114>
 800c650:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c654:	2a2e      	cmp	r2, #46	; 0x2e
 800c656:	d014      	beq.n	800c682 <__gethex+0x232>
 800c658:	2b20      	cmp	r3, #32
 800c65a:	d106      	bne.n	800c66a <__gethex+0x21a>
 800c65c:	9b01      	ldr	r3, [sp, #4]
 800c65e:	f843 bb04 	str.w	fp, [r3], #4
 800c662:	f04f 0b00 	mov.w	fp, #0
 800c666:	9301      	str	r3, [sp, #4]
 800c668:	465b      	mov	r3, fp
 800c66a:	7828      	ldrb	r0, [r5, #0]
 800c66c:	9303      	str	r3, [sp, #12]
 800c66e:	f7ff feda 	bl	800c426 <__hexdig_fun>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	f000 000f 	and.w	r0, r0, #15
 800c678:	4098      	lsls	r0, r3
 800c67a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c67e:	3304      	adds	r3, #4
 800c680:	e79f      	b.n	800c5c2 <__gethex+0x172>
 800c682:	45a8      	cmp	r8, r5
 800c684:	d8e8      	bhi.n	800c658 <__gethex+0x208>
 800c686:	2201      	movs	r2, #1
 800c688:	4628      	mov	r0, r5
 800c68a:	4928      	ldr	r1, [pc, #160]	; (800c72c <__gethex+0x2dc>)
 800c68c:	9303      	str	r3, [sp, #12]
 800c68e:	f7ff fdec 	bl	800c26a <strncmp>
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	2800      	cmp	r0, #0
 800c696:	d1df      	bne.n	800c658 <__gethex+0x208>
 800c698:	e793      	b.n	800c5c2 <__gethex+0x172>
 800c69a:	f04f 0b03 	mov.w	fp, #3
 800c69e:	e7c5      	b.n	800c62c <__gethex+0x1dc>
 800c6a0:	da0b      	bge.n	800c6ba <__gethex+0x26a>
 800c6a2:	eba5 0808 	sub.w	r8, r5, r8
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	f7fe f908 	bl	800a8c0 <__lshift>
 800c6b0:	4604      	mov	r4, r0
 800c6b2:	eba6 0608 	sub.w	r6, r6, r8
 800c6b6:	f100 0a14 	add.w	sl, r0, #20
 800c6ba:	f04f 0b00 	mov.w	fp, #0
 800c6be:	e7ba      	b.n	800c636 <__gethex+0x1e6>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	42b3      	cmp	r3, r6
 800c6c4:	dd74      	ble.n	800c7b0 <__gethex+0x360>
 800c6c6:	1b9e      	subs	r6, r3, r6
 800c6c8:	42b5      	cmp	r5, r6
 800c6ca:	dc35      	bgt.n	800c738 <__gethex+0x2e8>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d023      	beq.n	800c71a <__gethex+0x2ca>
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d025      	beq.n	800c722 <__gethex+0x2d2>
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d115      	bne.n	800c706 <__gethex+0x2b6>
 800c6da:	42b5      	cmp	r5, r6
 800c6dc:	d113      	bne.n	800c706 <__gethex+0x2b6>
 800c6de:	2d01      	cmp	r5, #1
 800c6e0:	d10b      	bne.n	800c6fa <__gethex+0x2aa>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	9a02      	ldr	r2, [sp, #8]
 800c6e6:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c6ea:	6013      	str	r3, [r2, #0]
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	f8ca 3000 	str.w	r3, [sl]
 800c6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6f6:	601c      	str	r4, [r3, #0]
 800c6f8:	e734      	b.n	800c564 <__gethex+0x114>
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	1e69      	subs	r1, r5, #1
 800c6fe:	f7fe fb02 	bl	800ad06 <__any_on>
 800c702:	2800      	cmp	r0, #0
 800c704:	d1ed      	bne.n	800c6e2 <__gethex+0x292>
 800c706:	4621      	mov	r1, r4
 800c708:	4648      	mov	r0, r9
 800c70a:	f7fd fec1 	bl	800a490 <_Bfree>
 800c70e:	2300      	movs	r3, #0
 800c710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c712:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c716:	6013      	str	r3, [r2, #0]
 800c718:	e724      	b.n	800c564 <__gethex+0x114>
 800c71a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d1f2      	bne.n	800c706 <__gethex+0x2b6>
 800c720:	e7df      	b.n	800c6e2 <__gethex+0x292>
 800c722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1dc      	bne.n	800c6e2 <__gethex+0x292>
 800c728:	e7ed      	b.n	800c706 <__gethex+0x2b6>
 800c72a:	bf00      	nop
 800c72c:	0800cea4 	.word	0x0800cea4
 800c730:	0800cd3b 	.word	0x0800cd3b
 800c734:	0800d04e 	.word	0x0800d04e
 800c738:	f106 38ff 	add.w	r8, r6, #4294967295
 800c73c:	f1bb 0f00 	cmp.w	fp, #0
 800c740:	d133      	bne.n	800c7aa <__gethex+0x35a>
 800c742:	f1b8 0f00 	cmp.w	r8, #0
 800c746:	d004      	beq.n	800c752 <__gethex+0x302>
 800c748:	4641      	mov	r1, r8
 800c74a:	4620      	mov	r0, r4
 800c74c:	f7fe fadb 	bl	800ad06 <__any_on>
 800c750:	4683      	mov	fp, r0
 800c752:	2301      	movs	r3, #1
 800c754:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c758:	f008 081f 	and.w	r8, r8, #31
 800c75c:	fa03 f308 	lsl.w	r3, r3, r8
 800c760:	f04f 0802 	mov.w	r8, #2
 800c764:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c768:	4631      	mov	r1, r6
 800c76a:	4213      	tst	r3, r2
 800c76c:	4620      	mov	r0, r4
 800c76e:	bf18      	it	ne
 800c770:	f04b 0b02 	orrne.w	fp, fp, #2
 800c774:	1bad      	subs	r5, r5, r6
 800c776:	f7ff fe03 	bl	800c380 <rshift>
 800c77a:	687e      	ldr	r6, [r7, #4]
 800c77c:	f1bb 0f00 	cmp.w	fp, #0
 800c780:	d04a      	beq.n	800c818 <__gethex+0x3c8>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2b02      	cmp	r3, #2
 800c786:	d016      	beq.n	800c7b6 <__gethex+0x366>
 800c788:	2b03      	cmp	r3, #3
 800c78a:	d018      	beq.n	800c7be <__gethex+0x36e>
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d109      	bne.n	800c7a4 <__gethex+0x354>
 800c790:	f01b 0f02 	tst.w	fp, #2
 800c794:	d006      	beq.n	800c7a4 <__gethex+0x354>
 800c796:	f8da 3000 	ldr.w	r3, [sl]
 800c79a:	ea4b 0b03 	orr.w	fp, fp, r3
 800c79e:	f01b 0f01 	tst.w	fp, #1
 800c7a2:	d10f      	bne.n	800c7c4 <__gethex+0x374>
 800c7a4:	f048 0810 	orr.w	r8, r8, #16
 800c7a8:	e036      	b.n	800c818 <__gethex+0x3c8>
 800c7aa:	f04f 0b01 	mov.w	fp, #1
 800c7ae:	e7d0      	b.n	800c752 <__gethex+0x302>
 800c7b0:	f04f 0801 	mov.w	r8, #1
 800c7b4:	e7e2      	b.n	800c77c <__gethex+0x32c>
 800c7b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7b8:	f1c3 0301 	rsb	r3, r3, #1
 800c7bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d0ef      	beq.n	800c7a4 <__gethex+0x354>
 800c7c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7c8:	f104 0214 	add.w	r2, r4, #20
 800c7cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c7d0:	9301      	str	r3, [sp, #4]
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c7d8:	4694      	mov	ip, r2
 800c7da:	f852 1b04 	ldr.w	r1, [r2], #4
 800c7de:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c7e2:	d01e      	beq.n	800c822 <__gethex+0x3d2>
 800c7e4:	3101      	adds	r1, #1
 800c7e6:	f8cc 1000 	str.w	r1, [ip]
 800c7ea:	f1b8 0f02 	cmp.w	r8, #2
 800c7ee:	f104 0214 	add.w	r2, r4, #20
 800c7f2:	d13d      	bne.n	800c870 <__gethex+0x420>
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	42ab      	cmp	r3, r5
 800c7fa:	d10b      	bne.n	800c814 <__gethex+0x3c4>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	1169      	asrs	r1, r5, #5
 800c800:	f005 051f 	and.w	r5, r5, #31
 800c804:	fa03 f505 	lsl.w	r5, r3, r5
 800c808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c80c:	421d      	tst	r5, r3
 800c80e:	bf18      	it	ne
 800c810:	f04f 0801 	movne.w	r8, #1
 800c814:	f048 0820 	orr.w	r8, r8, #32
 800c818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c81a:	601c      	str	r4, [r3, #0]
 800c81c:	9b02      	ldr	r3, [sp, #8]
 800c81e:	601e      	str	r6, [r3, #0]
 800c820:	e6a0      	b.n	800c564 <__gethex+0x114>
 800c822:	4290      	cmp	r0, r2
 800c824:	f842 3c04 	str.w	r3, [r2, #-4]
 800c828:	d8d6      	bhi.n	800c7d8 <__gethex+0x388>
 800c82a:	68a2      	ldr	r2, [r4, #8]
 800c82c:	4593      	cmp	fp, r2
 800c82e:	db17      	blt.n	800c860 <__gethex+0x410>
 800c830:	6861      	ldr	r1, [r4, #4]
 800c832:	4648      	mov	r0, r9
 800c834:	3101      	adds	r1, #1
 800c836:	f7fd fdeb 	bl	800a410 <_Balloc>
 800c83a:	4682      	mov	sl, r0
 800c83c:	b918      	cbnz	r0, 800c846 <__gethex+0x3f6>
 800c83e:	4602      	mov	r2, r0
 800c840:	2184      	movs	r1, #132	; 0x84
 800c842:	4b1a      	ldr	r3, [pc, #104]	; (800c8ac <__gethex+0x45c>)
 800c844:	e6b1      	b.n	800c5aa <__gethex+0x15a>
 800c846:	6922      	ldr	r2, [r4, #16]
 800c848:	f104 010c 	add.w	r1, r4, #12
 800c84c:	3202      	adds	r2, #2
 800c84e:	0092      	lsls	r2, r2, #2
 800c850:	300c      	adds	r0, #12
 800c852:	f7ff fd4f 	bl	800c2f4 <memcpy>
 800c856:	4621      	mov	r1, r4
 800c858:	4648      	mov	r0, r9
 800c85a:	f7fd fe19 	bl	800a490 <_Bfree>
 800c85e:	4654      	mov	r4, sl
 800c860:	6922      	ldr	r2, [r4, #16]
 800c862:	1c51      	adds	r1, r2, #1
 800c864:	6121      	str	r1, [r4, #16]
 800c866:	2101      	movs	r1, #1
 800c868:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c86c:	6151      	str	r1, [r2, #20]
 800c86e:	e7bc      	b.n	800c7ea <__gethex+0x39a>
 800c870:	6921      	ldr	r1, [r4, #16]
 800c872:	4559      	cmp	r1, fp
 800c874:	dd0b      	ble.n	800c88e <__gethex+0x43e>
 800c876:	2101      	movs	r1, #1
 800c878:	4620      	mov	r0, r4
 800c87a:	f7ff fd81 	bl	800c380 <rshift>
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	3601      	adds	r6, #1
 800c882:	42b3      	cmp	r3, r6
 800c884:	f6ff aeda 	blt.w	800c63c <__gethex+0x1ec>
 800c888:	f04f 0801 	mov.w	r8, #1
 800c88c:	e7c2      	b.n	800c814 <__gethex+0x3c4>
 800c88e:	f015 051f 	ands.w	r5, r5, #31
 800c892:	d0f9      	beq.n	800c888 <__gethex+0x438>
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	f1c5 0520 	rsb	r5, r5, #32
 800c89a:	441a      	add	r2, r3
 800c89c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c8a0:	f7fd fea8 	bl	800a5f4 <__hi0bits>
 800c8a4:	42a8      	cmp	r0, r5
 800c8a6:	dbe6      	blt.n	800c876 <__gethex+0x426>
 800c8a8:	e7ee      	b.n	800c888 <__gethex+0x438>
 800c8aa:	bf00      	nop
 800c8ac:	0800cd3b 	.word	0x0800cd3b

0800c8b0 <L_shift>:
 800c8b0:	f1c2 0208 	rsb	r2, r2, #8
 800c8b4:	0092      	lsls	r2, r2, #2
 800c8b6:	b570      	push	{r4, r5, r6, lr}
 800c8b8:	f1c2 0620 	rsb	r6, r2, #32
 800c8bc:	6843      	ldr	r3, [r0, #4]
 800c8be:	6804      	ldr	r4, [r0, #0]
 800c8c0:	fa03 f506 	lsl.w	r5, r3, r6
 800c8c4:	432c      	orrs	r4, r5
 800c8c6:	40d3      	lsrs	r3, r2
 800c8c8:	6004      	str	r4, [r0, #0]
 800c8ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8ce:	4288      	cmp	r0, r1
 800c8d0:	d3f4      	bcc.n	800c8bc <L_shift+0xc>
 800c8d2:	bd70      	pop	{r4, r5, r6, pc}

0800c8d4 <__match>:
 800c8d4:	b530      	push	{r4, r5, lr}
 800c8d6:	6803      	ldr	r3, [r0, #0]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8de:	b914      	cbnz	r4, 800c8e6 <__match+0x12>
 800c8e0:	6003      	str	r3, [r0, #0]
 800c8e2:	2001      	movs	r0, #1
 800c8e4:	bd30      	pop	{r4, r5, pc}
 800c8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c8ee:	2d19      	cmp	r5, #25
 800c8f0:	bf98      	it	ls
 800c8f2:	3220      	addls	r2, #32
 800c8f4:	42a2      	cmp	r2, r4
 800c8f6:	d0f0      	beq.n	800c8da <__match+0x6>
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	e7f3      	b.n	800c8e4 <__match+0x10>

0800c8fc <__hexnan>:
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	2500      	movs	r5, #0
 800c902:	680b      	ldr	r3, [r1, #0]
 800c904:	4682      	mov	sl, r0
 800c906:	115e      	asrs	r6, r3, #5
 800c908:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c90c:	f013 031f 	ands.w	r3, r3, #31
 800c910:	bf18      	it	ne
 800c912:	3604      	addne	r6, #4
 800c914:	1f37      	subs	r7, r6, #4
 800c916:	4690      	mov	r8, r2
 800c918:	46b9      	mov	r9, r7
 800c91a:	463c      	mov	r4, r7
 800c91c:	46ab      	mov	fp, r5
 800c91e:	b087      	sub	sp, #28
 800c920:	6801      	ldr	r1, [r0, #0]
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	f846 5c04 	str.w	r5, [r6, #-4]
 800c928:	9502      	str	r5, [sp, #8]
 800c92a:	784a      	ldrb	r2, [r1, #1]
 800c92c:	1c4b      	adds	r3, r1, #1
 800c92e:	9303      	str	r3, [sp, #12]
 800c930:	b342      	cbz	r2, 800c984 <__hexnan+0x88>
 800c932:	4610      	mov	r0, r2
 800c934:	9105      	str	r1, [sp, #20]
 800c936:	9204      	str	r2, [sp, #16]
 800c938:	f7ff fd75 	bl	800c426 <__hexdig_fun>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d14f      	bne.n	800c9e0 <__hexnan+0xe4>
 800c940:	9a04      	ldr	r2, [sp, #16]
 800c942:	9905      	ldr	r1, [sp, #20]
 800c944:	2a20      	cmp	r2, #32
 800c946:	d818      	bhi.n	800c97a <__hexnan+0x7e>
 800c948:	9b02      	ldr	r3, [sp, #8]
 800c94a:	459b      	cmp	fp, r3
 800c94c:	dd13      	ble.n	800c976 <__hexnan+0x7a>
 800c94e:	454c      	cmp	r4, r9
 800c950:	d206      	bcs.n	800c960 <__hexnan+0x64>
 800c952:	2d07      	cmp	r5, #7
 800c954:	dc04      	bgt.n	800c960 <__hexnan+0x64>
 800c956:	462a      	mov	r2, r5
 800c958:	4649      	mov	r1, r9
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7ff ffa8 	bl	800c8b0 <L_shift>
 800c960:	4544      	cmp	r4, r8
 800c962:	d950      	bls.n	800ca06 <__hexnan+0x10a>
 800c964:	2300      	movs	r3, #0
 800c966:	f1a4 0904 	sub.w	r9, r4, #4
 800c96a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c96e:	461d      	mov	r5, r3
 800c970:	464c      	mov	r4, r9
 800c972:	f8cd b008 	str.w	fp, [sp, #8]
 800c976:	9903      	ldr	r1, [sp, #12]
 800c978:	e7d7      	b.n	800c92a <__hexnan+0x2e>
 800c97a:	2a29      	cmp	r2, #41	; 0x29
 800c97c:	d155      	bne.n	800ca2a <__hexnan+0x12e>
 800c97e:	3102      	adds	r1, #2
 800c980:	f8ca 1000 	str.w	r1, [sl]
 800c984:	f1bb 0f00 	cmp.w	fp, #0
 800c988:	d04f      	beq.n	800ca2a <__hexnan+0x12e>
 800c98a:	454c      	cmp	r4, r9
 800c98c:	d206      	bcs.n	800c99c <__hexnan+0xa0>
 800c98e:	2d07      	cmp	r5, #7
 800c990:	dc04      	bgt.n	800c99c <__hexnan+0xa0>
 800c992:	462a      	mov	r2, r5
 800c994:	4649      	mov	r1, r9
 800c996:	4620      	mov	r0, r4
 800c998:	f7ff ff8a 	bl	800c8b0 <L_shift>
 800c99c:	4544      	cmp	r4, r8
 800c99e:	d934      	bls.n	800ca0a <__hexnan+0x10e>
 800c9a0:	4623      	mov	r3, r4
 800c9a2:	f1a8 0204 	sub.w	r2, r8, #4
 800c9a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9aa:	429f      	cmp	r7, r3
 800c9ac:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9b0:	d2f9      	bcs.n	800c9a6 <__hexnan+0xaa>
 800c9b2:	1b3b      	subs	r3, r7, r4
 800c9b4:	f023 0303 	bic.w	r3, r3, #3
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	3e03      	subs	r6, #3
 800c9bc:	3401      	adds	r4, #1
 800c9be:	42a6      	cmp	r6, r4
 800c9c0:	bf38      	it	cc
 800c9c2:	2304      	movcc	r3, #4
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4443      	add	r3, r8
 800c9c8:	f843 2b04 	str.w	r2, [r3], #4
 800c9cc:	429f      	cmp	r7, r3
 800c9ce:	d2fb      	bcs.n	800c9c8 <__hexnan+0xcc>
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	b91b      	cbnz	r3, 800c9dc <__hexnan+0xe0>
 800c9d4:	4547      	cmp	r7, r8
 800c9d6:	d126      	bne.n	800ca26 <__hexnan+0x12a>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	603b      	str	r3, [r7, #0]
 800c9dc:	2005      	movs	r0, #5
 800c9de:	e025      	b.n	800ca2c <__hexnan+0x130>
 800c9e0:	3501      	adds	r5, #1
 800c9e2:	2d08      	cmp	r5, #8
 800c9e4:	f10b 0b01 	add.w	fp, fp, #1
 800c9e8:	dd06      	ble.n	800c9f8 <__hexnan+0xfc>
 800c9ea:	4544      	cmp	r4, r8
 800c9ec:	d9c3      	bls.n	800c976 <__hexnan+0x7a>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2501      	movs	r5, #1
 800c9f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9f6:	3c04      	subs	r4, #4
 800c9f8:	6822      	ldr	r2, [r4, #0]
 800c9fa:	f000 000f 	and.w	r0, r0, #15
 800c9fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca02:	6020      	str	r0, [r4, #0]
 800ca04:	e7b7      	b.n	800c976 <__hexnan+0x7a>
 800ca06:	2508      	movs	r5, #8
 800ca08:	e7b5      	b.n	800c976 <__hexnan+0x7a>
 800ca0a:	9b01      	ldr	r3, [sp, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0df      	beq.n	800c9d0 <__hexnan+0xd4>
 800ca10:	f04f 32ff 	mov.w	r2, #4294967295
 800ca14:	f1c3 0320 	rsb	r3, r3, #32
 800ca18:	40da      	lsrs	r2, r3
 800ca1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca1e:	4013      	ands	r3, r2
 800ca20:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca24:	e7d4      	b.n	800c9d0 <__hexnan+0xd4>
 800ca26:	3f04      	subs	r7, #4
 800ca28:	e7d2      	b.n	800c9d0 <__hexnan+0xd4>
 800ca2a:	2004      	movs	r0, #4
 800ca2c:	b007      	add	sp, #28
 800ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca32 <__ascii_mbtowc>:
 800ca32:	b082      	sub	sp, #8
 800ca34:	b901      	cbnz	r1, 800ca38 <__ascii_mbtowc+0x6>
 800ca36:	a901      	add	r1, sp, #4
 800ca38:	b142      	cbz	r2, 800ca4c <__ascii_mbtowc+0x1a>
 800ca3a:	b14b      	cbz	r3, 800ca50 <__ascii_mbtowc+0x1e>
 800ca3c:	7813      	ldrb	r3, [r2, #0]
 800ca3e:	600b      	str	r3, [r1, #0]
 800ca40:	7812      	ldrb	r2, [r2, #0]
 800ca42:	1e10      	subs	r0, r2, #0
 800ca44:	bf18      	it	ne
 800ca46:	2001      	movne	r0, #1
 800ca48:	b002      	add	sp, #8
 800ca4a:	4770      	bx	lr
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	e7fb      	b.n	800ca48 <__ascii_mbtowc+0x16>
 800ca50:	f06f 0001 	mvn.w	r0, #1
 800ca54:	e7f8      	b.n	800ca48 <__ascii_mbtowc+0x16>

0800ca56 <_realloc_r>:
 800ca56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5a:	4680      	mov	r8, r0
 800ca5c:	4614      	mov	r4, r2
 800ca5e:	460e      	mov	r6, r1
 800ca60:	b921      	cbnz	r1, 800ca6c <_realloc_r+0x16>
 800ca62:	4611      	mov	r1, r2
 800ca64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca68:	f7fd bc46 	b.w	800a2f8 <_malloc_r>
 800ca6c:	b92a      	cbnz	r2, 800ca7a <_realloc_r+0x24>
 800ca6e:	f7fd fbd3 	bl	800a218 <_free_r>
 800ca72:	4625      	mov	r5, r4
 800ca74:	4628      	mov	r0, r5
 800ca76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7a:	f000 f842 	bl	800cb02 <_malloc_usable_size_r>
 800ca7e:	4284      	cmp	r4, r0
 800ca80:	4607      	mov	r7, r0
 800ca82:	d802      	bhi.n	800ca8a <_realloc_r+0x34>
 800ca84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca88:	d812      	bhi.n	800cab0 <_realloc_r+0x5a>
 800ca8a:	4621      	mov	r1, r4
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	f7fd fc33 	bl	800a2f8 <_malloc_r>
 800ca92:	4605      	mov	r5, r0
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d0ed      	beq.n	800ca74 <_realloc_r+0x1e>
 800ca98:	42bc      	cmp	r4, r7
 800ca9a:	4622      	mov	r2, r4
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	bf28      	it	cs
 800caa0:	463a      	movcs	r2, r7
 800caa2:	f7ff fc27 	bl	800c2f4 <memcpy>
 800caa6:	4631      	mov	r1, r6
 800caa8:	4640      	mov	r0, r8
 800caaa:	f7fd fbb5 	bl	800a218 <_free_r>
 800caae:	e7e1      	b.n	800ca74 <_realloc_r+0x1e>
 800cab0:	4635      	mov	r5, r6
 800cab2:	e7df      	b.n	800ca74 <_realloc_r+0x1e>

0800cab4 <__ascii_wctomb>:
 800cab4:	4603      	mov	r3, r0
 800cab6:	4608      	mov	r0, r1
 800cab8:	b141      	cbz	r1, 800cacc <__ascii_wctomb+0x18>
 800caba:	2aff      	cmp	r2, #255	; 0xff
 800cabc:	d904      	bls.n	800cac8 <__ascii_wctomb+0x14>
 800cabe:	228a      	movs	r2, #138	; 0x8a
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	601a      	str	r2, [r3, #0]
 800cac6:	4770      	bx	lr
 800cac8:	2001      	movs	r0, #1
 800caca:	700a      	strb	r2, [r1, #0]
 800cacc:	4770      	bx	lr
	...

0800cad0 <fiprintf>:
 800cad0:	b40e      	push	{r1, r2, r3}
 800cad2:	b503      	push	{r0, r1, lr}
 800cad4:	4601      	mov	r1, r0
 800cad6:	ab03      	add	r3, sp, #12
 800cad8:	4805      	ldr	r0, [pc, #20]	; (800caf0 <fiprintf+0x20>)
 800cada:	f853 2b04 	ldr.w	r2, [r3], #4
 800cade:	6800      	ldr	r0, [r0, #0]
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	f7ff f94f 	bl	800bd84 <_vfiprintf_r>
 800cae6:	b002      	add	sp, #8
 800cae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800caec:	b003      	add	sp, #12
 800caee:	4770      	bx	lr
 800caf0:	20000074 	.word	0x20000074

0800caf4 <abort>:
 800caf4:	2006      	movs	r0, #6
 800caf6:	b508      	push	{r3, lr}
 800caf8:	f000 f834 	bl	800cb64 <raise>
 800cafc:	2001      	movs	r0, #1
 800cafe:	f7f7 fa3c 	bl	8003f7a <_exit>

0800cb02 <_malloc_usable_size_r>:
 800cb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb06:	1f18      	subs	r0, r3, #4
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfbc      	itt	lt
 800cb0c:	580b      	ldrlt	r3, [r1, r0]
 800cb0e:	18c0      	addlt	r0, r0, r3
 800cb10:	4770      	bx	lr

0800cb12 <_raise_r>:
 800cb12:	291f      	cmp	r1, #31
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4604      	mov	r4, r0
 800cb18:	460d      	mov	r5, r1
 800cb1a:	d904      	bls.n	800cb26 <_raise_r+0x14>
 800cb1c:	2316      	movs	r3, #22
 800cb1e:	6003      	str	r3, [r0, #0]
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
 800cb26:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cb28:	b112      	cbz	r2, 800cb30 <_raise_r+0x1e>
 800cb2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb2e:	b94b      	cbnz	r3, 800cb44 <_raise_r+0x32>
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 f831 	bl	800cb98 <_getpid_r>
 800cb36:	462a      	mov	r2, r5
 800cb38:	4601      	mov	r1, r0
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb40:	f000 b818 	b.w	800cb74 <_kill_r>
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d00a      	beq.n	800cb5e <_raise_r+0x4c>
 800cb48:	1c59      	adds	r1, r3, #1
 800cb4a:	d103      	bne.n	800cb54 <_raise_r+0x42>
 800cb4c:	2316      	movs	r3, #22
 800cb4e:	6003      	str	r3, [r0, #0]
 800cb50:	2001      	movs	r0, #1
 800cb52:	e7e7      	b.n	800cb24 <_raise_r+0x12>
 800cb54:	2400      	movs	r4, #0
 800cb56:	4628      	mov	r0, r5
 800cb58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb5c:	4798      	blx	r3
 800cb5e:	2000      	movs	r0, #0
 800cb60:	e7e0      	b.n	800cb24 <_raise_r+0x12>
	...

0800cb64 <raise>:
 800cb64:	4b02      	ldr	r3, [pc, #8]	; (800cb70 <raise+0xc>)
 800cb66:	4601      	mov	r1, r0
 800cb68:	6818      	ldr	r0, [r3, #0]
 800cb6a:	f7ff bfd2 	b.w	800cb12 <_raise_r>
 800cb6e:	bf00      	nop
 800cb70:	20000074 	.word	0x20000074

0800cb74 <_kill_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	2300      	movs	r3, #0
 800cb78:	4d06      	ldr	r5, [pc, #24]	; (800cb94 <_kill_r+0x20>)
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	f7f7 f9ea 	bl	8003f5a <_kill>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	d102      	bne.n	800cb90 <_kill_r+0x1c>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b103      	cbz	r3, 800cb90 <_kill_r+0x1c>
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	bd38      	pop	{r3, r4, r5, pc}
 800cb92:	bf00      	nop
 800cb94:	20004548 	.word	0x20004548

0800cb98 <_getpid_r>:
 800cb98:	f7f7 b9d8 	b.w	8003f4c <_getpid>

0800cb9c <_init>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	bf00      	nop
 800cba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba2:	bc08      	pop	{r3}
 800cba4:	469e      	mov	lr, r3
 800cba6:	4770      	bx	lr

0800cba8 <_fini>:
 800cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbaa:	bf00      	nop
 800cbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbae:	bc08      	pop	{r3}
 800cbb0:	469e      	mov	lr, r3
 800cbb2:	4770      	bx	lr
